# -*- mode: org; coding: utf-8; -*-
#+TITLE: Psimacs Emacs configuration
#+DESCRIPTION: Loading Emacs configuration using org-babel
#+TAGS: Emacs
#+CATEGORIES: editing
#+STARTUP: showeverything
#+OPTIONS: toc:4 h:4 tags:nil
#+EXPORT_EXCLUDE_TAGS: noexport
#+HTML_HEAD: <style type="text/css">
#+HTML_HEAD: .styledtable col:nth-of-type(1) { width: 15% }
#+HTML_HEAD: .styledtable col:nth-of-type(2) { width: 30% }
#+HTML_HEAD: .styledtable col:nth-of-type(3) { width: 55% }
#+HTML_HEAD: </style>
# #+SETUPFILE: site-lisp/org-html-themes/org/theme-readtheorg.setup
# #+SETUPFILE: site-lisp/org-html-themes/org/theme-bigblow.setup
# #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
#+HTML_HEAD: <link rel="stylesheet" href="http://dakrone.github.io/org.css" type="text/css" />

* Introduction
This is *Psimacs*, a /modern/ *Emacs* configuration build from the ground up using a [[https://de.wikipedia.org/wiki/Literate_programming][literate programming]] technique.
The complete configuration [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]] code is embedded into a single [[https://orgmode.org/][org-mode]] file. This is the file that your are
currently reading.

Additionally, *Psimacs* allows the synchronization of the user's local *Emacs* configuration with a configuration
repository residing on [[https://www.dropbox.com/][Dropbox]]. This comes quite handy if sharing of one configuration with multiple machines is
desired.

This document not only describes the *Psimacs* configuration, but also some additional information useful
for working with *Emacs* in general. In this respect it serves as a kind of mind map for the author.

Some great useful *Emacs* references:
- [[http://ergoemacs.org/][Xah Emacs Site]]

** Motivation

A lot of *Emacs* configurations can be found on the Internet. Many of them are well crafted and could be used out of
the box. Especially, the great *Emacs* distributions like [[https://www.spacemacs.org/][Spacemacs]], [[https://github.com/hlissner/doom-emacs][Doom-Emacs]] and [[https://github.com/seagle0128/.emacs.d][Centaur-Emacs]] are worth giving a try.
But I wanted to craft my own configuration that is tailored to my needs and that allowed me to learn more about the
vast *Emacs* universe. My configuration it not perfect for everyone and it will not be able to compete against the big
frameworks that are build by a lot of talented people. So feel free to use it or blame it. I am fine with it.

The name *Psimacs* is arbitrarily. I was in search for a catchy name with just one syllable in front of the *macs*.

** Installation

This configuration uses *Emacs* >= 27. Clone the git repository into your *.emcas.d* directory

#+BEGIN_EXAMPLE
mv ~/.emacs.d ~/.emacs.d.bak
git clone https://github.com/hatlafax/psimacs.git ~/.emacs.d
#+END_EXAMPLE

and just run *Emacs*.

The only file really needed is the =early-init.el= file. On startup, it reads the file =init.org= and extracts all the
initialization code into the main =init.el= and various additionally =config/init-*.el= files. The created =init.el=
file is then read and evaluated in the further startup procedure. The =init.el= file loads the other =config/init-*.el=
files on evaluation.

Never edit transient file =init.el= or =config/init-*.el= directly. They will be overridden by the next run of
*Psimacs*. Instead modify the =init.org= file to change your configuration.

You can create a HTML document =init.html= of this file by simply typing =C-c C-e h h= in the *Emacs* buffer for
this file. It is recommended to use this =init.html= for browser reading.

** Usage

All functions and variables that are defined in *Psimacs* are prefixed by a path like string  =psimacs/category=.
The /category/ is used to order the functions and variables by topic. For example the /string/ related function
/starts-with/ is defined as =psimacs/string/starts-with=.

** Dependencies

The configuration does have some dependencies that should be installed separately and beforehand of *Psimacs*.
On default the non *Emacs* dependencies are expected to be installed into directory *c:/utils/* on /Windows OS/.
A directory constant =psimacs/config/dependencies-dir= will be defined by the configuration that allows to change
the default location of the dependencies.

** Disclaimer

This is an *Emacs* beginners configuration and the usage is at one's own risk. It is not tested thoroughly. Please
bear in mind.

Many of the configuration settings are borrowed from other similar endeavors out there.

This is work in progress. Sometimes this *Readme* is ahead of times or not yet updated.

** Limitations / Known Issues

- Tested on Windows operating system only

** License (GPL v3)

Copyright (C) 2020-2021 Johannes Brunen (hatlafax@gmx.de)

License: GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

* Working with Org-Mode
** Embedding code
[[https://orgmode.org/][Org-mode]] allows embedding of source code blocks into =.org=-files and evaluating them by [[https://orgmode.org/worg/org-contrib/babel/][babel]] a core feature build
into [[https://orgmode.org/manual/Working-with-Source-Code.html][org]]. The [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]] code is embedded into special code blocks:

#+BEGIN_EXAMPLE
#+BEGIN_SRC emacs-lisp :tangle no
<BODY>
#+END_SRC
#+END_EXAMPLE

Code block with =:tangle yes= or with =:tangle filename= are part of the configuration. However, any code block
can be deactivated, i.e. omitted from the configuration, by using =:tangle no= in the
block declaration.

#+BEGIN_EXAMPLE
#+BEGIN_SRC emacs-lisp :tangle no
(message "this should never be seen in the Message buffer!")
#+END_SRC
#+END_EXAMPLE

Additionally, a whole section can also be deactivated by a /CANCELED/ or a /DISABLED/ item, e.g.:

*** CANCELED Avoid generating /Emacs Lisp/ code per section

The following [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]] block should therefore also not be part of the generated =.el= file although the =:tangle yes=
attribute was used. Same is true for /Disabled/ as well as tag /:noexport:/

#+BEGIN_EXAMPLE
#+BEGIN_SRC emacs-lisp :tangle yes
(message "this should not be seen in the Message buffer!")
#+END_SRC
#+END_EXAMPLE

** Debugging the configuration

Loading of the configuration can always be halted on spot by entering and activating the following source code block
which will enter enter the debugger on execution.

#+BEGIN_EXAMPLE
#+BEGIN_SRC emacs-lisp :tangle no
(debug)
#+END_SRC
#+END_EXAMPLE

*** Debugging ELisp with EDebug
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html#Edebug][Edebug]] is a source-level debugger for Emacs Lisp programs that is very useful developing /Lisp/ code. In the following
you can find a some useful commands and settings for debugging with [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html#Edebug][Edebug]]:

Embedding a breakpoint into source code: =(edebug)=

| Keybinding        | Command                                 | Description                                                                                                                                                                                  |
|-------------------+-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-u C-M-x=       | =M-x eval-defun=                        | Instrument the Lisp code at point. Any call to the function activates Edebug.                                                                                                                |
|-------------------+-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =h=               | =M-x edebug-goto-here=                  | Proceed to the stop point near where point is.                                                                                                                                               |
| =f=               | =M-x edebug-forward-sexp=               | Run the program for one expression.                                                                                                                                                          |
| =o=               | =M-x edebug-step-out=                   | Run the program until the end of the containing sexp.                                                                                                                                        |
| =i=               | =M-x edebug-step-in=                    | Step into the function or macro called by the form after point.                                                                                                                              |
|-------------------+-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =b=               | =M-x edebug-set-breakpoint=             | Set a breakpoint at the stop point at or after point. If you use a prefix argument, the breakpoint is temporary -- it turns off the first time it stops the program.                         |
| =u=               | =M-x edebug-unset-breakpoint=           | Unset the breakpoint (if any) at the stop point at or after point.                                                                                                                           |
| =U=               | =M-x edebug-unset-breakpoints=          | Unset any breakpoints in the current form.                                                                                                                                                   |
| =D=               | =M-x edebug-toggle-disable-breakpoint=  | Toggle whether to disable the breakpoint near point.                                                                                                                                         |
| =x condition RET= | =M-x edebug-set-conditional-breakpoint= | Set a conditional breakpoint which stops the program only if evaluating condition produces a non-nil value.                                                                                  |
| =B=               | =M-x edebug-next-breakpoint=            | Move point to the next breakpoint in the current definition.                                                                                                                                 |
|-------------------+-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =S=               | =M-x edebug-stop=                       | Stop: don't execute any more of the program, but wait for more Edebug commands                                                                                                               |
| =SPC=             | =M-x edebug-step-mode=                  | Step: stop at the next stop point encountered.                                                                                                                                               |
| =n=               | =M-x edebug-next-mode=                  | Next: stop at the next stop point encountered after an expression.                                                                                                                           |
| =t=               | =M-x edebug-trace-mode=                 | Trace: pause (normally one second) at each Edebug stop point.                                                                                                                                |
| =T=               | =M-x edebug-Trace-fast-mode=            | Rapid trace: update the display at each stop point, but don't actually pause.                                                                                                                |
| =g=               | =M-x edebug-go-mode=                    | Go: run until the next breakpoint.                                                                                                                                                           |
| =c=               | =M-x edebug-continue-mode=              | Continue: pause one second at each breakpoint, and then continue.                                                                                                                            |
| =C=               | =M-x edebug-Continue-fast-mode=         | Rapid continue: move point to each breakpoint, but don't pause.                                                                                                                              |
| =G=               | =M-x edebug-Go-nonstop-mode=            | Go non-stop: ignore breakpoints. You can still stop the program by typing S, or any editing command.                                                                                         |
|-------------------+-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =?=               | =M-x edebug-help=                       | Display the help message for Edebug.                                                                                                                                                         |
| =C-]=             | =M-x abort-recursive-edit=              | Abort one level back to the previous command level                                                                                                                                           |
| =q=               | =M-x top-level=                         | Return to the top level editor command loop. This exits all recursive editing levels, including all levels of Edebug activity.                                                               |
| =Q=               | =M-x edebug-top-level-nonstop=          | Like q, but don't stop even for protected code. Like q, but don't stop even for protected code.                                                                                              |
| =r=               | =M-x edebug-previous-result=            | Redisplay the most recently known expression result in the echo area.                                                                                                                        |
| =d=               | =M-x edebug-backtrace=                  | Display a backtrace, excluding Edebug's own functions for clarity.                                                                                                                           |
|-------------------+-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =v=               | =M-x edebug-view-outside=               | Switch to viewing the outside window configuration.  Type =C-x X w= to return to Edebug.                                                                                                     |
| =p=               | =M-x edebug-bounce-point=               | Temporarily display the outside current buffer with point at its outside position, pausing for one second before returning to Edebug. With a prefix argument n, pause for n seconds instead. |
| =w=               | =M-x edebug-where=                      | Move point back to the current stop point in the source code buffer.                                                                                                                         |
| =W=               | =M-x edebug-toggle-save-windows=        | Toggle whether Edebug saves and restores the outside window configuration.                                                                                                                   |
|-------------------+-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =e exp RET=       | =M-x edebug-eval-expression=            | Evaluate expression exp in the context outside of Edebug. That is, Edebug tries to minimize its interference with the evaluation.                                                            |
| =M-: exp RET=     | =M-x eval-expression=                   | Evaluate expression exp in the context of Edebug itself.                                                                                                                                     |
| =C-x C-e=         | =M-x edebug-eval-last-sexp=             | Evaluate the expression before point, in the context outside of Edebug.                                                                                                                      |
| =C-u 0 C-x C-e=   | =C-u 0 M-x edebug-eval-last-sexp=       | Dito, but don't shorten long items (like strings and lists).                                                                                                                                 |
| =E=               | =M-x edebug-visit-eval-list=            | Switch to the evaluation list buffer *edebug*                                                                                                                                                |
| =C-j=             | =M-x edebug-eval-print-last-sexp=       | Evaluate the expression before point, in the outside context, and insert the value in the buffer.                                                                                            |
| =C-u 0 C-j=       | =C-u 0 M-x edebug-eval-print-last-sexp= | Dito, but don't shorten long items (like strings and lists).                                                                                                                                 |
| =C-c C-u=         | =M-x edebug-update-eval-list=           | Build a new evaluation list from the contents of the buffer.                                                                                                                                 |
| =C-c C-d=         | =M-x edebug-delete-eval-item=           | Delete the evaluation list group that point is in.                                                                                                                                           |
| =C-c C-w=         | =M-x edebug-where=                      | Switch back to the source code buffer at the current stop point.                                                                                                                             |
|-------------------+-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

** References to Org-Mode markup
An [[https://writequit.org/denver-emacs/presentations/files/example.org.html][example org-mode file]] used to show basic [[https://orgmode.org][org-mode]] usage. [[https://orgmode.org/manual/Markup-for-Rich-Contents.html][Markup for Rich Contents]] gives detail explanation about
the markup rules used in [[https://orgmode.org][org-mode]] files.

** References to Org-Mode
The following links might be useful for diving deeper into [[http://orgmode.org/][Org-Mode]]:
- [[http://orgmode.org/manual/index.html][Org Mode Manual]]
- [[http://orgmode.org/worg/][Worg, the Org Mode Community]]
- [[https://www.emacswiki.org/emacs/OrgMode][EmacsWiki: Org Mode]]
- [[https://www.suenkler.info/notes/emacs-orgmode/][Aufgabenverwaltung im Emacs Org mode]]
- [[https://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][Dig Into Org Mode]]
- [[http://orgmode.org/worg/org-contrib/babel/][Org Mode Babel]]
- [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][Introduction to Literate Programming]]
- [[https://org-babel.readthedocs.io/en/latest/][Readthedocs about Org Babel]]
- [[http://orgmode.org/worg/orgcard.html][Org Mode reference card]]
- [[http://orgmode.org/orgcard.pdf][Org Mode Ref Card]]
- [[http://ergoemacs.org/emacs/emacs_org_markup.html][Org Mode Markup Cheatsheet]]
- [[http://pragmaticemacs.com/][Pragmatic Emacs]]
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]

** References to Emacs Lisp
The following links might be useful for diving deeper into [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]]:
- [[https://www.gnu.org/software/emacs/manual/eintr.html][Introduction to Programming in Emacs Lisp]]
- [[https://www.emacswiki.org/emacs/ElispCookbook][EmacsWiki: Lisp Cookbook]]
- [[http://wikemacs.org/wiki/Emacs_Lisp_Cookbook][WikEmacs: Emacs Lisp Cookbook]]
- [[https://github.com/chrisdone/elisp-guide][Emacs Lisp Guide]]
- [[https://www.masteringemacs.org/article/evaluating-elisp-emacs][Evaluating Elisp in Emacs]]
- [[http://ergoemacs.org/emacs/elisp.html][Practical Emacs Lisp]]

* Key binding
I am trying to setup keybinding in a /mnemonics/ way so it's easy to remember (and use).
I am staying with the /standard/ emacs keybinding as much as possible.

*Emacs*'s keybindings has well-defined conventions listed at [[https://www.gnu.org/software/emacs/manual/html%5Fnode/elisp/Key-Binding-Conventions.html][Emacs Key Bindings Convention]].
In summary, the general rules are:
- =C-x= reserved for Emacs native essential keybindings: buffer, window, frame, file, directory, etc.
- =F5= ... =F9= without modifier keys are reserved for users to define.
- =C-c=
    - =C-c C-letter=, =C-c digit= are reserved for major modes.
    - =C-c punctuation= with punctuation in { } < > : ; are also reserved for major modes.
    - =C-c punctuation= with any other punctuation are allocated for minor modes.
    - =C-c letter= are reserved for users. In practice most third-party packages don't give a hoot
      and will gladly stuff their own key binds in there.
- Don't rebind =C-g=, =C-h= and =ESC=.
- =hyper= and =super= are two prefix keys reserved to you. They are remnants from ancient keyboards used in the 80s,
  but live on today in Emacs. Most PC-compatible  keyboards won't have a =super= or =hyper= key so we rebind
  the =<lwindow>= and =<rwindow>= /Windows/ keys and the =<apps> /Application Context/ key to be the =super=
  and =hyper= prefix keys instead.

*Psimacs* uses the =super= and =hyper= key prefixes for all of its own key bindings.

Worth readings about *Emacs* keybindings:
- [[https://karl-voit.at/2018/07/08/emacs-key-bindings/][UOMF: My Emacs Key Binding Strategy]]
- [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][Mastering Key Bindings in Emacs]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Windows-Keyboard.html][Keyboard Usage on MS-Windows]]
- [[http://www.wilfred.me.uk/blog/2018/01/06/the-emacs-guru-guide-to-key-bindings/][The Emacs Guru Guide to Key Bindings]]
- [[http://ergoemacs.org/emacs/emacs_hyper_super_keys.html][Emacs: How to Bind Super Hyper Keys]]

* Early initialization

Starting with *Emacs* 27, an early-init.el file can be used to do early configuration and optimization.
For more information read [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Starting-Up.html#Starting-Up][Starting Up Emacs]] and [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Init-File.html][The Init File]].

#+BEGIN_QUOTE
Emacs can now be configured using an early init file. The file is called early-init.el, in user-emacs-directory.
It is loaded very early in the startup process: before graphical elements such as the tool bar are initialized,
and before the package manager is initialized. The primary purpose is to allow customizing how the package
system is initialized given that initialization now happens before loading the regular init file (see below).

We recommend against putting any customizations in this file that don't need to be set up before initializing
installed add-on packages, because the early init file is read too early into the startup process, and some
important parts of the Emacs session, such as 'window-system' and other GUI features, are not yet set up,
which could make some customization fail to work.
#+END_QUOTE

*Psimacs* uses the =early-init.el= for three purposes. At first, the evaluation of this file tangles the =init.org= file's
embedded elips source code into the corresponding elips files. Especially, the =early-init.el= file is itself
updated on this way, as it is also described in the =init.org= file. Crazy isn't is :-). Secondly, the =early-init.el=
is responsible for synchronizing with a *Psimacs* /dropbox/ repository. This is quite useful when working with multiple
machines and sharing the very same *Emacs* environment. Thirdly, the primary duty of the =early-init.el= file is to
optimize the *Emacs* startup procedure.

As mentioned above, the elisp source of this section is tangled directly into the =early-init.el= file. Since the
tangling happens at startup time on evaluation of the =early-init.el= file, the =early-init.el= might overwritten
itself at startup.

** Preamble

#+BEGIN_SRC emacs-lisp :tangle early-init.el :var file-description="Early initialization"
;;; Commentary:
;;
;; Emacs 27 introduces early-init.el, which is run before init.el,
;; before package and UI initialization happens.
;;
#+END_SRC

** Some basic constants

*** Tangle anything at startup

*Psimacs* allows the tangling of the configuration source code at startup time. The following flag allows to suppresses
this feature completely.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Tangling procedure constants.
;;
(defconst psimacs/config/tangle-anything t
  "If this flag is nil no code is generated by the startup.
This flag allows to only use the 'init-*.el' files of the framework.")
#+END_SRC

*** Tangle early-init.el at startup

*Psimacs* allows the tangling of the =early-init.el= file itself at startup. The following flag suppresses
this feature.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defconst psimacs/config/tangle-early-init-file t
  "If this flag is t the 'early-init.el' file is generated at startup.
If nil, only the 'early-init.el' file is omitted from the code generation process.")
#+END_SRC

*** Synchronize with Dropbox at startup

*Psimacs* allows the synchronization of files and folders with a /Dropbox/ repository at startup time.
The following flag allows inhibition of this feature.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Synchronization procedure constants.
;;
(defconst psimacs/config/synchronize-at-startup t
  "If this flag is t the 'early-init.el' file synchronizes the configuration with Dropbox.
The local configuration can be synchronized with a mirror configuration on Dropbox. This
allows sharing of a single configuration on multiple machines.")
#+END_SRC

*** Some size numbers

Huge byte sizes are conveniently written in /Mega Bytes/ or even in /Giga Bytes/ by *Psimacs*. Therefore we define
some size constants early.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Conveniency byte size constants
;;
(defconst   1MB (* 1024 1024))
(defconst   4MB (*   4 1MB))
(defconst  20MB (*  20 1MB))
(defconst  30MB (*  30 1MB))
(defconst  50MB (*  50 1MB))
(defconst  64MB (*  64 1MB))
(defconst 128MB (* 128 1MB))
#+END_SRC

*** Primary initalization files and directories

The primary initialization files and directories must be known by the initialization process early in time in order
to allow the =early-init.el= to full fill its duty. These files are evaluated and/or synchronized with a possible
/dropbox/ repository.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Primary Psimacs file and directory constants use for tangling and synchronization
;;
(defconst psimacs/config/main-org-file-name "init.org"
  "The psimacs initialization file.")

(defconst psimacs/config/main-html-file-name "init.html"
  "The psimacs htmlized initialization file.")

(defconst psimacs/config/icon-file-name "psi.ico"
  "The psimacs icon file.")

(defconst psimacs/config/license-file-name "LICENSE"
  "The psimacs license file.")

(defconst psimacs/config/custom-file-name "custom.el"
  "The psimacs custom elips file.")

(defconst psimacs/config/agenda-folder "agenda"
  "The psimacs agenda directory.")

(defconst psimacs/config/latex-folder "latex"
  "The psimacs latex directory.")

(defconst psimacs/config/assets-folder "assets"
  "The psimacs assets directory.")
 #+END_SRC

*** Copyright and author information

Copyright information that should be inserted into all tangled code.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defconst psimacs/config/copyright/year       "2020-2021")
(defconst psimacs/config/copyright/author     "Johannes Brunen")
(defconst psimacs/config/copyright/pseudonyme "hatlafax")
(defconst psimacs/config/copyright/email      "hatlafax@gmx.de")
(defconst psimacs/config/copyright/url        "https://github.com/hatlafax/psimacs")
(defconst psimacs/config/copyright/license    "GNU GENERAL PUBLIC LICENSE")
(defconst psimacs/config/copyright/version    "Version 3, 29 June 2007")
 #+END_SRC

*** Garbage collection

Fine tuning the garbage collection after startup initialization.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Psimacs default garbage collection parameters
;;
(defconst psimacs/config/gc-cons-threshold 64MB
  "The default value to use for 'gc-cons-threshold'.
If you experience freezing, decrease this. If you experience stuttering,
increase this.")

(defconst psimacs/config/gc-cons-percentage 0.1
  "This variable specifies the amount of consing before garbage collection occurs.
It is the fraction of the current heap size."
)
#+END_SRC

** Some early optimization settings

- Lexical Scope and binding

  [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical Binding]] is condensed to the following quote:

#+BEGIN_QUOTE
  A lexically-bound variable has /lexical scope/, meaning that any reference to the variable must be located
  textually within the binding construct.
#+END_QUOTE

  Its usage is explained in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Lexical-Binding.html][Emacs manual]].

Use lexical-binding. [[https://nullprogram.com/blog/2016/12/22/][Why? Explanation]].

=lexical-binding: t= has significant advantages, both in performance and static analysis,
and so it should be used for all future Elisp code. The only reason it's not the default
is because it breaks some old (badly written) code.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Use lexical binding instead of dynamic binding.
;;
(setq-default lexical-binding t)
#+END_SRC

-  Before *Emacs* 27, the init file was responsible for initializing the package manager by calling
  =package-initialize=. *Emacs* 27 changed the default behavior: It now calls =package-initialize= before loading the
  init file. Since we use the =straight= package manager in *Psimacs*, we inhibit the package manager initialization
  at all.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Inhibit the package manager at all
;;
(setq package-enable-at-startup nil)
#+END_SRC

- Let's inhibit resizing the frame at early stage.

  [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Implied-Frame-Resizing.html][Implied Frame Resizing]]:
#+BEGIN_QUOTE
  By default, Emacs tries to keep the number of lines and columns of a frame's text area unaltered when, for example,
  toggling its menu or tool bar, changing its default font or setting the width of any of its scroll bars. This means
  that in such case Emacs must ask the window manager to resize the frame's window in order to accommodate the size
  change.

  Occasionally, such implied frame resizing may be unwanted, for example, when a frame has been maximized or made
   full-screen (where it's turned off by default). In general, users can disable implied resizing with the following
  option:
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; If this option is nil, changing a frame' font, menu bar, tool bar, internal borders,
;; fringes or scroll bars may resize its outer frame in order to keep the number of
;; columns or lines of its text area unaltered. If this option is t, no such resizing
;; is done.
;;
(setq frame-inhibit-implied-resize t)
#+END_SRC

- Never use the menu-bar, the tool-bar or the scroll-bar:

  It will be faster to disable them here before they've been initialized.

  *Psimacs* does disable these features by default because these items make Emacs really beautiful on every platform.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Beautify Emacs
;;
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(horizontal-scroll-bar-mode -1)
#+END_SRC

- Avoid flickering of the screen

  Set theme colors early. The colors are taken from the alect-colors found in the 'alect-themes.el'.
  If another theme is used on default, these settings should be adapted, accordingly.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Change color to avoid screen flickering
;;
(set-face-foreground 'default "#d0bf8f" nil) ; the alect-dark theme forground color
(set-face-background 'default "#3f3f3f" nil) ; the alect-dark theme background color
#+END_SRC

- Avoid garbage collection at startup

  For detail information read the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html][Garbage Collection manual entry]].

  Later in the initialization process the garbage collection procedure is even more fine tuned.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Garbage collection optimization
;;
(setq gc-cons-threshold  most-positive-fixnum
      ;; The value of this variable is the number of bytes of storage that must
      ;; be allocated for Lisp objects after one garbage collection in order to
      ;; trigger another garbage collection.

      gc-cons-percentage 0.6
      ;; The value of this variable specifies the amount of consing before a
      ;; garbage collection occurs, as a fraction of the current heap size.
)


;;
;; After initialization set the garbage collection threshold to a reasonable value.
;;
(add-hook 'add-init-hook
          `(lambda ()
            (setq gc-cons-threshold  psimacs/config/gc-cons-threshold
                  gc-cons-percentage psimacs/config/gc-cons-percentage)
            (garbage-collect)
                  ) t)
#+END_SRC


- Another small optimization concerns on =file-name-handler-alist=

  On every .el and .elc file loaded during start up, it has to runs those regexps against the filename;
  setting it to nil and after initialization finished put the value back make the initialization process quicker.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defvar psimacs/config/file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

;;
;; After initialization reset the file-name-handler-alist
;;
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq file-name-handler-alist psimacs/config/file-name-handler-alist)
            (makunbound 'psimacs/config/file-name-handler-alist)
            ))
#+END_SRC

- Disable warnings generated when functions are redefined with defadvice

  Defines what to do with redefinitions during Advice de/activation.
  Redefinition occurs if a previously activated function that already has an
  original definition associated with it gets redefined and then de/activated.
  In such a case we can either accept the current definition as the new
  original definition, discard the current definition and replace it with the
  old original, or keep it and raise an error. The values `accept', `discard',
  `error' or `warn' govern what will be done. `warn' is just like `accept' but
  it additionally prints a warning message. All other values will be
  interpreted as `error'.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Suppressing ad-handle-definition warnings
;;
(setq ad-redefinition-action 'accept)
#+END_SRC


- Debugging on error and message buffer limit

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(setq debug-on-error  t                 ; That will open the debugger when the error is raised.
      message-log-max t                 ; Specifies how many lines to keep in the *Messages* buffer.
                                        ; The value t means there is no limit on how many lines to keep.
)
#+END_SRC

** Preamble for any /.el/ file

Any generated initialization file should start with the same preamble concerning author, license etc.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Preamble support
;;
(defun psimacs/config/generate-preamble (file org-file description)
  "Generate a proper preamble string for the given file.
FILE        : el file that get generated
ORG-FILE    : org mode file that is prints
DESCRIPTION : short description text"
  (let (
        (preamble (concat (format ";;; %s ---%s-*- coding: utf-8 -*- lexical-binding: t -*-\n" (file-name-nondirectory file) description)
                                  ";;\n"
                          (format ";; Don't edit this file, edit %s instead ...\n" (file-name-nondirectory org-file))
                                  ";;\n"
                                  "\n"
                          (format ";; Copyright (C) %s %s (%s)\n"
                                  psimacs/config/copyright/year
                                  psimacs/config/copyright/author
                                  psimacs/config/copyright/pseudonyme)
                                  "\n"
                          (format ";; Author:  %s <%s>\n"
                                  psimacs/config/copyright/author
                                  psimacs/config/copyright/email)
                          (format ";; URL:     %s\n" psimacs/config/copyright/url)
                          (format ";; License: %s %s\n"
                                  psimacs/config/copyright/license
                                  psimacs/config/copyright/version)
                                  "\n"
                                  ";; This file is not part of GNU Emacs.\n"
                                  ";;\n"
                                  ";; This program is free software; you can redistribute it and/or\n"
                          (format ";; modify it under the terms of the %s\n"
                                  psimacs/config/copyright/license)
                          (format ";; %s published by the Free Software Foundation.\n" psimacs/config/copyright/version)
                                  ";;\n"
                                  ";; This program is distributed in the hope that it will be useful,\n"
                                  ";; but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
                                  ";; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n"
                                  ";; General Public License for more details.\n"
                                  ";;\n"
                                  ";; You should have received a copy of the GNU General Public License\n"
                                  ";; along with this program; see the file LICENSE.  If not, write to\n"
                                  ";; the Free Software Foundation, Inc., 51 Franklin Street, Fifth\n"
                                  ";; Floor, Boston, MA 02110-1301, USA.\n"
                                  ";;\n"
                                  "\n")))
    preamble
  )
)
#+END_SRC

** Tangling support without org-bable

The code generation process is not performed with the [[http://orgmode.org/worg/org-contrib/babel/][Org Mode Babel]] functionality. That is because the startup
should be pretty fast and not rely on loading [[https://orgmode.org][org-mode]] only for this task. Additionally, the tangling function
does do some special stuff that is not supported by the  [[http://orgmode.org/worg/org-contrib/babel/][Org Mode Babel]] framework.

Sections and its subsections that are prefixed with =Canceled= or =Disabled= tokens get filtered out. The
same happens if a section is attributed by the tag =:noexport:=.

Sections that are tagged by =:noexport:= are not exported to html.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defun psimacs/config/tangle-canceled-p (token)
    "Return t if token is matching the 'canceled' criteria."
    (when (or (string-prefix-p "CANCELED" token t)
              (string-prefix-p "DISABLED" token t)
              (string-match-p "^.*:NOEXPORT:.*$" (upcase token))
          )
        t
    )
)

(defun psimacs/config/tangle-section-canceled ()
  "Return t if the current section header is 'CANCELED' or 'DISABLED' ':noexport:', else nil.

Section headers starts with '*', '**', etc, e.g.:

'** CANCELED Some section header text'

This function searches the header tree up to the root. The current header is
regarded 'canceled' if he or any of its parent headers is regarded 'canceled'.
"
    ;;(save-excursion (if (re-search-backward "^\\*+\\s-+\\(.*?\\)?\\s-*$" nil t)
    ;;                   (or (string-prefix-p "CANCELED" (match-string 1) t)
    ;;                       (string-prefix-p "DISABLED" (match-string 1) t)
    ;;                       (string-match-p "^.*:NOEXPORT:.*$" (match-string 1))
    ;;                   ) nil))
    ;;(message "---------------------------------------------------------------------------------------------")
    (save-excursion
        (let ( (result nil) (loop t) (n 0) (i 0) )
            (while (and (not result) loop)
                (if (re-search-backward "^\\(\\*+\\)\\s-+\\(.*?\\)?\\s-*$" nil t)
                    (progn
                        ;;(message "%s" (match-string 0))
                        (setq i (length (match-string 1)))
                        (if (= n 0)
                            (progn
                                (setq n i)
                                (when (psimacs/config/tangle-canceled-p (match-string 2))
                                    (setq result t)
                                    (setq loop nil)
                                    ;;(message "=> early canceled -> result t %s" (match-string 0))
                                )
                            )
                            ;; else n > 0
                            (when (not result)
                                (if (< i n)
                                    (progn
                                        (when (psimacs/config/tangle-canceled-p (match-string 2))
                                            (setq result t)
                                            ;;(message "=> canceled!!! %s" (match-string 0))
                                        )

                                        (when (<= i 1)
                                            (setq loop nil)
                                            ;;(message "=> stopped!!! %s" (match-string 0))
                                        )

                                        (setq n i)
                                    )
                                  ;;(message "=> discarded i = %s, n = %s" i n)
                                )
                            )
                        )
                    )
                  (setq loop nil)
                )
            )
            ;;(message "=> final result %s" result)
            result
        )
    )
)
#+END_SRC

The main tangling function.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defun psimacs/config/tangle-config-org (orgfile elfile)
  "This function will write all source blocks from 'file.org' into 'file.el' that are ...
        - not marked as :tangle no
        - have a source-code of =emacs-lisp=
        - doesn't have the todo-markers CANCELED or DISABLED
        - doesn't be tagged by :noexport:

Elisp source code blocks that are marked as ':tangle foo.el' are written to file 'foo.el' instead.
For these files extra header and footer are written. In this case, also an additional header argument
':var file-description \"text\" is evaluated and used in the file header.

Shortly, all tangled source code blocks for file foo.el are written to one file 'foo.el' that look like

;; foo.el --- text -*- coding: utf-8 -*- lexical-binding: t -*-
;;
;; Don't edit this file, edit file.org instead ...
;;
...
(provide 'foo)

Source code blocks that tangle to early-init.el are handled differently. In this case neither a
'require' statement in file.el nor the 'provide' clause is added to the file early-init.el.
"
  (let* ((body-list ())
         (src-block-regexp   (concat
                              ;; (1) indentation                 (2) lang
                              "^\\([ \t]*\\)#\\+begin_src[ \t]+\\([^ \f\t\n\r\v]+\\)[ \t]*"
                              ;; (3) switches
                              "\\([^\":\n]*\"[^\"\n*]*\"[^\":\n]*\\|[^\":\n]*\\)"
                              ;; (4) header arguments
                              "\\([^\n]*\\)\n"
                              ;; (5) body
                              "\\([^\000]*?\n\\)??[ \t]*#\\+end_src"))
         (found-files-alist ())
         (found-load-dir-alist ()))
    (with-temp-buffer (insert-file-contents orgfile)
                      (goto-char (point-min))
                      (while (re-search-forward src-block-regexp nil t)
                        (let ((lang (match-string 2))
                              (args (match-string 4))
                              (body (match-string 5))
                              (canc (psimacs/config/tangle-section-canceled)))
                          (when (and (string= lang "emacs-lisp")
                                     (not (string-match-p "^.*:tangle\\s-+no.*$" args))
                                     (not canc))
                            (when (string-match "^.*:tangle\\s-+\\([^:]+\\).*$" args)
                              (let ((dst (string-trim (match-string 1 args)))
                                    (dst-file)
                                    (dst-dir)
                                    (line)
                                    (package-name)
                                    (relative-dir))
                                (if (string= dst "yes")
                                    (progn
                                      (setq body (concat body "\n"))
                                      (add-to-list 'body-list body))
                                  ;; ...else a .el file is requested explicitly.
                                  (progn
                                    (setq dst-file (expand-file-name (concat user-emacs-directory dst)))
                                    (setq dst-dir  (file-name-directory dst-file))
                                    (setq package-name (file-name-sans-extension (file-name-nondirectory dst-file)))

                                    (when (or
                                           (not (equal package-name "early-init"))
                                           (and
                                            (equal package-name "early-init")
                                            psimacs/config/tangle-early-init-file))
                                      (unless (cdr (assoc dst-file found-files-alist))
                                        (when (file-exists-p dst-file)
                                          (delete-file dst-file))

                                        (unless (file-exists-p dst-dir)
                                          (make-directory dst-dir t))

                                        (setq relative-dir (file-relative-name (file-name-directory dst-dir)
                                                                               user-emacs-directory))

                                        (unless (or
                                                 (cdr (assoc dst-dir found-load-dir-alist))
                                                 (equal relative-dir "./"))
                                          (setq line (format
                                                      "(add-to-list 'load-path (concat user-emacs-directory \"%s\"))\n\n"
                                                      relative-dir))
                                          (add-to-list 'body-list line)
                                          (map-put found-load-dir-alist dst-dir t)
                                          )

                                        (let ((description " "))
                                          (when (string-match
                                                 "^.*:var\\s-+file-description\\s-*=\\s-*\"\\([^\"]+\\).*$"
                                                 args)
                                            (setq description (concat " " (string-trim (match-string 1
                                                                                                     args))
                                                                      " ")))

                                          (unless (equal package-name "early-init")
                                            (if (equal description " ")
                                                (setq line (format "(require '%s)\n\n" package-name))
                                              (progn
                                                (setq line (format "(require '%s)" package-name))
                                                (setq line (concat line (make-string (- 42 (length line)) ?\s) (format ";;%s\n\n" description)))
                                                ))
                                            (add-to-list 'body-list line))

                                          (with-temp-buffer (insert (psimacs/config/generate-preamble
                                                                     dst-file
                                                                     orgfile
                                                                     description))
                                                            (write-region (point-min)
                                                                          (point-max) dst-file t))
                                          )
                                        (map-put found-files-alist dst-file t)
                                        )
                                      (with-temp-buffer (insert body)
                                                        (insert "\n")
                                                        (write-region (point-min)
                                                                      (point-max) dst-file t)))))))))))

    ;;
    ;; Add the config pathes to Emacs load path list and add the final provide-clause to the
    ;; written emacs package files.
    ;;
    (dolist (element found-files-alist)
      (let* ((file (car element))
             (package-name (file-name-sans-extension (file-name-nondirectory file))))

        (unless (equal package-name "early-init")
          (with-temp-buffer (insert (format "(provide '%s)\n" package-name))
                            (write-region (point-min)
                                          (point-max) file t)))))
    (with-temp-file elfile
      (insert (psimacs/config/generate-preamble elfile orgfile " Initialization file "))
      (apply 'insert (reverse body-list))
      (insert "\n"))

    ;; Byte compiling the init file is not recommendet
    ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html
    ;;(byte-compile-file elfile)
    ))
#+END_SRC


In case that the resulting configuration file is named =init.el= no explicit loading is necessary. Otherwise, we
must load the =.el= file.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Next function extracts the elips code from the org-file and possibly loads the
;; resulting elips file.
;;
(defun psimacs/config/load-configuration-file (orgfile)
  "Load the given configuration file unless it equals to 'init.el' itself.

File 'init.el' is loaded automatically at startup. No extra loading is necessary.
This function is basically an efficient replacement of org-babel-load-file.
However, it performs some extra task on extraction of the elisp source code blocks.
This happens in the tangle-config-org function.
No byte compiling is performed for any elips file generated by the tangling procedure.
"
  (let* ((base-name (file-name-sans-extension orgfile))
         (elfile    (concat base-name ".el"))
         ;;(elcfile (concat base-name ".elc")) ;; Byte compiling the init file is not recommendet
         )
    (when (and psimacs/config/tangle-anything
               (or (not (file-exists-p elfile))
                   (file-newer-than-file-p orgfile elfile)))

      ;; Byte compiling the init file is not recommendet
      ;;(file-newer-than-file-p orgfile elcfile)
      ;;(file-newer-than-file-p elfile  elcfile)

      (psimacs/config/tangle-config-org orgfile elfile))
    (unless (equal (file-name-nondirectory elfile) "init.el")
      (load (file-name-sans-extension elfile)))))
#+END_SRC

** Directory synchronization system functions

Two useful functions that allow one or two way directory synchronizations.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defun psimacs/file-system/copy-directory-files (src dst &optional only-newer-files)
  "Copy all files from SRC directory into DST directory recursively.
If optional argument ONLY-NEWER-FILES is non nil source files are copied only if their time stamp is
newer then the time stamp of the destination file."
  (if (file-exists-p src)
      (progn
        (unless (file-exists-p dst)
          (make-directory dst t))
        (dolist (f (directory-files-recursively src ".*" t))
          (if (file-directory-p f)
              (let ((f-relative (file-relative-name f src)))
                (when f-relative (let ((dst-dir (concat (file-name-as-directory dst) f-relative)))
                                   (unless (file-exists-p dst-dir)
                                     (make-directory dst-dir t)))))
            ;; ...else is file
            (let* ((src-dir (file-name-directory f))
                   (f-relative (file-relative-name src-dir src))
                   (dst-dir dst)
                   (dst-file))
              (when f-relative
                (setq dst-dir (concat (file-name-as-directory dst) f-relative)))
              (unless (file-exists-p dst-dir)
                (make-directory dst-dir t))
              (setq dst-file (concat (file-name-as-directory dst-dir)
                                     (file-name-nondirectory f)))

                                        ;(if (file-exists-p dst-file)
              (if only-newer-files (when (file-newer-than-file-p f dst-file)
                                     (copy-file f dst-file t t))
                ;; ...else always copy
                (copy-file f dst-file t t))
                                        ;)
              )))
        )
    (make-directory src t)))
#+END_SRC

Two way synchronization if possible with the following function.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defun psimacs/file-system/synchronize-directories(src dst)
  "This function synchronizes two directories.
All files that are found in SRC and that are either not in DST or newer in SRC are copied to DST.
All files that are found in DST and that are either not in SRC or newer in DST are copied to SRC.

After this function is finished the two directories are identical.
 "
  (psimacs/file-system/copy-directory-files src dst t)
  (psimacs/file-system/copy-directory-files dst src t))
#+END_SRC

** Dropbox configuration sharing support

The following functionality allows the synchronization between the user *Psimacs* configuration and a shared
/Dropbox/ configuration repository. Basically, allowing multiple machines to share the same *Psimacs* setup.

The /Dropbox/ location is determined at run time.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Sync with dropbox
;;   The main config file is taken from the dropbox folder but it is loaded from
;;   the local directory (see below). Therefore we copy the main config file from
;;   the dropbox emacs folder into the emacs home directory. If the main config
;;   file in the emacs home directory is newer than the file in the dropbox folder
;;   we update that one with the newer local one.
;;   The agenda files are worked on the dropbox directly, but a local copy is made
;;   for backup purpose.
;;
(defun psimacs/config/find-dropbox-folder ()
  "Get the current dropbox folder on the running machine. Otherwise nil"
  (interactive)
  (let* ((db-appdat-info-file      (concat (expand-file-name (file-name-as-directory (getenv
                                                                                      "APPDATA")))
                                           "Dropbox/info.json"))
         (db-localappdat-info-file (concat (expand-file-name (file-name-as-directory (getenv
                                                                                      "LOCALAPPDATA")))
                                           "Dropbox/info.json"))
         (db-user-home-info-file   "~/Dropbox/info.json")
         (json-path (cond ((eq system-type 'windows-nt)
                           (if (file-exists-p db-appdat-info-file) db-appdat-info-file (if
                                                                                           (file-exists-p
                                                                                            db-localappdat-info-file)
                                                                                           db-localappdat-info-file
                                                                                         (if
                                                                                             (file-exists-p
                                                                                              db-user-home-info-file)
                                                                                             db-user-home-info-file
                                                                                           nil))))
                          ((or
                            (eq system-type 'darwin)
                            (eq system-type 'gnu-linux))
                           (if (file-exists-p db-user-home-info-file) db-user-home-info-file
                             nil)))))
    (if (and json-path
             (file-exists-p json-path))
        (progn
          (require 'json)
          (cdr (assoc 'path (car (json-read-file json-path))))) nil)))
#+END_SRC

*Psimacs* is expected to reside in sub-directory =emacs/psimacs/emacs=. The author uses the same sub-directory
in its home directory and avoids the =.emcad.d= directory completely. Instead the use of environment variable
=XDG_CONFIG_HOME= allows to run various *Emacs* configuration simultaneously.

The following /Windows Batch-File/ is used for starting *Psimacs*:

#+BEGIN_SRC
@echo off

set XDG_CONFIG_HOME=c:\home\emacs\psimacs
C:\utils\Emacs\bin\runemacs.exe
#+END_SRC

The constant =psimacs/config/dropbox-dir= is the actual /Dropbox/ directory found on your machine. It is determined by
the function =psimacs/config/find-dropbox-folder= at initialization time. The constant
=psimacs/config/dropbox-emacs-dir= is a sub directory to =psimacs/config/dropbox-dir=. For a multiple configuration
setup it should be =emacs/psimacs/emacs=. In a traditional Emacs setup, it would be set to =.emacs.d=.
Other configurations then can exchange the /psimacs/ string to something other.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Initialize the directory constants for dropbox...
;;
(defconst psimacs/config/dropbox-dir
  (let ( (f (psimacs/config/find-dropbox-folder)) )
    (if f (file-name-as-directory f) nil))
  "The psimacs dropbox directory or nil.")

;;
;; ... and the its emacs configuration directory
;;
(defconst psimacs/config/dropbox-emacs-dir
  (if psimacs/config/dropbox-dir (file-name-as-directory (concat psimacs/config/dropbox-dir
                                                                 "emacs/psimacs/emacs")) nil)
  "The psimacs dropbox emacs configuration directory or nil.")
#+END_SRC

The actual synchronization function. In its preamble it creates list of files and directories that should be
synchronized. These list might be adapted in the future as the configuration evolves.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; The synchronization function.
;;
(defun psimacs/config/sync-with-dropbox ()
  "Synchronize with dropbox directory if it exists.

The expected place in the dropbox directory is 'emacs/psimacs/emacs'.
"
  (if (and psimacs/config/dropbox-dir
           (file-directory-p psimacs/config/dropbox-dir))
      (let* ((db-dir psimacs/config/dropbox-emacs-dir)
             (sync-files-alist ())
             (sync-dirs-alist  ()))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/main-org-file-name)
                                             (concat db-dir psimacs/config/main-org-file-name)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/main-html-file-name)
                                             (concat db-dir psimacs/config/main-html-file-name)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory psimacs/config/icon-file-name)
                                             (concat db-dir psimacs/config/icon-file-name)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/license-file-name)
                                             (concat db-dir psimacs/config/license-file-name)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/custom-file-name)
                                             (concat db-dir psimacs/config/custom-file-name)))
        (add-to-list 'sync-dirs-alist  (cons (file-name-as-directory (concat user-emacs-directory
                                                                             psimacs/config/agenda-folder))
                                             (file-name-as-directory (concat db-dir
                                                                             psimacs/config/agenda-folder))))
        (add-to-list 'sync-dirs-alist  (cons (file-name-as-directory (concat user-emacs-directory
                                                                             psimacs/config/latex-folder))
                                             (file-name-as-directory (concat db-dir
                                                                             psimacs/config/latex-folder))))
        (add-to-list 'sync-dirs-alist  (cons (file-name-as-directory (concat user-emacs-directory
                                                                             psimacs/config/assets-folder))
                                             (file-name-as-directory (concat db-dir
                                                                             psimacs/config/assets-folder))))

        ;;
        ;; Create missing dropbox emacs directory
        ;;
        (unless (file-directory-p db-dir)
          (make-directory db-dir t))
        (dolist (files sync-files-alist)
          (let ((file    (car files))
                (db-file (cdr files)))
            ;;
            ;; Try to copy the file from dropbox to emacs directory...
            ;;
            (if (file-exists-p db-file)
                (progn
                  ;;
                  ;; If the local file is newer, we update dropbox first
                  ;;
                  (when (file-newer-than-file-p file db-file)
                    (copy-file file db-file t t))
                  (when (or (not (file-exists-p file))
                            (file-newer-than-file-p db-file file))
                    (copy-file db-file file t t)))

              ;; ...else try to upload to dropbox
              (if (file-exists-p file)
                  (copy-file file db-file t t)))))
        (dolist (files sync-dirs-alist)
          (let ((directory    (car files))
                (db-directory (cdr files)))
            (psimacs/file-system/synchronize-directories db-directory directory))))))
#+END_SRC

** Execution of the Dropbox synchronization

This starts the synchronization between the user *Psimacs* configuration and the Dropbox configuration repository.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Synchronize with dropbox
;;
(when psimacs/config/synchronize-at-startup
  (psimacs/config/sync-with-dropbox))
#+END_SRC

** Tangling the main /init.org/ file.

This starts the processing of this org file (=init.org=), resulting in tbe final configuration files for *Psimacs*.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Extract elisp code from org files if necessary and load that code into
;; emacs.
;;
(psimacs/config/load-configuration-file (expand-file-name (concat user-emacs-directory
                                                                  psimacs/config/main-org-file-name)))
#+END_SRC

* Preamble to the /init.el/ file

Until this point, all *Psimacs* source code tangled to the =early-inti.el= file. From now on, the actual configuration
file is setup. It starts with a commentary preamble written to the primary =init.el= file.

#+BEGIN_SRC emacs-lisp :tangle yes
;;; Commentary:
;;
;; Emacs 27 introduces early-init.el, which is run before init.el,
;; before package and UI initialization happens.
;;
#+END_SRC

*Psimacs* splits the configuration into various =init-*.el=-files. This will allow better looking up specific
settings or perform some experimentation. Each of these configuration files will be properly documented and it
is possible to completely relinquish the tangling process and work with the =init-*.el = initialization files
alone.

The main configuration starts now. It is sectioned into different topics. Each topic starts with a prime section
of its own.

* System helpers

This has to be provided early in the initialization process so that it is available for the subsequent code.

** Startup frame size and position

Early up we set the *Psimacs* frame's size and position in order to avoid distracting frame repositioning and resizing.
*Psimacs* provides three simple strategies for positioning and sizing new frames. These strategies can be activated
by the following function which are actually defined in section [[Frame size and position][Frame size and position]].

| Key binding       | Command                                                 | Description                                                                               |
|-------------------+---------------------------------------------------------+-------------------------------------------------------------------------------------------|
| =H-m C-w C-x 5 l= | =M-x psimacs/window/set-frame-creation-strategy-layout= | Place and size new frames left and right to the main frame. This is the default strategy. |
| =H-m C-w C-x 5 m= | =M-x psimacs/window/set-frame-creation-strategy-main=   | Always use the same placement and size as the initial main frame.                         |
| =H-m C-w C-x 5 s= | =M-x psimacs/window/set-frame-creation-strategy-system= | Let Emacs and the operating system decide.                                                |
|-------------------+---------------------------------------------------------+-------------------------------------------------------------------------------------------|

If you do not like the =layout= preset, change variable =psimacs/config/default-frame-creation-strategy= according
to it's documentation string.

#+BEGIN_SRC emacs-lisp :tangle config/init-config-helper.el :var file-description="Configuration helper"
;;
;; Define initial Emacs frame size and position...
;;
(setq frame-resize-pixelwise t)

(let* ((primary-monitor (car (display-monitor-attributes-list)))
       (geometry        (assoc 'geometry primary-monitor))
       (width           (nth 3 geometry))
       (height          (nth 4 geometry)))

  (defconst psimacs/config/default-frame-offset 20)

  (defconst psimacs/config/initial-frame-pos-x  (round (* 28 (/ width 100))))
  (defconst psimacs/config/initial-frame-pos-y  0)
  (defconst psimacs/config/initial-frame-size-x (round (* 60 (/ width 100))))
  (defconst psimacs/config/initial-frame-size-y (- height 80))

  (defconst psimacs/config/default-frame-1-pos-x  0)
  (defconst psimacs/config/default-frame-1-pos-y  psimacs/config/initial-frame-pos-y)
  (defconst psimacs/config/default-frame-1-size-x (- psimacs/config/initial-frame-pos-x  (+ psimacs/config/default-frame-1-pos-x psimacs/config/default-frame-offset)))
  (defconst psimacs/config/default-frame-1-size-y (round (/ psimacs/config/initial-frame-size-y 2)))

  (defconst psimacs/config/default-frame-2-pos-x  0)
  (defconst psimacs/config/default-frame-2-pos-y  (+ psimacs/config/default-frame-1-size-y psimacs/config/initial-frame-pos-y (round (* psimacs/config/default-frame-offset 1.75))))
  (defconst psimacs/config/default-frame-2-size-x (- psimacs/config/initial-frame-pos-x  (+ psimacs/config/default-frame-2-pos-x psimacs/config/default-frame-offset)))
  (defconst psimacs/config/default-frame-2-size-y (- psimacs/config/initial-frame-size-y psimacs/config/default-frame-2-pos-y))


  (defconst psimacs/config/default-frame-3-pos-x  (+ psimacs/config/initial-frame-pos-x psimacs/config/initial-frame-size-x psimacs/config/default-frame-offset))
  (defconst psimacs/config/default-frame-3-pos-y  psimacs/config/initial-frame-pos-y)
  (defconst psimacs/config/default-frame-3-size-x (- width (+ psimacs/config/default-frame-3-pos-x (round (* psimacs/config/default-frame-offset 1.5)))))
  (defconst psimacs/config/default-frame-3-size-y (round (/ psimacs/config/initial-frame-size-y 2)))

  (defconst psimacs/config/default-frame-4-pos-x  (+ psimacs/config/initial-frame-pos-x psimacs/config/initial-frame-size-x psimacs/config/default-frame-offset))
  (defconst psimacs/config/default-frame-4-pos-y  (+ psimacs/config/default-frame-1-size-y psimacs/config/initial-frame-pos-y (round (* psimacs/config/default-frame-offset 1.75))))
  (defconst psimacs/config/default-frame-4-size-x (- width (+ psimacs/config/default-frame-4-pos-x (round (* psimacs/config/default-frame-offset 1.5)))))
  (defconst psimacs/config/default-frame-4-size-y (- psimacs/config/initial-frame-size-y psimacs/config/default-frame-2-pos-y))

  (defvar psimacs/config/default-frame-placement-counter 1)

  ;;
  ;; The initial frame
  ;;
  (set-frame-position (selected-frame) psimacs/config/initial-frame-pos-x  psimacs/config/initial-frame-pos-y)
  (set-frame-size     (selected-frame) psimacs/config/initial-frame-size-x psimacs/config/initial-frame-size-y t)

  ;;
  ;; Somewhat redundant
  ;;
  (add-to-list 'initial-frame-alist `(left   . ,psimacs/config/initial-frame-pos-x))
  (add-to-list 'initial-frame-alist `(top    . ,psimacs/config/initial-frame-pos-y))
  (add-to-list 'initial-frame-alist `(width  . (text-pixels . ,psimacs/config/initial-frame-size-x)))
  (add-to-list 'initial-frame-alist `(height . (text-pixels . ,psimacs/config/initial-frame-size-y)))

  ;;
  ;; Track the current frame creation strategy
  ;;
  (defvar psimacs/config/default-frame-creation-strategy "layout"
    "The strategy that is used for placing and sizing new frames.

Supported strategies are:
  'layout'      -> new frames surround the main frame
  'main'        -> new frames get always the same size and position of the main frame
  'system'      -> let emacs decide")

  ;;
  ;; Prepare for the choosen frame creation strategy
  ;;
  (defun psimacs/window/set-frame-creation-strategy ()
    "Apply the current frame creation strategy."
    (cond ((string= psimacs/config/default-frame-creation-strategy "layout")
           (psimacs/window/set-frame-creation-strategy-layout))
          ((string= psimacs/config/default-frame-creation-strategy "main")
           (psimacs/window/set-frame-creation-strategy-main))
          ((string= psimacs/config/default-frame-creation-strategy "system")
           (psimacs/window/set-frame-creation-strategy-system)))
    )

  (defun psimacs/window/set-frame-creation-strategy-layout ()
    "Set the frame layout creation strategy to 'layout'."
    (interactive)
    (setq default-frame-alist (assq-delete-all 'left   default-frame-alist))
    (setq default-frame-alist (assq-delete-all 'top    default-frame-alist))
    (setq default-frame-alist (assq-delete-all 'width  default-frame-alist))
    (setq default-frame-alist (assq-delete-all 'height default-frame-alist))

    (when (= psimacs/config/default-frame-placement-counter 1)
      (add-to-list 'default-frame-alist `(left   . ,psimacs/config/default-frame-1-pos-x))
      (add-to-list 'default-frame-alist `(top    . ,psimacs/config/default-frame-1-pos-y))
      (add-to-list 'default-frame-alist `(width  . (text-pixels . ,psimacs/config/default-frame-1-size-x)))
      (add-to-list 'default-frame-alist `(height . (text-pixels . ,psimacs/config/default-frame-1-size-y)))
      )

    (when (= psimacs/config/default-frame-placement-counter 2)
      (add-to-list 'default-frame-alist `(left   . ,psimacs/config/default-frame-2-pos-x))
      (add-to-list 'default-frame-alist `(top    . ,psimacs/config/default-frame-2-pos-y))
      (add-to-list 'default-frame-alist `(width  . (text-pixels . ,psimacs/config/default-frame-2-size-x)))
      (add-to-list 'default-frame-alist `(height . (text-pixels . ,psimacs/config/default-frame-2-size-y)))
      )

    (when (= psimacs/config/default-frame-placement-counter 3)
      (add-to-list 'default-frame-alist `(left   . ,psimacs/config/default-frame-3-pos-x))
      (add-to-list 'default-frame-alist `(top    . ,psimacs/config/default-frame-3-pos-y))
      (add-to-list 'default-frame-alist `(width  . (text-pixels . ,psimacs/config/default-frame-3-size-x)))
      (add-to-list 'default-frame-alist `(height . (text-pixels . ,psimacs/config/default-frame-3-size-y)))
      )

    (when (= psimacs/config/default-frame-placement-counter 4)
      (add-to-list 'default-frame-alist `(left   . ,psimacs/config/default-frame-4-pos-x))
      (add-to-list 'default-frame-alist `(top    . ,psimacs/config/default-frame-4-pos-y))
      (add-to-list 'default-frame-alist `(width  . (text-pixels . ,psimacs/config/default-frame-4-size-x)))
      (add-to-list 'default-frame-alist `(height . (text-pixels . ,psimacs/config/default-frame-4-size-y)))
      )
    (setq psimacs/config/default-frame-creation-strategy "layout")
    (message "Switched to frame layout creation strategy."))

  (defun psimacs/window/set-frame-creation-strategy-main ()
    "Set the frame layout creation strategy to 'main'."
    (interactive)
    (setq default-frame-alist (assq-delete-all 'left   default-frame-alist))
    (setq default-frame-alist (assq-delete-all 'top    default-frame-alist))
    (setq default-frame-alist (assq-delete-all 'width  default-frame-alist))
    (setq default-frame-alist (assq-delete-all 'height default-frame-alist))
    (add-to-list 'default-frame-alist `(left   . ,psimacs/config/initial-frame-pos-x))
    (add-to-list 'default-frame-alist `(top    . ,psimacs/config/initial-frame-pos-y))
    (add-to-list 'default-frame-alist `(width  . (text-pixels . ,psimacs/config/initial-frame-size-x)))
    (add-to-list 'default-frame-alist `(height . (text-pixels . ,psimacs/config/initial-frame-size-y)))
    (setq psimacs/config/default-frame-creation-strategy "main")
    (message "Switched to main frame creation strategy."))

  (defun psimacs/window/set-frame-creation-strategy-system ()
    "Set the frame layout creation strategy to 'system'."
    (interactive)
    (setq default-frame-alist (assq-delete-all 'left   default-frame-alist))
    (setq default-frame-alist (assq-delete-all 'top    default-frame-alist))
    (setq default-frame-alist (assq-delete-all 'width  default-frame-alist))
    (setq default-frame-alist (assq-delete-all 'height default-frame-alist))
    (setq psimacs/config/default-frame-creation-strategy "system")
    (message "Switched to system frame creation strategy."))

  ;;
  ;; Initialize the frame creation strategy
  ;;
  (psimacs/window/set-frame-creation-strategy-layout)

  ;;
  ;; Prepare for the next frame creation
  ;;
  (add-hook 'after-make-frame-functions
            #'(lambda (frame)
                (when (equal psimacs/config/default-frame-creation-strategy "layout")
                  (setq default-frame-alist (assq-delete-all 'left   default-frame-alist))
                  (setq default-frame-alist (assq-delete-all 'top    default-frame-alist))
                  (setq default-frame-alist (assq-delete-all 'width  default-frame-alist))
                  (setq default-frame-alist (assq-delete-all 'height default-frame-alist))

                  (setq psimacs/config/default-frame-placement-counter (+ psimacs/config/default-frame-placement-counter 1))

                  (when (> psimacs/config/default-frame-placement-counter 4)
                    (setq psimacs/config/default-frame-placement-counter 1)
                    )

                  (when (= psimacs/config/default-frame-placement-counter 1)
                    (add-to-list 'default-frame-alist `(left   . ,psimacs/config/default-frame-1-pos-x))
                    (add-to-list 'default-frame-alist `(top    . ,psimacs/config/default-frame-1-pos-y))
                    (add-to-list 'default-frame-alist `(width  . (text-pixels . ,psimacs/config/default-frame-1-size-x)))
                    (add-to-list 'default-frame-alist `(height . (text-pixels . ,psimacs/config/default-frame-1-size-y)))
                    )

                  (when (= psimacs/config/default-frame-placement-counter 2)
                    (add-to-list 'default-frame-alist `(left   . ,psimacs/config/default-frame-2-pos-x))
                    (add-to-list 'default-frame-alist `(top    . ,psimacs/config/default-frame-2-pos-y))
                    (add-to-list 'default-frame-alist `(width  . (text-pixels . ,psimacs/config/default-frame-2-size-x)))
                    (add-to-list 'default-frame-alist `(height . (text-pixels . ,psimacs/config/default-frame-2-size-y)))
                    )

                  (when (= psimacs/config/default-frame-placement-counter 3)
                    (add-to-list 'default-frame-alist `(left   . ,psimacs/config/default-frame-3-pos-x))
                    (add-to-list 'default-frame-alist `(top    . ,psimacs/config/default-frame-3-pos-y))
                    (add-to-list 'default-frame-alist `(width  . (text-pixels . ,psimacs/config/default-frame-3-size-x)))
                    (add-to-list 'default-frame-alist `(height . (text-pixels . ,psimacs/config/default-frame-3-size-y)))
                    )

                  (when (= psimacs/config/default-frame-placement-counter 4)
                    (add-to-list 'default-frame-alist `(left   . ,psimacs/config/default-frame-4-pos-x))
                    (add-to-list 'default-frame-alist `(top    . ,psimacs/config/default-frame-4-pos-y))
                    (add-to-list 'default-frame-alist `(width  . (text-pixels . ,psimacs/config/default-frame-4-size-x)))
                    (add-to-list 'default-frame-alist `(height . (text-pixels . ,psimacs/config/default-frame-4-size-y)))
                    )
                  )
                )
            )

  (add-hook 'after-delete-frame-functions
            #'(lambda (frame)
                (when (equal psimacs/config/default-frame-creation-strategy "layout")
                  (setq default-frame-alist (assq-delete-all 'left   default-frame-alist))
                  (setq default-frame-alist (assq-delete-all 'top    default-frame-alist))
                  (setq default-frame-alist (assq-delete-all 'width  default-frame-alist))
                  (setq default-frame-alist (assq-delete-all 'height default-frame-alist))

                  (setq psimacs/config/default-frame-placement-counter (- psimacs/config/default-frame-placement-counter 1))

                  (when (< psimacs/config/default-frame-placement-counter 1)
                    (setq psimacs/config/default-frame-placement-counter 1)
                    )

                  (when (= psimacs/config/default-frame-placement-counter 1)
                    (add-to-list 'default-frame-alist `(left   . ,psimacs/config/default-frame-1-pos-x))
                    (add-to-list 'default-frame-alist `(top    . ,psimacs/config/default-frame-1-pos-y))
                    (add-to-list 'default-frame-alist `(width  . (text-pixels . ,psimacs/config/default-frame-1-size-x)))
                    (add-to-list 'default-frame-alist `(height . (text-pixels . ,psimacs/config/default-frame-1-size-y)))
                    )

                  (when (= psimacs/config/default-frame-placement-counter 2)
                    (add-to-list 'default-frame-alist `(left   . ,psimacs/config/default-frame-2-pos-x))
                    (add-to-list 'default-frame-alist `(top    . ,psimacs/config/default-frame-2-pos-y))
                    (add-to-list 'default-frame-alist `(width  . (text-pixels . ,psimacs/config/default-frame-2-size-x)))
                    (add-to-list 'default-frame-alist `(height . (text-pixels . ,psimacs/config/default-frame-2-size-y)))
                    )

                  (when (= psimacs/config/default-frame-placement-counter 3)
                    (add-to-list 'default-frame-alist `(left   . ,psimacs/config/default-frame-3-pos-x))
                    (add-to-list 'default-frame-alist `(top    . ,psimacs/config/default-frame-3-pos-y))
                    (add-to-list 'default-frame-alist `(width  . (text-pixels . ,psimacs/config/default-frame-3-size-x)))
                    (add-to-list 'default-frame-alist `(height . (text-pixels . ,psimacs/config/default-frame-3-size-y)))
                    )

                  (when (= psimacs/config/default-frame-placement-counter 4)
                    (add-to-list 'default-frame-alist `(left   . ,psimacs/config/default-frame-4-pos-x))
                    (add-to-list 'default-frame-alist `(top    . ,psimacs/config/default-frame-4-pos-y))
                    (add-to-list 'default-frame-alist `(width  . (text-pixels . ,psimacs/config/default-frame-4-size-x)))
                    (add-to-list 'default-frame-alist `(height . (text-pixels . ,psimacs/config/default-frame-4-size-y)))
                    )
                  )
                )
            )

  )
#+END_SRC

** System constants flags

The following boolean constants are defined for convenience.

#+BEGIN_SRC emacs-lisp :tangle config/init-config-helper.el
;;
;; System constants for convenience
;;
(defconst psimacs/system/is-gui-flag        (display-graphic-p)          "Are we running on a GUI Emacs?")
(defconst psimacs/system/is-windows-nt-flag (eq system-type 'windows-nt) "Are we running on a Windows OS system?")
(defconst psimacs/system/is-gnu-linux-flag  (eq system-type 'gnu/linux)  "Are we running on a GNU/Linux system?")
(defconst psimacs/system/is-darwin-flag     (eq system-type 'darwin)     "Are we running on a MAC system?")
#+END_SRC

** Helper functions for assembling folders and files

Some functions to ease the code.

#+BEGIN_SRC emacs-lisp :tangle config/init-config-helper.el
;;
;; Helper functions for file and directory handling
;;
(defun psimacs/file-system/concat-directory (dir subdir)
  "Assemble directory and subdirectory to a new directory."
  (expand-file-name (file-name-as-directory (concat (file-name-as-directory dir) subdir)))
  )

(defun psimacs/file-system/concat-file (dir file)
  "Assemble directory and file."
  (expand-file-name (concat (file-name-as-directory dir) file))
  )

(defun psimacs/file-system/prefer-dropbox-directory (dir)
  "Evaluates either to the local or to the dropbox pendant directory.
This functions always prefers DIR on dropbox."
  (let ((local-dir (psimacs/file-system/concat-directory user-emacs-directory dir))
        (dropbox-dir (if psimacs/config/synchronize-at-startup
                         psimacs/config/dropbox-emacs-dir
                       nil))
        )
    (if dropbox-dir
        (psimacs/file-system/concat-directory dropbox-dir dir)
      local-dir)))
#+END_SRC

** Helper functions for message printing

Some convenience function for message printing.

#+BEGIN_SRC emacs-lisp :tangle config/init-config-helper.el
;;
;; Easy message function for lists
;;
(defun psimacs/config/message-elements-of-list (list)
  "Print each element of LIST to the message buffer on a line of its own."
  (while list
    (message (car list))
    (setq list (cdr list))))
#+END_SRC

* Configuration constants

In the following various *Psimacs* configuration constants are defined. They are just defined at a central place, but
used only later in the configuration. This section is rather boring. However, I decided to concentrate
all these settings together so that it is easy to lookup or change them.

** Primary directory

This defines the =site-lisp= directory for storing local elisp code and the dependencies directory where non *Emacs*
programs are installed.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el :var file-description="Configuration constants"
;;
;; Directory constants used by Psimacs
;;
(defconst psimacs/config/site-lisp-dir
  (psimacs/file-system/concat-directory user-emacs-directory "site-lisp")
  "The psimacs personal site-lisp directory.")

(defconst psimacs/config/session-dir
  (psimacs/file-system/concat-directory user-emacs-directory "session")
  "The psimacs session directory used for storing various session information.")

(defconst psimacs/config/assets-dir
  (psimacs/file-system/concat-directory user-emacs-directory psimacs/config/assets-folder)
  "The psimacs assets directory.")

(defconst psimacs/config/straight-dir
  (psimacs/file-system/concat-directory user-emacs-directory "straight")
  "The psimacs straight directory.")
#+END_SRC

** Private directory

*Psimacs* uses some optional private information that should not go public. These data are stored in
the following directory.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Private directory and file might exists; not mandatory.
;;
(defconst psimacs/config/private-dir
  (psimacs/file-system/concat-directory user-emacs-directory "private")
  "A directory that contains non public, i.e.  private data."
  )

(defconst psimacs/config/private-file
  (psimacs/file-system/concat-file psimacs/config/private-dir "init-private.el")
  "A directory that contains non public, i.e.  private data."
  )
#+END_SRC

** Tools directory

The tools directory contains non *Emacs* / *Lisp* tools, that are not readily available, but are important for
*Psimacs* configuration. For instance =msys64= is needed by *Psimacs* but an appropriate installation can be provided
by resources from the web. Therefore =msys64= is not found in tools. Goal is it that the =psimacs/config/tools-dir=
is empty.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Installation of 'personal' tools
;;
(defconst psimacs/config/tools-dir
  (psimacs/file-system/concat-directory psimacs/config/site-lisp-dir "tools")
  "The psimac personal tools directory.")
#+END_SRC

** System resources directory

Many dependencies exists to external programs that are used by *Psimacs*. On default most of them are expected
to be installed in the =psimacs/config/system-utils-dir=. For each tool that *Psimacs* expects a detailed installation
recipe is provided.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Installation of system wide utilities and resources
;;
(defconst psimacs/config/system-utils-dir
  (expand-file-name (file-name-as-directory "c:/utils"))
  "The psimac system resources and utility directory.")
#+END_SRC

** Backup constants

*Psimacs* supports the creation of backup files.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for backups
;;
(defconst psimacs/config/backup-root-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "backups")
  "The psimacs backup root directory.")

(defconst psimacs/config/backup-dir
  (psimacs/file-system/concat-directory psimacs/config/backup-root-dir "computer")
  "The psimacs backup directory.")

(defconst psimacs/config/backup-max-number-files 36
  "The psimacs maximal number of tracked backup files.")
#+END_SRC

** Auto saving

Auto saving is performed by *Psimacs* a lot.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for auto saving
;;
(defconst psimacs/config/auto-save-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "auto-save")
  "The psimacs auto save directory.")
#+END_SRC

** Bookmarking

*Psimacs* uses the [[https://github.com/joodland/bm][Visible bookmarks in buffer (bm)]] for bookmarking.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for bookmarking
;;
(defconst psimacs/config/bookmarks-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "bm")
  "The psimacs bookmarks directory.")

(defconst psimacs/config/bm-bookmarks-file
  (psimacs/file-system/concat-file psimacs/config/bookmarks-dir ".bm-bookmarks")
  "The psimacs bm bookmarks file.")
#+END_SRC

** Abbreviations

*Psimacs uses the default *Emacs* [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html][abbreviation]] facility.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for abbreviations
;;
(defconst psimacs/config/abbrev-file
  (psimacs/file-system/concat-file psimacs/config/session-dir ".abbreviations")
  "The psimacs abbreviation file.")
#+END_SRC

** Emacs client/server

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][Client/Server]] support for *Psimacs*. We use the default /server/ directory. Since we allow multiple
*Emacs* configurations side by side, we must either set the global environment variable =EMACS_SERVER_FILE=
to the correct server file, or we must call *emacsclient* with option =-f server-file=.

*Psimacs* handles that in the following way:
- *Psimacs* uses the =EMACS_SERVER_FILE=
- If at startup a =EMACS_SERVER_FILE= if already defined in the environment and it does not correspond to
  the current configuration, =EMACS_SERVER_FILE= is not modified and the //*Emacs server*/ is not started.
- If the =EMACS_SERVER_FILE= is not defined, or it points to a non existing file, it is set to the
  current configuration's /server-file/ in the user environment.
  Additionally, a =kill-emacs-hook= is set up that removes the environment variable on exit of the *Emacs* session.

References:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][Using Emacs as a Server]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/TCP-Emacs-server.html#TCP-Emacs-server][TCP Emacs server]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/emacsclient-Options.html][*emacsclient* Options]]

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for client/server storage
;;
(defconst psimacs/config/server-dir
  (psimacs/file-system/concat-directory user-emacs-directory "server")
  "The psimacs server directory.")

(defconst psimacs/config/server-file
  (psimacs/file-system/concat-file psimacs/config/server-dir "server")
  "The psimacs server file.")


;;
;; ToDo: this should go to the server setup code below
;;
(defvar psimacs/config/found-server-file
   (getenv "EMACS_SERVER_FILE")
   "The active server file.")

(when (and psimacs/system/is-windows-nt-flag
            (or (not psimacs/config/found-server-file)
                (not (file-exists-p psimacs/config/found-server-file))
                (equal psimacs/config/found-server-file psimacs/config/server-file)))
   (start-process "SETX" nil "setx" "EMACS_SERVER_FILE" psimacs/config/server-file)
   (add-hook 'kill-emacs-hook
             (lambda ()
               (call-process "reg.exe" nil nil nil "delete" "HKCU\\Environment" "/v" "EMACS_SERVER_FILE" "/f"))))
#+END_SRC

** Agenda files

Quoting [[http://cachestocaches.com/2016/9/my-workflow-org-agenda/][My Workflow with Org-Agenda]]:
#+BEGIN_QUOTE
The agenda view scans your =.org= files (set by customizing the org-agenda-files variable) and collects all of the
headings with a TODO (or related) keyword. Without the agenda view, keeping track of projects, which I ensure are
top-level TODO items, is difficult. The agenda provides a convenient way of tracking your projects and managing
your calendar.
#+END_QUOTE


#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Org-Agenda directory
;;
(defconst psimacs/config/agenda-dir
    (psimacs/file-system/prefer-dropbox-directory psimacs/config/agenda-folder)
    "The psimacs org agenda  directory.")

;;
;; Diary files
;;
(defcustom psimacs/config/org-capture-coding-diary-file "CodingDiary.org"
    "The diary file for capturing coding points.")

(defcustom psimacs/config/org-capture-coding-diary-files
    '(
        "CodingDiary.org"
        "ShadowProject.org"
    )
    "The list of supported diary files for capturing coding points.")
#+END_SRC

** Recent files

Constants that relate to recent file management.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Recent file constants
;;
(defconst psimacs/config/recent-file
    (psimacs/file-system/concat-file psimacs/config/session-dir ".recentf")
    "The psimacs recent file.")
#+END_SRC

** History

Configuration constants for saving the history.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Save history management
;;
(defconst psimacs/config/history-file
    (psimacs/file-system/concat-file psimacs/config/session-dir ".history")
    "The psimacs history file.")
#+END_SRC

** Save-Places

Save place allows store the current cursor position for the next session.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Save cursor positions for the next session
;;
(defconst psimacs/config/save-places-file
    (psimacs/file-system/concat-file psimacs/config/session-dir ".save-places")
    "The psimacs save places file.")
#+END_SRC

** StackExchange utilization

Cache directory of the package [[https://github.com/vermiculus/sx.el][sx]] that utilizes working with the StackExchange service.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Cache directory of the package sx.
;;
(defconst psimacs/config/sx-cache-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir ".sx")
  "The psimacs sx cache directory.")
#+END_SRC

** The custom.el file.

The =custom.el= file contains customizations by the user. This file is not synchronized with the /Dropbox/
repository.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; The custom.el file. This file gets not be synchronized
;;
(defconst psimacs/config/custom-file
    (psimacs/file-system/concat-file user-emacs-directory psimacs/config/custom-file-name)
    "The psimacs customization file.")
#+END_SRC

** Latex

LaTeX bibliography should be shared.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; LaTeX file sharing
;;
(defconst psimacs/config/latex-dir
  (psimacs/file-system/prefer-dropbox-directory psimacs/config/latex-folder)
  "The psimacs shared latex directory.")

(defconst psimacs/config/tex-runtime-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "MiKTeX/miktex/bin/x64")
  ;;(psimacs/file-system/concat-directory psimacs/config/system-utils-dir "texlive/bin/win32")
  "The psimacs tex runtime directory.")
#+END_SRC

** PDF viewer

The  [[https://en.wikipedia.org/wiki/PDF][PDF-files]] viewer to use.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; PDF file viewing
;;
(defconst psimacs/config/pdf-viewer-name "SumatraPDF" "The psimacs pdf viewer name.")

(defconst psimacs/config/pdf-viewer-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "SumatraPDF")
  "The psimacs pdf viewer directory.")

(defconst psimacs/config/pdf-viewer-runtime
  (psimacs/file-system/concat-file psimacs/config/pdf-viewer-dir "SumatraPDF-3.2-64.exe")
  "The psimacs pdf viewer executable.")
#+END_SRC

** The Amx file

[[https://github.com/DarwinAwardWinner/amx][Amx]] is an alternative interface for M-x in Emacs.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Amx package support file
;;
(defconst psimacs/config/amx-file
  (psimacs/file-system/concat-file psimacs/config/session-dir ".amxf")
  "The psimacs amx file.")
#+END_SRC

** MSYS2

*Psimacs* uses a lot of external programs provided by the [[https://www.msys2.org/][MSYS2]] framework.  [[https://www.msys2.org/][MSYS2]] is a collection of tools and
libraries providing you with an easy-to-use environment for building, installing and running native Windows software.

Download the [[https://www.msys2.org/#installation][installer]] for the [[https://www.msys2.org/][MSYS2]] framework and follow the installation instructions. Install into folder
=c:/utils/msys64= which is the default for *Psimacs*. The installation does not need to be entered in the system path
environment. *Psimacs* handles a proper executable path internally. After finishing the base installation some packages
must be installed with the [[https://www.msys2.org/][MSYS2]] package manager /pacman/. For that, open the =MSYS2 MinGW 64-bit= terminal and execute
the following commands:

*** Packages
- =pacman -Syu=
- =pacman -Su=
- =pacman -S base-devel=
- =pacman -S mingw-w64-x86_64-toolchain=
- =pacman -S mingw-w64-x86_64-zlib=
- =pacman -S mingw-w64-x86_64-libpng=
- =pacman -S mingw-w64-x86_64-poppler=
- =pacman -S mingw-w64-x86_64-imagemagick=
- =pacman -S mingw-w64-x86_64-cmake=
- =pacman -S mingw-w64-x86_64-qt5=
- =pacman -S mingw-w64-x86_64-toolchain=
- =pacman -S mingw-w64-x86_64-ninja=
- =pacman -S mingw-w64-x86_64-clang=
- =pacman -S mingw-w64-x86_64-clang-analyzer=
- =pacman -S mingw-w64-x86_64-clang-tools-extra=
- =pacman -S mingw-w64-x86_64-compiler-rt=
- =pacman -S mingw-w64-x86_64-libblocksruntime=
- =pacman -S mingw-w64-x86_64-openblas=
- =pacman -S mingw-w64-x86_64-boost=
- =pacman -S mingw-w64-x86_64-eigen3=
- =pacman -S mingw-w64-x86_64-zeromq=
- =pacman -S mingw-w64-x86_64-pkg-config=
- =pacman -S mingw-w64-x86_64-doxygen=
- =pacman -S mingw-w64-x86_64-graphviz=
- =pacman -S mingw-w64-x86_64-glm=
- =pacman -S mingw-w64-x86_64-hunspell=
- =pacman -S mingw-w64-x86_64-hunspell-en=
- =pacman -S mingw-w64-x86_64-aspell=
- =pacman -S mingw-w64-x86_64-aspell-de=
- =pacman -S mingw-w64-x86_64-aspell-en=
- =pacman -S mingw-w64-x86_64-gnutls=

Some of the packages are not really required but I use them and I would like to memorize my installation procedure
here. So, feel free to only install the packages you require.

Pacman queries the local package database with the =-Q= flag, the sync database with the =-S= flag and the files
database with the =-F= flag. See =pacman -Q --help=, =pacman -S --help= and =pacman -F --help= for the respective
suboptions of each flag.

Most important commands taken from
- [[https://www.msys2.org/docs/package-management/][MSYS2 Package Management]]


| Command                     | Description                                                                                                                                      |
|-----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|
| =pacman -Syu=               | Synchronizes the repository databases and updates the system's packages, excluding "local" packages that are not in the configured repositories. |
|-----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|
| =pacman -S <name>=          | Install package.                                                                                                                                 |
|-----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|
| =pacman -Q --help=          | Get help about the suboptions for local package database access.                                                                                 |
| =pacman -S --help=          | Get help about the suboptions for sync database access.                                                                                          |
| =pacman -F --help=          | Get help about the suboptions for files database access.                                                                                         |
|-----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|
| =pacman -Ss <string>=       | Search for packages in the database, searching both in packages' names and descriptions.                                                         |
| =pacman -Qs <string>=       | To search for already installed packages.                                                                                                        |
| =pacman -F  <string>=       | To search for package file names in remote packages                                                                                              |
|-----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|
| =pacman -Si <package_name>= | To display extensive information about a given package.                                                                                          |
| =pacman -Qi <package_name>= | For locally installed packages.                                                                                                                  |
| =pacman -Ql <package_name>= | To retrieve a list of the files installed by a package.                                                                                          |
|-----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|

*** Constants

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; MSYS2 installation
;;
(defconst psimacs/config/msys-root-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "msys64")
  "The psimacs msys64 root directory.")

(defconst psimacs/config/msys-info-dir
  (psimacs/file-system/concat-directory psimacs/config/msys-root-dir "usr/share/info")
  "The psimacs msys64 info directory.")

(defconst psimacs/config/msys-runtime-dir
  (psimacs/file-system/concat-directory psimacs/config/msys-root-dir "usr/bin")
  "The psimacs msys runtime directory.")

(defconst psimacs/config/msys-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/msys-runtime-dir "bash.exe")
  "The psimacs bash executable.")

(defconst psimacs/config/mingw-root-dir
  (psimacs/file-system/concat-directory psimacs/config/msys-root-dir "mingw64")
  "The psimacs mingw64 root directory.")

(defconst psimacs/config/mingw-info-dir
  (psimacs/file-system/concat-directory psimacs/config/mingw-root-dir "share/info")
  "The psimacs mingw64 info directory.")

(defconst psimacs/config/mingw-runtime-dir
  (psimacs/file-system/concat-directory psimacs/config/mingw-root-dir "bin")
  "The psimacs mingw64 runtime directory.")
#+END_SRC

** Spell checking

Basically two spell checkers are usable with *Emacs*. Either [[https://github.com/hunspell/hunspell][Hunspell]] or [[http://aspell.net/][Aspell]]. Currently *Psimacs* uses
[[https://github.com/hunspell/hunspell][Hunspell]].

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Spell checking with hunspell
;;
(defconst psimacs/config/spell-checker-hunspell-runtime
  (psimacs/file-system/concat-file psimacs/config/mingw-runtime-dir "hunspell.exe")
  "The hunspell executable to use.")

(defconst psimacs/config/spell-checker-aspell-runtime
  (psimacs/file-system/concat-file psimacs/config/mingw-runtime-dir "aspell.exe")
  "The aspell executable to use.")

(defconst psimacs/config/spell-checker-hunspell-extra-args '("-i" "utf-8")       "Extra hunspell arguments.")
(defconst psimacs/config/spell-checker-aspell-extra-args   '("--sug-mode=ultra") "Extra aspell arguments.")

(defconst psimacs/config/spell-checker-hunspell-list-command "-l"     "Command list option for hunspell.")
(defconst psimacs/config/spell-checker-aspell-list-command   "--list" "Command list option for aspell.")

(defconst psimacs/config/spell-checker-hunspell-personal-dir
  (psimacs/file-system/concat-directory psimacs/config/assets-dir "hunspell")
  "The hunspell dictionary directory provided by the MSYS2 package.")

(defconst psimacs/config/spell-checker-hunspell-dir
  (psimacs/file-system/concat-directory psimacs/config/mingw-root-dir "share/hunspell")
  "The psimacs spell checker dictionary directory for hunspell.")

(defconst psimacs/config/spell-checker-aspell-dir
  (psimacs/file-system/concat-directory psimacs/config/mingw-root-dir "lib/aspell-0.60")
  "The psimacs spell checker dictionary directory for aspell.")

(defconst psimacs/config/spell-checker-hunspell-german-dict "de_DE"
  "The hunspell german dictionary to use.")

(defconst psimacs/config/spell-checker-hunspell-english-dict "en_US"
  "The hunspell english dictionary to use.")

(defconst psimacs/config/spell-checker-aspell-german-dict "deutsch8"
  "The aspell german dictionary to use.")

(defconst psimacs/config/spell-checker-aspell-english-dict "american"
  "The aspell english dictionary to use.")

(defconst psimacs/config/spell-checker-hunspell-personal-dict-file
  (psimacs/file-system/concat-file psimacs/config/session-dir ".hunspell_")
  "The psimacs personal hunspell dictionary file.")

(defconst psimacs/config/spell-checker-aspell-personal-dict-file
  (psimacs/file-system/concat-file psimacs/config/session-dir ".aspell_")
  "The psimacs personal aspell dictionary file.")

(defconst psimacs/config/spell-checker-complete-word-dictionary-file
  (psimacs/file-system/concat-file psimacs/config/assets-dir "plain-word-list.txt")
  "A plain english word list.")

;;
;; Some derived constants to simplify setup
;;
(defconst psimacs/internal/spell-checker-use-aspell nil
  "Default spell checker is aspell.
Use the aspell spell checker if true, otherwise use the hunspell spell checker.")

(defconst psimacs/config/spell-checker-runtime
  (if psimacs/internal/spell-checker-use-aspell
      psimacs/config/spell-checker-aspell-runtime
    psimacs/config/spell-checker-hunspell-runtime)
  "The spell checker executable to use.")

(defconst psimacs/config/spell-checker-extra-args
  (if psimacs/internal/spell-checker-use-aspell
      psimacs/config/spell-checker-aspell-extra-args
    psimacs/config/spell-checker-hunspell-extra-args)
  "Extra spell checker arguments.")

(defconst psimacs/config/spell-checker-list-command
  (if psimacs/internal/spell-checker-use-aspell
      psimacs/config/spell-checker-aspell-list-command
    psimacs/config/spell-checker-hunspell-list-command)
  "Command list option for spell checker.")

(defconst psimacs/config/spell-checker-dir
  (if psimacs/internal/spell-checker-use-aspell
      psimacs/config/spell-checker-aspell-dir
    psimacs/config/spell-checker-hunspell-dir)
  "The psimacs spell checker dictionary directory.")

(defconst psimacs/config/spell-checker-german-dict
  (if psimacs/internal/spell-checker-use-aspell
      psimacs/config/spell-checker-aspell-german-dict
    psimacs/config/spell-checker-hunspell-german-dict)
  "The german dictionary to use.")

(defconst psimacs/config/spell-checker-english-dict
  (if psimacs/internal/spell-checker-use-aspell
      psimacs/config/spell-checker-aspell-english-dict
    psimacs/config/spell-checker-hunspell-english-dict)
  "The english dictionary to use.")

(defconst psimacs/config/spell-checker-personal-dict-file
  (if psimacs/internal/spell-checker-use-aspell
      psimacs/config/spell-checker-aspell-personal-dict-file
    psimacs/config/spell-checker-hunspell-personal-dict-file)
  "The psimacs personal dictionary file.")
#+END_SRC

** Multilingual grammar and style checker

[[https://languagetool.org][LanguageTool]] is a multilingual grammar and style checker. The stable version is installed from [[https://languagetool.org/download/][download]].

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Multilingual grammar and style checker
;;
(defconst psimacs/config/language-tool-dir
  (psimacs/file-system/concat-directory  psimacs/config/system-utils-dir "LanguageTool")
  "The psimacs language tool directory")
#+END_SRC

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. The following constant provides the main /project/ directories,
i.e. a directories in which [[https://github.com/bbatsov/projectile][Projectile]] searches for projects.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Projectile search pathes
;;
(defconst psimacs/config/project-search-path
    '("~/projects/source"
      "d:/projects/source"
      )
    "The psimacs project search path")
#+END_SRC

** Printing support

Printing relies on an installed [[https://www.ghostscript.com/][Ghostscript]] interpreter for the PostScript language and PDF files.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Ghostscript interpreter for PostScript and PDF files
;;
(defconst psimacs/config/ghostscript-exe
  (psimacs/file-system/concat-file  psimacs/config/system-utils-dir "gs/gs9.53.3/bin/gswin64c.exe")
  "The psimacs ghost script executable.")
#+END_SRC

** Snippets

Snippets are used by package [[https://github.com/joaotavora/yasnippet][Yasnippet]]. Beside of the installed snippets, user provided snippets used. These
are to be installed into the following directory.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; User provided snippets
;;
(defconst psimacs/config/snippets-dir
  (psimacs/file-system/concat-directory  psimacs/config/site-lisp-dir "snippets")
  "The psimacs personal snippets directory.")
#+END_SRC

** Python

[[https://www.python.org/][Python]] is one of my favorite languages. I use the Windows OS [[https://www.python.org/][Python]] installer and not the [[https://www.msys2.org/][MSYS2]] python package.

Installation of the following packages is recommended: autopep8, black, certifi, cmake-language-server, flake8,
ipython, jupyter, mypy, mypy-extensions, pyflakes, pylint, pyls-black, pyls-isort, pyls-mypy, ptvsd, pycodestyle,
pycparser, pydocstyle, pywin32, pywinpty

*Psimacs* installation does reference the python tools explicitly. Nevertheless, the Windows OS [[https://www.python.org/][Python]] runtime directory
as well as the Windows OS [[https://www.python.org/][Python]] scripts directory will be added to the environment search path list prior to [[https://www.msys2.org/][MSYS2]]
pathes. Therefore our Windows OS [[https://www.python.org/][Python]] should always be at work.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Python configuration constants
;;
(defconst psimacs/config/python-tools-dir
  (psimacs/file-system/concat-directory psimacs/config/tools-dir "py-tools")
  "The psimacs personal python-tools directory.")

(defconst psimacs/config/python-vc-visual-studio-dir
  (psimacs/file-system/concat-directory psimacs/config/python-tools-dir "MS-Visual-Studio")
  "The psimacs personal MS Visual Studio python directory.")

(defconst psimacs/config/python-runtime-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "Python385")
  "The psimacs used python runtime directory.")

(defconst psimacs/config/python-scripts-dir
  (psimacs/file-system/concat-directory psimacs/config/python-runtime-dir "Scripts")
  "The psimacs used python scripts directory.")

(defconst psimacs/config/python-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/python-runtime-dir "python.exe")
  "The psimacs used python runtime.")

(defconst psimacs/config/flake8-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "flake8.exe")
  "The psimacs used python flake8 runtime.")

(defconst psimacs/config/pylint-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "pylint.exe")
  "The psimacs used python pylint runtime.")

(defconst psimacs/config/mypy-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "mypy.exe")
  "The psimacs used python mypy runtime.")

(defconst psimacs/config/pyflakes-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "pyflakes.exe")
  "The psimacs used python pyflakes runtime.")

(defconst psimacs/config/pyls-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "pyls.exe")
  "The psimacs used python pyls runtime.")
#+END_SRC

** PlantUML

. [[https://plantuml.com/][PlantUML]] is an open-source tool allowing users to create [[https://en.wikipedia.org/wiki/Unified_Modeling_Language][UML]] diagrams from a plain text language.

References:
- [[https://en.wikipedia.org/wiki/Unified_Modeling_Language][Wikipedia: Unified Modeling Language]]
- [[https://www.uml-diagrams.org/][The Unified Modeling Language]]

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; PlantUML configration constants
;;
(defconst psimacs/config/plantuml-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "plantUML")
  "The psimacs plantUml tool  directory.")

(defconst psimacs/config/plantuml-jar-file
  (concat psimacs/config/plantuml-dir "lib/plantuml.jar")
  "The psimacs plantUml jar file.")

(defcustom psimacs/config/plantuml_java_arg_limit_size 0
  "Limits image width and heigh to this value.

Note that if you generate very big diagrams, (for example, something
like 20 000 x 10 000 pixels), you can have some memory issues.

Values: 0, 4096, 8192, 16384, 32768

If this value is 0, then no action is taken.")

(defcustom  psimacs/config/plantuml_java_arg_heap-size 0
  "Tune the Java VM heap size

Tune Jav VM heap size: -Xmx for maximum heap size, and -Xms for initial
heap size.

Values: 0, 256, 512, 1024, 2048, 4096, 8192

If this value is 0, then no action is taken.")
#+END_SRC

** Image Magick

The package [[https://github.com/mhayashi1120/Emacs-imagex][image+.el]] uses [[https://imagemagick.org/index.php][ImageMagick]]. I installed the file  [[https://imagemagick.org/script/download.php#windows][ImageMagick-7.0.10-45-portable-Q16-HDRI-x64.zip]].

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Installation site of ImageMagick
;;
(defconst psimacs/config/image-magick-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "ImageMagick")
  "The psimacs ImageMagick tool directory.")
#+END_SRC

** Java

Many packages and tools do need a [[https://www.java.com][Java]] installation. I use the open source implementation [[https://openjdk.java.net/][OpenJDK]] for my purposes.
The portable [[https://download.java.net/java/GA/jdk15.0.1/51f4f36ad4ef43e39d0dfdbaf6549e32/9/GPL/openjdk-15.0.1_windows-x64_bin.zip][Zip]] package for [[https://jdk.java.net/15/][Java Version 15]] is used by me.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Java constants
;;
(defconst psimacs/config/java-runtime-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "java64/bin")
  "The psimacs java runtime directory.")

(defconst psimacs/config/java-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/java-runtime-dir "javaw.exe")
  "The psimacs java executable.")
#+END_SRC

** Git

[[https://git-scm.com/][Git]] is a very important external tool to be installed. *Psimacs* uses the [[https://github.com/raxod502/straight.el][Straight]] package manager which relies on a
properly installed [[https://git-scm.com/][Git]] program. A portable version is available at from their [[https://git-scm.com/download/win][download site]].

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Portable Git configuration
;;
(defconst psimacs/config/git-runtime-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "PortableGit/cmd")
  "The psimacs git runtime directory.")

(defconst psimacs/config/git-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/git-runtime-dir "git.exe")
  "The psimacs git executable.")

(defconst psimacs/config/gitk-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/git-runtime-dir "gitk.exe")
  "The psimacs gitk executable.")
#+END_SRC

** Graphviz

[[http://www.graphviz.org/][Graphviz]] is a wonderful tool for diagram generation. Especially [[https://plantuml.com/][PlantUML]] uses it as its backend interpreter for the
[[https://graphviz.org/doc/info/lang.html][Dot]] language.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Graphviz tool constants
;;
(defconst psimacs/config/graphviz-runtime-dir
  psimacs/config/mingw-runtime-dir
  "The psimacs Graphviz directory.")

(defconst psimacs/config/graphviz-runtime-dot-exe
  (psimacs/file-system/concat-file psimacs/config/graphviz-runtime-dir "dot.exe")
  "The psimacs Graphviz dot executable.")
#+END_SRC

** CMake

[[https://cmake.org/][CMake]] is an open-source, cross-platform family of tools designed to build, test and package software.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; CMake tool configuration constants
;;
(defconst psimacs/config/cmake-runtime-dir
  psimacs/config/mingw-runtime-dir
  "The psimacs CMake directory.")

(defconst psimacs/config/cmake-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/cmake-runtime-dir "cmake.exe")
  "The psimacs CMake cmake runtime file.")

(defconst psimacs/config/ctest-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/cmake-runtime-dir "ctest.exe")
  "The psimacs CMake ctest runtime file.")

(defconst psimacs/config/cpack-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/cmake-runtime-dir "cpack.exe")
  "The psimacs CMake cpack runtime file.")

(defconst psimacs/config/cmcldeps-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/cmake-runtime-dir "cmcldeps.exe")
  "The psimacs CMake cmcldeps runtime file.")

(defconst psimacs/config/cmake-gui-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/cmake-runtime-dir "cmake-gui.exe")
  "The psimacs CMake cmake-gui runtime file.")
#+END_SRC

** Clang/LLVM

[[https://clang.llvm.org/][Clang]] can be used for compiling and linking [[https://en.wikipedia.org/wiki/C%2B%2B][C++]] programs.

Some usefule references for C++:
- [[https://en.wikipedia.org/wiki/C%2B%2B][Wikipedia: C++]]
- [[https://isocpp.org/][News, Status & Discussion about Standard C++]]
- [[https://www.cplusplus.com/][Welcome to cplusplus.com]]
- [[https://en.cppreference.com][C++ Reference]]
- [[https://justinmeiners.github.io/sgi-stl-docs/][Standard Template Library Programmer's Guide]]
- [[https://www.boost.org/][Boost C++ Libraries]]

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Clang compiler framework configuration constants
;;
(defconst psimacs/config/clang-runtime-dir
  psimacs/config/mingw-runtime-dir
  "The psimacs clang directory.")

(defconst psimacs/config/clang-c-compiler-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang.exe")
  "The psimacs clang executable.")

(defconst psimacs/config/clang-c++-compiler-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang++.exe")
  "The psimacs clang++ executable.")

(defconst psimacs/config/clang-cl-compiler-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-cl.exe")
  "The psimacs clang-cl executable.")

(defconst psimacs/config/clangd-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clangd.exe")
  "The psimacs clangd executable.")

(defconst psimacs/config/clang-format-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-format.exe")
  "The psimacs clang-format executable.")

(defconst psimacs/config/clang-include-fixer-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-include-fixer.exe")
  "The psimacs clang-include-fixer executable.")

(defconst psimacs/config/clang-tidy-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-tidy.exe")
  "The psimacs clang-tidy executable.")

(defconst psimacs/config/clang-check-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-check.exe")
  "The psimacs clang-check executable.")

(defconst psimacs/config/clang-rename-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-rename.exe")
  "The psimacs clang-rename executable.")

(defconst psimacs/config/clang-refactor-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-refactor.exe")
  "The psimacs clang-refactor executable.")
#+END_SRC

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] is used for project management.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; CMake tool configuration constants
;;
(defconst psimacs/config/projectile-dir
  psimacs/config/session-dir
  "The psimacs projectile directory.")

(defconst psimacs/config/projectile-known-projects-file
  (psimacs/file-system/concat-file psimacs/config/projectile-dir ".projectile-bookmarks")
  "The psimacs projectile bookmark file.")
#+END_SRC

* Environment

Extent the execution search path by the external tools that *Psimacs* supports. Do not rely solely on the
correct parents search path setup. Be explicit. Additionally, synchronize the environment search path with
*Emacs*'s =exec-path=.

#+BEGIN_SRC emacs-lisp :tangle config/init-environment.el :var file-description="Search path setup"
;;
;; Explicitely set the environment to the tools that are important. Do not rely on the parent
;; environment. Synchronize execution path and the environment search path
;;
(setq exec-path
      (append `(
                ,psimacs/config/python-runtime-dir
                ,psimacs/config/python-scripts-dir
                ,psimacs/config/java-runtime-dir
                ,psimacs/config/git-runtime-dir
                ,psimacs/config/mingw-runtime-dir
                ,psimacs/config/msys-runtime-dir
                ,psimacs/config/tex-runtime-dir
                ;;,psimacs/config/cmake-runtime-dir       ; cmake is part of mingw
                ;;,psimacs/config/graphviz-runtime-dir    ; dito for graphviz
                )
              exec-path))

(setenv "PATH" (mapconcat #'identity exec-path path-separator))

;;(message (getenv "PATH"))
;;
;; Print the current exec-path to the message buffer
;;
(psimacs/config/message-elements-of-list exec-path)
#+END_SRC

* Package management

In this section some security measures are configured and the package manager is initialized.

** Making Emacs secure

Some safety tips regarding your editor are covered in the excellent article [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your Text Editor is Malware]].
So, before going on with the configuration, let's get some things straight. First of all, enable checking
trust on TLS connections.

#+BEGIN_SRC emacs-lisp :tangle config/init-secure.el :var file-description="Secure Emacs"
(setq tls-checktrust t)
#+END_SRC

*Emacs* is now no able to fetch HTTPS anymore! Emacs does not distribute trust root certificates.
We have to solve this problem. The [[https://www.python.org/][Python]] package [[https://pypi.org/project/certifi/][certifi]] /provides Mozilla's carefully curated collection of
Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts./
The [[https://www.python.org/][Python]] package [[https://pypi.org/project/certifi/][certifi]] should be installed by =pip install certifi=. The following [[https://gitlab.com/DiegoVicente/my-emacs/-/tree/master/][code snippet from Diego Vicente]]
allows the evaluation of the generated trustfile.

#+BEGIN_SRC emacs-lisp :tangle config/init-secure.el
;;
;; With curtsy to https://gitlab.com/DiegoVicente/my-emacs/-/tree/master/
;;
(let
    (
     (trustfile
      (replace-regexp-in-string
       "\\\\" "/"
       (replace-regexp-in-string
        "\n" ""
        ;; requires "pip install certifi"
        (shell-command-to-string (concat psimacs/config/python-runtime-exe " -m certifi"))))
      )
     )

  (setq tls-program (list (format
                           "gnutls-cli%s --x509cafile %s -p %%p %%h"
                           (if (eq window-system 'w32) ".exe" "") trustfile)))

  ;;(message "%s" trustfile)
  ;;(message "%s" tls-program)

  (setq gnutls-verify-error t)
  (setq gnutls-trustfiles (list trustfile))
)
#+END_SRC

It is important to have added MELPA as an HTTPS site for this secure configuration to work.

The following function allows us to check if this setup is properly done. Thanks again to [[https://gitlab.com/DiegoVicente/my-emacs/-/tree/master/][Diego Vicente]].

#+BEGIN_SRC emacs-lisp :tangle config/init-secure.el
;;
;; Test function with curtsy to https://gitlab.com/DiegoVicente/my-emacs/-/tree/master/
;;
(defun psimacs/config/check-tls-config ()
    "Check for correctness in the TLS configuration for Emacs."
    (interactive)
    (let ((bad-hosts
        (cl-loop for bad in '("https://wrong.host.badssl.com/" "https://self-signed.badssl.com/")
            if (condition-case e (url-retrieve bad (lambda (retrieved) t))
                (error nil))
            collect bad)))
        (if bad-hosts
            (error (format "TLS misconfigured; retrieved %s ok" bad-hosts))
        (url-retrieve "https://badssl.com" (lambda (retrieved) t))))
)
#+END_SRC

** Straight package manager

*Psimacs* uses the [[https://github.com/raxod502/straight.el][Straight]] package manager. Note that this package manager depends on [[https://git-scm.com/][Git]].

*** Bootstrap straight.el

To get running at all, the [[https://github.com/raxod502/straight.el][Straight]] package must be installed itself. The code is taken from the [[https://github.com/raxod502/straight.el][Straight]]
/Getting Started/ section.

#+BEGIN_SRC emacs-lisp :tangle config/init-package-manager.el :var file-description="Package manager"
;;
;; bootstrap package straight.el
;;
(defvar bootstrap-version)
(let (
        (bootstrap-file (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5)
    )
    (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
                "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
                'silent 'inhibit-cookies
            )
            (goto-char (point-max))
            (eval-print-last-sexp)
        )
    )
    (load bootstrap-file nil 'nomessage)
)
#+END_SRC

*** use-package
Replace =use-package= automatically by =straight-use-package= in our configuration.

[[https://github.com/jwiegley/use-package][use-package]] is a macro that provides convenient syntactic sugar for many common tasks
related to installing and configuring *Emacs* packages. Of course, it does not actually
install the packages, but instead defers to a package manager, like [[https://github.com/raxod502/straight.el][Straight]].

To use use-package, first install it with [[https://github.com/raxod502/straight.el][Straight]]:

#+BEGIN_SRC emacs-lisp :tangle config/init-package-manager.el
;;
;; To use use-package, first install it with straight.el
;;
(straight-use-package 'use-package)
#+END_SRC

Now =use-package= will use [[https://github.com/raxod502/straight.el][Straight]] to automatically install missing packages if you provide =:straight t=.

Customize =straight-use-package-by-default= to make it so that =:straight t= is assumed unless you explicitly
override it with =:straight nil=.

Specifying =:straight t= is unnecessary if you set =straight-use-package-by-default= to a non-nil value.

#+BEGIN_SRC emacs-lisp :tangle config/init-package-manager.el
;;
;; No more ':straight t' necessary anymore
;;
(setq straight-use-package-by-default t)
#+END_SRC

Any code that relates to /[[https://wikemacs.org/wiki/Package.el][package.el]]/ should be removed; for example, references to =package-initialize=,
=package-archives=, and (if you're using =use-package=) =:ensure= or =use-package-always-ensure=.

While it is technically possible to use both  /[[https://wikemacs.org/wiki/Package.el][package.el]]/ and [[https://github.com/raxod502/straight.el][Straight]] at the same time, there is no real
reason to, and it might result in oddities like packages getting loaded more than once.

Out of the box, you can install any package listed on [[https://melpa.org/#/][MELPA]], [[https://elpa.gnu.org/][GNU ELPA]], or [[https://github.com/emacsmirror][Emacsmirror]], which is to say any
package in existence. (Although  [[https://melpa.org/#/][MELPA]] is used as a package listing, packages are installed by cloning their
[[https://git-scm.com/][Git]] repositories rather than by downloading tarballs like /[[https://wikemacs.org/wiki/Package.el][package.el]]/ does.)

If the package or your configurations aren't being loaded, you probably have something wrong with your
usage of =:init= and =:config=. By default, the behavior of =use-package= is inconsistent:
You must set either =use-package-always-defer= (override with =:demand t=) or =use-package-always-demand=
(override with =:defer t=) to set a default for whether evaluating a =use-package= form will load the
package and your configurations.

If you've set a package to be deferred, you then need to make sure there's a way for it to get loaded when
needed, for example by means of an autoload (either provided by the package, or set up automatically
by =use-package= via =:bind=, or set up manually through =use-package= via =:commands=) or by an explicit
require in one of your custom commands.

If you do want to start optimizing your startup, you will likely end up using just =:hook= for mode triggered
loading and =:defer t= for command triggered loading!

*** Provide the diminish.el package

[[https://github.com/emacsmirror/diminish][Diminish]] implements hiding or abbreviation of the mode line displays (lighters) of minor-modes.


#+BEGIN_SRC emacs-lisp :tangle config/init-package-manager.el
;;
;; Avoid mode line cluttering by using :diminish
;;
(use-package diminish
  :demand t
  :config
        (diminish 'org-indent-mode)
)
#+END_SRC

*** Provide the dim.el package

The [[https://github.com/alezost/dim.el][dim]] package can be used to change the names of major and minor modes that are displayed in the mode-line.

#+BEGIN_SRC emacs-lisp :tangle config/init-package-manager.el
;;
;; Allow better names for major and minor modes on the command line.
;;
(use-package dim :demand t)
#+END_SRC

* Basic setup

Some fundamental setting that *Psimacs* uses are collected here.

** Personal information

Personal information settings for *Psimacs*. The /private/ folder content is not part of the public bundle.
Package =private/init-private.el= is loaded if it exists and its settings are applied.


#+BEGIN_SRC emacs-lisp :tangle config/init-basic-private.el :var file-description="Basic private setup"
;;
;; Private directory and file might exists; not mandatory.
;;
(setq user-full-name    "Your Name"
      user-mail-address "Your Email"
      calendar-latitude  0
      calendar-longitude 0
      calendar-location-name "Your city, country"
)

(when (file-directory-p psimacs/config/private-dir)
  (add-to-list 'load-path psimacs/config/private-dir)

  (when (file-exists-p psimacs/config/private-file)
    (require 'init-private)))

(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs configured for user %s %s in %s" user-full-name user-mail-address calendar-location-name)))
#+END_SRC

** Measuring the startup performance

*** Print the startup time

In order to get expressive timing information about the initialization process, *Psimacs* always prints the
actual startup time into the *Message* buffer.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el :var file-description="Basic system setup"
;;
;; Perfromance measuring at the end of the initialization
;;
(add-hook 'emacs-startup-hook
    (lambda ()
        (message "Emacs loaded in %s with %d garbage collections."
            (format "%.2f seconds"
                (float-time (time-subtract after-init-time before-init-time))
            )
            gcs-done)
    )
)
#+END_SRC

*** Detail startup benchmarking

This is a simple benchmark of calls to *Emacs* /require/ and /load/ functions. It can be used to keep track
of where time is being spent during *Emacs* startup in order to optimize startup times.

Usage: The following commands and functions can be used to govern the benchmarking.


| =benchmark-init/show-durations-tabulated= |
| =benchmark-init/show-durations-tree=      |
|                                           |
| =benchmark-init/activate=                 |
| =benchmark-init/deactivate=               |


Using =:defer N= with an integer is for a rare scenario where you do want the package to always be unconditionally
loaded on startup (and not reactively as the result of a file mode or executed command) and want to kick it out by
a few seconds to technically save some startup time.

I personally don't recommend this since it's not going to speed up your actual "time to full functionality," but
instead just improve a narrowly defined metric of "startup time."

References to benchmarking:
- [[https://www.emacswiki.org/emacs/BenchmarkInit][BenchmarkInit]]
- [[https://github.com/dholm/benchmark-init-el][benchmark-init]]
- [[https://www.emacswiki.org/emacs/OptimizingEmacsStartup][OptimizingEmacsStartup]]
- [[https://www.emacswiki.org/emacs/ProfileDotEmacs][Profile Dot Emacs]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; Detail benchmarking: see benchmark-init/show-durations-tabulated and benchmark-init/show-durations-tree
;; Activated on default.
;;
(use-package benchmark-init
    :demand t
    :init
        (benchmark-init/activate)
)
#+END_SRC

** Avoid truncated output, i.e annoying ellipsis

The options eval-expression-print-level and eval-expression-print-length control the maximum depth
and length of lists to print in the result of the evaluation commands before abbreviating them. They
are described in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Eval.html][Lisp evaluation]] section of the *Emacs* manual.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; Avoid truncated output, i.e annoying ellipsis
;;
(setq eval-expression-print-level nil)
(setq eval-expression-print-length nil)
#+END_SRC

** Performance optimizations

Try to optimize *Psimacs* as much as possible (as far as my *Emacs* knowledge goes).

*** Garbage collect when out of focus

Let *Psimacs* perform garbage collection if it does not have the focus.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-optimizations.el :var file-description="Basic performance optimizations"
;;
;; Garbage collect when out of focus
;;
(add-hook 'emacs-startup-hook
    (lambda ()
      (if (boundp 'after-focus-change-function)
          (add-function :after after-focus-change-function
                        (lambda ()
                          (unless (frame-focus-state)
                            (garbage-collect))))
        (add-hook 'after-focus-change-function 'garbage-collect))))
#+END_SRC

*** Avoid garbage collection in minibuffer

Avoid performing garbage collection operations when using the minibuffer. We do this by enlarging the
garbage collection threshold.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-optimizations.el
;;
;; Avoid garbage collection in minibuffer
;;
(defun psimacs/config/gc-minibuffer-setup-hook ()
  "Enlarge the current gc-cons-threshold"
  (setq gc-cons-threshold (* psimacs/config/gc-cons-threshold 2)))

(defun psimacs/config/gc-minibuffer-exit-hook ()
  "Garbage collect and reset the gc-cons-threshold"
  (garbage-collect)
  (setq gc-cons-threshold psimacs/config/gc-cons-threshold))

(add-hook 'minibuffer-setup-hook #'psimacs/config/gc-minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook  #'psimacs/config/gc-minibuffer-exit-hook)
#+END_SRC

*** Use the garbage collector magic hack

Enforce a sneaky Garbage Collection strategy to minimize GC interference with the activity.

During normal use a high GC threshold is set. When idling GC is immediately triggered and a low threshold is set.
The [[https://github.com/emacsmirror/gcmh][GCMH (the Garbage Collector Magic Hack)]] package provides us with this functionality.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-optimizations.el
;;
;; Use the garbage collector magic hack
;;
(use-package gcmh
    :diminish gcmh-mode
    :init (gcmh-mode 1)
)
#+END_SRC

*** Process data exchange
Basically, this is an optimization with respect to the data exchange between [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]] servers and
its clients.

[[https://emacs-lsp.github.io/lsp-mode/][lsp-mode: Language Server Protocol Support for Emacs]], aims to provide IDE-like experience by providing optional
integration with the most popular *Emacs* packages like [[https://company-mode.github.io/][company]], [[https://www.flycheck.org/en/latest/][flycheck]] and [[https://github.com/bbatsov/projectile][projectile]].

Increase the amount of data which *Emacs* reads from the process. Again the *Emacs* default is too low 4K
considering that the some of the language server responses are in 800k - 3M range.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-optimizations.el
;;
;; lsp-mode optimization
;;
(setq read-process-output-max 4MB)
#+END_SRC

** Keyboard configuration

References about keyboard configuration and key bindings:
- [[https://karl-voit.at/2018/07/08/emacs-key-bindings/][UOMF: My Emacs Key Binding Strategy]]
- [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][Mastering Key Bindings in Emacs]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Windows-Keyboard.html][Keyboard Usage on MS-Windows]]
- [[http://www.wilfred.me.uk/blog/2018/01/06/the-emacs-guru-guide-to-key-bindings/][The Emacs Guru Guide to Key Bindings]]
- [[http://ergoemacs.org/emacs/emacs_hyper_super_keys.html][Emacs: How to Bind Super Hyper Keys]]
- [[https://www.emacswiki.org/emacs/AltGrKey][AltGrKey]]

*** How to type C-@ on a German Windows keyboard

Emacs keys may seem to be /hidden/ because MS Windows implements =AltGr= as =Alt + Left Control=.
Therefore key bindings such as =C-@= are quite difficult to type.

Solutions:
- Using the right control key

#+BEGIN_QUOTE
  The trick is that you must type =AltGr= as the first key, and =Ctrl= must be the right control key,
  not the left one.
#+END_QUOTE

- Using =C-SPC= instead of =C-@=

#+BEGIN_QUOTE
  It turns out that instead of =C-@= you can always type =C-SPC=.
#+END_QUOTE

*** Base configuration of the keyboard

Basically, we stay with the default *Emacs* keyboard configuration. We swallow the =<lwindow>=, =<rwindow>= and =<apps>=
keys as far as possible. We will use them for =super= and =<hyper>= prefix keys for *Psimacs* own key bindings.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; Base keyboard configuration: Stay with the defaults, but swallow <lwindow>, <rwindow> ans <apps> if possible
;;
(setq w32-alt-is-meta t                ;; The meta modifier is interpreted as the Alt key (the default)
      ;;w32-register-hot-key [M-tab]   ;; Allow a key sequence M-tab to be seen by Emacs instead of being grabbed by
                                       ;; Windows. Normal Windows handling is probably the better option :-)



      ;;w32-capslock-is-shiftlock t    ;; The CapsLock key will affect non-character keys as well, as if you pressed
                                       ;; the Shift key while typing the non-character key.

      w32-enable-caps-lock t           ;; If the variable w32-enable-caps-lock is set to a nil value, the CapsLock
                                       ;; key produces the symbol capslock instead of the shifted version of they keys.
                                       ;; The default value is t.

      w32-enable-num-lock t            ;; If w32-enable-num-lock is nil, the NumLock key will produce the symbol
                                       ;; kp-numlock. The default is t, which causes NumLock to work as expected:
                                       ;; toggle the meaning of the keys on the numeric keypad.

      32-recognize-altgr t             ;; Whether the <AltGr> key (if it exists on your keyboard), or its equivalent,
                                       ;; the combination of the right <Alt> and left <Ctrl> keys pressed together,
                                       ;; is recognized as the <AltGr> key. The default is t, which means these keys
                                       ;; produce AltGr; setting it to nil causes <AltGr> or the equivalent key
                                       ;; combination to be interpreted as the combination of <Ctrl> and <Meta>
                                       ;; modifiers.

      w32-pass-lwindow-to-system nil   ;; the <lwindow> key is silently swallowed by Emacs, and not passed to Windows.
      w32-pass-rwindow-to-system nil   ;; the <rwindow> key is silently swallowed by Emacs, and not passed to Windows.
      w32-pass-apps-to-system nil      ;; the    <apps> key is silently swallowed by Emacs, and not passed to Windows.

      w32-scroll-lock-modifier nil     ;; Do not specialize the scroll lock key
)
#+END_SRC

*** Hyper and Super prefix keys

*Psimacs* uses the =super= and =hyper= key prefixes for all of its own key bindings.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; <lwindow>, <rwindow> and <apps>
;;
(setq  w32-lwindow-modifier 'super
       w32-rwindow-modifier 'super
       w32-apps-modifier    'hyper
)

(w32-register-hot-key [s-])
(w32-register-hot-key [H-])

;; (defun psimacs/config/prefix-key-test-super ()
;;   (interactive)
;;   (message "Super key pressed"))

;; (defun psimacs/config/prefix-key-test-hyper ()
;;   (interactive)
;;   (message "Hyper key pressed"))

;; (global-set-key [(super t)] 'psimacs/config/prefix-key-test-super)
;; (global-set-key [(hyper t)] 'psimacs/config/prefix-key-test-hyper)
#+END_SRC

*** Strip unused key bindings

Free up unused and unnecessary keybindings.

There are a great many keybindings that are actively hostile, in that they are bound to useless or obsolete functions
that are really easy to trigger accidentally.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; Strip unused key bindings
;;
(unbind-key "C-z")              ;; suspend-frame
(unbind-key "M-o")              ;; facemenu-mode
(unbind-key "<mouse-2>")        ;; pasting with mouse-wheel click
(unbind-key "<C-wheel-down>")   ;; text scale adjust
#+END_SRC

*** Personal key prefix map

For *Psimacs* own functions and goodies separate key prefix maps are defined:

| Prefix command                       | Description               |
|--------------------------------------+---------------------------|
| =H-h= and =s-h=                      | Hydras                    |
| =H-c= and =s-c=                      | common user commands      |
| =H-x= and =s-x=                      | common execution commands |
| =H-m=, =H-,= =s-m=, =s-,= and =<f9>= | special user commands     |
|--------------------------------------+---------------------------|


#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; Separate prefix key maps for Psimacs own bindings
;;
(define-prefix-command 'psimacs/config/global-key-map/common)     ;; used for common user commands
(define-prefix-command 'psimacs/config/global-key-map/special)    ;; special user commands
(define-prefix-command 'psimacs/config/global-key-map/execute)    ;; used for common execution commands
(define-prefix-command 'psimacs/config/global-key-map/hydra)      ;; uses solely for accessing hydras

(global-set-key (kbd "H-h" ) psimacs/config/global-key-map/hydra)
(global-set-key (kbd "H-c" ) psimacs/config/global-key-map/common)
(global-set-key (kbd "H-x" ) psimacs/config/global-key-map/execute)

(global-set-key (kbd "s-h" ) psimacs/config/global-key-map/hydra)
(global-set-key (kbd "s-c" ) psimacs/config/global-key-map/common)
(global-set-key (kbd "s-x" ) psimacs/config/global-key-map/execute)

(global-set-key (kbd "<f9>") psimacs/config/global-key-map/special)
(global-set-key (kbd "H-m" ) psimacs/config/global-key-map/special)
(global-set-key (kbd "H-," ) psimacs/config/global-key-map/special)
(global-set-key (kbd "s-m" ) psimacs/config/global-key-map/special)
(global-set-key (kbd "s-," ) psimacs/config/global-key-map/special)

(defun psimacs/config/greetings ()
   (interactive)
   (message "hello from psimacs"))

(define-key psimacs/config/global-key-map/common  (kbd "C-t C-t") 'psimacs/config/greetings)
(define-key psimacs/config/global-key-map/special (kbd "C-t C-t") 'psimacs/config/greetings)

;;
;; Provide the Windows OS default frame closing expirience
;;
(defun psimacs/config/delete-frame ()
    "This function deletes the selected frame. If the last frame it leaves emacs."
    (interactive)
    (if (= (length (frame-list)) 1)
        (save-buffers-kill-terminal)
      (delete-frame)
      )
)

(global-set-key (kbd "M-<f4>" ) 'psimacs/config/delete-frame)
#+END_SRC

** User Site-Lisp load path
We have one directory that we use for user elips code. We add this path the the list of load pathes.

Our own /Emacs/ code resides in one directory that must be added to the load path.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; Our site-lisp directory.
;;
(add-to-list 'load-path psimacs/config/site-lisp-dir)
#+END_SRC

** Automatically compile outdated elips files

The [[https://github.com/emacscollective/auto-compile][Auto-compile]] package provides two minor modes which automatically recompile Emacs Lisp source files.
Together these modes guarantee that Emacs never loads outdated byte code files.

Further reading: [[https://www.emacswiki.org/emacs/AutoRecompile][EmacsWiki: Auto Recompile]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; Automatically recomile elips files
;;
(use-package auto-compile
    :demand t
    :config
        (auto-compile-on-load-mode)  ;; Force recompilation on load of .el file.
        (auto-compile-on-save-mode)  ;; Force recompilation on save of .el file.

        (setq load-prefer-newer t    ;; Avoid byte-compiled files that are older than their respective source files.
              auto-compile-display-buffer nil  ;; Avoid annoying pop up of the Compile-Log buffer when a file is saved
              auto-compile-mode-line-counter t ;; Only show the number of compile warnings for the current file in
                                               ;; the mode-line.

              auto-compile-source-recreate-deletes-dest t  ;; Whether to delete leftover byte code file when creating
                                                           ;; source file.
        )

        ;(setq auto-compile-toggle-deletes-nonlib-dest   t)      ; Whether to delete non-library byte code files when toggling compilation.
        ;(setq auto-compile-update-autoloads             t)      ; Whether to update autoloads after compiling.
        ;(add-hook 'auto-compile-inhibit-compile-hook
        ;          'auto-compile-inhibit-compile-detached-git-head)
)
#+END_SRC

** Info system

Add the [[https://www.msys2.org/][MSYS2]] info pathes to the *Emacs Info* search path.

*Attention:* In case that the =info/dir= files in the [[https://www.msys2.org/][MSYS2]] installation are missing or not up to date run in a [[https://www.msys2.org/][MSYS2]]
bash shell the following code each =info= directory. This will create or update the =info/dir= files.

#+BEGIN_SRC
cd c:/utils/msys64/usr/share/info
for i in *info*; do install-info.exe $i dir; done

cd c:/utils/msys64/mingw64/share/info
for i in *info*; do install-info.exe $i dir; done
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; Extend Emacs info system with the msys2 info material
;;
(add-to-list 'Info-additional-directory-list psimacs/config/msys-info-dir)
(add-to-list 'Info-additional-directory-list psimacs/config/mingw-info-dir)
#+END_SRC

** Printing on Windows

*Psimacs* currently supports two sets of commands for printing on windows:

| Key binding     | Command                          | Description                                     |
|-----------------+----------------------------------+-------------------------------------------------|
| =H-m C-p C-p b= | =M-x print-buffer=               | B/W print hardcopy of buffer on default printer |
| =H-m C-p C-p r= | =M-x print-region=               | B/W print hardcopy of region on default printer |
|-----------------+----------------------------------+-------------------------------------------------|
| =H-m C-p C-q p= | =M-x ps-print-buffer=            | B/W print buffer via Ghostscript                |
| =H-m C-p C-q r= | =M-x ps-print-region=            | B/W print region via Ghostscript                |
|-----------------+----------------------------------+-------------------------------------------------|
| =H-m C-p C-f p= | =M-x ps-print-buffer-with-faces= | Color print buffer via Ghostscript              |
| =H-m C-p C-f r= | =M-x ps-print-region-with-faces= | Color print region via Ghosts                   |
|-----------------+----------------------------------+-------------------------------------------------|

For the =print-*= commands to function, I was forced to do some extra work outside of *Emacs*. The reason is that
I am using a network printer with its own IP address. IMHO, *Emacs* does not handle this situation out of the box.
At first I followed the [[https://www.emacswiki.org/emacs/MsWindowsNetworkPrinter][Ms Windows Network Printer]] instructions. That basically work for me. However, I discovered
that I just need to share my printer and then call the following =shell-command= to create a virtual printer
port /LPT3/:

#+BEGIN_SRC
net use LPT3: "\\127.0.0.1\EPSON ET-4750 Series"
#+END_SRC

I simply integrated this call into my =psimacs.cmd= command and set the =printer-name= to the virtual printer
port /LPT3/ in the configuration.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; Support for the printer-* commands
;;
(setq printer-name "LPT3:")
#+END_SRC

For the =ps-print-*= commands to work I needed to install [[https://www.ghostscript.com/][Ghostscript]]. First I tried the [[https://www.msys2.org/][MSYS2]] which I was not able
to get working correctly. Therefore I tried the 64 Bit [[https://www.ghostscript.com/download/gsdnld.html][Windows installer]] from the [[https://www.ghostscript.com/][Ghostscript]] download site. This worked
perfectly. In order to set this up I followed the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Windows-Printing.html][Printing and MS-Windows]] *Emacs* manual instructions.


#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; Support for the ps-print-* commands
;;
(setq ps-printer-name t)
(setq ps-lpr-command psimacs/config/ghostscript-exe)
(setq ps-lpr-switches '("-q" "-dNOPAUSE" "-dBATCH" "-sDEVICE=mswinpr2" "-sPAPERSIZE=a4"))

;;
;; Some extra printing customizations that I currently not use
;;
;; (setq ps-top-margin 0
;;       ps-left-margin 0
;;       ps-right-margin 0
;;       ps-inter-column 0
;;       ps-landscape-mode t
;;       ps-number-of-columns 2
;;       ps-paper-type 'a4
;;       ps-font-size 8.25
;;       ps-line-number t
;;       ps-line-number-font-size 10
;;       ps-line-number-step 10
;;       ps-print-color-p 'black-white
;;       ps-print-header nil
;; )

#+END_SRC

** Basic ELisp Libraries

Load some basic packages that provide support for more elegant [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]] programming.

The following links might be useful for diving deeper into [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]]:
- [[https://www.gnu.org/software/emacs/manual/eintr.html][Introduction to Programming in Emacs Lisp]]
- [[https://www.emacswiki.org/emacs/ElispCookbook][EmacsWiki: Lisp Cookbook]]
- [[http://wikemacs.org/wiki/Emacs_Lisp_Cookbook][WikEmacs: Emacs Lisp Cookbook]]
- [[https://github.com/chrisdone/elisp-guide][Emacs Lisp Guide]]
- [[https://www.masteringemacs.org/article/evaluating-elisp-emacs][Evaluating Elisp in Emacs]]
- [[http://ergoemacs.org/emacs/elisp.html][Practical Emacs Lisp]]

*** Dash Library

[[https://github.com/magnars/dash.el][Dash]] is a modern list api for *Emacs*. No 'cl required.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; Some basic library packages that mordenize elisp programming
;;
(use-package dash
    :config
        (dash-enable-font-lock)
)

(use-package dash-functional)
#+END_SRC

*** String manipulation with the s.el library

[[https://github.com/magnars/s.el][s]] is a [[https://github.com/magnars/s.el][string manipulation library]] that provides lots of =s-name= functions for easing string programming tasks.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; A string manipulation library
;;
(use-package s)
#+END_SRC

*** A file system library named f.el

[[https://github.com/rejeep/f.el][f]] is a [[https://github.com/rejeep/f.el][file system library]] that provides lots of =f-name= functions for easing file system programming tasks.
Basically it provides a modern API for working with files and directories in *Emacs*.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; A file system library
;;
(use-package f)
#+END_SRC

*** Alert an alternative notification interface

Just use [[https://github.com/jwiegley/alert][alert]] instead of message to get a stylized customizable notification interface for *Emacs*.

Usage exaples:

| =(alert "This is an alert")=                                    |
| =(alert "This is an alert" :severity 'high)=                    |
| =(alert "This is an alert" :severity 'trivial)=                 |
| =(alert "This is an alert" :title "My Alert")=                  |
| =(alert "This is an alert" :title "My Alert" :category 'debug)= |

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; A enhanced notification interface
;;
(use-package alert
    :commands alert
    :config
        (setq alert-default-style 'message))
#+END_SRC

** Customizations

*Psimacs* uses a special file =custom.el= that it uses for writing customization code.
That should avoid always changing the =init.el= file.

You can always create a /custom-file/ by running command =customize-save-customized=.

References about customization:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][Saving Customizations]]
- [[https://www.emacswiki.org/emacs/CustomizingAndSaving][EmacsWiki: Customizing And Saving]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; Handling of the customization file
;;
(setq custom-file psimacs/config/custom-file)

(if (file-exists-p psimacs/config/custom-file)
    (load custom-file)
)

(add-hook 'kill-emacs-query-functions 'custom-prompt-customize-unsaved-options)
#+END_SRC

** Encoding system

I am in no means an expert in Encoding systems. I have not studied all the variables floating in encoding soup.
Below you find the encoding settings that I have in use. Probably this is to much or even wrong. Sorry, for
that.

See also:
- [[https://www.emacswiki.org/emacs/ChangingEncodings][EmacsWiki: ChangingEncodings]]
- [[https://www.emacswiki.org/emacs/UnicodeEncoding][EmacsWiki: UnicodeEncoding]]
- [[http://ergoemacs.org/emacs/emacs_encoding_decoding_faq.html][Emacs File Encoding FAQ]]
- [[https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs][Working with Coding Systems and Unicode in Emacs]]
- [[http://xahlee.info/comp/unicode_index.html][Unicode Characters]]
- [[https://rufflewind.com/2014-07-20/pasting-unicode-in-emacs-on-windows][Pasting Unicode characters in Emacs (Windows)]]

#+ATTR_HTML: :class styledtable
| Key binding | Command                                 | Description                                                                                                                                                                                                      |
|-------------+-----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|             | =M-x revert-buffer-with-coding-system=  |                                                                                                                                                                                                                  |
|             | =M-x set-buffer-file-coding-system=     |                                                                                                                                                                                                                  |
|             | =M-x describe-coding-system=            | Information about coding system.                                                                                                                                                                                 |
|             | =M-x list-coding-systems=               |                                                                                                                                                                                                                  |
|             | =M-x find-file-literally=               | Open file without any conversion.                                                                                                                                                                                |
| =C-x RET c= | =M-x universal-coding-system-argument== | Ttakes as an argument the coding system you want to use, and a command to execute it with. That makes it possible to open files, shells or run Emacs commands as though you were using a different coding system. |
|-------------+-----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

See also content of variable =buffer-file-coding-system= by use of =C-h v=.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-system.el
;;
;; Ensure that Emacs is totally UTF-8
;;
(set-charset-priority 'unicode)
(set-locale-environment "en_US.UTF-8")
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)         ; configured by prefer-coding-system
(set-keyboard-coding-system 'utf-8)         ; configured by prefer-coding-system
(set-selection-coding-system 'utf-16-le)    ; important on windows os
(set-clipboard-coding-system 'utf-16-le)    ; included by set-selection-coding-system
(set-w32-system-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)      ; How to set a encoding system for saving file
(setq locale-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-language-environment "UTF-8")          ; How to permanently choose a encoding system in emacs for opening and saving
(setq default-process-coding-system '(utf-8-dos . utf-8-dos))
#+END_SRC

** Emacs server

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][Using Emacs as a Server]] describes the details about configuration of an *Emacs server*. *Psimacs* uses a configuration
method that allows multiple different *Emacs's* be run simultaneously. However, only one can drive the *Emacs server*
at a time. *Psimacs* is configured in such a way that is starts the server only if no other *Emacs* instance exists
that does already run the server. /First come first serve/ principle. For that it uses the =EMACS_SERVER_FILE=
environment variable for server detection. If it is actually, the first one it sets the =EMACS_SERVER_FILE= variable
accordingly.

Caveat: This is only Windows OS specific and I do not know how to setup that on other systems.

References:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][Using Emacs as a Server]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/TCP-Emacs-server.html#TCP-Emacs-server][TCP Emacs server]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/emacsclient-Options.html][emacsclient Options]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-server.el :var file-description="Emacs server setup"
;;
;; Initialize Emacs server if it is not already running.
;;
(defvar psimacs/config/found-server-file
   (getenv "EMACS_SERVER_FILE")
   "The active server file.")

(when (and psimacs/system/is-gui-flag
           psimacs/system/is-windows-nt-flag
           (or (not psimacs/config/found-server-file)
               (equal psimacs/config/found-server-file psimacs/config/server-file)))
   (start-process "SETX" nil "setx" "EMACS_SERVER_FILE" psimacs/config/server-file)
   (add-hook 'kill-emacs-hook
             (lambda ()
               (call-process "reg.exe" nil nil nil "delete" "HKCU\\Environment" "/v" "EMACS_SERVER_FILE" "/f")))

    (unless (file-directory-p psimacs/config/server-dir)
        (make-directory psimacs/config/server-dir t)
    )

    (require 'server)

    (unless (server-running-p)
        (defun server-ensure-safe-dir (dir) "Noop" t)   ; Suppress error "directory
                                                        ; ~/.emacs.d/server is unsafe"
                                                        ; on windows.

        (message "server-start")
        (server-start)
    )
)
#+END_SRC

** Look and feel

Explicit user interface setup, like look and feel or theming.

*** Basic user interface

No distracting splash screen or annoying startup message :-)

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el :var file-description="Basic user interface setup"
;;
;; No startup cludder
;;
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t
      inhibit-splash-screen t
)

;;
;; Get Emacs a bit more consistent, replace all yes or no questions with simple y or n.
;;
(fset 'yes-or-no-p 'y-or-n-p)

#+END_SRC

*** Bells

Avoid annoying bells as described in [[https://www.emacswiki.org/emacs/AlarmBell][Alarm Bell]] on [[https://www.emacswiki.org][EmacsWiki]].
The follwoing settings determines that *Emacs* should flash the mode line to represent a bell.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Flash mode line instead of bell
;;
(defun psimacs/config/flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))

(setq visible-bell nil
      ring-bell-function 'psimacs/config/flash-mode-line)
#+END_SRC

*** Cursor

The cursor representation is described in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Cursor-Display.html][Displaying the Cursor]] and [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Cursor-Parameters.html][Cursor Parameters]]. *Psimacs* just show a box
cursor in the active window only.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Cursor visible only in the active window
;;
(setq-default cursor-in-non-selected-windows nil)
;;(setq-default cursor-type 'bar)

(setq blink-cursor-delay    10
      blink-cursor-interval 0.7)
#+END_SRC

*** Highlight current line

As described in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Cursor-Display.html#index-highlight-current-line][Displaying the Cursor]] and in [[https://www.emacswiki.org/emacs/HighlightCurrentLine][WikiEmacs: HighlightCurrentLine]] *Psimacs* makes the cursor even more
visible, by the use of hl-line-mode, a minor mode that highlights the line containing point.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Highlight line containing point
;;
(use-package hl-line
    :straight nil
    :hook ((text-mode prog-mode) . hl-line-mode)
    ;;:config
        ;; (global-hl-line-mode 1)
        ;; (set-face-background 'hl-line "seashell2")

        ;; (set-face-attribute 'hl-line nil :background "gray21")
        ;; (set-face-background 'hl-line "seashell2")
)
#+END_SRC

*** Beacon, highlight line on scrolling

Whenever the window scrolls up or down a light will blink on your cursor with the help of the [[https://github.com/Malabarba/beacon][beacon]] package.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Highlight on scrolling
;;
(use-package beacon
    :diminish beacon-mode
    :config
        (beacon-mode 1)
        (setq beacon-push-mark 35)
        (setq beacon-color "#666600")
)
#+END_SRC

*** Yanking position

Do not yank at the mouse position but at cursor position.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Do not yank at the mouse position but at cursor position.
;;
(setq mouse-yank-at-point t)
#+END_SRC

*** Mode line: time and column information

Show time in the mode line with the usual dispay time format as is customary in my part of the world.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Show time on mode line
;;
(setq display-time-24hr-format t)
(display-time-mode 1)
#+END_SRC

Beside the row I'd also like to see the column in the mode line.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Show rows and columns in the mode line.
;;
(column-number-mode)
#+END_SRC

*** Scrolling

Do not centre the point before scrolling. Scroll one line at a time (less "jumpy" than defaults).
Scrolling is explained in [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#Textual-Scrolling][Textual Scrolling]] in the *Emacs* manual.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Scrolling: Adjust to your likening...
;;
(setq scroll-step 1                                ; keyboard scroll: one line at a time
      mouse-wheel-scroll-amount '(1 ((shift) . 1)) ; dito with wheel: one line at a time
      mouse-wheel-progressive-speed nil            ; don't accelerate scrolling
      mouse-wheel-follow-mouse 't                  ; scroll window under mouse
      scroll-conservatively 10000                  ; scroll one line at a time when you move the cursor past the top or bottom
      auto-window-vscroll nil
      scroll-preserve-screen-position nil          ; this is not windows like, i.e. quite foreign
      next-line-add-newlines nil                   ; Don't automatically add new lines when scrolling down at the bottom of a buffer.
)
#+END_SRC

*** Smooth Scrolling

The [[https://github.com/aspiers/smooth-scrolling][smooth-scrolling]] package offers a minor mode which make emacs scroll smoothly. It keeps the point away from
the top and bottom of the current buffer's window in order to keep lines of context around the point visible as
much as possible, whilst minimising the frequency of sudden scroll jumps which are visually confusing.

You can toogle the  [[https://github.com/aspiers/smooth-scrolling][smooth-scrolling-mode]] with the following command.

| Key binding     | Command                     | Description                                  |
|-----------------+-----------------------------+----------------------------------------------|
| =H-m C-w C-s s= | =M-x smooth-scrolling-mode= | Enable or disable the smooth scrolling mode. |
|-----------------+-----------------------------+----------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; ...or additionally/alternatively use the smooth-scrolling package
;;
(use-package smooth-scrolling
    :demand t
    :config (smooth-scrolling-mode 1)
    :bind (
         :map psimacs/config/global-key-map/special
              ("C-w C-s s" . smooth-scrolling-mode)
        )
)
#+END_SRC

*** Confirmation request

Avoid annoying confirmations in various situations as described in [[https://www.masteringemacs.org/article/disabling-prompts-emacs][Disabling Prompts in Emacs]].

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Avoid annyoing conformations
;;
(setq confirm-nonexistent-file-or-buffer nil   ;; annoying confirmation if a file or buffer does not exist
                                               ;; when you use C-x C-f or C-x b
      ido-create-new-buffer 'always            ;; disabling the prompt that asks you if you want to create a
                                               ;; new buffer if you enter a non-existent buffer in C-x b
      kill-buffer-query-functions (remq        ;; do not asks if you want to kill a buffer with a live process attached
                                   'process-kill-buffer-query-function
                                   kill-buffer-query-functions)
)
#+END_SRC

Allow some things that emacs would otherwise liked to have confirmed.

E.g. be able to do =C-x C-u= / =C-x C-l= to upper/lowercase regions without confirmation.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Allow some things that emacs would otherwise liked to have confirmed.
;;
(put 'eval-expression  'disabled nil)
(put 'downcase-region  'disabled nil)
(put 'upcase-region    'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column  'disabled nil)
#+END_SRC

*** Titlebar

Have the titlebar contain name and file name of the current buffer.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; frame titelbar contains the name of the current buffer and the file name.
;;
(setq frame-title-format '("%b" (buffer-file-name ": %f")))
#+END_SRC

*** Automatically revert buffer

Whenever a file that *Psimacs* is editing has been changed by another program the user normally have to execute
the command =revert-buffer= to load the new content of the file into *Psimacs*. We will

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Avoid handy revert-buffer calls
;;
(global-auto-revert-mode t)
#+END_SRC

*** Delete seleted text when typing.

This is standard behavior on the Windows Operating System platform.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Delete selected text when typing
;;
(delete-selection-mode 1)
#+END_SRC

*** Line numbering

*Psimacs* uses line numbering on default in many major modes.

See also: [[https://www.emacswiki.org/emacs/LineNumbers][EmacsWike: LineNumbers]] and the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Display-Custom.html][Emacs manual]].

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Enable line numbers for almost all major-modes
;;
(require 'display-line-numbers)

(defcustom psimacs/config/display-line-numbers-exempt-modes
    '(  vterm-mode
        eshell-mode
        shell-mode
        term-mode
        ansi-term-mode
        org-mode
        neotree-mode
        dashboard-mode
    )
    "Major modes on which to disable the linum mode, exempts them from global requirement"
    :group 'display-line-numbers
    :type 'list
    :version "green"
)

;;
;; To disable this in certain major modes, redefine display-line-numbers--turn-on
;;
(defun display-line-numbers--turn-on ()
    "Turn on line numbers but excempting certain majore modes defined in
'psimacs/config/display-line-numbers-exempt-modes'"
    (if (and
            (not (member major-mode psimacs/config/display-line-numbers-exempt-modes))
                (not (minibufferp))
        )

        (display-line-numbers-mode)
    )
)

(global-display-line-numbers-mode 1)
#+END_SRC

*** Spaces between sentences

In my world, sentences end with a single space. This makes sentence navigation commands
work for me.

See also: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Sentences.html][Emacs Manual: Sentence]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Sentence end with one space
;;
(setq sentence-end-double-space nil)
#+END_SRC

*** Fringes

On graphical displays, each Emacs window normally has narrow fringes (gutters/margins)
on the left and right edges. The fringes are used to display symbols that provide
information about the text in the window.

See the following references for fringes:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fringes.html][Window Fringes]]
- [[https://emacsredux.com/blog/2015/01/18/customizing-the-fringes/][Customizing the Fringes]]
- [[https://www.flycheck.org/en/latest/user/error-reports.html][FlyCheck -> See errors in buffers -> Fringe and margin icons]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Usually, fringes defaults to 8 pixel width
;;
(set-fringe-mode 8)
;;(defun my-tone-down-fringes ()
;;  (set-face-attribute 'fringe nil
;;                      :foreground (face-foreground 'default)
;;                      :background (face-background 'default)))
#+END_SRC

*** Scratch buffer

Show an empty scratch buffer on startup.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Show an empty scratch buffer on startup.
;;
(setq initial-scratch-message "")
#+END_SRC

*** Undo in commands :noexport:

Fix undo in commands affecting the mark.

See also:
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Mark.html][The Mark -> mark-even-if-inactive]]
- Read also [[https://spwhitton.name/blog/entry/transient-mark-mode/][GNU Emacs' Transient Mark mode]]

Remark: I have canceled the following setting. I am unsure about the right setting.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
(setq mark-even-if-inactive nil)
#+END_SRC

*** No dialog boxes

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dialog-Boxes.html][Using Dialog Boxes]] describes the variable =use-dialog-box=. If this is set to =nil= not dialog boxes appear for
/yes-or-no/ questions beside others special questions. This way *Emacs* always performs /yes-or-no/ prompts using
the echo area and keyboard input.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Prompts should go in the minibuffer, not in a GUI.
;;
(setq use-dialog-box nil)
#+END_SRC

*** Mark and Pop

Handy way of getting back to previous places.

Immediately after you type =C-u C-SPC=, you can type =C-SPC= instead of =C-u C-SPC= to
cycle through the mark ring.

From the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mark-Ring.html][Emacs Manual: The Mark Ring]]:

#+BEGIN_QUOTE
Each buffer remembers previous locations of the mark, in the mark ring. Commands that set the mark also push the old
mark onto this ring. One of the uses of the mark ring is to remember spots that you may want to go back to.
#+END_QUOTE

#+ATTR_HTML: :class styledtable
| Key binding                     | Command                                    | Description                                                                                                                                                                                                                                             |
|---------------------------------+--------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-SPC=, =C-@=                  | =M-x cua-set-mark=, =M-x set-mark-command= | Set mark at where point is, clear mark, or jump to mark. With no prefix argument, clear mark if already set. Otherwise, mark, and push old mark position on local mark ring; also push mark on global mark ring if last mark was set in another buffer. |
| =C-u C-SPC=, =C-u C-@=, =C-x p= | =M-x pop-to-mark-command=                  | Jump to mark, and pop a new position for mark off the local mark ring (this does not affect the global mark ring).                                                                                                                                      |
| =C-x C-@=                       | =M-x pop-global-mark=                      | Jump to a mark off the global mark ring.                                                                                                                                                                                                                |
| =C-SPC C-SPC=                   |                                            | Jumps to the next position off the local (or global) mark ring. Set the mark, pushing it onto the mark ring, without activating it.                                                                                                                     |
| =C-u C-u C-SPC=                 |                                            | Unconditionally set mark.                                                                                                                                                                                                                               |
|---------------------------------+--------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

If you set =set-mark-command-repeat-pop= to non-nil, then immediately after you type =C-u C-SPC=, you can type =C-SPC=
instead of =C-u C-SPC= to cycle through the mark ring.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Handy way of getting back to previous places.
;;
(setq set-mark-command-repeat-pop t)
(bind-key "C-x p" 'pop-to-mark-command)
#+END_SRC

*** Indentation and Tab stops

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Indent-Convenience.html][Electric Indent mode]] is a global minor mode that automatically indents the line after every =RET= you type.
This mode is enabled by default, which we turn off.

Use instead:

| Key binding | Command                  | Description         |
|-------------+--------------------------+---------------------|
| =C-j=       | =M-x newline-and-indent= | Indent current line |

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Matter of taste, do not automatically indent on RET
;;
(setq electric-indent-mode nil)
#+END_SRC

Do not use tab characters -> fill spaces instead.
Insert a real tab character with =C-q TAB=.

| Key binding | Command             | Description                                                                                     |
|-------------+---------------------+-------------------------------------------------------------------------------------------------|
| =C-q TAB=   | =M-x quoted-insert= | Read next input character (TAB) and insert it. This is useful for inserting control characters. |
|             |                     |                                                                                                 |

See also:
- [[https://www.emacswiki.org/emacs/IndentationBasics][Indentation Basics]]
- [[https://www.emacswiki.org/emacs/NoTabs][No Tabs]]
- [[https://www.emacswiki.org/emacs/TabsAreEvil][Tabs Are Evil]]
- [[http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html][Tabs, Space, Indentation Setup]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Always insert space characters instead of tab characters.
;;
(setq-default indent-tabs-mode nil)
#+END_SRC

Use of standard tab width, that is the length of the =TAB= character.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; We interpret a TAB character with a length of 8 space characters
;;
(setq-default tab-width 8)
#+END_SRC

Tab stop positions: =M-i=, i.e. =tab-to-tab-stop= moves to the next position.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; This variable defines the tab stop columns used by tab-to-tab-stop.
;; A list of increasing integers, which need not be evenly spaced.
;; The list is implicitly extended to infinity through repetition of the interval
;; between the last and penultimate elements
;;
(setq tab-stop-list '(4 8))
#+END_SRC

*** Lock file

Disable creation of lock-files named =.#<filename>=. I do not have problem with simultaneous file editing.

See also:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interlocking.html][Protection against Simultaneous Editing]]
- [[https://www.emacswiki.org/emacs/LockFiles][LockFiles]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; No lock-files named .#<filename>
;;
(setq-default create-lockfiles nil)
#+END_SRC

*** Newline at end

Last line automatically appending with newline as described in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Customize-Save.html][Customizing Saving of Files]] of the manual.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Yes, always add a final newline
;;
(setq require-final-newline t)
#+END_SRC

*** Case sensitive searches only on capitalization

By default, we want case sensitivity in searches and replaces to be smart.
That is, if your search doesn't use capital letters, *Emacs* will /ignore case/.
If it does, *Emacs* will be /case-sensitive/.

See also:
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Searching-and-Case.html][Searching and Case]]
- [[https://www.emacswiki.org/emacs/CaseFoldSearch][Case Fold Search]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Case sensitive searches only on capitalization
;;
(setq-default case-fold-search t)
#+END_SRC

*** Calendar

Weeks starts on Mondays.

References:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Calendar_002fDiary.html#Calendar_002fDiary][The Calendar and the Diary]]
- [[https://www.emacswiki.org/emacs/CalendarLocalization][Calendar Localization]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Weeks starts on Mondays
;;
(setq calendar-week-start-day t)
#+END_SRC

*** Unicode fonts

The package [[https://github.com/rolandwalker/unicode-fonts][unicode-fonts]] provides font mappings in the Unicode 8.0 standard.

#+BEGIN_QUOTE
Emacs maintains font mappings on a per-glyph basis, meaning that multiple fonts are used at the
same time (transparently) to display any character for which you have a font. Furthermore, Emacs
does this out of the box.

However, font mappings via fontsets are a bit difficult to configure. In addition, the default
setup does not always pick the most legible fonts. As the manual warns, the choice of font actually
displayed for a non-ASCII character is "somewhat random".

The Unicode standard provides a way to organize font mappings: it divides character ranges into
logical groups called "blocks". This library configures Emacs in a Unicode-friendly way by providing mappings from
each Unicode block to a font with good coverage and makes the settings available via the customization
interface.

This library provides font mappings for 233 of the 255 blocks in the Unicode 8.0 standard which are
public and have displayable characters. It assumes that 6 Latin blocks are covered by the default font.
16/255 blocks are not mapped to any known font.
#+END_QUOTE

- [[https://dejavu-fonts.github.io/Download.html][DejaVu Sans and DejaVu Sans Mono]]
- [[http://www.quivira-font.com/downloads.php][Quivira]]
- [[https://dn-works.com/wp-content/uploads/2020/UFAS-Fonts/][Symbola]]
- [[http://www.google.com/get/noto/][Google Noto Sans and Noto Sans Symbols]]
- [[https://sourcefoundry.org/hack/][Hack Font]]

Testing:

| Key binding | Command                                                               | Description                           |
|-------------+-----------------------------------------------------------------------+---------------------------------------|
| =C-h h=     | =M-x view-hello-file=                                                 |                                       |
|             | =M-x list-charset-chars RET unicode-bmp RET=                          | search for eg 210x                    |
|             | =M-x list-charset-chars RET unicode-smp RET=                          | if your backend supports astral chars |
|             | =M-x unicode-fonts-debug-insert-block RET Mathematical_Operators RET= |                                       |
|-------------+-----------------------------------------------------------------------+---------------------------------------|

About font setting in *Emacs*:
- [[http://ergoemacs.org/emacs/emacs_list_and_set_font.html][Emacs: Font Setup]]

About Unicode:
- [[https://home.unicode.org/][Unicode home]]
- [[http://www.unicode.org/charts/][Unicode Code Charts]]
- [[https://site.icu-project.org/home][ICU - International Components for Unicode]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Setup the unicode font system
;;
(use-package unicode-fonts
    :init
       (unicode-fonts-setup)

       (when (member "DejaVu Sans Mono" (font-family-list))
         ;;(set-face-attribute 'default nil :font "DejaVu Sans Mono-8.0")
         ;;(set-face-attribute 'default nil :font "DejaVu Sans Mono-9.0")
         ;;(set-face-attribute 'default nil :font "DejaVu Sans Mono-10.0")
         ;;(set-face-attribute 'default nil :font "DejaVu Sans Mono-11.0")
         ;;(set-face-attribute 'default nil :font "DejaVu Sans Mono-12.0")
         ;;(set-face-attribute 'default nil :font "DejaVu Sans Mono-14.0")
         ;;(set-face-attribute 'default nil :font "DejaVu Sans Mono-16.0")
         ;;(set-face-attribute 'default nil :font "DejaVu Sans Mono-18.0")
         ;;(set-face-attribute 'default nil :font "DejaVu Sans Mono-20.0")
         )

       (when (member "Hack" (font-family-list))
         (set-face-attribute 'default nil :font "Hack-10.0")
         )

       ;;(set-fontset-font "fontset-default" 'unicode "DejaVu Sans Mono" nil 'append)
       ;;(set-fontset-font "fontset-default" 'unicode "DejaVu Sans Mono Oblique" nil 'append)
       ;;(set-fontset-font "fontset-default" 'unicode "DejaVu Sans Mono Bold" nil 'append)
       ;;(set-fontset-font "fontset-default" 'unicode "DejaVu Sans Mono Bold Oblique" nil 'append)
       ;;(set-fontset-font "fontset-default" 'unicode "Consolas" nil)
       ;;(set-fontset-font "fontset-default" 'unicode "Symbola" nil 'append)
)
#+END_SRC

In order to circumvent performance problems with movement in unicode buffers, the following setting is used.
Inhibiting compacting font caches comes at the expense of more memory usage.

References:
- [[https://github.com/purcell/emacs.d/issues/273][moving around between cjk characters is very slow #273]]
- [[https://emacs.stackexchange.com/questions/33510/unicode-txt-slowness][unicode.txt slowness]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Performance optimization
;;
(setq inhibit-compacting-font-caches t)
#+END_SRC

*** Fontification

The build-in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html][font-lock]] minor mode allows major modes to fontify their buffers.

Font Lock mode is enabled by default in major modes that support it.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Build-in font-lock mode. Enabled by default in major modes that support it.
;;
(use-package font-lock
    :straight nil
)
#+END_SRC

**** Font-lock+ :noexport:

[[https://github.com/emacsmirror/font-lock-plus/blob/master/font-lock%2B.el][font-lock+]] provides enhancements to standard library [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html][font-lock]] minor mode.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
(use-package font-lock+)
#+END_SRC

*** All the icons

The package [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] is a utility for using and formatting various Icon fonts within Emacs. Icon Fonts allow
you to propertize and format icons the same way you would normal text. This enables things such as better scaling
of and anti-aliasing of the icons.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Formatting various Icon fonts within Emacs
;;
(use-package all-the-icons)
#+END_SRC

The package [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] adds dired support to [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Add dired support to all-the-icons
;;
(use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode)
)
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle no config/init-basic-ui.el
;;
;; Testing of all the icons
;;
;(all-the-icons-insert-icons-for 'alltheicon)
;(all-the-icons-insert-icons-for 'octicon 10)
;(all-the-icons-insert-icons-for 'faicon 1 0.5)
#+END_SRC

*** Color Identifier Mode

[[https://github.com/ankurdave/color-identifiers-mode][Color Identifier]] is a minor mode for Emacs that highlights each source code
identifier uniquely based on its name.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-ui.el
;;
;; Highlights each source code identifier uniquely based on its name.
;;
(use-package color-identifiers-mode
    :demand t
    :diminish
    :hook (after-init . global-color-identifiers-mode)
)
#+END_SRC

** Themes

Generally, there are light and dark colored themes. Some functionality
like the Rainbow paranthesis colors must be adapted to these themes
accordingly. Currently, I do not know of a method to automatically determine
the kind of loaded theme. Therefore I keep it simple and just define a
variable for that information.

=M-x counsel-load-theme= does work perfectly well.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el :var file-description="Basic themes configuration"
(defvar psimacs/config/default-theme "alect-dark"
    "The theme that should be loaded on default.
afternoon, alect-light, alect-light-alt, alect-dark, alect-dark-alt, alect-black, alect-black-alt,
ample, ample-zen, dracula, flatland, gandalf, github-modern, gruvbox-dark-medium, gruvbox-dark-soft,
gruvbox-dark-hard, gruvbox-light-medium, gruvbox-light-soft, gruvbox-light-hard, pastelmac, moe-dark,
moe-light, monokai, monokai-pro, sanityinc-tomorrow-day, sanityinc-tomorrow-night, sanityinc-tomorrow-blue,
sanityinc-tomorrow-bright, sanityinc-tomorrow-eighties, toxi, zenburn
")

(defvar psimacs/config/theme-is-light-colored t
    "Should be set to true if current theme is light")

(defvar psimacs/config/after-load-theme-hook nil
  "Hook run after a color theme is loaded using `load-theme'.")
(defadvice load-theme (after run-after-load-theme-hook activate)
  "Run `psimacs/config/after-load-theme-hook'."
  (run-hooks 'psimacs/config/after-load-theme-hook))
#+END_SRC

A couple of good looking themes are assembled in the configuration. Currently the
/alect-dark/ theme is active on start up. The theme can be changed at runtime with
the commands =load-theme=, =enable-theme= and =disable-theme=.

The following themes are my favorites currently:

| Theme                         |
|-------------------------------|
| =alect-dark=                  |
| =alect-light-alt=             |
| =sanityinc-tomorrow-eighties= |
| =moe-dark=                    |
|-------------------------------|

For the time being, the =alect-dark= is active in my configuration.

See also:
[[https://emacsthemes.com/][Emacs Themes]], [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html][Custom Themes Manual]], [[https://www.emacswiki.org/emacs/CustomThemes][EmacsWiki: Custom Themes]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el
(use-package afternoon-theme
    :config
        (when (equal psimacs/config/default-theme "afternoon")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'afternoon t)
            (message "loaded theme afternoon")
        )
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el
(use-package alect-themes
    :config
        (when (equal psimacs/config/default-theme "alect-light")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'alect-light t)
            (message "loaded theme alect-light")
        )

        (when (equal psimacs/config/default-theme "alect-light-alt")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'alect-light-alt t)
            (message "loaded theme alect-light-alt")
        )

        (when (equal psimacs/config/default-theme "alect-dark")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'alect-dark t)
            (message "loaded theme alect-dark")
        )

        (when (equal psimacs/config/default-theme "alect-dark-alt")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'alect-dark-alt t)
            (message "loaded theme alect-dark-alt")
        )

        (when (equal psimacs/config/default-theme "alect-black")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'alect-black t)
            (message "loaded theme alect-black")
        )

        (when (equal psimacs/config/default-theme "alect-black-alt")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'alect-black-alt t)
            (message "loaded theme alect-black-alt")
        )
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el
(use-package ample-theme
    :config
        (when (equal psimacs/config/default-theme "ample")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'ample t)
            (message "loaded theme ample")
        )
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el
(use-package ample-zen-theme
    :config
        (when (equal psimacs/config/default-theme "ample-zen")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'ample-zen t)
            (message "loaded theme ample-zen")
        )
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el
(use-package color-theme-sanityinc-tomorrow
    :config
        (when (equal psimacs/config/default-theme "sanityinc-tomorrow-day")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'sanityinc-tomorrow-day t)
            (message "loaded theme sanityinc-tomorrow-day")
        )
        (when (equal psimacs/config/default-theme "sanityinc-tomorrow-night")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'sanityinc-tomorrow-night t)
            (message "loaded theme sanityinc-tomorrow-night")
        )

        (when (equal psimacs/config/default-theme "sanityinc-tomorrow-blue")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'sanityinc-tomorrow-blue t)
            (message "loaded theme sanityinc-tomorrow-blue")
        )

        (when (equal psimacs/config/default-theme "sanityinc-tomorrow-bright")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'sanityinc-tomorrow-bright t)
            (message "loaded theme sanityinc-tomorrow-bright")
        )

        (when (equal psimacs/config/default-theme "sanityinc-tomorrow-eighties")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'sanityinc-tomorrow-eighties t)
            (message "loaded theme sanityinc-tomorrow-eighties")
        )
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el
(use-package dracula-theme
    :config
        (when (equal psimacs/config/default-theme "dracula")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'dracula t)
            (message "loaded theme dracula")
        )
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el
(use-package flatland-theme
    :config
        (when (equal psimacs/config/default-theme "flatland")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'flatland t)
            (message "loaded theme flatland")
        )

        (custom-theme-set-faces 'flatland
            '(show-paren-match    ((t (:background "dark gray" :foreground "black"  :weight bold))))
            '(show-paren-mismatch ((t (:background "firebrick" :foreground "orange" :weight bold)))))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el
(use-package gandalf-theme
    :config
        (when (equal psimacs/config/default-theme "gandalf")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'gandalf t)
            (message "loaded theme gandalf")
        )
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el
(use-package github-modern-theme
    :config
        (when (equal psimacs/config/default-theme "github-modern")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'github-modern t)
            (message "loaded theme github-modern")
        )
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el
(use-package gruvbox-theme
    :config
        (when (equal psimacs/config/default-theme "gruvbox-dark-medium")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'gruvbox-dark-medium t)
            (message "loaded theme gruvbox-dark-medium")
        )

        (when (equal psimacs/config/default-theme "gruvbox-dark-soft")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'gruvbox-dark-soft t)
            (message "loaded theme gruvbox-dark-soft")
        )

        (when (equal psimacs/config/default-theme "gruvbox-dark-hard")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'gruvbox-dark-hard t)
            (message "loaded theme gruvbox-dark-hard")
        )

        (when (equal psimacs/config/default-theme "gruvbox-light-medium")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'gruvbox-light-medium t)
            (message "loaded theme gruvbox-light-medium")
        )

        (when (equal psimacs/config/default-theme "gruvbox-light-soft")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'gruvbox-light-soft t)
            (message "loaded theme gruvbox-light-soft")
        )

        (when (equal psimacs/config/default-theme "gruvbox-light-hard")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'gruvbox-light-hard t)
            (message "loaded theme gruvbox-light-hard")
        )
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el
(use-package pastelmac-theme
    :config
        (when (equal psimacs/config/default-theme "pastelmac")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'pastelmac t)
            (message "loaded theme pastelmac")
        )
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el
(use-package moe-theme
    :config
        (require 'moe-theme)

        (when (equal psimacs/config/default-theme "moe-dark")
            (setq psimacs/config/theme-is-light-colored nil)
            (moe-dark)
            (moe-theme-set-color 'orange)
            (message "loaded theme moe-dark")
        )

        (when (equal psimacs/config/default-theme "moe-light")
            (setq psimacs/config/theme-is-light-colored t)
            (moe-light)
            (moe-theme-set-color 'blue)
            (message "loaded theme moe-light")
        )
        ;(powerline-moe-theme)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el
(use-package monokai-theme
    :config
        (when (equal psimacs/config/default-theme "monokai")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'monokai t)
            (message "loaded theme monokai")
        )
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el
(use-package monokai-pro-theme
    :config
        (when (equal psimacs/config/default-theme "monokai-pro")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'monokai-pro t)
            (message "loaded theme monokai-pro")
        )
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el
(use-package toxi-theme
    :config
        (when (equal psimacs/config/default-theme "toxi")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'toxi t)
            (message "loaded theme toxi")
        )
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-themes.el
(use-package zenburn-theme
    :config
        (when (equal psimacs/config/default-theme "zenburn")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'zenburn t)
            (message "loaded theme zenburn")
        )
)
#+END_SRC

** Prettify

*Emacs* ships with a minor mode called [[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/prog-mode.el][prettify-symbols-mode]]. Its purpose is to replace the standard text
representation of various identifiers/symbols with a (arguably) more aesthetically pleasing representation
(often a single unicode character would replace several ascii characters).

A classic example would be lambda from various Lisp dialects that many people prefer to replace with the
greek letter λ (small lambda).

Another package is [[https://github.com/pretty-mode/pretty-mode][pretty-mode]] which provides basically the same features. This package additionally provides
category groups for activation of different usage patterns.

Unfortunately problems arise when mixing  [[https://github.com/pretty-mode/pretty-mode][pretty-mode]] with [[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/prog-mode.el][prettify-symbols-mode]] so that it is not possible
to facilitate the  [[https://github.com/pretty-mode/pretty-mode][pretty-mode]] categories.

Therefore *Psimacs* defines all symbols from scratch with [[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/prog-mode.el][prettify-symbols-mode]].

*** Pretty-Mode :noexport:

[[https://github.com/pretty-mode/pretty-mode][Pretty-mode]] redisplays parts of the Emacs buffer as pretty Unicode symbols.

This section is only added for documentation purpose, but it should not be used.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-prettify.el :var file-description="Basic prettification of Emacs"
;;
;; pretty mode is not used by Psimacs. Only to see how it is to be used.
;;
(use-package pretty-mode
    :config
        ;(global-pretty-mode t)
        (add-hook 'python-mode-hook 'turn-on-pretty-mode)
        (add-hook 'inferior-python-mode-hook 'turn-on-pretty-mode)

        (add-hook 'lisp-mode-hook 'turn-on-pretty-mode)
        (add-hook 'emacs-lisp-mode-hook 'turn-on-pretty-mode)
        (add-hook 'c-mode-hook 'turn-on-pretty-mode)
        (add-hook 'c++-mode-hook 'turn-on-pretty-mode)
        ;(add-hook 'haskell-mode-hook 'turn-on-pretty-mode)

        (pretty-activate-groups
            '(
                :greek
                :logic-nary
                :sets-operations-nary
                :arrows-tails
                :arrows-tails-double
                :arithmetic-triple
                :arithmetic-nary
                :sub-and-superscripts
                :parentheses
                :types
            )
        )
)
#+END_SRC

*** Prettify-Symbols-Mode

When [[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/prog-mode.el][prettify-symbols-mode]] and  [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html][font-locking]] are enabled, symbols are prettified. *Psimacs* defines list of symbols
for various programming modes.

Currently the greek characters are supported for all programming modes and additionally some extra symbols are
defined for the Python programming mode.

See also: [[http://ergoemacs.org/emacs/emacs_pretty_lambda.html][About prettify-symbols-mode]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-prettify.el :var file-description="Basic prettification of Emacs"
;;
;; Prettify the greek letters in any programming mode and additionaly beautify the Pythons programming mode
;;
(use-package prog-mode ; Contains pretty-symbols-mode
    :straight nil
    :config
        (setq prettify-symbols-unprettify-at-point 'right-edge)
        (global-prettify-symbols-mode t)
        (add-hook
            'prog-mode-hook
                (lambda ()
                    (mapc (lambda (pair) (push pair prettify-symbols-alist))
                       '(
                        ;; Greek Letters
                            ("ALPHA"  . ?𝜜)
                            ("Alpha"  . ?𝛢)
                            ("alpha"  . ?𝜶)
                            ("ALPHA1" . ?𝜜)
                            ("ALPHA2" . ?𝞐)
                            ("ALPHA3" . ?𝚨)
                            ("ALPHA4" . ?𝝖)
                            ("Alpha1" . ?𝛢)
                            ("Alpha2" . ?Α)
                            ("alpha1" . ?𝜶)
                            ("alpha2" . ?𝞪)
                            ("alpha3" . ?𝛂)
                            ("alpha4" . ?𝝰)
                            ("alpha5" . ?𝛼)
                            ("alpha6" . ?α)

                            ("BETA"  . ?𝜝)
                            ("Beta"  . ?𝛣)
                            ("beta"  . ?𝜷)
                            ("BETA1" . ?𝜝)
                            ("BETA2" . ?𝞑)
                            ("BETA3" . ?𝚩)
                            ("BETA4" . ?𝝗)
                            ("Beta1" . ?𝛣)
                            ("Beta2" . ?Β)
                            ("beta1" . ?𝜷)
                            ("beta2" . ?𝞫)
                            ("beta3" . ?𝛃)
                            ("beta4" . ?𝝱)
                            ("beta5" . ?𝛽)
                            ("beta6" . ?β)

                            ("GAMMA"  . ?𝜞)
                            ("Gamma"  . ?𝛤)
                            ("gamma"  . ?𝜸)
                            ("GAMMA1" . ?𝜞)
                            ("GAMMA2" . ?𝞒)
                            ("GAMMA3" . ?𝚪)
                            ("GAMMA4" . ?𝝘)
                            ("Gamma1" . ?𝛤)
                            ("Gamma2" . ?Γ)
                            ("gamma1" . ?𝜸)
                            ("gamma2" . ?𝞬)
                            ("gamma3" . ?𝛄)
                            ("gamma4" . ?𝝲)
                            ("gamma5" . ?𝛾)
                            ("gamma6" . ?γ)

                            ("DELTA"  . ?𝜟)
                            ("Delta"  . ?𝛥)
                            ("delta"  . ?𝜹)
                            ("DELTA1" . ?𝜟)
                            ("DELTA2" . ?𝞓)
                            ("DELTA3" . ?𝚫)
                            ("DELTA4" . ?𝝙)
                            ("Delta1" . ?𝛥)
                            ("Delta2" . ?Δ)
                            ("delta1" . ?𝜹)
                            ("delta2" . ?𝞭)
                            ("delta3" . ?𝛅)
                            ("delta4" . ?𝝳)
                            ("delta5" . ?𝛿)
                            ("delta6" . ?δ)

                            ("EPSILON"  . ?𝜠)
                            ("Epsilon"  . ?𝛦)
                            ("epsilon"  . ?𝜺)
                            ("EPSILON1" . ?𝜠)
                            ("EPSILON2" . ?𝞔)
                            ("EPSILON3" . ?𝚬)
                            ("EPSILON4" . ?𝝚)
                            ("Epsilon1" . ?𝛦)
                            ("Epsilon2" . ?Ε)
                            ("epsilon1" . ?𝜺)
                            ("epsilon2" . ?𝞮)
                            ("epsilon3" . ?𝛆)
                            ("epsilon4" . ?𝝴)
                            ("epsilon5" . ?𝜀)
                            ("epsilon6" . ?ε)

                            ("ZETA"  . ?𝜡)
                            ("Zeta"  . ?𝛧)
                            ("zeta"  . ?𝜻)
                            ("ZETA1" . ?𝜡)
                            ("ZETA2" . ?𝞕)
                            ("ZETA3" . ?𝚭)
                            ("ZETA4" . ?𝝛)
                            ("Zeta1" . ?𝛧)
                            ("Zeta2" . ?Ζ)
                            ("zeta1" . ?𝜻)
                            ("zeta2" . ?𝞯)
                            ("zeta3" . ?𝛇)
                            ("zeta4" . ?𝝵)
                            ("zeta5" . ?𝜁)
                            ("zeta6" . ?ζ)

                            ("ETA"  . ?𝜢)
                            ("Eta"  . ?𝛨)
                            ("eta"  . ?𝜼)
                            ("ETA1" . ?𝜢)
                            ("ETA2" . ?𝞖)
                            ("ETA3" . ?𝚮)
                            ("ETA4" . ?𝝜)
                            ("Eta1" . ?𝛨)
                            ("Eta2" . ?Η)
                            ("eta1" . ?𝜼)
                            ("eta2" . ?𝞰)
                            ("eta3" . ?𝛈)
                            ("eta4" . ?𝝶)
                            ("eta5" . ?𝜂)
                            ("eta6" . ?η)

                            ("THETA"  . ?𝜣)
                            ("Theta"  . ?𝛩)
                            ("theta"  . ?𝝑)
                            ("THETA1" . ?𝜣)
                            ("THETA2" . ?𝞗)
                            ("THETA3" . ?𝚯)
                            ("THETA4" . ?𝝝)
                            ("Theta1" . ?𝛩)
                            ("Theta2" . ?Θ)
                            ("theta1" . ?𝜽)
                            ("theta2" . ?𝟅)
                            ("theta3" . ?𝞱)
                            ("theta4" . ?𝛝)
                            ("theta5" . ?𝛉)
                            ("theta6" . ?𝞋)
                            ("theta7" . ?𝝷)
                            ("theta8" . ?𝜗)
                            ("theta9" . ?𝜃)
                            ("theta0" . ?θ)

                            ("IOTA"  . ?𝜤)
                            ("Iota"  . ?𝛪)
                            ("iota"  . ?𝜾)
                            ("IOTA1" . ?𝜤)
                            ("IOTA2" . ?𝞘)
                            ("IOTA3" . ?𝚰)
                            ("IOTA4" . ?𝝞)
                            ("Iota1" . ?𝛪)
                            ("Iota2" . ?Ι)
                            ("iota1" . ?𝜾)
                            ("iota2" . ?𝞲)
                            ("iota3" . ?𝛊)
                            ("iota4" . ?𝝸)
                            ("iota5" . ?𝜄)
                            ("iota6" . ?ι)

                            ("KAPPA"  . ?𝜥)
                            ("Kappa"  . ?𝛫)
                            ("kappa"  . ?𝜿)
                            ("KAPPA1" . ?𝜥)
                            ("KAPPA2" . ?𝞙)
                            ("KAPPA3" . ?𝚱)
                            ("KAPPA4" . ?𝝟)
                            ("Kappa1" . ?𝛫)
                            ("Kappa2" . ?Κ)
                            ("kappa1" . ?𝝒)
                            ("kappa2" . ?𝞳)
                            ("kappa3" . ?𝟆)
                            ("kappa4" . ?𝛋)
                            ("kappa5" . ?𝛞)
                            ("kappa6" . ?𝝹)
                            ("kappa7" . ?𝞌)
                            ("kappa8" . ?𝜅)
                            ("kappa9" . ?𝜘)
                            ("kappa0" . ?κ)

                            ("LAMBDA"  . ?𝜦)
                            ("Lambda"  . ?𝛬)
                            ("lambda"  . ?𝝀)
                            ("LAMBDA1" . ?𝜦)
                            ("LAMBDA2" . ?𝞚)
                            ("LAMBDA3" . ?𝚲)
                            ("LAMBDA4" . ?𝝠)
                            ("Lambda1" . ?𝛬)
                            ("Lambda2" . ?Λ)
                            ("lambda1" . ?𝝀)
                            ("lambda2" . ?𝞴)
                            ("lambda3" . ?𝛌)
                            ("lambda4" . ?𝝺)
                            ("lambda5" . ?𝜆)
                            ("lambda6" . ?λ)

                            ("MU"  . ?𝜧)
                            ("Mu"  . ?𝛭)
                            ("mu"  . ?𝝁)
                            ("MU1" . ?𝜧)
                            ("MU2" . ?𝞛)
                            ("MU3" . ?𝚳)
                            ("MU4" . ?𝝡)
                            ("Mu1" . ?𝛭)
                            ("Mu2" . ?Μ)
                            ("mu1" . ?𝝁)
                            ("mu2" . ?𝞵)
                            ("mu3" . ?𝛍)
                            ("mu4" . ?𝝻)
                            ("mu5" . ?𝜇)
                            ("mu6" . ?μ)

                            ("NU"  . ?𝜨)
                            ("Nu"  . ?𝛮)
                            ("nu"  . ?𝝂)
                            ("NU1" . ?𝜨)
                            ("NU2" . ?𝞜)
                            ("NU3" . ?𝚴)
                            ("NU4" . ?𝝢)
                            ("Nu1" . ?𝛮)
                            ("Nu2" . ?Ν)
                            ("nu1" . ?𝝂)
                            ("nu2" . ?𝞶)
                            ("nu3" . ?𝛎)
                            ("nu4" . ?𝝼)
                            ("nu5" . ?𝜈)
                            ("nu6" . ?ν)

                            ("XI"  . ?𝜩)
                            ("Xi"  . ?𝛯)
                            ("xi"  . ?𝝃)
                            ("XI1" . ?𝜩)
                            ("XI2" . ?𝞝)
                            ("XI3" . ?𝚵)
                            ("XI4" . ?𝝣)
                            ("Xi1" . ?𝛯)
                            ("Xi2" . ?Ξ)
                            ("xi1" . ?𝝃)
                            ("xi2" . ?𝞷)
                            ("xi3" . ?𝛏)
                            ("xi4" . ?𝝽)
                            ("xi5" . ?𝜉)
                            ("xi6" . ?ξ)

                            ("OMICRON"  . ?𝜪)
                            ("Omicron"  . ?𝛰)
                            ("omicron"  . ?𝝄)
                            ("OMICRON1" . ?𝜪)
                            ("OMICRON2" . ?𝞞)
                            ("OMICRON3" . ?𝚶)
                            ("OMICRON4" . ?𝝤)
                            ("Omicron1" . ?𝛰)
                            ("Omicron2" . ?Ο)
                            ("omicron1" . ?𝝄)
                            ("omicron2" . ?𝞸)
                            ("omicron3" . ?𝛐)
                            ("omicron4" . ?𝝾)
                            ("omicron5" . ?𝜊)
                            ("omicron6" . ?ο)

                            ("PI"  . ?𝜫)
                            ("Pi"  . ?𝛱)
                            ("pi"  . ?𝝅)
                            ("PI1" . ?𝜫)
                            ("PI2" . ?𝞟)
                            ("PI3" . ?𝚷)
                            ("PI4" . ?𝝥)
                            ("Pi1" . ?𝛱)
                            ("Pi2" . ?Π)
                            ("pi1" . ?𝝅)
                            ("pi2" . ?𝞹)
                            ("pi3" . ?𝛑)
                            ("pi4" . ?𝝿)
                            ("pi5" . ?𝜋)
                            ("pi6" . ?π)

                            ("RHO"  . ?𝜬)
                            ("Rho"  . ?𝛲)
                            ("rho"  . ?𝝔)
                            ("RHO1" . ?𝜬)
                            ("RHO2" . ?𝞠)
                            ("RHO3" . ?𝚸)
                            ("RHO4" . ?𝝦)
                            ("Rho1" . ?𝛲)
                            ("Rho2" . ?Ρ)
                            ("rho1" . ?𝝆)
                            ("rho2" . ?𝟈)
                            ("rho3" . ?𝞺)
                            ("rho4" . ?𝛠)
                            ("rho5" . ?𝛒)
                            ("rho6" . ?𝞎)
                            ("rho7" . ?𝞀)
                            ("rho8" . ?𝜚)
                            ("rho9" . ?𝜌)
                            ("rho0" . ?ρ)

                            ("SIGMA"  . ?𝜮)
                            ("Sigma"  . ?𝛴)
                            ("sigma"  . ?𝝈)
                            ("SIGMA1" . ?𝜮)
                            ("SIGMA2" . ?𝞢)
                            ("SIGMA3" . ?𝚺)
                            ("SIGMA4" . ?𝝨)
                            ("Sigma1" . ?𝛴)
                            ("Sigma2" . ?Σ)
                            ("sigma1" . ?𝝈)
                            ("sigma2" . ?𝞼)
                            ("sigma3" . ?𝛔)
                            ("sigma4" . ?𝞂)
                            ("sigma5" . ?𝜎)
                            ("sigma6" . ?σ)

                            ("TAU"  . ?𝜯)
                            ("Tau"  . ?𝛵)
                            ("tau"  . ?𝝉)
                            ("TAU1" . ?𝜯)
                            ("TAU2" . ?𝞣)
                            ("TAU3" . ?𝚻)
                            ("TAU4" . ?𝝩)
                            ("Tau1" . ?𝛵)
                            ("Tau2" . ?Τ)
                            ("tau1" . ?𝝉)
                            ("tau2" . ?𝞽)
                            ("tau3" . ?𝛕)
                            ("tau4" . ?𝞃)
                            ("tau5" . ?𝜏)
                            ("tau6" . ?τ)

                            ("UPSILON"  . ?𝜰)
                            ("Upsilon"  . ?𝛶)
                            ("upsilon"  . ?𝝊)
                            ("UPSILON1" . ?𝜰)
                            ("UPSILON2" . ?𝞤)
                            ("UPSILON3" . ?𝚼)
                            ("UPSILON4" . ?𝝪)
                            ("Upsilon1" . ?𝛶)
                            ("Upsilon2" . ?Υ)
                            ("upsilon1" . ?𝝊)
                            ("upsilon2" . ?𝞾)
                            ("upsilon3" . ?𝛖)
                            ("upsilon4" . ?𝞄)
                            ("upsilon5" . ?𝜐)
                            ("upsilon6" . ?υ)

                            ("PHI"  . ?𝜱)
                            ("Phi"  . ?𝛷)
                            ("phi"  . ?𝝋)
                            ("PHI1" . ?𝜱)
                            ("PHI2" . ?𝞥)
                            ("PHI3" . ?𝚽)
                            ("PHI4" . ?𝝫)
                            ("Phi1" . ?𝛷)
                            ("Phi2" . ?Φ)
                            ("phi1" . ?𝝋)
                            ("phi2" . ?𝞿)
                            ("phi3" . ?𝛗)
                            ("phi4" . ?𝞅)
                            ("phi5" . ?𝜑)
                            ("phi6" . ?φ)

                            ("CHI"  . ?𝜲)
                            ("Chi"  . ?𝛸)
                            ("chi"  . ?𝝌)
                            ("CHI1" . ?𝜲)
                            ("CHI2" . ?𝞦)
                            ("CHI3" . ?𝚾)
                            ("CHI4" . ?𝝬)
                            ("Chi1" . ?𝛸)
                            ("Chi2" . ?Χ)
                            ("chi1" . ?𝝌)
                            ("chi2" . ?𝟀)
                            ("chi3" . ?𝛘)
                            ("chi4" . ?𝞆)
                            ("chi5" . ?𝜒)
                            ("chi6" . ?χ)

                            ("PSI"  . ?𝜳)
                            ("Psi"  . ?𝛹)
                            ("psi"  . ?𝝍)
                            ("PSI1" . ?𝜳)
                            ("PSI2" . ?𝞧)
                            ("PSI3" . ?𝚿)
                            ("PSI4" . ?𝝭)
                            ("Psi1" . ?𝛹)
                            ("Psi2" . ?Ψ)
                            ("psi1" . ?𝝍)
                            ("psi2" . ?𝟁)
                            ("psi3" . ?𝛙)
                            ("psi4" . ?𝞇)
                            ("psi5" . ?𝜓)
                            ("psi6" . ?ψ)

                            ("OMEGA"  . ?𝜴)
                            ("Omega"  . ?𝛺)
                            ("omega"  . ?𝝎)
                            ("OMEGA1" . ?𝜴)
                            ("OMEGA2" . ?𝞨)
                            ("OMEGA3" . ?𝛀)
                            ("OMEGA4" . ?𝝮)
                            ("Omega1" . ?𝛺)
                            ("Omega2" . ?Ω)
                            ("omega1" . ?𝝎)
                            ("omega2" . ?𝟂)
                            ("omega3" . ?𝛚)
                            ("omega4" . ?𝞈)
                            ("omega5" . ?𝜔)
                            ("omega6" . ?ω)

                            ("NABLA"  . ?𝜵)
                            ("Nabla"  . ?𝛻)
                            ("nabla"  . ?𝝏)
                            ("NABLA1" . ?𝜵)
                            ("NABLA2" . ?𝞩)
                            ("NABLA3" . ?𝛁)
                            ("NABLA4" . ?𝝯)
                            ("Nabla1" . ?𝛻)
                            ("nabla1" . ?𝝏)
                            ("nabla2" . ?𝟃)
                            ("nabla3" . ?𝛛)
                            ("nabla4" . ?𝞉)
                            ("nabla5" . ?𝜕)
                        )
                    )
                )
        )

        (add-hook
            'python-mode-hook
                (lambda ()
                    (mapc (lambda (pair) (push pair prettify-symbols-alist))
                       '(       ;; Syntax
                                ("def" .       ?ƒ)
                                ("not" .       ?❗)
                                ("in" .        ?∈)
                                ("not in" .    ?∉)
                                ("return" .    ?⮭)
                                ("yield" .     ?⮩)
                                ("for" .       ?∀)
                                ("any" .       ?⍫)
                                ("all" .       ?⁕)
                                ;; Base Types
                                ("int" .       ?ℤ)
                                ("float" .     ?ℚ)
                                ("str" .       ?𝕊)
                                ("dict" .      ?𝔻)
                                ("list" .      ?𝕃)
                                ("tuple" .     ?𝕋)
                                ("set" .       ?𝕤)
                                ("frozenset" . ?𝔽)
                                ;; special values
                                ("True" .      ?𝕥)
                                ("False" .     ?𝕗)
                                ("None" .      ?⌀)
                                ;; Mypy
                                ("Int" .       ?𝓩)
                                ("Float" .     ?𝓠)
                                ("String" .    ?𝓢)
                                ("Dict" .      ?𝓓)
                                ("List" .      ?𝓛)
                                ("Tuple" .     ?𝓣)
                                ("Set" .       ?𝓈)
                                ("Frozenset" . ?𝓕)
                                ("Iterable" .  ?𝔊)
                                ("Any" .       ?𝓐)
                                ("Union" .     ?𝓤)
                                ;;operators
                                ("and"   . ?∧)
                                ("or"    . ?∨)
                                ("="     . ?≝)
                                ("<="    . ?≤)
                                (">="    . ?≥)
                                ("<<"    . ?≪)
                                (">>"    . ?≫)
                                ("=="    . ?⩵)
                                ("!="    . ?≠)
                                ("sqrt"  . ?√)
                                ("print" . ?𝓟)
                                ("pass"  . ?⟗)
                                ("raise" . ?↯)
                        )
                    )
                )
        )
)
#+END_SRC

*** Emojis in Buffers

[[https://github.com/iqbalansari/emacs-emojify][Emojify]] is an Emacs extension to display emojis.
It can display github style emojis like =:smile:= or plain ascii ones like =:)=. It tries to be
as efficient as possible, while also providing a lot of flexibility.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-prettify.el
(use-package emojify
    :hook (after-init . global-emojify-mode)
)
#+END_SRC

*** Rainbow delimiters

The package [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] highlights delimiters such as parentheses, brackets or braces according to their depth.
Each successive level is highlighted in a different color. This makes it easy to spot
matching delimiters, orient yourself in the code, and tell which statements are at a given depth.

See also:
- [[https://www.emacswiki.org/emacs/RainbowDelimiters][EmacsWiki: Rainbow Delimiters]]
- [[http://ergoemacs.org/misc/emacs_rainbow-delimiters-mode.html][Color Nested Brackets]]

#+ATTR_HTML: :class styledtable
| Key binding         | Command                                                  | Description                                                                |
|---------------------+----------------------------------------------------------+----------------------------------------------------------------------------|
| =H-m C-p C-r C-p=   | =M-x psimacs/pair/rainbow-toogle-sized-delimiters=       | Toogle the size of the rainbow-delimiters.                                 |
| =H-m C-p C-r M-C-p= | =M-x psimacs/pair/rainbow-sized-delimiters=              | All rainbow delimiters have various heights.                               |
| =H-m C-p C-r S-C-p= | =M-x psimacs/pair/rainbow-non-sized-delimiters=          | All rainbow delimiters have the same height. This is the default.          |
|                     | =M-x psimacs/pair/rainbow-toogle-theme-is-light-colored= | Toggle the rainbow delimiters colors with respect to light or dark themes. |
|---------------------+----------------------------------------------------------+----------------------------------------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-rainbow-delimiters.el :var file-description="Basic rainbow delimiters setup"
(defvar psimacs/config/rainbow-toogle-sized-delimiters-flag nil
    "The current rainbow sized delimiters toogle state")

(defun psimacs/pair/rainbow-non-sized-delimiters ()
    "All rainbow delimiters have the same height."
    (interactive "")

    ;;(message "from psimacs/pair/rainbow-non-sized-delimiters")

    (if psimacs/config/theme-is-light-colored
        (progn
            ;(message "theme-is-light-colored")
            (custom-set-faces
                '(rainbow-delimiters-depth-1-face   ((t (:foreground "red"        :height 1.0))))
                '(rainbow-delimiters-depth-2-face   ((t (:foreground "orange"     :height 1.0))))
                '(rainbow-delimiters-depth-3-face   ((t (:foreground "darkblue"   :height 1.0))))
                '(rainbow-delimiters-depth-4-face   ((t (:foreground "green"      :height 1.0))))
                '(rainbow-delimiters-depth-5-face   ((t (:foreground "blue"       :height 1.0))))
                '(rainbow-delimiters-depth-6-face   ((t (:foreground "violet"     :height 1.0))))
                '(rainbow-delimiters-depth-7-face   ((t (:foreground "purple"     :height 1.0))))
                '(rainbow-delimiters-depth-8-face   ((t (:foreground "black"      :height 1.0))))
                '(rainbow-delimiters-unmatched-face ((t (:background "cyan"       :height 1.0)))))
        )
        (progn
            ;(message "theme-is-dark-colored")
            (custom-set-faces
                '(rainbow-delimiters-depth-1-face   ((t (:foreground "red"        :height 1.0))))
                '(rainbow-delimiters-depth-2-face   ((t (:foreground "orange"     :height 1.0))))
                '(rainbow-delimiters-depth-3-face   ((t (:foreground "yellow"     :height 1.0))))
                '(rainbow-delimiters-depth-4-face   ((t (:foreground "green"      :height 1.0))))
                '(rainbow-delimiters-depth-5-face   ((t (:foreground "lightblue"  :height 1.0))))
                '(rainbow-delimiters-depth-6-face   ((t (:foreground "violet"     :height 1.0))))
                '(rainbow-delimiters-depth-7-face   ((t (:foreground "purple"     :height 1.0))))
                '(rainbow-delimiters-depth-8-face   ((t (:foreground "white"      :height 1.0))))
                '(rainbow-delimiters-unmatched-face ((t (:background "cyan"       :height 1.0)))))
        )
    )

    (setq psimacs/config/rainbow-toogle-sized-delimiters-flag t)
)

(defun psimacs/pair/rainbow-sized-delimiters ()
    "All rainbow delimiters have various heights."
    (interactive "")
    (if psimacs/config/theme-is-light-colored
        (custom-set-faces
            '(rainbow-delimiters-depth-1-face   ((t (:foreground "red"        :height 2.0))))
            '(rainbow-delimiters-depth-2-face   ((t (:foreground "orange"     :height 1.8))))
            '(rainbow-delimiters-depth-3-face   ((t (:foreground "darkblue"   :height 1.6))))
            '(rainbow-delimiters-depth-4-face   ((t (:foreground "green"      :height 1.4))))
            '(rainbow-delimiters-depth-5-face   ((t (:foreground "blue"       :height 1.2))))
            '(rainbow-delimiters-depth-6-face   ((t (:foreground "violet"     :height 1.1))))
            '(rainbow-delimiters-depth-7-face   ((t (:foreground "purple"     :height 1.0))))
            '(rainbow-delimiters-depth-8-face   ((t (:foreground "black"      :height 0.9))))
            '(rainbow-delimiters-unmatched-face ((t (:background "cyan"       :height 0.8)))))
        (custom-set-faces
            '(rainbow-delimiters-depth-1-face   ((t (:foreground "red"        :height 2.0))))
            '(rainbow-delimiters-depth-2-face   ((t (:foreground "orange"     :height 1.8))))
            '(rainbow-delimiters-depth-3-face   ((t (:foreground "yellow"     :height 1.6))))
            '(rainbow-delimiters-depth-4-face   ((t (:foreground "green"      :height 1.4))))
            '(rainbow-delimiters-depth-5-face   ((t (:foreground "lightblue"  :height 1.2))))
            '(rainbow-delimiters-depth-6-face   ((t (:foreground "violet"     :height 1.1))))
            '(rainbow-delimiters-depth-7-face   ((t (:foreground "purple"     :height 1.0))))
            '(rainbow-delimiters-depth-8-face   ((t (:foreground "white"      :height 0.9))))
            '(rainbow-delimiters-unmatched-face ((t (:background "cyan"       :height 0.8)))))
    )

    (setq psimacs/config/rainbow-toogle-sized-delimiters-flag nil)
)

(defun psimacs/pair/rainbow-toogle-sized-delimiters ()
    "Toogle the size of the rainbow-delimiters"
    (interactive "")
    (if psimacs/config/rainbow-toogle-sized-delimiters-flag
        (psimacs/pair/rainbow-sized-delimiters)
      (psimacs/pair/rainbow-non-sized-delimiters)
    )
)

(defun psimacs/pair/rainbow-refresh-delimiters-colors ()
    "Refresh the rainbow-delimiters settings."
    (let ((flag psimacs/config/rainbow-toogle-sized-delimiters-flag))
        (if flag
            (psimacs/pair/rainbow-sized-delimiters)
           (psimacs/pair/rainbow-non-sized-delimiters)
        )
        (setq psimacs/config/rainbow-toogle-sized-delimiters-flag flag)
    )
)

(defun psimacs/pair/rainbow-toogle-theme-is-light-colored ()
    "Toggle the rainbow delimiters colors with respect to light or dark themes."
    (interactive "")
    (setq psimacs/config/theme-is-light-colored (not psimacs/config/theme-is-light-colored))
    (psimacs/pair/rainbow-refresh-delimiters-colors)
)

;;
;; The actual package
;;
(use-package rainbow-delimiters
    :diminish
    :demand t
    :hook (
           (prog-mode . rainbow-delimiters-mode)
           (psimacs/config/after-load-theme . psimacs/pair/rainbow-non-sized-delimiters)
           )
    :config
          (psimacs/pair/rainbow-non-sized-delimiters)
    :bind (
            :map psimacs/config/global-key-map/special
                ("C-p C-r   C-p" . psimacs/pair/rainbow-toogle-sized-delimiters)
                ("C-p C-r M-C-p" . psimacs/pair/rainbow-sized-delimiters)
                ("C-p C-r S-C-p" . psimacs/pair/rainbow-non-sized-delimiters)
          )
)
#+END_SRC

** Mode Line

*** Powerline :noexport:

[[https://github.com/milkypostman/powerline][Powerline]] provides a nice mode-line.

Sorry, switched to Doom-Modeline instead.

See also: [[https://www.emacswiki.org/emacs/PowerLine][EmacsWiki: PowerLine]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-mode-line.el :var file-description="Basic Mode-Line setup"
;;
;; Prettify the mode-line
;;
(use-package powerline
    :config
        (powerline-default-theme)
        ;(powerline-center-theme)
        ;(powerline-center-evil-theme)
        ;(powerline-vim-theme)
        ;(powerline-nano-theme)
)
#+END_SRC


*** Doom Modeline

[[https://github.com/seagle0128/doom-modeline][Doom-modeline]] is a fancy and fast mode-line inspired by minimalism design.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-mode-line.el :var file-description="Basic Mode-Line setup"
;;
;; Prettify the mode-line
;;
(use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :config
        ;; How tall the mode-line should be. It's only respected in GUI.
        ;; If the actual char height is larger, it respects the actual height.
        (setq doom-modeline-height 24)
        ;(setq doom-modeline-height 20)
        ;(setq doom-modeline-height 20)

        ;; How wide the mode-line bar should be. It's only respected in GUI.
        (setq doom-modeline-bar-width 3)

        ;; The limit of the window width.
        ;; If `window-width' is smaller than the limit, some information won't be displayed.
        (setq doom-modeline-window-width-limit fill-column)

        ;; How to detect the project root.
        ;; The default priority of detection is `ffip' > `projectile' > `project'.
        ;; nil means to use `default-directory'.
        ;; The project management packages have some issues on detecting project root.
        ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
        ;; to hanle sub-projects.
        ;; You can specify one if you encounter the issue.
        (setq doom-modeline-project-detection 'project)

        ;; Determines the style used by `doom-modeline-buffer-file-name'.
        ;;
        ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
        ;;   auto => emacs/lisp/comint.el (in a project) or comint.el
        ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
        ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
        ;;   truncate-with-project => emacs/l/comint.el
        ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
        ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
        ;;   truncate-all => ~/P/F/e/l/comint.el
        ;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
        ;;   relative-from-project => emacs/lisp/comint.el
        ;;   relative-to-project => lisp/comint.el
        ;;   file-name => comint.el
        ;;   buffer-name => comint.el<2> (uniquify buffer name)
        ;;
        ;; If you are experiencing the laggy issue, especially while editing remote files
        ;; with tramp, please try `file-name' style.
        ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
        (setq doom-modeline-buffer-file-name-style 'auto)

        ;; Whether display icons in the mode-line.
        ;; While using the server mode in GUI, should set the value explicitly.
        (setq doom-modeline-icon (display-graphic-p))

        ;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.
        (setq doom-modeline-major-mode-icon t)

        ;; Whether display the colorful icon for `major-mode'.
        ;; It respects `all-the-icons-color-icons'.
        (setq doom-modeline-major-mode-color-icon t)

        ;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
        (setq doom-modeline-buffer-state-icon t)

        ;; Whether display the modification icon for the buffer.
        ;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
        (setq doom-modeline-buffer-modification-icon t)

        ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
        (setq doom-modeline-unicode-fallback nil)

        ;; Whether display the minor modes in the mode-line.
        (setq doom-modeline-minor-modes t)

        ;; If non-nil, a word count will be added to the selection-info modeline segment.
        (setq doom-modeline-enable-word-count nil)

        ;; Major modes in which to display word count continuously.
        ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
        ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
        ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
        (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

        ;; Whether display the buffer encoding.
        (setq doom-modeline-buffer-encoding t)

        ;; Whether display the indentation information.
        (setq doom-modeline-indent-info nil)

        ;; If non-nil, only display one number for checker information if applicable.
        (setq doom-modeline-checker-simple-format t)

        ;; The maximum number displayed for notifications.
        (setq doom-modeline-number-limit 99)

        ;; The maximum displayed length of the branch name of version control.
        (setq doom-modeline-vcs-max-length 12)

        ;; Whether display the workspace name. Non-nil to display in the mode-line.
        (setq doom-modeline-workspace-name t)

        ;; Whether display the perspective name. Non-nil to display in the mode-line.
        (setq doom-modeline-persp-name t)

        ;; If non nil the default perspective name is displayed in the mode-line.
        (setq doom-modeline-display-default-persp-name nil)

        ;; If non nil the perspective name is displayed alongside a folder icon.
        (setq doom-modeline-persp-icon t)

        ;; Whether display the `lsp' state. Non-nil to display in the mode-line.
        (setq doom-modeline-lsp t)

        ;; Whether display the GitHub notifications. It requires `ghub' package.
        (setq doom-modeline-github nil)

        ;; The interval of checking GitHub.
        (setq doom-modeline-github-interval (* 30 60))

        ;; Whether display the modal state icon.
        ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
        (setq doom-modeline-modal-icon t)

        ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
        (setq doom-modeline-mu4e nil)

        ;; Whether display the gnus notifications.
        (setq doom-modeline-gnus t)

        ;; Wheter gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
        (setq doom-modeline-gnus-timer 2)

        ;; Wheter groups should be excludede when gnus automatically being updated.
        (setq doom-modeline-gnus-excluded-groups '("dummy.group"))

        ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
        (setq doom-modeline-irc t)

        ;; Function to stylize the irc buffer names.
        (setq doom-modeline-irc-stylize 'identity)

        ;; Whether display the environment version.
        (setq doom-modeline-env-version t)
        ;; Or for individual languages
        (setq doom-modeline-env-enable-python t)
        (setq doom-modeline-env-enable-ruby t)
        (setq doom-modeline-env-enable-perl t)
        (setq doom-modeline-env-enable-go t)
        (setq doom-modeline-env-enable-elixir t)
        (setq doom-modeline-env-enable-rust t)

        ;; Change the executables to use for the language version string
        (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
        (setq doom-modeline-env-ruby-executable "ruby")
        (setq doom-modeline-env-perl-executable "perl")
        (setq doom-modeline-env-go-executable "go")
        (setq doom-modeline-env-elixir-executable "iex")
        (setq doom-modeline-env-rust-executable "rustc")

        ;; What to dispaly as the version while a new one is being loaded
        (setq doom-modeline-env-load-string "...")

        ;; Hooks that run before/after the modeline version string is updated
        (setq doom-modeline-before-update-env-hook nil)
        (setq doom-modeline-after-update-env-hook nil)
)
#+END_SRC

*** A minor-mode menu for the mode line

The package [[https://github.com/tarsius/minions][Minion]] implements a menu that lists enabled minor-modes,
as well as commonly but not currently enabled minor-modes. It can be used to toggle local and global
minor-modes, to access mode-specific menus, and to get help about modes.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-mode-line.el
(use-package minions
  :config
    (minions-mode 1)
)
#+END_SRC

** Backups

*Psimacs* does make backups, uses auto saving and provides minibuffer histories.

*** Backups

*Psimacs* uses a central [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup.html#Backup][backup]] directory. I like to have a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup.html#Backup][backup]] on each save and with the correct relative
path below of my central backup directory. Each new backup file is created by appending a '~' character to
the orginal file name. If this file already exists in the backup location then this file is itself renamed
etc. until we can rename our original file.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-backups.el :var file-description="Basic backup system setup"
;;
;; Provide the backup directory
;;
(unless (file-directory-p psimacs/config/backup-dir)
    (make-directory psimacs/config/backup-dir t)
)

;;
;; Handle backup files
;;
(defun psimacs/config/track-backup-files (bckFile &optional counter)
    "Rename or delete backup files.

Backup files are files appended by '~' charactes to the original file name.

If the bckFile already exists, then a new backup file name is generated and
the bckFile is accordingly renamed. If the counter argunment, however, exceeds
the value of the psimacs/config/backup-max-number-files configuration constants,
then the bckFile is removed instead.

This function calls itself recursively on the generated new backup file name
before taken any action. This way all existing backup files for the original
file are properly renamed of deleted."
    (if (file-exists-p bckFile)
        (let (
                (newbckFile (concat bckFile "~"))
            )

            (if (not counter)
                (setq counter 0)
                (setq counter (1+ counter))
            )

            (psimacs/config/track-backup-files newbckFile counter)

            (if (< counter psimacs/config/backup-max-number-files)
                (rename-file bckFile newbckFile)
                (delete-file bckFile)
            )
        )
    )
)

;;
;; Backup files are stored with path information
;;
(defun psimacs/config/backup-file-name (fpath)
    "Return a new file path of a given file path.

If the new path's directories does not exist, create them."
    (let* (
            (backupRootDir psimacs/config/backup-dir)
            (filePath (replace-regexp-in-string "\\(:\\|/cygdrive/\\)" "/" fpath ))
            (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~")))
        )

        (unless (or
                (string-equal (expand-file-name fpath) (expand-file-name psimacs/config/recent-file))
                (string-equal (expand-file-name fpath) (expand-file-name psimacs/config/history-file))
                (string-equal (expand-file-name fpath) (expand-file-name psimacs/config/save-places-file))
                (string-equal (expand-file-name fpath) (expand-file-name psimacs/config/custom-file))
                (string-equal (expand-file-name fpath) (expand-file-name psimacs/config/amx-file))
            )

            (psimacs/config/track-backup-files backupFilePath)
        )

        (mkdir (file-name-directory backupFilePath) t)

        backupFilePath
    )
)

;;
;; Before safe the backup save marker is removed, leading to a new backup.
;;
(defun psimacs/config/force-backup-of-buffer ()
  "Clear backup save marker"
  (setq buffer-backed-up nil))

;;
;; Backup on each save
;;
(add-hook 'before-save-hook
          'psimacs/config/force-backup-of-buffer)

;;
;; Define how to make a backup
;;
(setq make-backup-file-name-function 'psimacs/config/backup-file-name)

;;
;; Backup files can be made by copying the old file or by renaming it
;;
(setq backup-by-copying t)
#+END_SRC

*** Auto-Save

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Save.html#Auto-Save][Autosave]] automatically saves each visited file in a separate file, without altering the file you actually use.
It uses a central [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Save.html#Auto-Save][auto-save]] directory for that.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-auto-save.el :var file-description="Basic auto saving system setup"
;;
;; Setup Psimacs auto-save strategy
;;
(let ((auto-save-dir psimacs/config/auto-save-dir))
    (unless (file-directory-p auto-save-dir)
        (make-directory auto-save-dir t)
    )

    (setq auto-save-default    t) ;; each time you visit a file, auto-saving is turned on
    (setq auto-save-interval 300) ;; specifies how many characters there are between auto-saves
    (setq auto-save-timeout   30) ;; also auto-save after 30 seconds of idleness

    (setq auto-save-list-file-prefix (concat auto-save-dir ".auto-saves-"))
    (setq auto-save-file-name-transforms `((".*" ,auto-save-dir t)))

    (setq-default tramp-auto-save-directory auto-save-dir)
)
#+END_SRC

*** Super-Save

[[https://github.com/bbatsov/super-save][Super-save]] additionally auto-saves your buffers, when certain events happen - e.g. you switch between buffers,
an Emacs frame loses focus, etc. You can think of it as both something that augments and replaces the standard
auto-save-mode.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-auto-save.el
;;
;; And more automatic file saving :-
;;
(use-package super-save
    :diminish super-save-mode
    :config
        (super-save-mode +1)
        (setq super-save-auto-save-when-idle t)
)
#+END_SRC

*** History

Package [[https://www.emacswiki.org/emacs/SaveHist][savehist]] automatically save minibuffer, kill-ring, search-ring and regexp-search-ring histories to a file.
It also deletes duplicates entries.

Package [[https://github.com/emacs-mirror/emacs/blob/master/lisp/savehist.el][savehist.el]] is available on [[https://github.com/emacs-mirror/emacs][emacs-mirror]].

| Key binding   | Command                            | Description                              |
|---------------+------------------------------------+------------------------------------------|
| =H-m C-c C-h= | (find-file-read-only history-file) | Open the history file in read-only mode. |
|---------------+------------------------------------+------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-auto-save.el
;;
;; Automatically save minibuffer, kill-ring, search-ring and regexp-search-ring histories
;;
(defun psimacs/history/visit-history-file ()
  "Open the save history file in buffer in read-only mode."
  (interactive)
  (when (file-exists-p psimacs/config/history-file)
    (find-file-read-only psimacs/config/history-file)))

(use-package savehist
    :straight nil
    :config
        (setq savehist-file psimacs/config/history-file)
        (savehist-mode 1)
        (setq history-length t)
        (setq history-delete-duplicates t)
        (setq savehist-save-minibuffer-history 1)
        (setq savehist-additional-variables
              '(kill-ring
                search-ring
                regexp-search-ring))
    :bind (
           :map psimacs/config/global-key-map/special
              ("C-c C-h" . psimacs/history/visit-history-file)
          )
)
#+END_SRC

*** Recent files

[[https://www.emacswiki.org/emacs/RecentFiles][Recentf-mode]] is a minor mode that builds a list of recently opened files. This list is automatically saved
across sessions on exiting *Emacs* - you can then access this list
through the command =C-x C-r=.

| Key binding | Command                                              | Description                                                  |
|-------------+------------------------------------------------------+--------------------------------------------------------------|
| =H-x r=     | =M-x recentf-open-files=                             | Show a dialog to open a recent file.                         |
| =H-x C-r=   | =M-x recentf-open-more-files=                        | Show a dialog to open a recent file that is not in the menu. |
|-------------+------------------------------------------------------+--------------------------------------------------------------|
| =H-x f=     | =M-x counsel-recentf=                                | Find a file on recent file list.                             |
| =H-x C-f=   | =M-x counsel-buffer-or-recentf=                      | Find a buffer visiting a file or file on recent file list.   |
|-------------+------------------------------------------------------+--------------------------------------------------------------|
| =H-x C c    | =M-x recentf-cleanup=                                | Cleanup the recent file list.                                |
| =H-x C C-c  | =M-x psimacs/config/recentf-cleanup-directory-files= | Remove all files of DIR from recent file list.               |
|-------------+------------------------------------------------------+--------------------------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-auto-save.el
;;
;; Track recently visited files
;;
(use-package recentf
    :diminish recentf-mode
    :init
        (setq recentf-max-menu-items   20
              recentf-max-saved-items 500
              recentf-save-file       psimacs/config/recent-file
              recentf-exclude
                  `(
                    ,(concat "^" (regexp-quote (expand-file-name psimacs/config/session-dir)) ".*$")
                    ,(concat "^" (regexp-quote (expand-file-name psimacs/config/straight-dir)) ".*$")
                    ,(regexp-quote (expand-file-name psimacs/config/custom-file))
                    "^.*/\\.dir-locals.el$"
                    "^.*/\\.projectile$"
                    "^.*\\.elc$"
                    ,(regexp-quote (expand-file-name (concat psimacs/config/agenda-dir "CodingDiary.org")))
                    ,(regexp-quote (expand-file-name (concat psimacs/config/agenda-dir "Diary.org")))
                    ,(regexp-quote (expand-file-name (concat psimacs/config/agenda-dir "Diary.Template")))
                    ,(regexp-quote (expand-file-name (concat psimacs/config/agenda-dir "Journal.org")))
                    ,(regexp-quote (expand-file-name (concat psimacs/config/agenda-dir "TimeLog.org")))
                    ,(concat "^" (regexp-quote (expand-file-name (concat invocation-directory "../"))) ".*$")
                   )
              )

        (recentf-mode t)

        (run-at-time nil (* 5 60) 'recentf-save-list)

    :config
        (defun psimacs/config/recentf-cleanup-directory-files (dir)
          "Remove from recentf all files that belong to DIR directory."
          (interactive (list (read-directory-name "Exclude all paths")))
          (let ( recentf-exclude )
            (setq recentf-exclude (list (concat "^" (regexp-quote (expand-file-name dir)))))
            (recentf-cleanup) ))
    :bind (
           :map psimacs/config/global-key-map/execute
              ("r"     . recentf-open-files)
              ("C-r"   . recentf-open-more-files)
              ("f"     . counsel-recentf)
              ("C-f"   . counsel-buffer-or-recentf)
              ("C c"   . recentf-cleanup)
              ("C C-c" . psimacs/config/recentf-cleanup-directory-files)
        )
)
#+END_SRC

** Handling

This section provides setting and packages that enhance the user experience with *Emacs* considerably.

*** Edit region indirectly in another buffer

The package [[https://github.com/Fanael/edit-indirect][edit-indirect]] is a useful enhancement for editing. It provides a command =edit-indirect-region= that
allows the editing of a region in a separate buffer.

The region is copied, without text properties, to a separate buffer, called *edit-indirect buffer*. The major
is guessed.

After finishing the editing the command =edit-indirect-commit= replaces the original region with the content of
the *edit-indirect buffer*. Alternatively, the command =edit-indirect-abort= drops the modification and leaves the
region unchanged. Very useful!

| Key binding | Command                    | Description                                                                                       |
|-------------+----------------------------+---------------------------------------------------------------------------------------------------|
| =H-c C-e=   | =M-x edit-indirect-region= | Edit region in separate buffer *edit-indirect buffer*                                             |
| =C-c C-c=   | =M-x edit-indirect-commit= | Commit the modification done in *edit-indirect buffer*                                            |
| =C-c C-k=   | =M-x edit-indirect-abort== | Abort indirect editing; kill buffer *edit-indirect buffer*                                        |
| =C-x C-s=   | =M-x edit-indirect-save=   | Replace the original region in the parent buffer with the contents of the *edit-indirect buffer*. |
|-------------+----------------------------+---------------------------------------------------------------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el :var file-description="Basic handling setup"
;;
;; Edit regions in a separate buffer
;;
(use-package edit-indirect
  :bind (
         :map psimacs/config/global-key-map/common
              ("C-e" . edit-indirect-region)
        )
)
#+END_SRC

*** First errors in compilation buffer

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation.html][Running Compilations under Emacs]] describes a useful variable that allows that scrolling of the compilation output
automatically stops when the first error appears, leaving point at that error.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
;;
;; Stop at first error, no further scrolling
;;
(setq compilation-scroll-output 'first-error)
#+END_SRC

*** Apropos

Each of the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html][apropos]] commands reads an apropos pattern in the minibuffer, searches for items that match the pattern,
and displays the results in a different window. Some of them use prefix arguments to widen the scope of the search.
The follwoing statement let most of the apropos commands behaves as if they had been given a prefix argument.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
;;
;; Always prefix apropos commands
;;
(setq apropos-do-all t)
#+END_SRC

*** Unique buffer names

Change [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Uniquify.html][uniquify]] to put the disambiguate part of the buffer file name at the front. The library  [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Uniquify.html][uniquify]]
overrides *Emacs*'s default mechanism for making buffer names unique (using suffixes like <2>, <3> etc.)
with a more sensible behavior which use parts of the file names to make the buffer names distinguishable.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
;;
;; Unique buffer names: includes part of the file's directory name at the beginning of the buffer name
;;
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+END_SRC

*** Imortal buffers

Some buffers should never be deleted. Even if you type =C-x k= in them.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
;;
;; Make some buffers immortal
;;
(defun psimacs/config/immortal-buffers ()
    (if (or (eq (current-buffer) (get-buffer "*scratch*"))
            (eq (current-buffer) (get-buffer "*Messages*")))
                (progn (bury-buffer)
                    nil)
        t
    )
)

(add-hook 'kill-buffer-query-functions 'psimacs/config/immortal-buffers)
#+END_SRC

*** Improved Info-Mode

Library [[https://www.emacswiki.org/emacs/InfoPlus][Info Plus]] extends the standard Emacs library /info/ in several ways.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
(use-package info+)
#+END_SRC

*** Parenthesis

**** Automatically insert matching bracket :noexport:

When on, typing any left bracket automatically insert the right matching bracket. This is accomplished by *Emacs*'s
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html][electric-pair-mode]].

At the moment I have disabled it, because I would like to try [[http://ergoemacs.org/emacs/emacs.html][Xah Lee]] alternative to the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html][electric-pair-mode]].
Actually, I always had some problems with the  [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html][electric-pair-mode]].

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
;;
;; electric-pair-mode: automatically insert matching bracket.
;;
(setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
(electric-pair-mode 1)
#+END_SRC

**** Insert brackets by pair

The following code [[http://ergoemacs.org/emacs/elisp_insert_brackets_by_pair.html][Emacs: Insert Brackets by Pair]] is taken from [[http://ergoemacs.org/emacs/emacs.html][Xah Lee]]. It tries to solve some of the
problems that arise with [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html][electric-pair-mode]].

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
;;
;; Wonderful bracket inserter taken from Xah Lee at
;; http://ergoemacs.org/emacs/elisp_insert_brackets_by_pair.html
;;
(defun psimacs/pair/insert-bracket-pair (@left-bracket @right-bracket &optional @wrap-method)
  "Insert brackets around selection, word, at point, and maybe move cursor in between.

 ,*left-bracket and *right-bracket are strings.
 ,*wrap-method must be either 'line or 'block. 'block means between empty lines.

• if there's a region, add brackets around region.
• if *wrap-method is 'line, wrap around line.
• if *wrap-method is 'block, wrap around block.
• if cursor is at beginning of line and its not empty line and contain at least 1 space, wrap around the line.
• if cursor is at end of a word or buffer, one of the following will happen:
        xyz▮ → xyz(▮)
        xyz▮ → (xyz▮) if in one of the lisp modes.
• wrap brackets around word if any. e.g. xy▮z → (xyz▮). Or just (▮)

URL `http://ergoemacs.org/emacs/elisp_insert_brackets_by_pair.html'
Version 2017-01-17"
  (if (use-region-p)
      (progn ; there's active region
        (let (
              ($p1 (region-beginning))
              ($p2 (region-end)))
          (goto-char $p2)
          (insert @right-bracket)
          (goto-char $p1)
          (insert @left-bracket)
          (goto-char (+ $p2 2))))
    (progn ; no text selection
      (let ($p1 $p2)
        (cond
         ((eq @wrap-method 'line)
          (setq $p1 (line-beginning-position) $p2 (line-end-position))
          (goto-char $p2)
          (insert @right-bracket)
          (goto-char $p1)
          (insert @left-bracket)
          (goto-char (+ $p2 (length @left-bracket))))
         ((eq @wrap-method 'block)
          (save-excursion
            (progn
              (if (re-search-backward "\n[ \t]*\n" nil 'move)
                  (progn (re-search-forward "\n[ \t]*\n")
                         (setq $p1 (point)))
                (setq $p1 (point)))
              (if (re-search-forward "\n[ \t]*\n" nil 'move)
                  (progn (re-search-backward "\n[ \t]*\n")
                         (setq $p2 (point)))
                (setq $p2 (point))))
            (goto-char $p2)
            (insert @right-bracket)
            (goto-char $p1)
            (insert @left-bracket)
            (goto-char (+ $p2 (length @left-bracket)))))
         ( ;  do line. line must contain space
          (and
           (eq (point) (line-beginning-position))
           ;; (string-match " " (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
           (not (eq (line-beginning-position) (line-end-position))))
          (insert @left-bracket )
          (end-of-line)
          (insert  @right-bracket))
         ((and
           (or ; cursor is at end of word or buffer. i.e. xyz?
            (looking-at "[^-_[:alnum:]]")
            (eq (point) (point-max)))
           (not (or
                 (string-equal major-mode "emacs-lisp-mode")
                 (string-equal major-mode "lisp-mode")
                 (string-equal major-mode "lisp-interaction-mode")
                 (string-equal major-mode "common-lisp-mode")
                 (string-equal major-mode "clojure-mode")
                 (string-equal major-mode "scheme-mode"))))
          (progn
            (setq $p1 (point) $p2 (point))
            (insert @left-bracket @right-bracket)
            (search-backward @right-bracket )))
         (t (progn
              ;; wrap around 'word'. basically, want all alphanumeric, plus hyphen and underscore, but don't want space or punctuations.
              (skip-chars-backward "-_[:alnum:]")
              (setq $p1 (point))
              (skip-chars-forward "-_[:alnum:]")
              (setq $p2 (point))
              (goto-char $p2)
              (insert @right-bracket)
              (goto-char $p1)
              (insert @left-bracket)
              (goto-char (+ $p2 (length @left-bracket))))))))))
#+END_SRC

And some convenience functions that use the =psimacs/pair/insert-bracket-pair= function.

Additionally, *Psimacs* provides the following key bindings:

| Key binding | Command                                      | Description                       |
|-------------+----------------------------------------------+-----------------------------------|
| =H-m (=     | =M-x psimacs/pair/insert-paren=              | Insert paranthesis =(▮)=.         |
| =H-m [=     | =M-x psimacs/pair/insert-bracket=            | Insert brackets =[▮]=.            |
| =H-m {=     | =M-x psimacs/pair/insert-brace=              | Insert braces ={▮}=.              |
| =H-m "=     | =M-x psimacs/pair/insert-ascii-double-quote= | Insert ascii double quotes ="▮"=. |
| =H-m '=     | =M-x psimacs/pair/insert-ascii-single-quote= | Insert ascii single quotes ='▮'=. |
| =H-m e=     | =M-x psimacs/pair/insert-emacs-quote=        | Insert emacs quotes =`▮'=.        |
| =H-m ==     | =M-x psimacs/pair/insert-equal=              | Insert equality signs ==▮==.      |
| =H-m *=     | =M-x psimacs/pair/insert-star=               | Insert stars =*▮*=.               |
| =H-m /=     | =M-x psimacs/pair/insert-slash=              | Insert slashes =/▮/=.             |
|-------------+----------------------------------------------+-----------------------------------|

Remark: The HTML rendering on GitHub is not correct. With normal HTML export of *Emacs*'s Org-Mode, however, the
rendering is perfectly fine. I couldn't resolve the issue.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
;;
;; Convenience functions using psimacs/pair/insert-bracket-pair
;;
(defun psimacs/pair/insert-paren                    () "Insert paranthesis (▮)"                (interactive) (psimacs/pair/insert-bracket-pair "("  ")"))
(defun psimacs/pair/insert-bracket                  () "Insert brackets [▮]"                   (interactive) (psimacs/pair/insert-bracket-pair "["  "]"))
(defun psimacs/pair/insert-brace                    () "Insert braces {▮}"                     (interactive) (psimacs/pair/insert-bracket-pair "{"  "}"))
(defun psimacs/pair/insert-double-curly-quote       () "Insert double curly quotes “▮“"        (interactive) (psimacs/pair/insert-bracket-pair "“"  "”"))
(defun psimacs/pair/insert-curly-single-quote       () "Insert curly single quotes ‘▮‘"        (interactive) (psimacs/pair/insert-bracket-pair "‘"  "’"))
(defun psimacs/pair/insert-single-angle-quote       () "Insert single angle quotes ‹▮›"        (interactive) (psimacs/pair/insert-bracket-pair "‹"  "›"))
(defun psimacs/pair/insert-double-angle-quote       () "Insert double angle quotes «▮»"        (interactive) (psimacs/pair/insert-bracket-pair "«"  "»"))
(defun psimacs/pair/insert-ascii-double-quote       () "Insert ascii double quotes \"▮\""      (interactive) (psimacs/pair/insert-bracket-pair "\"" "\""))
(defun psimacs/pair/insert-ascii-single-quote       () "Insert ascii single quotes '▮'"        (interactive) (psimacs/pair/insert-bracket-pair "'"  "'"))
(defun psimacs/pair/insert-emacs-quote              () "Insert emacs quotes `▮'"               (interactive) (psimacs/pair/insert-bracket-pair "`"  "'"))
(defun psimacs/pair/insert-corner-bracket           () "Insert corner brackets 「▮」"           (interactive) (psimacs/pair/insert-bracket-pair "「"  "」"))
(defun psimacs/pair/insert-white-corner-bracket     () "Insert white corner brackets 『▮』"     (interactive) (psimacs/pair/insert-bracket-pair "『"  "』"))
(defun psimacs/pair/insert-angle-bracket            () "Insert angle brackets 〈▮〉"            (interactive) (psimacs/pair/insert-bracket-pair "〈"  "〉"))
(defun psimacs/pair/insert-double-angle-bracket     () "Insert double angle brackets 《▮》"     (interactive) (psimacs/pair/insert-bracket-pair "《"  "》"))
(defun psimacs/pair/insert-white-lenticular-bracket () "Insert white lenticular brackets 〖▮〗" (interactive) (psimacs/pair/insert-bracket-pair "〖" "〗"))
(defun psimacs/pair/insert-black-lenticular-bracket () "Insert black lenticular brackets 【▮】" (interactive) (psimacs/pair/insert-bracket-pair "【"  "】"))
(defun psimacs/pair/insert-tortoise-shell-bracket   () "Insert tortoise shell brackets 〔▮〕"   (interactive) (psimacs/pair/insert-bracket-pair "〔"  "〕"))
(defun psimacs/pair/insert-equal                    () "Insert equality sign =▮="              (interactive) (psimacs/pair/insert-bracket-pair "="  "="))
(defun psimacs/pair/insert-star                     () "Insert star characters *▮*"            (interactive) (psimacs/pair/insert-bracket-pair "*"  "*"))
(defun psimacs/pair/insert-slash                    () "Insert slash characters /▮/"           (interactive) (psimacs/pair/insert-bracket-pair "/"  "/"))
#+END_SRC

Define key bindings for the most important =psimacs/pair/insert-*= commands only.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
;;
;; Add the missing key bindings for the frame creation strategy promised above.
;;
(define-key psimacs/config/global-key-map/special (kbd "(")  'psimacs/pair/insert-paren)
(define-key psimacs/config/global-key-map/special (kbd "[")  'psimacs/pair/insert-bracket)
(define-key psimacs/config/global-key-map/special (kbd "{")  'psimacs/pair/insert-brace)
(define-key psimacs/config/global-key-map/special (kbd "\"") 'psimacs/pair/insert-ascii-double-quote)
(define-key psimacs/config/global-key-map/special (kbd "'")  'psimacs/pair/insert-ascii-single-quote)
(define-key psimacs/config/global-key-map/special (kbd "e")  'psimacs/pair/insert-emacs-quote)
(define-key psimacs/config/global-key-map/special (kbd "=")  'psimacs/pair/insert-equal)
(define-key psimacs/config/global-key-map/special (kbd "*")  'psimacs/pair/insert-star)
(define-key psimacs/config/global-key-map/special (kbd "/")  'psimacs/pair/insert-slash)
#+END_SRC

See matching pairs of parenthesis and other characters. When point is on one of the
paired characters, the other is highlighted.

See also: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html#Matching][show-paren-mode]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
;;
;; Highlight matching pairs
;;
(use-package paren
    :diminish show-paren-mode
    :hook (after-init . show-paren-mode)
    :config
        (setq show-paren-delay 0)
        (setq show-paren-style 'mixed)
        ;(setq show-paren-style 'parenthesis)
        ;(setq show-paren-style 'expression)

        (setq show-paren-when-point-inside-paren t)
        (setq show-paren-when-point-in-periphery t)
)
#+END_SRC

*** Buffer List

Use command =ibuffer= instead of the default =list-buffers= for =C-x C-b=. The command =ibuffer= is an improved
version of =list-buffers=. *IBuffer* colors the files by type and [[http://ergoemacs.org/emacs/emacs.html][Xah Lee]] introduces it in [[http://ergoemacs.org/emacs/emacs_buffer_management.html][Emacs: List Buffers]].

| Key binding | Command                | Description                                    |
|-------------+------------------------+------------------------------------------------|
| =C-x C-b=   | =M-x ibuffer=          | Begin using IBuffer to edit a list of buffers. |
| =C-x b=     | =M-x switch-to-buffer= | Switch to buffer, selected from list.          |
| =C-x k=     | =M-x kill-buffer=      | Close the current buffer.                      |
|             |                        |                                                |


#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
;;
;; Completely replace list-buffers by ibuffer. Implies automatically ibuffer on C-x C-b
;;
(defalias 'list-buffers 'ibuffer)
;;(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

*** Cua Mode

When [[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][CUA mode]] is enabled, the keys =C-x=, =C-c=, =C-v=, and =C-z= invoke commands that cut (kill),
copy, paste (yank), and undo respectively.

To enter an *Emacs* command like =C-x C-f= while the mark is active, use one of the following
methods:
- either hold Shift together with the prefix key, e.g., =S-C-x C-f=,
- or quickly type the prefix key twice, e.g., =C-x C-x C-f=
- or disable [[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][CUA mode]] by pressing =<f12>= or =H-m c=.

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][CUA mode]] provides enhanced rectangle support with visible rectangle highlighting.
Use =C-RET= to start a rectangle, extend it using the movement commands, and cut or copy
it using =C-x= or =C-c=. =RET= moves the cursor to the next (clockwise) corner of the rectangle,
so you can easily expand it in any direction. Normal text you type is inserted to the left
or right of each line in the rectangle (on the same side as the cursor).

With CUA you can easily copy text and rectangles into and out of registers by providing a
one-digit numeric prefix to the kill, copy, and yank commands, e.g., =C-1 C-c= copies the
region into register 1, and =C-2 C-v= yanks the contents of register 2.

CUA mode also has a global mark feature which allows easy moving and copying of text
between buffers. Use =C-S-SPC= to toggle the global mark on and off. When the global
mark is on, all text that you kill or copy is automatically inserted at the global
mark, and text you type is inserted at the global mark rather than at the current
position.

See also:
- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][Manual: Cua-Bindings]],
- [[https://www.emacswiki.org/emacs/CuaMode][EmacsWiki: Cua Mode]],
- [[https://emacs.stackexchange.com/questions/26874/what-am-i-giving-up-by-activating-cua-mode][What am I giving up by activating CUA mode?]]
- [[http://ergoemacs.org/misc/emacs_keybinding_and_cua-mode_keys.html][Emacs cua-mode Key Binding Problems]]

| Key binding | Command                      | Description                                  |
|-------------+------------------------------+----------------------------------------------|
| =<f12>=     | =M-x cua-mode=               | Toggle CUA mode.                             |
| =H-m c=     | =M-x cua-mode=               | Toggle CUA mode.                             |
|-------------+------------------------------+----------------------------------------------|
| =C-x=       |                              | Windows conform cut if CUA-mode is active.   |
| =C-c=       |                              | Windows conform copy if CUA-mode is active.  |
| =C-v=       |                              | Windows conform paste if CUA-mode is active. |
| =C-z=       |                              | Undo command if CUA-mode is active.          |
| =C-S-z=     |                              | Redo command if CUA-mode is active.          |
|-------------+------------------------------+----------------------------------------------|
| =C-RET=     | =M-x cua-set-rectangle-mark= | Start a rectangle.                           |
| =<Ret>=     | =M-x cua-rotate-rectangle=   | Move to next corner.                         |
| =C-1 C-c=   |                              | Copy rectangle to register 1                 |
| =...=       |                              | ...                                          |
| =C-9 C-c=   |                              | Copy rectangle to register 9                 |
| =C-1 C-x=   |                              | Cut rectangle to register 1                  |
| =...=       |                              | ...                                          |
| =C-9 C-x=   |                              | Cut rectangle to register 9                  |
| =C-1 C-v=   |                              | Yank rectangle from register 1               |
| =...=       |                              | ...                                          |
| =C-9 C-v=   |                              | Yank  rectangle from register 9              |
|             |                              |                                              |

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
;;
;; CUA-Mode: Enabled on default
;;
(cua-mode t)
(setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
(setq cua-keep-region-after-copy t)   ;; Standard Windows behaviour
(setq cua-delete-selection t)
(global-set-key (kbd "<f12>") 'cua-mode)
(define-key psimacs/config/global-key-map/special (kbd "c") 'cua-mode)
#+END_SRC

*** Perspective

The [[https://github.com/nex3/perspective-el][perspective]] package provides multiple named workspaces
(or "perspectives") in *Emacs*, similar to multiple desktops in window managers.

Each [[https://github.com/nex3/perspective-el][perspective]] has its own buffer list and its own window
layout. This makes it easy to work on many separate projects without getting lost in all the buffers.
Switching to a [[https://github.com/nex3/perspective-el][perspective]] activates its window configuration,
and when in a [[https://github.com/nex3/perspective-el][perspective]], only its buffers
are available (by default).

Each *Emacs* frame has a distinct list of [[https://github.com/nex3/perspective-el][perspectives]].

Commands are all prefixed by =C-x x= by default. To change the prefix key, customize =persp-mode-prefix-key=.
Additionally, creating a key binding for =persp-mode-map= will also activate the prefix.

#+ATTR_HTML: :class styledtable
| Key binding     | Command                      | Description                                                                                         |
|-----------------+------------------------------+-----------------------------------------------------------------------------------------------------|
| =C-x x=         |                              | Prefix key for all perspective commands.                                                            |
| =C-x x s=       | =M-x persp-switch=           | Query a perspective to switch to, or create                                                         |
| =C-x x k=       | =M-x persp-remove-buffer=    | Query a buffer to remove from current perspective                                                   |
| =C-x x c=       | =M-x persp-kill=             | Query a perspective to kill                                                                         |
| =C-x x r=       | =M-x persp-rename=           | Rename current perspective                                                                          |
| =C-x x a=       | =M-x persp-add-buffer=       | Query an open buffer to add to current perspective                                                  |
| =C-x x A=       | =M-x persp-set-buffer=       | Add buffer to current perspective and remove it from all others                                     |
| =C-x x b=       | =M-x persp-switch-to-buffer= | Like switch-to-buffer; includes all buffers from all perspectives; changes perspective if necessary |
| =C-x x i=       | =M-x persp-import=           | Import a given perspective from another frame.                                                      |
| =C-x x n=       | =M-x persp-next=             | Switch to next perspective                                                                          |
| =C-x x p=       | =M-x persp-prev=             | Switch to previous perspective                                                                      |
| =C-x x <right>= | =M-x persp-next=             | Switch to next perspective                                                                          |
| =C-x x <left>=  | =M-x persp-prev=             | Switch to previous perspective                                                                      |
| =C-x x C-s=     | =M-x persp-state-save=       | Save all perspectives in all frames to a file                                                       |
| =C-x x C-l=     | =M-x persp-state-load=       | Load all perspectives from a file                                                                   |
|-----------------+------------------------------+-----------------------------------------------------------------------------------------------------|

Since [[https://github.com/nex3/perspective-el][perspective]]  maintains distinct buffer lists for each [[https://github.com/nex3/perspective-el][perspective]], it helps to use a
Perspective-aware buffer switcher.

| Buffer switcher | Support                                                                                                                                                                                                                                                                                                                        |
|-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Ido             | Interactive Do (Ido, ido-mode), in particular its ido-switch-buffer command, is automatically Perspective-aware when =persp-mode= is enabled.                                                                                                                                                                                  |
| bs.el           | Perspective provides a wrapper for bs-show: =persp-bs-show=. When this function is called normally, it shows a list of buffers filtered by the current perspective. With a prefix argument, it shows a list of buffers in all perspectives.                                                                                    |
| IBuffer         | Perspective provides a wrapper for ibuffer: =persp-ibuffer=. When this function is called normally, it shows a list of buffers filtered by the current perspective. With a prefix argument, it shows a list of buffers in all perspectives.                                                                                    |
| Helm            | Perspective ships with buffer-listing advice for Helm, so Helm's buffer listing code should be automatically Perspective-aware when =persp-mode= is enabled.                                                                                                                                                                   |
| Ivy / Counsel   | Perspective provides two commands for listing buffers using Ivy and Counsel: =persp-ivy-switch-buffer= and =persp-counsel-switch-buffer=. When these functions are called normally, they show a list of buffers filtered by the current perspective. With a prefix argument, they shows a list of buffers in all perspectives. |
|                 |                                                                                                                                                                                                                                                                                                                                |
|-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

Currently, *Psimacs* has not enabled [[https://github.com/nex3/perspective-el][perspective]] on default. I have to think about its usefulness for my working habit.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
(use-package perspective
  :bind (
         ("C-x b" . persp-switch-to-buffer*)
         ("C-x k" . persp-kill-buffer*)
         )
;  :config
;      (persp-mode)
  )
#+END_SRC

*** Abbreviations

*Emacs's* [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html][Abbrevs]] feature lets you type a short word and expand into a full word or code template.

Emacs has a nice feature to expand abbreviations. If for example, you wanted
an abbreviation for 'Your Name' to be 'yn', just type 'yn' and with your point
after the 'n' do =C-x a i g= (mnemonic add inverse global) and enter the expansion,
in this case 'Your Name'. In the future, whenever you type 'yn' your name will be
inserted. The abbrevs are automatically saved between sessions in a file.

If you don't like an abbrev that you have set up, then do =M-x edit-abbrevs=.
You can have different abbrevs for each mode (cperl, c++, Message);
the g in =C-x a i g= is for global, meaning every mode.

Suppose you want to define "bg" for "background": Type =M-x add-global-abbrev=, i.e. =C-x a g= and
then type "bg" in the prompt. Now, when you type "bg" followed by a space or return, it will expand
to "background".

If you want the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html][abbrev]] only
for the current major mode: Type =M-x add-mode-abbrev=, i.e. =C-x a l= ...

If the expanded text is more than one word, for example, suppose you want to define "faq" for
"frequently asked questions". Type "frequently asked questions", then select the text and do
=C-u C-x a g= rspl. =C-u C-x a l=.

Remove an abbreviation by =C-u -1 C-x a g= rspl. =C-u -1 C-x a l= followed by the memnomic, e.g. "bg".

Other commands: =M-x list-abbrevs=, =M-x edit-abbrevs=, =M-x edit-abbrevs-redefine=, =M-x abbrev-edit-save-buffe=
and =M-x abbrev-edit-save-to-file=.

Additionally, =M-x read-abbrev-file= and =M-x write-abbrev-file=.

| Key binding      | Command                         | Description                                                           |
|------------------+---------------------------------+-----------------------------------------------------------------------|
| =H-m C-x C-a=    | =M-x abbrev-mode=               | Enable/Disable abbreviation mode.                                     |
|------------------+---------------------------------+-----------------------------------------------------------------------|
| =C-x a i g=      | =M-x inverse-add-global-abbrev= | add inverse global abbreviation, i.e. 'yn'→ =C-x a i g= → 'Your Name' |
| =C-x a g=        | =M-x add-global-abbrev=         | add global abbreviation, i.e. 'Name' → =C-x a g= → 'n'                |
| =C-u C-x a g=    | =M-x add-global-abbrev=         | add region global abbreviation, i.e. 'Your Name' → =C-x a g= → 'yn'   |
| =C-u -1 C-x a g= |                                 | remove global abbreviation, i.e. 'yn'                                 |
|------------------+---------------------------------+-----------------------------------------------------------------------|
| =C-x a i l=      | =M-x inverse-add-mode-abbrev=   | add inverse mode abbreviation, i.e. 'yn'→ =C-x a i l= → 'Your Name'   |
| =C-x a l=        | =M-x add-mode-abbrev=           | add mode abbreviation, i.e. 'Name' → =C-x a l= → 'n'                  |
| =C-u C-x a l=    | =M-x add-mode-abbrev=           | add mode abbreviation, i.e. 'Your Name' → =C-x a l= → 'yn'            |
| =C-u -1 C-x a l= |                                 | remove mode abbreviation, i.e. 'yn'                                   |
|------------------+---------------------------------+-----------------------------------------------------------------------|
|                  | =M-x edit-abbrevs=              |                                                                       |
|                  | =M-x edit-abbrevs-redefine=     |                                                                       |
|                  | =M-x list-abbrevs=              |                                                                       |
|                  | =M-x abbrev-edit-save-buffer=   |                                                                       |
|                  | =M-x abbrev-edit-save-to-file=  |                                                                       |
|------------------+---------------------------------+-----------------------------------------------------------------------|

See also:
- [[https://www.emacswiki.org/emacs/AbbrevMode][Abbrev-Mode]]
- [[http://ergoemacs.org/emacs/emacs_abbrev_mode.html][Abbrev Mode]]
- [[http://ergoemacs.org/emacs/emacs_abbrev_mode_tutorial.html][Abbrev Mode Tutorial]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
;;
;; Setup the abbreviation facility.
;;
(use-package abbrev
  :straight nil
  :bind (
         :map psimacs/config/global-key-map/special
              ("C-x C-a" . abbrev-mode)
         )
  :init
      (dim-minor-name 'abbrev-mode "?𝓐")

      (setq save-abbrevs 'silently)
      (setq abbrev-file-name psimacs/config/abbrev-file)
      (if (file-exists-p psimacs/config/abbrev-file)
          (quietly-read-abbrev-file psimacs/config/abbrev-file))
)
#+END_SRC

*** Save cursor places

We save the current cursor position for use in the next session on a per file/buffer basis.

See also:
- [[https://www.emacswiki.org/emacs/SavePlace][EmacsWiki: SavePlace]]
- [[http://ergoemacs.org/emacs/emacs_save_cursor_position.html][Emacs: Save Cursor Position]]
- [[https://github.com/emacs-mirror/emacs/blob/master/lisp/saveplace.el][Emacs mirror: saveplace.el]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
(use-package saveplace
    :straight nil
    :diminish save-place-mode
    :config
        (progn
            (setq save-place-file psimacs/config/save-places-file)
            (setq save-place-forget-unreadable-files nil)
            (save-place-mode 1)
        )
)
#+END_SRC

*** Hex file modes

Associate certain binary files to hexl-mode.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
(setq auto-mode-alist
    (append '(("\\.\\(obj\\|exe\\|dll\\|com\\)$" . hexl-mode)) auto-mode-alist)
)
#+END_SRC

*** Centaur tabs

Package [[https://github.com/ema2159/centaur-tabs][Centaur tabs]] provides aesthetic, functional and efficient tabs for Emacs.

| Key binding | Command                     | Description                        |
|-------------+-----------------------------+------------------------------------|
| =s-p=       | =M-x centaur-tabs-backward= | Select the previous available tab. |
| =s-n=       | =M-x centaur-tabs-forward=  | Select the next available tab.     |
|-------------+-----------------------------+------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-handling.el
(use-package centaur-tabs
    :demand
    :config
        (centaur-tabs-mode t)
    :custom
        (centaur-tabs-gray-out-icons 'buffer)
        (centaur-tabs-style "rounded")
        ;(centaur-tabs-height 36)
        (centaur-tabs-set-icons t)
        (centaur-tabs-set-modified-marker t)
        (centaur-tabs-modified-marker "●")
        (centaur-tabs-buffer-groups-function #'centaur-tabs-projectile-buffer-groups)
  :bind
    (
        ("s-p" . #'centaur-tabs-backward)
        ("s-n" . #'centaur-tabs-forward)
    )
)
#+END_SRC

** Windows and frame layout

*** Frame size and position

Add key bindings for the frame creation strategy commands, as promised in the [[Startup frame size and position][Startup frame size and position]] section.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-layout.el :var file-description="Basic layout setup"
;;
;; Add the missing key bindings for the frame creation strategy promised above.
;;
(define-key psimacs/config/global-key-map/special (kbd "C-w C-x 5 l") 'psimacs/window/set-frame-creation-strategy-layout)
(define-key psimacs/config/global-key-map/special (kbd "C-w C-x 5 m") 'psimacs/window/set-frame-creation-strategy-main)
(define-key psimacs/config/global-key-map/special (kbd "C-w C-x 5 s") 'psimacs/window/set-frame-creation-strategy-system)
#+END_SRC

*** Golden-Ratio for new buffers

The package [[https://github.com/roman/golden-ratio.el][Golden-Ratio]] provides the /golden-ratio-mode/ that will automatically adjust buffers sizes to keep
the golden ration.

| Key binding   | Command                 | Description                                         |
|---------------+-------------------------+-----------------------------------------------------|
| =H-m C-w C-r= | =M-x golden-ratio-mode= | Toggle automatic window resizing with golden ratio. |
|---------------+-------------------------+-----------------------------------------------------|


#+BEGIN_SRC emacs-lisp :tangle config/init-basic-layout.el
;;
;; Always keep buffer sizes in golden ratios
;;
(use-package golden-ratio
    :diminish golden-ratio-mode
    :config
        (golden-ratio-mode 1)
	(setq golden-ratio-auto-scale nil)

        (setq golden-ratio-adjust-factor 1.0)
        (setq golden-ratio-wide-adjust-factor .8)
    :bind (
         :map psimacs/config/global-key-map/special
              ("C-w C-r" . golden-ratio-mode)
        )
)
#+END_SRC

*** Dimming of buffers not in use

Visually highlight the selected buffer with the package [[https://github.com/gonewest818/dimmer.el][dimmer]].

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-layout.el
;;
;; Visually highlight the selected buffer.
;;
(use-package dimmer
    :config
        (setq dimmer-fraction 0.3
              dimmer-adjustment-mode :foreground ;:background or :both
             )
        (dimmer-mode)
)
#+END_SRC

** Basic Tools

*** Ediff

The [[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][Ediff]] package provides a
comprehensive visual interface to Unix diff and patch utilities.

From the [[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][Ediff Introduction]]
#+BEGIN_QUOTE
Ediff provides a convenient way for simultaneous browsing through the differences between a pair
(or a triple) of files or buffers. The files being compared, file-A, file-B, and file-C are shown
in separate windows (side by side, one above the another, or in separate frames), and the
differences are highlighted as you step through them.
You can also copy difference regions from one buffer to another (and recover old differences
if you change your mind).

Another powerful feature is the ability to merge a pair of files into a third buffer.
Merging with an ancestor file, (a.k.a. 3way merges) is also supported. Furthermore,
Ediff is equipped with directory-level capabilities that allow the user to conveniently
launch browsing or merging sessions on groups of files in two (or three) different directories.

In addition, Ediff can apply a patch to a file and then let you step through both files, the
patched and the original one, simultaneously, difference-by-difference.
#+END_QUOTE

| Command                                             | Description                                                                                                                                                                                                                                                                                                                       |
|-----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =M-x ediff-files=                                   | Compare two files.                                                                                                                                                                                                                                                                                                                |
| =M-x ediff=                                         | /dito/                                                                                                                                                                                                                                                                                                                            |
| =M-x ediff-backup=                                  | Compare a file with its backup. If there are several numerical backups, use the latest. If the file is itself a backup, then compare it with its original.                                                                                                                                                                        |
| =M-x ediff-current-file=                            | Compare the buffer with its file on disk. This function can be used as a safe version of revert-buffer.                                                                                                                                                                                                                           |
| =M-x ediff-buffers=                                 | Compare two buffers.                                                                                                                                                                                                                                                                                                              |
| =M-x ediff-files3=                                  | Compare three files.                                                                                                                                                                                                                                                                                                              |
| =M-x ediff3=                                        | /dito/                                                                                                                                                                                                                                                                                                                            |
| =M-x ediff-buffers3=                                | Compare three buffers.                                                                                                                                                                                                                                                                                                            |
| =M-x edirs=                                         | Compare files common to two directories.                                                                                                                                                                                                                                                                                          |
| =M-x ediff-directories=                             | /dito/                                                                                                                                                                                                                                                                                                                            |
| =M-x edirs3=                                        | Compare files common to three directories.                                                                                                                                                                                                                                                                                        |
| =M-x ediff-directories3=                            | /dito/                                                                                                                                                                                                                                                                                                                            |
| =M-x edir-revisions=                                | Compare versions of files in a given directory. Ediff selects only the files that are under version control.                                                                                                                                                                                                                      |
| =M-x ediff-directory-revisions=                     | /dito/                                                                                                                                                                                                                                                                                                                            |
| =M-x edir-merge-revisions=                          | Merge versions of files in a given directory. Ediff selects only the files that are under version control.                                                                                                                                                                                                                        |
| =M-x ediff-merge-directory-revisions=               | /dito/                                                                                                                                                                                                                                                                                                                            |
| =M-x edir-merge-revisions-with-ancestor=            | Merge versions of files in a given directory using other versions as ancestors. Ediff selects only the files that are under version control.                                                                                                                                                                                      |
| =M-x ediff-merge-directory-revisions-with-ancestor= | /dito/                                                                                                                                                                                                                                                                                                                            |
| =M-x ediff-windows-wordwise=                        | Compare text visible in 2 windows word-by-word.                                                                                                                                                                                                                                                                                   |
| =M-x ediff-windows-linewise=                        | Compare text visible in 2 windows line-by-line.                                                                                                                                                                                                                                                                                   |
| =M-x ediff-regions-wordwise=                        | Compare regions word-by-word. The regions can come from the same buffer and they can even overlap. You will be asked to specify the buffers that contain the regions, which you want to compare. For each buffer, you will also be asked to mark the regions to be compared.                                                      |
| =M-x ediff-regions-linewise=                        | Similar to ediff-windows-linewise, but compares the regions line-by-line. See ediff-windows-linewise for more details.                                                                                                                                                                                                            |
| =M-x ediff-revision=                                | Compare versions of the current buffer, if the buffer is visiting a file under version control.                                                                                                                                                                                                                                   |
| =M-x ediff-patch-file=                              | Patch a file or multiple files, then compare. Since the patch might be in a buffer or a file, you will be asked which is the case. To avoid this extra prompt, you can invoke this command with a prefix argument. With an odd prefix argument, Ediff assumes the patch is in a file; with an even argument, a buffer is assumed. |
| =M-x epatch=                                        | /dito/                                                                                                                                                                                                                                                                                                                            |
| =M-x ediff-patch-buffer=                            | Patch a buffer, then compare. The buffer being patched and the file visited by that buffer (if any) is not modified. The result of the patch appears in some other buffer that has the name ending with _patched.                                                                                                                 |
| =M-x epatch-buffer=                                 | /dito/                                                                                                                                                                                                                                                                                                                            |
| =M-x ediff-merge-files=                             | Merge two files.                                                                                                                                                                                                                                                                                                                  |
| =M-x ediff-merge=                                   | /dito/                                                                                                                                                                                                                                                                                                                            |
| =M-x ediff-merge-files-with-ancestor=               | Like ediff-merge, but with a third ancestor file.                                                                                                                                                                                                                                                                                 |
| =M-x ediff-merge-with-ancestor=                     | /dito/                                                                                                                                                                                                                                                                                                                            |
| =M-x ediff-merge-buffers=                           | Merge two buffers.                                                                                                                                                                                                                                                                                                                |
| =M-x ediff-merge-buffers-with-ancestor=             | Same but with ancestor.                                                                                                                                                                                                                                                                                                           |
| =M-x edirs-merge=                                   | Merge files common to two directories.                                                                                                                                                                                                                                                                                            |
| =M-x ediff-merge-directories=                       | /dito/                                                                                                                                                                                                                                                                                                                            |
| =M-x edirs-merge-with-ancestor=                     | Same but using files in a third directory as ancestors.                                                                                                                                                                                                                                                                           |
| =M-x ediff-merge-directories-with-ancestor=         | /dito/                                                                                                                                                                                                                                                                                                                            |
| =M-x ediff-merge-revisions=                         | Merge two versions of the file visited by the current buffer.                                                                                                                                                                                                                                                                     |
| =M-x ediff-merge-revisions-with-ancestor=           | Same but with ancestor.                                                                                                                                                                                                                                                                                                           |
| =M-x ediff-documentation=                           | Brings up the [[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][Ediff]] manual.                                                                                                                                                                                                                                                                                                       |
| =M-x ediff-show-registry=                           | Brings up Ediff session registry. This feature enables you to quickly find and restart active Ediff sessions.                                                                                                                                                                                                                     |
| =M-x eregistry=                                     | /dito/                                                                                                                                                                                                                                                                                                                            |
|-----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|


Remarks:
- All Ediff commands are displayed in a Quick Help window, unless you type =?= to shrink the window to just one line. You can redisplay the help window by typing =?= again.
- Many Ediff commands take numeric prefix arguments.
- Some commands take negative prefix arguments as well.
- Without the prefix argument, all commands operate on the currently selected difference region.

| Command         | Description                                                                                                                                                                                                                          |
|-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =?=             | Toggles the Ediff Quick Help window ON and OFF.                                                                                                                                                                                      |
| =E=             | Brings up the top node of the [[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][Ediff]] manual.                                                                                                                                                                                          |
| =v=             | Scrolls up buffers A and B (and buffer C where appropriate) in a coordinated fashion.                                                                                                                                                |
| =V=             | Scrolls the buffers down.                                                                                                                                                                                                            |
| =<=             | Scrolls the buffers to the left simultaneously.                                                                                                                                                                                      |
| =>=             | Scrolls buffers to the right.                                                                                                                                                                                                        |
| =wd=            | Saves the output from the diff utility, for further reference.                                                                                                                                                                       |
| =wa=            | Saves buffer A, if it was modified.                                                                                                                                                                                                  |
| =wb=            | Saves buffer B, if it was modified.                                                                                                                                                                                                  |
| =wc=            | Saves buffer C, if it was modified                                                                                                                                                                                                   |
| =a=             | In comparison sessions: Copies the current difference region from buffer A to buffer B (see rb).                                                                                                                                     |
| =a=             | In merge sessions: Copies the current difference region from buffer A to the merge buffer (r).                                                                                                                                       |
| =ab=            | Copies the current difference region from buffer A to buffer B.                                                                                                                                                                      |
| =ac=            | Copies the difference region from buffer A to buffer C.                                                                                                                                                                              |
| =ba=            | Copies the difference region from buffer B to buffer A.                                                                                                                                                                              |
| =bc=            | Copies the difference region from buffer B to buffer C.                                                                                                                                                                              |
| =ca=            | Copies the difference region from buffer C to buffer A.                                                                                                                                                                              |
| =cb=            | Copies the difference region from buffer C to buffer B.                                                                                                                                                                              |
| =p=, =DEL=      | Makes the previous difference region current.                                                                                                                                                                                        |
| =n=, =SPC=      | Makes the next difference region current.                                                                                                                                                                                            |
| =j=, =-j=, =Nj= | Makes the very first difference region current. Makes the very first difference region current. Typing a number, N, and then j makes the difference region N current.                                                                |
| =ga=            | Makes current the difference region closest to the position of the point in buffer A.                                                                                                                                                |
| =gb=            | Makes current the difference region closest to the position of the point in buffer B.                                                                                                                                                |
| =gc=            | Makes current the difference region closest to the position of the point in buffer C.                                                                                                                                                |
| =!=             | Recomputes the difference regions, bringing them up to date.                                                                                                                                                                         |
| =*=             | Forces refinement of the current difference region, which highlights the exact words of disagreement among the buffers                                                                                                               |
| =m=             | Displays the current Ediff session in a frame as wide as the physical display.                                                                                                                                                       |
| =┃=             | Toggles the horizontal/vertical split of the Ediff display.                                                                                                                                                                          |
| =@=             | Toggles auto-refinement of difference regions.                                                                                                                                                                                       |
| =h=             | Cycles between full highlighting, the mode where fine differences are not highlighted (but computed), and the mode where highlighting is done with ASCII strings.                                                                    |
| =r=             | Restores the old contents of the region in the merge buffer.                                                                                                                                                                         |
| =ra=            | Restores the old contents of the current difference region in buffer A.                                                                                                                                                              |
| =rb=            | Restores the old contents of the current difference region in buffer B.                                                                                                                                                              |
| =rc=            | Restores the old contents of the current difference region in buffer C.                                                                                                                                                              |
| =##=            | Tell Ediff to skip over regions that disagree among themselves only in the amount of white space and line breaks.                                                                                                                    |
| =#c=            | Toggle case sensitivity in the diff program.                                                                                                                                                                                         |
| =#h=            | Ediff prompts you to specify regular expressions for each variant. Difference regions where each variant’s region matches the corresponding regular expression will be skipped from then on.                                         |
| =#f=            | Does dual job: it focuses on regions that match the corresponding regular expressions. All other regions will be skipped over.                                                                                                       |
| =A=             | Toggles the read-only property in buffer A.                                                                                                                                                                                          |
| =B=             | Toggles the read-only property in buffer B.                                                                                                                                                                                          |
| =C=             | Toggles the read-only property in buffer C.                                                                                                                                                                                          |
| =~=             | Swaps the windows where buffers A and B are displayed.                                                                                                                                                                               |
| =i=             | Displays all kinds of useful data about the current Ediff session.                                                                                                                                                                   |
| =D=             | Runs =ediff-custom-diff-program= on the variants and displays the buffer containing the output.                                                                                                                                      |
| =R=             | Displays a list of currently active Ediff sessions—the Ediff Registry.                                                                                                                                                               |
| =M=             | Shows the session group buffer that invoked the current Ediff session.                                                                                                                                                               |
| =z=             | Suspends the current Ediff session. The easiest way to resume a suspended Ediff session is through the registry of active sessions.                                                                                                  |
| =q=             | Terminates this Ediff session.                                                                                                                                                                                                       |
| =%=             | Toggles narrowing in Ediff buffers.                                                                                                                                                                                                  |
| =C-l=           | Restores the usual Ediff window setup. This is the quickest way to resume an Ediff session, but it works only if the control panel of that session is visible.                                                                       |
| =$$=            | Skipping the regions where only one of the variants clashes with the ancestor but the other variant agrees with it. Typing $$ again undoes this setting.                                                                             |
| =$*=            | When merging files with large number of differences, it is sometimes convenient to be able to skip the difference regions for which you already decided which variant is most appropriate. Typing $* will accomplish precisely this. |
| =/=             | Toggle to display the ancestor file in 3way merges.                                                                                                                                                                                  |
| =&=             | On merge the right course of action is not always clear, and Ediff would use a default action. The above command changes the default action.                                                                                         |
| =s=             | Causes the merge window shrink to its minimum size, thereby exposing as much of the variant buffers as possible. Typing s again restores the original size of that window.                                                           |
| =+=             | Combines the difference regions from buffers A and B and copies the result into the merge buffer.                                                                                                                                    |
| ===             | Creates a child Ediff session for comparing regions in buffers A, B or C.                                                                                                                                                            |
|-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

See also:
- [[https://www.emacswiki.org/emacs/EdiffMode][EmacsWiki: Ediff Mode]]
- [[https://www.gnu.org/software/emacs/manual/html_node/ediff/][Ediff Manual]]
- [[https://oremacs.com/2015/01/17/setting-up-ediff/][Setting up Ediff]]
- [[http://www.sentia.com.au/blog/ediff-for-the-brainically-challenged][Ediff For The Brainically Challenged]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-tools.el :var file-description="Basic tools setup"
;;
;; A comprehensive visual interface to Unix diff and patch utilities.
;;
(use-package ediff)

;; Don't use the weird setup with the control panel in a separate frame.
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

;; Split the windows horizontally instead of vertically.
;; This way, it's much easier to follow the changes.
(setq ediff-split-window-function
    (lambda (&optional arg)
        (if (> (frame-width) 150)
            (split-window-horizontally arg)
            (split-window-vertically arg)
        )
    )
)

;; Ignore white space.
(setq ediff-diff-options "-w")

;; only highlight the current diff
(setq-default ediff-highlight-all-diffs 'nil)
#+END_SRC

*** Visible Bookmarks

The package [[https://github.com/joodland/bm][Visible bookmarks]] provides visible, buffer local, bookmarks and the
ability to jump forward and backward to the next bookmark. They are quite similar to the /MS Visual Studio/ bookmarks
I am used to.

See also:
- [[https://www.emacswiki.org/emacs/VisibleBookmarks][EmacsWiki: Visible Bookmarks]]

| Key binding | Command                            | Description                                 |
|-------------+------------------------------------+---------------------------------------------|
| =<f2>=      | =M-x bm-next=                      | Jump to the next bookmark.                  |
| =S-<f2>=    | =M-x bm-previous=                  | Jump to the previous bookmark.              |
| =C-<f2>=    | =M-x bm-toggle=                    | Set or unset bookmark.                      |
| =C-S-<f2>=  | =M-x bm-remove-all-current-buffer= | Remove all bookmarks of the current buffer. |
|-------------+------------------------------------+---------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-tools.el
;;
;; Visual Studio like bookmarks
;;
(unless (file-directory-p psimacs/config/bookmarks-dir)
    (make-directory psimacs/config/bookmarks-dir t)
)

(use-package bm
    :init
        (setq bm-restore-repository-on-load t)
    :config
        (setq bm-cycle-all-buffers nil)
        (setq bm-repository-file psimacs/config/bm-bookmarks-file)

        (setq-default bm-buffer-persistence t)

        (setq bm-highlight-style 'bm-highlight-only-fringe)     ; bm-highlight-only-line
                                                                ; bm-highlight-line-and-fringe

        (add-hook 'after-init-hook   #'bm-repository-load)
        (add-hook 'kill-buffer-hook  #'bm-buffer-save)
        (add-hook 'kill-emacs-hook   #'(lambda nil
                                         (bm-buffer-save-all)
                                         (bm-repository-save)))

        (add-hook 'find-file-hooks   #'bm-buffer-restore)
        (add-hook 'after-revert-hook #'bm-buffer-restore)

        (add-hook 'vc-before-checkin-hook #'bm-buffer-save)

    :bind (
        ("<f2>"     . bm-next)
        ("S-<f2>"   . bm-previous)
        ("C-<f2>"   . bm-toggle)
        ("C-S-<f2>" . bm-remove-all-current-buffer)
    )
)
#+END_SRC

*** Avy - jumping to visible text

[[https://github.com/abo-abo/avy][Avy]] is a GNU Emacs package for jumping to visible text using
a char-based decision tree.

#+ATTR_HTML: :class styledtable
| Key binding     | Command                          | Description                                                                                                                           |
|-----------------+----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-s C-a c= | =M-x avy-goto-char=              | Input one char, jump to it with a tree.                                                                                               |
| =H-m C-s C-a C= | =M-x avy-goto-char-2=            | Input two consecutive chars, jump to the first one with a tree.                                                                       |
| =H-m C-s C-a t= | =M-x avy-goto-char-timer=        | Input an arbitrary amount of consecutive chars, jump to the first one with a tree.                                                    |
| =H-m C-s C-a T= | =M-x avy-org-goto-heading-timer= | Type part of an Org heading. When you stop typing it will be jumped to; if more than one matches, you can jump to a heading with Avy. |
| =H-m C-s C-a l= | =M-x avy-goto-line=              | Input zero chars, jump to a line start with a tree.                                                                                   |
| =H-m C-s C-a w= | =M-x avy-goto-word-1=            | Input one char at word start, jump to a word start with a tree.                                                                       |
| =H-m C-s C-a W= | =M-x avy-goto-word-0=            | Input zero chars, jump to a word start with a tree.                                                                                   |
|-----------------+----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-tools.el
;;
;; Jumping to visible text
;;
(use-package avy
    :bind (
        :map psimacs/config/global-key-map/special
            ("C-s C-a c" . avy-goto-char)
            ("C-s C-a C" . avy-goto-char-2)
            ("C-s C-a t" . avy-goto-char-timer)
            ("C-s C-a T" . avy-org-goto-heading-timer)
            ("C-s C-a l" . avy-goto-line)
            ("C-s C-a w" . avy-goto-word-1)
            ("C-s C-a W" . avy-goto-word-0)
        )
    :custom
        (avy-timeout-seconds 0.5)
        (avy-style 'pre)
    :custom-face
        (avy-lead-face ((t (:background "#51afef" :foreground "#870000" :weight bold))))
)
#+END_SRC

*** HTMLize

The [[https://github.com/hniksic/emacs-htmlize][htmlize]] package converts the buffer text and the associated decorations to HTML.

To use it, just switch to the buffer you want HTML-ized and type =M-x htmlize-buffer=.
You will be switched to a new buffer that contains the resulting HTML code. You can
edit and inspect this buffer, or you can just save it with =C-x C-w=.
=M-x htmlize-file= will find a file, fontify it, and save the HTML version in FILE.html,
without any additional intervention. =M-x htmlize-many-files= allows you to htmlize any
number of files in the same manner. =M-x htmlize-many-files-dired= does the same for files
marked in a dired buffer.

This support package is used by [[https://orgmode.org][org-mode]] to produce colored htmls.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-tools.el
;;
;; Convert buffer text to HTML
;;
(use-package htmlize)
#+END_SRC

** Language support

This section treat some tools for written language spell and grammar checking. Additionally, access is gained
to some translation facilities on the web.

*** Spell checking with Flyspell and Aspell or Hunspell

[[http://www-sop.inria.fr/members/Manuel.Serrano/flyspell/flyspell.html][Flyspell]] enables on-the-fly spell checking in Emacs by the means of a minor mode. [[http://www-sop.inria.fr/members/Manuel.Serrano/flyspell/flyspell.html][Flyspell]] highlights incorrect words
as soon as they are completed or as soon as the cursor hits a new word.

Basically two spell checker programs are usable. At first there is [[http://aspell.net/][Aspell]] and secondly there is [[https://github.com/hunspell/hunspell][hunspell]]. *Psimacs*
supports both backends. You can configure which one to use with the flag variable =psimacs/internal/spell-checker-use-aspell=.
If this is set to =t= the [[http://aspell.net/][Aspell]] program will be used.

The following key bindings are defined for the spell checking mode.
#+ATTR_HTML: :class styledtable
| Key binding | Command                                        | Description                                                                                                                                                                                                                                                                                      |
|-------------+------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-f m= | =M-x flyspell-mode=                            | Minor mode performing on-the-fly spelling checking.                                                                                                                                                                                                                                              |
|             | =M-x flyspell-prog-mode=                       | Turn on  [[http://www-sop.inria.fr/members/Manuel.Serrano/flyspell/flyspell.html][flyspell-mode]] for comments and strings.                                                                                                                                                                                                                                                 |
|-------------+------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-f r= | =M-x flyspell-region=                          | Checks all words inside a region.                                                                                                                                                                                                                                                                |
| =H-m C-f b= | =M-x flyspell-buffer=                          | Checks the whole buffer.                                                                                                                                                                                                                                                                         |
| =H-m C-f w= | =M-x flyspell-word=                            | Spell check a word.                                                                                                                                                                                                                                                                              |
|-------------+------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-,=       | =M-x flyspell-goto-next-error=                 | Go to the next detected error.                                                                                                                                                                                                                                                        |
| =C-.=       | =M-x flyspell-auto-correct-word=               | Automatically Correct the current word. This command proposes various successive corrections for the current word.                                                                                                                                                                               |
| =C-:=       | =M-x flyspell-auto-correct-previous-word=      | Auto correct the first mispelled word that occurs before point.                                                                                                                                                                                                                                  |
| =C-;=       | =M-x flyspell-correct-wrapper=                 | By default jumps to the first misspelled word before the point and prompts for correction and gets you back. Calling it with =C-u= gives ability to correct multiple misspelled words in one run. =C-u C-u= changes direction. =C-u C-u C-u= changes direction and enables multiple corrections. |
| =H-m C-f a= | =M-x flyspell-correct-at-point=                | To correct word at point.                                                                                                                                                                                                                                                                        |
| =H-m C-f p= | =M-x flyspell-correct-previous=                | To correct any visible word before the point.                                                                                                                                                                                                                                                    |
| =H-m C-f n= | =M-x flyspell-correct-next=                    | To correct any visible word after the point.                                                                                                                                                                                                                                                     |
| =H-m C-f c= | =M-x flyspell-check-previous-highlighted-word= | Correct the closer misspelled word.                                                                                                                                                                                                                                                              |
|             | =M-x flyspell-correct-word=                    | Pop up a menu of possible corrections for a misspelled word. The word checked is the word at the mouse position.                                                                                                                                                                                 |
|             | =M-x flyspell-correct-word-before-point=       | Pop up a menu of possible corrections for misspelled word before point.                                                                                                                                                                                                                          |
|-------------+------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-f d= | =M-x psimac/spell/add-word-to-dict=            | Add the word at the current location to the private dictionary without question.                                                                                                                                                                                                                 |
|-------------+------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-f g= | =M-x psimac/spell/switch-to-german=            | Change to german language dictionary.                                                                                                                                                                                                                                                            |
| =H-m C-f e= | =M-x psimac/spell/switch-to-english=           | Change to english language dictionary.                                                                                                                                                                                                                                                           |
| =H-m C-f t= | =M-x psimac/spell/toggle-language=             | Toggle german and english language dictionaries.                                                                                                                                                                                                                                                 |
|-------------+------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

Some more information about spell checking can be found in the following references:
- [[http://aspell.net/][Aspell]]
- [[https://github.com/hunspell/hunspell][hunspell]]
- [[https://www.emacswiki.org/emacs/InteractiveSpell][EmacsWiki: Interactive Spell]]
- [[https://addons.mozilla.org/en-US/thunderbird/language-tools/][Mozlla Dictionaries & Language Packs]]
- [[https://extensions.openoffice.org/][OpenOffice Spell Checker Extensions]]
- [[http://wikemacs.org/wiki/Flyspell-mode][flyspell]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-spell-checking.el :var file-description="Basic spell checking setup"
;;
;; Setup the spell checking framework
;;
(use-package flyspell
  :diminish flyspell-mode
  :config
    (setq flyspell-issue-welcome-flag nil
          flyspell-issue-message-flag nil
          flyspell-default-dictionary psimacs/config/spell-checker-german-dict
          flyspell-sort-corrections nil
          flyspell-doublon-as-error-flag t
          flyspell-highlight-flag t
          flyspell-mark-duplications-flag t
          flyspell-persistent-highlight t
          flyspell-highlight-properties t
          flyspell-use-meta-tab nil)

    (unless psimacs/internal/spell-checker-use-aspell ;; i.e. is hunspell
      (setq-default
                ispell-local-dictionary-alist
                  '(
                    ("en_US"     "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US"         ) nil utf-8)
                    ("en_GB"     "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_GB"         ) nil utf-8)
                    ("de_DE"     "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "de_DE_frami"   ) nil utf-8)
                    ("de_DE_old" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "de_DE_OLDSPELL") nil utf-8)
                   )
                ispell-hunspell-dictionary-alist ispell-local-dictionary-alist))

  (setq-default ispell-program-name      psimacs/config/spell-checker-runtime
                ispell-extra-args        psimacs/config/spell-checker-extra-args
                ispell-list-command      psimacs/config/spell-checker-list-command
                ispell-really-aspell     psimacs/internal/spell-checker-use-aspell
                ispell-really-hunspell   (not psimacs/internal/spell-checker-use-aspell)
                ispell-check-comments    t
                ispell-silently-savep    t
                ispell-dictionary        flyspell-default-dictionary
                ispell-local-dictionary  flyspell-default-dictionary
                ispell-library-directory psimacs/config/spell-checker-dir
                )

  (add-hook 'tex-mode-hook (function (lambda () (setq ispell-parser 'tex))))

  ;;
  ;; Run flyspell-buffer automatically after emacs loads a file
  ;;
  ;; flyspell-mode-hook: executed after flyspell minor-mode is loaded, however before
  ;; local variables have been processed, hence the flyspell-local-vars trick.
  ;;
  (add-hook 'flyspell-mode-hook #'psimacs/spell/internal/flyspell-local-vars)
  (defun psimacs/spell/internal/flyspell-local-vars ()
    ;; Emacs calls this hook immediately after it finishes applying
    ;; file-local variables stored in file-local-variables-alist.
    (add-hook 'hack-local-variables-hook #'flyspell-buffer))

  (defun psimacs/spell/setup-german-dic()
    "Setup german personal dictionary."
    (let ((de_dict (concat psimacs/config/spell-checker-personal-dict-file "de_DE")))
      (unless (file-exists-p de_dict)
        (if psimacs/internal/spell-checker-use-aspell
            (write-region "personal_ws-1.1 de 0" nil de_dict nil 0)
          (write-region "" nil de_dict nil 0)))

      (when (file-exists-p de_dict)
        (setq-default ispell-personal-dictionary de_dict)
        (setq         ispell-complete-word-dict  de_dict))
      ))

  (defun psimacs/spell/setup-english-dic()
    "Setup english personal dictionary."
    (let ((en_dict (concat psimacs/config/spell-checker-personal-dict-file "en_US")))
      (unless (file-exists-p en_dict)
        (if psimacs/internal/spell-checker-use-aspell
            (write-region "personal_ws-1.1 en 0" nil en_dict nil 0)
          (write-region "" nil en_dict nil 0)))

      (when (file-exists-p en_dict)
        (setq-default ispell-personal-dictionary en_dict)
        (setq         ispell-complete-word-dict  en_dict))
      ))

  (defun psimac/spell/switch-to-german ()
    "switch ispell language to german."
    (interactive)
    (psimacs/spell/setup-german-dic)
    (ispell-change-dictionary psimacs/config/spell-checker-german-dict)
    (message "Dictionary switched to german"))

  (defun psimac/spell/switch-to-english ()
    "switch ispell language to english"
    (interactive )
    (psimacs/spell/setup-english-dic)
    (ispell-change-dictionary psimacs/config/spell-checker-english-dict)
    (message "Dictionary switched to english"))

  (defun psimac/spell/toggle-language ()
    "Toggle ispell-language between english and deutsch8"
    (interactive)
    (let ((dic ispell-current-dictionary))
       (if (string= dic psimacs/config/spell-checker-german-dict)
           (psimac/spell/switch-to-english)
         (psimac/spell/switch-to-german))))

  (defun psimac/spell/add-word-to-dict ()
    "Add the word at the current location to the private dictionary without question."
    (interactive)
    ;; use the correct dictionary
    (flyspell-accept-buffer-local-defs)
    (setq opoint (point-marker))
    (let ((cursor-location (point))
          (word (flyspell-get-word nil)))
      (if (consp word)
          (let ((start (car (cdr word)))
                (end (car (cdr (cdr word))))
                (word (car word)))
            ;; The word is incorrect, we have to propose a replacement.
            (flyspell-do-correct 'save nil word cursor-location start end opoint)))
      (ispell-pdict-save t)))


    (defun psimacs/spell/check-next-highlighted-word ()
        "Custom function to spell check next highlighted word"
        (interactive)
        (flyspell-goto-next-error)
        (ispell-word)
    )

  ;;
  ;; MSYS2 hunspell does not contain german dictionaries at the time of setting this up.
  ;; Therefore I copy asset provided german dictionaries into the appropriate hunspell folder
  ;; if MSYS2.
  ;;
  (unless psimacs/internal/spell-checker-use-aspell
    (when (and (file-directory-p psimacs/config/spell-checker-hunspell-personal-dir)
               (file-directory-p psimacs/config/spell-checker-hunspell-dir))
      (dolist (f (directory-files psimacs/config/spell-checker-hunspell-personal-dir nil "^.*\\.\\(aff\\|dic\\)$"))
        (let ((src-file (concat psimacs/config/spell-checker-hunspell-personal-dir f))
              (dst-file (concat psimacs/config/spell-checker-hunspell-dir f)))
          (when (not (file-exists-p dst-file))
            (copy-file src-file dst-file t t))))))

  (psimacs/spell/setup-german-dic)

  :hook (
         ((text-mode message-mode markdown-mode org-mode TeX-mode LaTeX-mode) . flyspell-mode)
         (prog--mode . flyspell-prog-mode)
         (ispell-change-dictionary . flyspell-buffer)
        )

  :bind (
         :map psimacs/config/global-key-map/special
              ("C-f m" . flyspell-mode)

         :map flyspell-mode-map
              ("C-:" . flyspell-auto-correct-previous-word)
              ("\M-\t" . nil)
              ([down-mouse-2] . nil)
              ([mouse-2]      . nil)
              ([down-mouse-3] . nil)
              ([mouse-3]      . nil)
              ("H-m C-f b" . flyspell-buffer)
              ("H-m C-f r" . flyspell-region)
              ("H-m C-f w" . flyspell-word)

              ("H-m C-f c" . flyspell-check-previous-highlighted-word)
              ("H-m C-f d" . psimac/spell/add-word-to-dict)
              ("H-m C-f g" . psimac/spell/switch-to-german)
              ("H-m C-f e" . psimac/spell/switch-to-english)
              ("H-m C-f t" . psimac/spell/toggle-language)

        )
  )
#+END_SRC

Package [[https://github.com/xuchunyang/flyspell-popup][flyspell-popup]] brings nice Popup Menu into play.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-spell-checking.el
;;
;; Nice Popup Menu
;;
(use-package flyspell-popup
  :after flyspell
  :bind (
         :map flyspell-mode-map
              ("H-m C-;" . #'flyspell-popup-correct)
        )
)
#+END_SRC

Correcting misspelled words with flyspell using favourite interface. That is what package [[https://github.com/d12frosted/flyspell-correct#flyspell-correct-popup-interface][flyspell-correct]] gives us.
*Psimacs* uses the [[https://github.com/abo-abo/swiper][Ivy]] interface of [[https://github.com/d12frosted/flyspell-correct#flyspell-correct-popup-interface][flyspell-correct]].

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-spell-checking.el
(use-package flyspell-correct
  :after flyspell
  :bind (
         :map flyspell-mode-map
              ("C-;"       . flyspell-correct-wrapper)
              ("H-m C-f a" . flyspell-correct-at-point)
              ("H-m C-f p" . flyspell-correct-previous)
              ("H-m C-f n" . flyspell-correct-next)
        )
)

(use-package flyspell-correct-ivy
  :after flyspell-correct
)
#+END_SRC

*** Spell and grammar checking with LanguageTool

[[https://languagetool.org][LanguageTool]] provides a [[https://www.java.com][Java]] based spell and grammar checking tool. The [[https://github.com/mhayashi1120/Emacs-langtool][langtool.el]] package gives access to that
tool.

#+ATTR_HTML: :class styledtable
| Key binding | Command                                    | Description                                                                                                      |
|-------------+--------------------------------------------+------------------------------------------------------------------------------------------------------------------|
| =H-m C-l b= | =M-x langtool-check-buffer=                | To check current buffer and show warnings. With prefix =C-u= check with different language.                      |
| =H-m C-l p= | =M-x langtool-goto-previous-error=         | Goto previous error. Obsoleted function. Should use =langtool-correct-buffer=.                                   |
| =H-m C-l n= | =M-x langtool-goto-next-error=             | Goto next error. Obsoleted function. Should use =langtool-correct-buffer=.                                       |
| =H-m C-l ;= | =M-x langtool-correct-buffer=              | Execute interactive correction after =langtool-check-buffer=. To correct marker follow LanguageTool suggestions. |
| =H-m C-l t= | =M-x langtool-switch-default-language=     | Switch ‘langtool-default-language’ to LANG                                                                       |
| =H-m C-l m= | =M-x langtool-show-brief-message-at-point= | Show error brief message at point.                                                                               |
| =H-m C-l M= | =M-x langtool-show-message-at-point=       | Show error details at point..                                                                                    |
| =H-m C-l B= | =M-x langtool-check-done=                  | Finish LanguageTool process and cleanup existing colorized texts.                                                |
|-------------+--------------------------------------------+------------------------------------------------------------------------------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-spell-checking.el
;;
;; LanguageTool configuration
;;
(use-package langtool
    :config
        (setq langtool-java-bin psimacs/config/java-runtime-exe
              langtool-language-tool-jar (concat psimacs/config/language-tool-dir "languagetool-commandline.jar")
              langtool-java-user-arguments '("-Dfile.encoding=UTF-8")
              langtool-default-language "en-US"
              langtool-mother-tongue "en-US"
              langtool-disabled-rules '(
                                        "WHITESPACE_RULE"
                                        "EN_UNPAIRED_BRACKETS"
                                        "COMMA_PARENTHESIS_WHITESPACE"
                                        "EN_QUOTES"
                                       ))

        (defun psimacs/spell/langtool-autoshow-detail-popup (overlays)
          (when (require 'popup nil t)
            ;; Do not interrupt current popup
            (unless (or popup-instances
                        ;; suppress popup after type `C-g` .
                        (memq last-command '(keyboard-quit)))
              (let ((msg (langtool-details-error-message overlays)))
                (popup-tip msg)))))

        (setq langtool-autoshow-message-function 'psimacs/spell/langtool-autoshow-detail-popup)

    :bind (
           :map psimacs/config/global-key-map/special
                ("C-l b" . langtool-check-buffer)
                ("C-l B" . langtool-check-done)
                ("C-l p" . langtool-goto-previous-error)
                ("C-l n" . langtool-goto-next-error)
                ("C-l ;" . langtool-correct-buffer)
                ("C-l t" . langtool-switch-default-language)
                ("C-l m" . langtool-show-brief-message-at-point)
                ("C-l M" . langtool-show-message-at-point)
          )
)
#+END_SRC

*** Google translate

The package [[https://github.com/atykhonov/google-translate][google-translate]] allows to translate the strings using [[https://translate.google.com/?hl=de][Google Translate Service]] directly from *Emacs*.
*Psimacs* pre defines the query language to /German/ and the target laguage to /English/ in variable
=google-translate-translation-directions-alist=. If you do not like that setting, change it as it pleases you.

*Psimacs* binds the =M-x google-translate-smooth-translate= command that allows easy translation between the
language pairs provided in the =google-translate-translation-directions-alist= variable. You can toogle between
these pairs with =C-n= and =C-p=.

On default, *Psimacs* outputs the result of the translation process to a separate 'translation buffer'. It then
puts the input focus into that buffer. That can easily be changed to output directly into the current buffer
by calling function =psimacs/spell/google-tanslate/toggle-output-destination=.

#+ATTR_HTML: :class styledtable
| Key binding | Command                                                       | Description                                                                                                                        |
|-------------+---------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-t ;= | =M-x google-translate-smooth-translate=                       | Translate a text using translation directions. Make a prompt in minibuffer for a text to translate. Default text is word at point. |
| =H-m C-t o= | =M-x psimacs/spell/google-tanslate/toggle-output-destination= | Toggle output desination between 'current buffer' and 'translation buffer'.                                                        |
|             | =M-x google-translate-at-point=                               | Translates the word at point or the active region.                                                                                 |
|             | =M-x google-translate-query-translate=                        | Translate, and shows a buffer with available translations of the text.                                                             |
|-------------+---------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-spell-checking.el
;;
;; Configure google-translate package
;;
(use-package google-translate
    :demand t
    :custom
        (google-translate-backend-method 'curl)
    :config
        (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))

        (setq ;google-translate-default-source-language "de"
              ;google-translate-default-target-language "en"
              google-translate-pop-up-buffer-set-focus t
              google-translate-output-destination nil ;'current-buffer
              ;google-translate-show-phonetic t
              google-translate-translation-directions-alist '(("de" . "en") ("en" . "de")))

        (defun psimacs/spell/google-tanslate/toggle-output-destination ()
          "Toggle output desination between 'current buffer' and 'translation buffer'."
          (interactive)
         (if (not google-translate-output-destination)
             (prog2
                 (setq google-translate-output-destination 'current-buffer)
                 (message "Switched google-translate output destination to 'current-buffer'"))
           (prog2
               (setq google-translate-output-destination nil)
               (message "Switched google-translate output destination to separate 'tranlation-buffer'"))))

    :bind (
           :map psimacs/config/global-key-map/special
                ("C-t ;" . google-translate-smooth-translate)
                ("C-t o" . psimacs/spell/google-tanslate/toggle-output-destination)
          )
)
#+END_SRC

** Web searching

Tools that are useful for searching the Web.

*** Google search

The package [[https://github.com/Malabarba/emacs-google-this][google-this]] provides a set of functions and keybindings for launching google searches from within *Emacs*.

#+ATTR_HTML: :class styledtable
| Key binding     | Command                                     | Description                                                                                                                                                                                                                                                           |
|-----------------+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-x G RET= | =M-x google-this-search=                    | Write and do a google search. Quote argument with PREFIX =C-u=.                                                                                                                                                                                                       |
| =H-m C-x G t=   | =M-x google-this=                           | Decide what the user wants to google (always something under point). Quote argument with PREFIX =C-u=. Unlike =google-this-search= (which presents an empty prompt with "this" as the default value), this function inserts the query in the minibuffer to be edited. |
| =H-m C-x G n=   | =M-x google-this-noconfirm=                 | Decide what the user wants to google and go without confirmation. Quote argument with PREFIX =C-u=. Exactly like =google-this= or =google-this-search=, but don’t ask for confirmation.                                                                               |
| =H-m C-x G g=   | =M-x google-this-lucky-search=              | Exactly like =google-this-search=, but use the "I’m feeling lucky" option. Quote argument with PREFIX =C-u=.                                                                                                                                                          |
| =H-m C-x G SPC= | =M-x google-this-region=                    | Google the current region. Quote argument with PREFIX =C-u=.                                                                                                                                                                                                          |
| =H-m C-x G a=   | =M-x google-this-ray=                       | Google text between the point and end of the line. If there is a selected region, googles the region.                                                                                                                                                                 |
| =H-m C-x G l=   | =M-x google-this-line=                      | Google the current line. Quote argument with PREFIX =C-u=.                                                                                                                                                                                                            |
| =H-m C-x G s=   | =M-x google-this-symbol=                    | Google the current symbol. Quote argument with PREFIX =C-u=.                                                                                                                                                                                                          |
| =H-m C-x G w=   | =M-x google-this-word=                      | Google the current word. Quote argument with PREFIX =C-u=.                                                                                                                                                                                                            |
|-----------------+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-x G i=   | =M-x google-this-lucky-and-insert-url=      | Fetch the url that would be visited by ‘google-this-lucky’.                                                                                                                                                                                                           |
| =H-m C-x G r=   | =M-x google-this-cpp-reference=             | Visit the most probable cppreference.com page for this word.                                                                                                                                                                                                          |
| =H-m C-x G f=   | =M-x google-this-forecast=                  | Search google for "weather". With PREFIX =C-u=, ask for location.                                                                                                                                                                                                     |
| =H-m C-x G e=   | =M-x google-this-error=                     | Google the current error in the compilation buffer. Quote argument with PREFIX =C-u=.                                                                                                                                                                                 |
|-----------------+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-x G c=   | =M-x google-this-translate-query-or-region= | If region is active =google-translate-at-point=, otherwise =google-translate-query-translate=.                                                                                                                                                                        |
|-----------------+---------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-web-searching.el :var file-description="Basic Web searching setup"
;;
;; Searching with Google
;;
(use-package google-this
    :init
        (setq google-this-keybind (kbd "H-m C-x G"))
        (setq google-wrap-in-quotes nil)
    :config
        (google-this-mode 1)
)
#+END_SRC

*** Counsel-Web

The package [[https://github.com/mnewt/counsel-web][counsel-web]] is an alternative to [[https://github.com/Malabarba/emacs-google-this][google-this]] for searching the Web.

#+BEGIN_QUOTE
Search the web with dynamic suggestions and browse the results – all from the comfort of Emacs and ivy.

The main idea in [[https://github.com/mnewt/counsel-web][counsel-web]] is to not have to browse search results in a browser–instead go directly
to the page you were searching for.
#+END_QUOTE

#+ATTR_HTML: :class styledtable
| Key binding     | Command                                | Description                                                                                                     |
|-----------------+----------------------------------------+-----------------------------------------------------------------------------------------------------------------|
| =H-m C-x C RET= | =M-x counsel-search=                   | Shows search suggestions as you type and visit page in your default browser on =RET=.                           |
| =H-m C-x C s=   | =M-x counsel-web-suggest=              | Shows search suggestions as you type. Press =RET= to accept the suggestion and send it to =counsel-web-search=. |
| =H-m C-x C w=   | =M-x counsel-web-search=               | Searches and presents the results in the ivy minibuffer.                                                        |
| =H-m C-x C p=   | =M-x counsel-web-thing-at-point=       | Interactively search the web for the THING at point.                                                            |
| =H-m C-x C t=   | =M-x psimacs/web/toogle-search-engine= | Toogle the search engine of [[https://github.com/abo-abo/swiper][counsel]] and  [[https://github.com/mnewt/counsel-web][counsel-web]] between 'duckduckgo' and 'goole'.                          |
|-----------------+----------------------------------------+-----------------------------------------------------------------------------------------------------------------|

| counsel-web-search key bindings | Description                              |
|---------------------------------+------------------------------------------|
| =RET=                           | Browse to the selected result.           |
| =C-j=                           | Update the search.                       |
| =C-M-j=                         | Choose a secondary action.               |
| =M-o=                           | Choose from a menu of alternate actions. |
|---------------------------------+------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-web-searching.el
;;
;; Alternative Web searching facility
;;
(use-package counsel-web
    :config
         (setq counsel-web-engine 'google)
         (setq counsel-search-engine 'google)
;        (setq counsel-web-search-action #'browse-url-default-browser)
;        (setq counsel-web-search-alternate-action #'eww)
;        (setq counsel-web-search-dynamic-update nil)

         (defun psimacs/web/toogle-search-engine ()
           "Toogle the search engine of 'counsel-search' and 'counsel-web' between duckduckgo and google."
           (interactive)
           (if (eq counsel-search-engine 'google)
               (progn
                 (setq counsel-search-engine 'ddg)
                 (setq counsel-web-engine 'duckduckgo)
                 (message "Switched search engines to 'duckduckgo'")
               )
             (progn
               (setq counsel-search-engine 'google)
               (setq counsel-web-engine 'google)
               (message "Switched search engines to 'google'")
               )
             )
           )


    :bind (
           :map psimacs/config/global-key-map/special
                ("C-x C <return>" . counsel-search)
                ("C-x C s"        . counsel-web-suggest)
                ("C-x C w"        . counsel-web-search)
                ("C-x C p"        . counsel-web-thing-at-point)
                ("C-x C t"        . psimacs/web/toogle-search-engine)
          )
)
#+END_SRC

*** Stack Exchange

The package [[https://github.com/vermiculus/sx.el][sx]] provides a full-featured Stack Exchange mode for *Emacs*.

#+BEGIN_QUOTE
If you are going to be doing any asking/answering/commenting/upvoting/downvoting/ etc., you must use
sx-authenticate to provide SX with an authentication token to act on your behalf.
#+END_QUOTE

References:
- [[https://stackexchange.com/][StackExchange]]
- [[https://stackexchange.com/sites#][StackExchange Sites]]

*Psimacs* currently only provides minimal key bindings for [[https://github.com/vermiculus/sx.el][sx]], since its author does not actively participate
in the StackExchange community.

#+ATTR_HTML: :class styledtable
| Key binding     | Command                        | Description                                                  |
|-----------------+--------------------------------+--------------------------------------------------------------|
| =H-m C-x S RET= | =M-x sx-tab-all-questions=     | Display a list of All-Questions questions for SITE.          |
| =H-m C-x S s=   | =M-x sx-search=                | Display search on SITE for question titles containing QUERY. |
| =H-m C-x S r=   | =M-x sx-question-list-refresh= | Update the list of questions.                                |
|-----------------+--------------------------------+--------------------------------------------------------------|

The following table shows only the key bindings important for the author. The [[https://github.com/vermiculus/sx.el][sx]] site provides many more
bindings and commands that comes into play when you actively participate in the StackExchange world.

| Key bindings | Description                                                                 |
|--------------+-----------------------------------------------------------------------------|
| =RET=        | Open question buffer.                                                       |
| =p=          | Navigate to previous entry in list.                                         |
| =n=          | Navigate to next entry in list.                                             |
| =j=          | Navigate to previous entry while viewing the question in a separate buffer. |
| =k=          | Navigate to next entry while viewing the question in a separate buffer.     |
| =s s=        | Switch site.                                                                |
| =v=          | Visit the thing-at-point in your browser.                                   |
| =w=          | Copy the thing-at-point (usually a link).                                   |
|--------------+-----------------------------------------------------------------------------|


#+BEGIN_SRC emacs-lisp :tangle config/init-basic-web-searching.el
;;
;; Get access to the StackExchange sites
;;
(use-package sx
    :config
        (setq sx-cache-directory  psimacs/config/sx-cache-dir)
        (bind-keys :prefix "H-m C-x S"
                   :prefix-map psimacs/web/sx-map
                   :prefix-docstring "Global keymap for SX."
                   ("<return>" . sx-tab-all-questions)
;                   ("i" . sx-inbox)
;                   ("o" . sx-open-link)
;                   ("u" . sx-tab-unanswered-my-tags)
;                   ("a" . sx-ask)
                   ("r" . sx-question-list-refresh)
                   ("s" . sx-search)))
#+END_SRC

* Utility Lisp functions

All functions defined in *Psimacs* are prefixed by =psimacs/category=. For example
the /string/ related function /starts-with/ is defined as =psimacs/string/starts-with=.

** String processing

Utiltiy functions that help with handling of strings.

The following simple string functions are part of the configuration for historical reason. Today, the build-in *Emacs*
functions for string processing should be used instead.

References of string functionality:
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Strings-and-Characters.html#Strings-and-Characters][*Emacs* Manual: String and Characters]]
- [[http://ergoemacs.org/emacs/elisp_string_functions.html][Elips: String Functions by Xah Lee]]
- [[http://ergoemacs.org/emacs/elisp_trim_string.html][Elisp: Trim String Functions by Xah Lee]]
- [[https://github.com/magnars/s.el][*s.el*: The long lost Emacs string manipulation library.]]

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-functions.el :var file-description="Basic elisp functions"
;;
;; String processing functions
;;
(defun psimacs/string/starts-with (s begins)
    "Return non-nil if string S starts with BEGINS."
    (cond (
            (>= (length s) (length begins))
            (string-equal (substring s 0 (length begins)) begins)
        )
        (t nil)
    ))

(defun psimacs/string/ends-with (string suffix)
    "Return t if STRING ends with SUFFIX."
    (and (string-match (rx-to-string `(: ,suffix eos) t) string) t))

(defun psimacs/string/reverse (str)
    "Reverse the str where str is a string"
    (apply #'string (reverse  (string-to-list str))))

(defun psimacs/string/chomp-end (str)
    "Chomp tailing whitespace from STR."
    (replace-regexp-in-string (rx (* (any " \t\n")) eos) "" str))

(defun psimacs/string/chomp (str)
    "Chomp leading and tailing whitespace from STR."
    (replace-regexp-in-string (rx (or (: bos (* (any " \t\n")))
                                      (: (* (any " \t\n")) eos)))
                                ""
                                str))
#+END_SRC

** User Interface

Some useful user interface functions.

*** Select Item from list

Helper function =psimacs/ui/internal/select-from-item-list= that allows the selection of one item
from a given list of items.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-functions.el
;;
;; User interface functions
;;
(defun psimacs/ui/internal/select-from-item-list (prompt given-list &optional index)
    "Select item from list GIVEN-LIST.
This function simply delegates to ivy-read.
"
    (if (= 1 (length given-list))
        (car given-list)
        (ivy-read prompt given-list :require-match t :preselect index)
    )
)
#+END_SRC

A test function =psimacs/ui/test/select-from-item-list= for function =psimacs/ui/internal/select-from-item-list=.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-functions.el
(defun psimacs/ui/test/1/select-from-item-list ()
  "Test function 'psimacs/ui/internal/select-from-item-list'. Select from 3 element list."
    (interactive)
    (let* (( result (psimacs/ui/internal/select-from-item-list "Hi joe: " '("a" "b" "c"))))
        (message result)
    )
)

(defun psimacs/ui/test/2/select-from-item-list ()
  "Test function 'psimacs/ui/internal/select-from-item-list'. Select from 1 element list."
    (interactive)

    (let* (( result (psimacs/ui/internal/select-from-item-list "Hi joe: " '("a"))))
        (message result)
    )
)

#+END_SRC

** Encoding

Sometimes you need to recode parts of a buffer. The following function allows to partially recode a region.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-functions.el
;;
;; Encoding functions
;;
(defun psimacs/encoding/recode-region (start end &optional coding-system)
  "Replace the region with a recoded text."
  (interactive "r\n\zCoding System (utf-8): ")
  (setq coding-system (or coding-system 'utf-8))
  (let ((buffer-read-only nil)
	(text (buffer-substring start end)))
    (delete-region start end)
    (insert (decode-coding-string (string-make-unibyte text) coding-system))))
#+END_SRC

** File system

Some useful file system functions.

*** Choose directory

Select a directory with ivy.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-functions.el
;;
;; File-system functions
;;
(defun psimacs/file-system/choose-directory (directory-to-start-in)
    "Return a directory chosen by the user.
The user will be prompted to choose a directory starting with 'directory-to-start-in'"
    (let* ((ivy-read-prompt "Choose directory: ")
         (counsel--find-file-predicate #'file-directory-p)
         (default-directory directory-to-start-in)
         (selected-directory
            (ivy-read ivy-read-prompt #'read-file-name-internal :matcher #'counsel--find-file-matcher)
          ))
        selected-directory)
)
#+END_SRC

** Directory local settings

Functionality related to directory local settings.

#+BEGIN_SRC emacs-lisp :tangle config/init-basic-functions.el
;;
;; dir-locals functions
;;
(defun psimacs/dir-locals/reload-for-current-buffer ()
    "Reload dir locals for the current buffer."
    (interactive)
    (let ((enable-local-variables :all))
        (hack-dir-local-variables-non-file-buffer)
    )
)

(defun psimacs/dir-locals/reload-for-all-buffer-in-this-directory ()
    "For every buffer with the same `default-directory` as the current buffer's, reload dir-locals."
    (interactive)
    (let ((dir default-directory))
        (dolist (buffer (buffer-list))
            (with-current-buffer buffer
                (when (equal default-directory dir))
                    (psimacs/dir-locals/reload-for-current-buffer)
            )
        )
    )
)
#+END_SRC

* Advanced Setup

Now that the basic setup is finished we can take credit of the enormous amount of useful *Emacs* packages out
there. It is one of *Psimacs* goals to be a /modern/ editor. Let's see...

** Discoverability

*Emacs* is quite a complicated beast that is not easy to get acquainted with. Fortunately, few packages are available
that mitigate the learning curve. The following packages let you /discover/ key bindings, modes etc.

*** Discover Major Mode

Package [[https://framagit.org/steckerhalter/discover-my-major][discover-my-major]] allows to discover key bindings and descriptions for commands defined by a buffer's
major and minor modes.

| Key binding   | Command                 | Description                                                     |
|---------------+-------------------------+-----------------------------------------------------------------|
| =H-m H-h C-m= | =M-x discover-my-major= | Create a listing of all major-mode keys with their description. |
| =H-m H-h M-m= | =M-x discover-my-mode=  | Create a listing of all MODE keys with their description.       |
|---------------+-------------------------+-----------------------------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-advanced-discoverability.el :var file-description="Advanced discoverability setup"
;;
;; Discover key bindings and descriptions for commands defined by a buffer
;;
(use-package discover-my-major
    :bind (
        :map psimacs/config/global-key-map/special
            ("H-h C-m" . discover-my-major)
            ("H-h M-m" . discover-my-mode)
        )
)
#+END_SRC

*** Helm-Descbinds

The package [[https://github.com/emacs-helm/helm-descbinds][helm-descbinds]] provides an interface to *Emacs's* =describe-bindings= making the currently active key
bindings interactively searchable with helm.

| Key binding | Command              | Description                                                 |
|-------------+----------------------+-------------------------------------------------------------|
| =H-m H-h b= | =M-x helm-descbinds= | Create a listing of all key bindings of current major mode. |
|-------------+----------------------+-------------------------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-advanced-discoverability.el
;;
;; Provide a searchable list of bindings in current major-mode
;;
(use-package helm-descbinds
  :bind (
         :map psimacs/config/global-key-map/special
         ("H-h b" . helm-descbinds)
         )
  :config
  (helm-descbinds-mode)
  )
#+END_SRC

*** Helm-Describe-Modes

The package [[https://github.com/emacs-helm/helm-describe-modes][helm-describe-modes]] provides a Helm interface to *Emacs's* =describe-mode=. It lists the major mode,
active minor modes, and inactive minor modes using Helm, and provides actions for each mode.

| Key binding | Command                   | Description                                          |
|-------------+---------------------------+------------------------------------------------------|
| =H-m H-h m= | =M-x helm-describe-modes= | Create a listing of all modes of current major mode. |
|-------------+---------------------------+------------------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-advanced-discoverability.el
;;
;; Provide a searchable list of bindings in current major-mode
;;
(use-package helm-describe-modes
  :bind (
         :map psimacs/config/global-key-map/special
         ("H-h m" . helm-describe-modes)
         )
;  :config
;  (helm-descbinds-mode)
  )
#+END_SRC

*** Which Key

[[https://github.com/justbur/emacs-which-key][Which-key]] is a minor mode for *Emacs* that
displays the key bindings following your currently entered incomplete command (a prefix)
in a popup. IMHO, this package is one of the most useful packages for *Emacs*.

| Key binding     | Command                                   | Description                                   |
|-----------------+-------------------------------------------+-----------------------------------------------|
| =H-m C-u C-w t= | =M-x psimacs/which-key/toogle-sort-order= | Toggle the which-key-mode sort order.         |
| =H-m C-u C-w c= | =M-x psimacs/which-key/cycle-sort-order=  | Cycle through the which-key-mode sort orders. |
|-----------------+-------------------------------------------+-----------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-advanced-which-key.el :var file-description="Advanced which-key setup"
;;
;; Configuration of the which-key package
;;
(defvar psimacs/config/which-key-sort-order 'which-key-key-order-alpha
    "The psimacs default which key sort order.

Lexicographically, single characters are sorted alphabetically.")

(defun psimacs/which-key/toogle-sort-order ()
    "Toggle the which-key-mode sort order.

    If which key sort order is 'which-key-key-order-alpha' then the
    sort order is set to 'which-key-description-order'. Else it is
    set to 'which-key-key-order-alpha'.
    "
    (interactive "")

    (let ((sort-order psimacs/config/which-key-sort-order))
        (if (eq which-key-sort-order 'which-key-description-order)
            (setq sort-order psimacs/config/which-key-sort-order)
            (setq sort-order 'which-key-description-order)
        )

        (setq which-key-sort-order sort-order)
        (message "which-key sort order is %s" sort-order)
    )
)

(defun psimacs/which-key/cycle-sort-order ()
    "Cycle the which-key-mode sort order.

'which-key-key-order
    The default order is to sort lexicographically within
    each class of key, where the classes and their order are:
        - Special (SPC, TAB, ...)
        - Single Character (ASCII) (a, ...)
        - Modifier (C-, M-, ...)
        - Other

'which-key-key-order-alpha
    Same as default, except single characters are sorted alphabetically.

'which-key-prefix-then-key-order
    Same as default, except all prefix keys are grouped together at the end

'which-key-local-then-key-order
    Same as default, except all keys from local maps shown first.

'which-key-description-order
    Sort based on the key description ignoring case

'which-key-description-order
    Sort based on the key description ignoring case"

    (interactive "")

    (let ((sort-order psimacs/config/which-key-sort-order))

        (if (eq which-key-sort-order 'which-key-key-order)
            (setq sort-order 'which-key-key-order-alpha)

            (if (eq which-key-sort-order 'which-key-key-order-alpha)
                (setq sort-order 'which-key-prefix-then-key-order)

                (if (eq which-key-sort-order 'which-key-prefix-then-key-order)
                    (setq sort-order 'which-key-local-then-key-order)

                    (if (eq which-key-sort-order 'which-key-local-then-key-order)
                        (setq sort-order 'which-key-description-order)

                        (if (eq which-key-sort-order 'which-key-description-order)
                            (setq sort-order 'which-key-key-order)
                        )
                    )
                )
            )
        )

        (setq which-key-sort-order sort-order)
        (message "which-key sort order is %s" sort-order)

        (if (not (eq which-key-sort-order 'which-key-description-order))
            (setq psimacs/config/which-key-sort-order sort-order)
        )
    )
)

(use-package which-key
    :demand t
    :diminish which-key-mode
    :bind (
           :map psimacs/config/global-key-map/special
              ("C-u C-w t" . psimacs/which-key/toogle-sort-order)
              ("C-u C-w c" . psimacs/which-key/cycle-sort-order)
           )
    :init
        (setq which-key-sort-order psimacs/config/which-key-sort-order)
        (setq which-key-idle-delay 0.3)
    :config
        (setq which-key-key-replacement-alist '(
            ("<\\([[:alnum:]-]+\\)>" . "\\1")
            ("left"                  . "◄")
            ("right"                 . "►")
            ("up"                    . "▲")
            ("down"                  . "▼")
            ("delete"                . "DEL") ; delete key
            ("\\`DEL\\'"             . "BS")  ; backspace key
            ("next"                  . "PgDn")
            ("prior"                 . "PgUp"))
        )

        (setq which-key-max-description-length 60)
        (which-key-setup-side-window-right-bottom)

        (which-key-mode t)
)
#+END_SRC

*** Swiper / Ivy / Counsel

[[https://github.com/abo-abo/swiper][Swiper]] gives us a really efficient incremental search
with regular expressions and [[https://oremacs.com/swiper/][Ivy]] / [[https://oremacs.com/swiper/][Counsel]]
replace a lot of ido or helms completion functionality

See also:
- [[https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html][Ivy, Counsel and Swiper]],
- [[https://oremacs.com/2015/04/09/counsel-completion/][Counsel]]

| Key binding | Command                | Description                                                              |
|-------------+------------------------+--------------------------------------------------------------------------|
| =C-s=       | =M-x swiper-iseach=    | A =swiper= that’s not line-based. Incrementally search with an overview. |
| =C-r=       | =M-x swiper=           | Incrementally search with an overview.                                   |
| =C-c v=     | =M-x ivy-push-view=    | Push the current window tree on =ivy-views=                              |
| =C-c V=     | =M-x ivy-pop-view=     | Delete a view to delete from =ivy-views=.                                |
| =H-m C-s a= | =M-x swiper-all=       | Incrementally search in all open buffers.                                |
| =H-m C-s s= | =M-x isearch-forward=  | Incrementally search forward.                                            |
| =H-m C-s r= | =M-x isearch-backward= | Incrementally search backward.                                           |
|-------------+------------------------+--------------------------------------------------------------------------|

*** Ivy

[[https://github.com/abo-abo/swiper][Ivy]] is for quick and easy selection from a list. When *Emacs* prompts for a string
from a list of several possible choices, Ivy springs into action to assist in
narrowing and picking the right string from a vast number of choices.

| Key binding | Command                 | Description                                                             |
|-------------+-------------------------+-------------------------------------------------------------------------|
| =C-x b=     | =M-x ivy-switch-buffer= | Switch to another buffer.                                               |
| =C-c C-S-r= | =M-x ivy-resume=        | Resumes the last Ivy-based completion.                                  |
| =M-y=       | =M-x ivy-next-line=     | In minibuffer, Move cursor vertically down.                             |
| =C-'=       | =M-x ivy-avy=           | Uses avy to select one of the candidates on the current candidate page. |
|-------------+-------------------------+-------------------------------------------------------------------------|

See also [[https://oremacs.com/swiper/][Ivy User Manual]]

#+BEGIN_SRC emacs-lisp :tangle config/init-advanced-swiper-key.el :var file-description="Advanced Ivy, Counsel and Swiper setup"
;;
;; First configure ivy...
;;
(use-package ivy
    :demand t
    :diminish
    :bind (
        ("C-s" . swiper-isearch)
        ("C-r" . swiper)
        ("C-x b"     . ivy-switch-buffer)
        ("C-c C-S-r" . ivy-resume)
        ("C-c v"   . ivy-push-view)
        ("C-c V"   . ivy-pop-view)
        :map ivy-minibuffer-map
            ("M-y"   . ivy-next-line)
        :map ivy-mode-map
            ("C-'"   . ivy-avy)
        :map psimacs/config/global-key-map/special
            ("C-s a" . swiper-all)
            ("C-s s" . isearch-forward)
            ("C-s r" . isearch-backward)
       )
    :config
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)        ; ﻿add recent files and/or bookmarks to ‘ivy-switch-buffer’
        (setq enable-recursive-minibuffers t)   ; if this variable is non-nil, you can invoke commands (such as find-file)
                                                ; that use minibuffers even while the minibuffer is active. Such invocation
                                                ; produces a recursive editing level for a new minibuffer. The outer-level
                                                ; minibuffer is invisible while you are editing the inner one.
        (setq ivy-height 10)                    ; number of result lines to display
        (setq ivy-count-format "%d/%d ")        ; displays the current and total number in the collection in the prompt
        (setq ivy-initial-inputs-alist nil)     ; no regexp by default
        (setq ivy-re-builders-alist             ; configure regexp engine.
            '((t . ivy--regex-ignore-order)))   ; allow input not in order

        (setq ivy-re-builders-alist
            '(
                (ivy-switch-buffer . ivy--regex-plus )
                (swiper            . ivy--regex-plus )
                (counsel-M-x       . ivy--regex-plus )
                (t                 . ivy--regex-plus )
             )
        )

        (setq ivy-initial-inputs-alist nil)
        (define-key ivy-minibuffer-map (kbd "<return>") 'ivy-alt-done)

        (setq magit-completing-read-function 'ivy-completing-read)
        (setq projectile-completion-system 'ivy)
)
#+END_SRC

Display icons for all buffers in ivy with the help of package [[https://github.com/seagle0128/all-the-icons-ivy-rich][all-the-icons-ivy-rich]].

#+BEGIN_SRC emacs-lisp :tangle config/init-advanced-swiper-key.el
;;
;; ... with ivy rich icons ...
;;
(use-package all-the-icons-ivy-rich
    :after ivy-rich
    :config
        (setq all-the-icons-ivy-rich-icon-size 1.0)
        ;(setq inhibit-compacting-font-caches t)

        (plist-put all-the-icons-ivy-rich-display-transformers-list
             'counsel-M-x
             '(:columns
                 (
                    (all-the-icons-ivy-rich-function-icon)
                    (counsel-M-x-transformer (:width 75))
                  (ivy-rich-counsel-function-docstring (:face font-lock-doc-face)))
               )
        )

)
#+END_SRC

The package [[https://github.com/Yevgnen/ivy-rich][ivy-rich]] provides a more friendly interface for ivy.

#+BEGIN_SRC emacs-lisp :tangle config/init-advanced-swiper-key.el
;;
;; ... for enhancing interface for ivy
;;
(use-package ivy-rich
    :after (ivy counsel)
    :init
        (setq ivy-rich-path-style 'abbrev)
        (setq ivy-virtual-abbreviate 'full)
    :config
        (all-the-icons-ivy-rich-mode 1)
        (ivy-rich-mode 1)
)
#+END_SRC

*** Counsel

To keep concerns separated, Ivy doesn't have a lot of other functionality. That's where  [[https://github.com/abo-abo/swiper][Counsel]] comes in.

[[https://github.com/abo-abo/swiper][Ivy mode]] ensures that any Emacs command using =completing-read-function=
uses [[https://github.com/abo-abo/swiper][ivy]] for completion.
Counsel takes this further, providing versions of common *Emacs* commands that are customised to make
the best use of [[https://github.com/abo-abo/swiper][ivy]].

| Key binding | Command                          | Description                                                              |
|-------------+----------------------------------+--------------------------------------------------------------------------|
| =M-x=       | =M-x counsel-M-x=                | Ivy version of =execute-extended-command=.                               |
| =C-M-i=     | =M-x counsel-imenu=              | Jump to a buffer position indexed by =imenu=.                            |
| =C-x C-f=   | =M-x counsel-find-file=          | Counsel, forward to =find-file=.                                         |
| =C-c b=     | =M-x counsel-bookmark=           | Forward to =bookmark-jump= or =bookmark-set= if bookmark does not exist. |
| =C-c c=     | =M-x counsel-compile=            | Call =compile= completing with smart suggestions, optionally for DIR.    |
| =C-c d=     | =M-x counsel-dired-jump=         | Jump to a directory below the current directory.                         |
| =C-c F=     | =M-x counsel-org-file=           | Browse all attachments for current Org file.                             |
| =C-c g=     | =M-x counsel-git=                | Find file in the current git repository.                                 |
| =C-c j=     | =M-x counsel-git-grep=           | Grep for a string in the current Git repository.                         |
| =C-c L=     | =M-x counsel-git-log=            | Call the =git log --grep= shell command.                                 |
| =C-c J=     | =M-x counsel-file-jump=          | Jump to a file below the current directory..                             |
| =C-c k=     | =M-x counsel-ag=                 | Grep for a string in a root directory using =ag=.                        |
| =C-c l=     | =M-x counsel-locate=             | Call a "locate" style shell command.                                     |
| =M-y=       | =M-x counsel-yank-pop=           | Ivy replacement for =yank-pop=.                                          |
| =C-h f=     | =M-x counsel-describe-function=  | Forward to =describe-function=.                                          |
| =C-h i=     | =M-x counsel-info-lookup-symbol= | Forward SYMBOL to =info-lookup-symbol= with ivy completion.              |
| =C-h j=     | =M-x counsel-set-variable=       | Set a variable SYM with completion.                                      |
| =C-h l=     | =M-x counsel-find-library=       | Find Emacs Lisp source. Forward to =find-library=.                       |
| =C-h u=     | =M-x counsel-unicode-char=       | Insert COUNT copies of a unicode char at point.                          |
| =C-h v=     | =M-x counsel-describe-variable=  | Forward to =describe-function=.                                          |
| =C-r=       | =M-x counsel-minibuffer-history= | Browse minibuffer history.                                               |
| =C-r=       | =M-x counsel-expression-history= | In =read-expression-map=                                                 |
|-------------+----------------------------------+--------------------------------------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-advanced-swiper-key.el
;;
;; ... then counsel
;;
(use-package counsel
    :after ivy
    :diminish
    :bind (
        ("M-x"     . counsel-M-x)
        ("C-M-i"   . counsel-imenu)
        ("C-x C-f" . counsel-find-file)
        ("C-c b"   . counsel-bookmark)
        ("C-c c"   . counsel-compile)
        ("C-c d"   . counsel-dired-jump)
        ("C-c g"   . counsel-git)
        ("C-c j"   . counsel-git-grep)
        ("C-c L"   . counsel-git-log)
        ("C-c J"   . counsel-file-jump)
        ("C-c k"   . counsel-ag)
        ("C-c l"   . counsel-locate)
        ("M-y"     . counsel-yank-pop)
        :map help-map
            ("f"   . counsel-describe-function)
            ("v"   . counsel-describe-variable)
            ("l"   . counsel-find-library)
            ("u"   . counsel-unicode-char)
            ("j"   . counsel-set-variable)
            ("i"   . counsel-info-lookup-symbol)
        :map read-expression-map
            ("C-r" . counsel-expression-history)
        :map ivy-minibuffer-map
            ("C-r" . counsel-minibuffer-history)
        )
    :config
        (setq counsel-find-file-at-point t)
)
#+END_SRC

*** Completion

Text completion is an important tool for efficient editing and programming. *Psimacs* uses the [[http://company-mode.github.io/][company-mode]] instead
of the [[https://github.com/auto-complete/auto-complete][auto-complete]] package.

**** Auto-Complete :noexport:

[[https://github.com/auto-complete/auto-complete][Auto-Complete]] is an intelligent auto-completion
extension for *Emacs*. It extends the standard *Emacs* completion interface and provides an
environment that allows users to concentrate more on their own work.

| Key binding | Command           | Description          |
|-------------+-------------------+----------------------|
| =C-n=       | =M-x ac-next=     | Next completion.     |
| =C-p=       | =M-x ac-previous= | Previous completion. |
| =ESC=       | =M-x ac-stop=     | Abort completion.    |
|-------------+-------------------+----------------------|

Remark: *Psimacs* uses Company-mode for completion. The following code is used for reference only.

#+BEGIN_SRC emacs-lisp :tangle config/init-advanced-company.el :var file-description="Advanced company setup"
(use-package auto-complete
    :diminish auto-complete-mode
    :init
        (progn
            (ac-config-default)
            (global-auto-complete-mode t)

            (setq ac-use-menu-map t)
        )

    :bind (
        :map ac-use-menu-map
            ("C-n"      . ac-next)
            ("C-p"      . ac-previous)
            ("<escape>" . ac-stop)
    )
)
#+END_SRC

**** Company

[[http://company-mode.github.io/][Company]] is a text completion framework for *Emacs*.
The name stands for "complete anything". It uses pluggable back-ends and front-ends to
retrieve and display completion candidates.

It comes with several back-ends such as /Elisp/, /Clang/, /Semantic/, /Eclim/, /Ropemacs/, /Ispell/,
/CMake/, /BBDB/, /YASnippet/, /dabbrev/, /etags/, /gtags/, /files/, /keywords/ and a few others.

See also:
- [[http://company-mode.github.io/][company-mode]]
- [[https://www.emacswiki.org/emacs/CompanyMode][EmacsWiki: Company Mode]]
- [[https://github.com/company-mode/company-mode/wiki/Third-Party-Packages][Third Party Packages]]
- [[https://github.com/company-mode/company-mode/issues/68][Company vs. AutoComplete]]
- [[https://cloudnine.github.io/science/2020-07-27-emacs-company-mode/][Emacs Company Mode]]

| Key binding | Command                       | Description          |
|-------------+-------------------------------+----------------------|
| =C-n=       | =M-x company-select-next=     | Next completion.     |
| =C-p=       | =M-x company-select-previous= | Previous completion. |
| =ESC=       | =M-x company-abort=           | Abort completion.    |
|-------------+-------------------------------+----------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-advanced-company.el :var file-description="Advanced company setup"
(use-package company
    :diminish company-mode
    :init
        (setq company-dabbrev-ignore-case      nil)
        (setq company-dabbrev-code-ignore-case nil)
        (setq company-dabbrev-downcase         nil)
        (setq company-begin-commands           '(self-insert-command))
        (setq company-transformers             '(company-sort-by-occurrence))

        (setq company-idle-delay 0.1)
        (setq company-minimum-prefix-length 2)
        (setq company-require-match nil)
        (setq company-selection-wrap-around t)
        (setq company-tooltip-flip-when-above t)
        (setq company-tooltip-align-annotations t)
    :config
        (global-company-mode)

        (setq company-backends
            '(
                (
                    company-files               ; files & directory
                    company-keywords            ; keywords
                    company-capf                ; completion-at-point-functions
                    company-yasnippet           ; yasnippet
                    company-ispell              ; ispell
                    company-abbrev
                    company-dabbrev
                )
                (company-abbrev company-dabbrev)
             )
        )
    :bind (
        :map company-active-map
            ("C-n"      . company-select-next)
            ("C-p"      . company-select-previous)
            ("<escape>" . company-abort)
    )
)
#+END_SRC

** Project Management

Project management is important in order to be able to  work with projects that consist of many files and that
have special project related rules.

*** Projectile

One of the most important thing to install at first is [[https://github.com/bbatsov/projectile][projectile]],
for manage projects in *Emacs*.

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.
Its goal is to provide a nice set of features operating on a project level without introducing
external dependencies. This library provides easy project management and navigation.

The concept of a project is pretty basic - just a folder containing special file.

See also:
- [[https://github.com/bbatsov/projectile][Projectile]]
- [[https://docs.projectile.mx/projectile][Docs]]

Only the basic commands:
| Key binding | Command                         | Description                                   |
|-------------+---------------------------------+-----------------------------------------------|
| =C-c p f=   | =M-x projectile-find-file=      | Find file in current project                  |
| =C-c p p=   | =M-x projectile-switch-project= | Switch project                                |
| =C-c p s g= | =M-x projectile-grep=           | Grep in project                               |
| =C-c p r=   | =M-x projectile-replace=        | Replace in project                            |
| =C-c p m=   | =M-x projectile-commander=      | Invoke a command via the Projectile Commander |
|-------------+---------------------------------+-----------------------------------------------|
|             |                                 |                                               |

All bound commands:
| Key binding     | Command                                                   | Description                                                                                                                    |
|-----------------+-----------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------|
| =C-c p f=       | =M-x projectile-find-file=                                | Display a list of all files in the project. With a prefix argument it will clear the cache first.Find file in current project. |
| =C-c p F=       | =M-x projectile-find-file-in-known-projects=              | Display a list of all files in all known projects.                                                                             |
| =C-c p g=       | =M-x projectile-find-file-dwim=                           | Display a list of all files at point in the project. With a prefix argument it will clear the cache first.                     |
| =C-c p 4 f=     | =M-x projectile-find-file-other-window=                   | Jump to a project's file using completion and show it in another window.                                                       |
| =C-c p 4 g=     | =M-x projectile-find-file-dwim-other-window=              | Jump to a project's file based on context at point and show it in another window.                                              |
| =C-c p 5 f=     | =M-x projectile-find-file-other-frame=                    | Jump to a project's file using completion and show it in another frame.                                                        |
| =C-c p 5 g=     | =M-x projectile-find-file-dwim-other-frame=               | Jump to a project's file based on context at point and show it in another frame.                                               |
| =C-c p a=       | =M-x projectile-find-other-file=                          | Switch between files with the same name but different extensions.                                                              |
| =C-c p 4 a=     | =M-x projectile-find-other-file-other-window=             | Switch between files with the same name but different extensions in other window.                                              |
| =C-c p 5 a=     | =M-x projectile-find-other-file-other-frame=              | Switch between files with the same name but different extensions in other frame.                                               |
| =C-c p l=       | =M-x projectile-find-file-in-directory=                   | Display a list of all files in a directory (that's not necessarily a project).                                                 |
| =C-c p e=       | =M-x projectile-recentf=                                  | Shows a list of recently visited project files.                                                                                |
| =C-c p d=       | =M-x projectile-find-dir=                                 | Display a list of all directories in the project. With a prefix argument it will clear the cache first.                        |
| =C-c p 4 d=     | =M-x projectile-find-dir-other-window=                    | Switch to a project directory and show it in another window.                                                                   |
| =C-c p 5 d=     | =M-x projectile-find-dir-other-frame=                     | Switch to a project directory and show it in another frame.                                                                    |
| =C-c p D=       | =M-x projectile-dired=                                    | Opens the root of the project in dired.                                                                                        |
| =C-c p 4 D=     | =M-x projectile-dired-other-window=                       | Opens the root of the project in dired in another window.                                                                      |
| =C-c p 5 D=     | =M-x projectile-dired-other-frame=                        | Opens the root of the project in dired in another frame.                                                                       |
| =C-c p j=       | =M-x projectile-find-tag=                                 | Find tag in project.                                                                                                           |
| =C-c p T=       | =M-x projectile-find-test-file=                           | Display a list of all test files(specs, features, etc) in the project.                                                         |
| =C-c p s g=     | =M-x projectile-grep=                                     | Run grep on the files in the project.                                                                                          |
| =M-- C-c p s g= |                                                           | Run grep on projectile-grep-default-files in the project.                                                                      |
| =C-c p v=       | =M-x projectile-vc=                                       | Run vc-dir on the root directory of the project.                                                                               |
| =C-c p V=       | =M-x projectile-browse-dirty-projects=                    | Browse dirty version controlled projects.                                                                                      |
| =C-c p I=       | =M-x projectile-ibuffer=                                  | Open an IBuffer window showing all buffers in the current project.                                                             |
| =C-c p b=       | =M-x projectile-switch-to-buffer=                         | Display a list of all project buffers currently open.                                                                          |
| =C-c p 4 b=     | =M-x projectile-switch-to-buffer-other-window=            | Switch to a project buffer and show it in another window.                                                                      |
| =C-c p 5 b=     | =M-x projectile-switch-to-buffer-other-frame=             | Switch to a project buffer and show it in another frame.                                                                       |
| =C-c p 4 C-o=   | =M-x projectile-display-buffer=                           | Display a project buffer in another window without selecting it.                                                               |
| =C-c p k=       | =M-x projectile-kill-buffer=                              | Kills all project buffers.                                                                                                     |
| =C-c p o=       | =M-x projectile-multi-occur=                              | Runs multi-occur on all project buffers currently open.                                                                        |
| =C-c p r=       | =M-x projectile-replace=                                  | Runs interactive query-replace on all files in the projects.                                                                   |
| =C-c p R=       | =M-x projectile-regenerate-tags=                          | Regenerate the project's tags.                                                                                                 |
| =C-c p s r=     | =M-x projectile-ripgrep=                                  | Run a Ripgrep search with 'SEARCH-TERM' at current root.                                                                       |
| =C-c p i=       | =M-x projectile-invalidate-cache=                         | Invalidates the project cache (if existing).                                                                                   |
| =C-c p p=       | =M-x projectile-switch-project=                           | Display a list of known projects you can switch to.                                                                            |
| =C-c p S=       | =M-x projectile-save-project-buffers=                     | Save all project buffers.                                                                                                      |
| =C-c p <left>=  | =M-x projectile-previous-project-buffer=                  | Switch to the previous project buffer.                                                                                         |
| =C-c p <right>= | =M-x projectile-next-project-buffer=                      | Switch to the next project buffer.                                                                                             |
| =C-c p q=       | =M-x projectile-switch-open-project=                      | Switch to a project we have currently opened.                                                                                  |
| =C-c p ESC=     | =M-x projectile-project-buffers-other-buffer=             | Switch to the most recently selected Projectile buffer.                                                                        |
| =C-c p E=       | =M-x projectile-edit-dir-locals=                          | Opens the root dir-locals-file of the project.                                                                                 |
| =C-c p s s=     | =M-x projectile-ag=                                       | Runs ag on the project, performing a literal search.                                                                           |
| =C-c p !=       | =M-x projectile-run-shell-command-in-root=                | Runs shell-command in the root directory of the project.                                                                       |
| =C-c p x s=     | =M-x projectile-run-shell=                                | Invoke 'shell' in the project's root.                                                                                          |
| =C-c p x v=     | =M-x projectile-run-vterm=                                | Invoke 'vterm' in the project's root.                                                                                          |
| =C-c p x e=     | =M-x projectile-run-eshell=                               | Invoke 'eshell' in the project's root.                                                                                         |
| =C-c p u=       | =M-x projectile-run-project=                              | Run project run command.                                                                                                       |
| =C-c p P=       | =M-x projectile-test-project=                             | Run project test command.                                                                                                      |
| =C-c p x g=     | =M-x projectile-run-gdb=                                  | Invoke 'gdb' in the project root.                                                                                              |
| =C-c p &=       | =M-x projectile-run-async-shell-command-in-root=          | Runs async-shell-command in the root directory of the project.                                                                 |
| =C-c p C=       | =M-x projectile-configure-project=                        | Runs a standard configure command for your type of project.                                                                    |
| =C-c p c=       | =M-x projectile-compile-project=                          | Runs a standard compilation command for your type of project.                                                                  |
| =C-c p L=       | =M-x projectile-install-project=                          | Run project install command.                                                                                                   |
| =C-c p K=       | =M-x projectile-package-project=                          | Run project package command.                                                                                                   |
| =C-c p t=       | =M-x projectile-toogle-between-implementation-and-test=   | Toggle between an implementation file and its test file.                                                                       |
| =C-c p 4 t=     | =M-x projectile-find-implementation-or-test-other-window= | Jump to implementation or test file in other window.                                                                           |
| =C-c p 5 t=     | =M-x projectile-find-implementation-or-test-other-frame=  | Jump to implementation or test file in other frame.                                                                            |
| =C-c p z=       | =M-x projectile-cache-current-file=                       | Adds the currently visited file to the cache.                                                                                  |
| =C-c p m=       | =M-x projectile-commander=                                | Execute a Projectile command with a single letter.                                                                             |
|-----------------+-----------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------|

Special global command
| Key binding | Command                                               | Description                                             |
|-------------+-------------------------------------------------------+---------------------------------------------------------|
| =C-c p C-n= | =M-x psimacs/projectile/create-empty-projectile-file= | Choose diretory and create an empty '.projectile' file. |
|-------------+-------------------------------------------------------+---------------------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-advanced-projectile.el :var file-description="Advanced projectile setup"
;;
;; Create a marker file that is recognized by projectile
;;
(defun psimacs/projectile/create-empty-projectile-file ()
    "Choose diretory and create an empty '.projectile' file.
The file is only created if it does not already exist."
    (interactive)
    (let* ((file (concat (psimacs/file-system/choose-directory default-directory) ".projectile")))
        (unless (file-exists-p file)
            (with-temp-buffer (write-file file))
        )
    )
)
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle config/init-advanced-projectile.el
;;
;; Configure the projectile package
;;
(use-package projectile
    ;:diminish projectile-mode
    :hook ((text-mode cmake-mode prog-mode) . projectile-mode)
    :bind (
            :map projectile-mode-map
                ("C-c p"     . projectile-command-map)
                ("C-c p C-n" . psimacs/projectile/create-empty-projectile-file)
          )
    :init
        (setq projectile-mode-line-prefix " ℘")
        ;(setq projectile-require-project-root nil)
        (setq projectile-indexing-method 'native)
        ;(setq projectile-indexing-method 'alien) ; Warning: The contents of .projectile are ignored when using the alien project indexing method.

        ;(setq projectile-sort-order 'default)
        ;(setq projectile-sort-order 'recentf)
        ;(setq projectile-sort-order 'recently-active)
        ;(setq projectile-sort-order 'modification-time)

        (setq projectile-known-projects-file psimacs/config/projectile-known-projects-file)

    :config
        (setq projectile-project-search-path psimacs/config/project-search-path)
        (setq projectile-globally-ignored-files '(
                "TAGS" "\#*\#" "*~" "*.la" "*.o" "*.pyc" "*.elc" "*.exe"
                "*.zip" "*.tar.*" "*.rar" "*.7z"
                "*.aux" "*.log" "*.out" "*.pdf"
            )
        )

        ;(projectile-mode 1)
)
#+END_SRC

**** projectile-cmake

The package [[https://github.com/hatlafax/projectile-cmake][projectile-cmake]] gives fine grained support of [[https://cmake.org/][CMake]] with Emacs projectile.

#+ATTR_HTML: :class styledtable
| Key binding     | Command                                                        | Description                                                                 |
|-----------------+----------------------------------------------------------------+-----------------------------------------------------------------------------|
| =C-c C-p s d=   | =M-x projectile-cmake-select-build-dir=                        | Select the current project build dir.                                       |
| =C-c C-p s t=   | =M-x projectile-cmake-select-build-type=                       | Select the current project build type.                                      |
| =C-c C-p s g=   | =M-x projectile-cmake-select-generator=                        | Select the current project configuration generator.                         |
| =C-c C-p s a=   | =M-x projectile-cmake-select-architecture=                     | Select the current project configuration architecture.                      |
| =C-c C-p s s=   | =M-x projectile-cmake-select-toolset=                          | Select the current project configuration toolset.                           |
| =C-c C-p s c=   | =M-x projectile-cmake-select-toolchain=                        | Select the current project configuration toolchain.                         |
| =C-c C-p s r g= | =M-x projectile-cmake-select-run-file=                         | Select the file that should be run for the project.                         |
| =C-c C-p s r d= | =M-x projectile-cmake-select-run-file-debug=                   | Select the file that should be run for the debug project.                   |
| =C-c C-p s r r= | =M-x projectile-cmake-select-run-file-release=                 | Select the file that should be run for the release project.                 |
| =C-c C-p s r i= | =M-x projectile-cmake-select-run-file-release-with-debug-info= | Select the file that should be run for the release with debug info project. |
| =C-c C-p s r m= | =M-x projectile-cmake-select-run-file-minimal-size-release=    | Select the file that should be run for the minimal size release project.    |
| =C-c C-p t d=   | =M-x projectile-cmake-toggle-run-in-build-dir=                 | Toggle the run in build directory flag variable.                            |
|-----------------+----------------------------------------------------------------+-----------------------------------------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-advanced-projectile.el
;;
;; Configure the projectile-cmake package
;;
(use-package projectile-cmake
    :diminish projectile-cmake-mode
    :straight (projectile-cmake :host github :repo "hatlafax/projectile-cmake")
    ;:straight nil
    :bind (
            :map projectile-cmake-mode-map
                ("C-c C-p" . projectile-cmake-command-map)
                ("C-c C-p h" . hydra-projectile-cmake/body)
          )
    :hook (projectile-mode . projectile-cmake-global-mode)
    :init
        (setq projectile-cmake-executable           psimacs/config/cmake-runtime-exe)
        (setq projectile-cmake-clang-c-executable   psimacs/config/clang-c-compiler-runtime-exe)
        (setq projectile-cmake-clang-c++-executable psimacs/config/clang-c++-compiler-runtime-exe)
)
#+END_SRC

**** Counsel-projectile

Projectile has native support for using ivy as its completion system.
[[https://github.com/ericdanan/counsel-projectile][Counsel-projectile]] provides further ivy integration into projectile by
taking advantage of ivy's support for selecting from a list of actions
and applying an action without leaving the completion session.
Concretely, counsel-projectile defines replacements for existing
projectile commands as well as new commands that have no projectile counterparts.

#+BEGIN_SRC emacs-lisp :tangle config/init-advanced-projectile.el
;;
;; counsel support for projectile
;;
(use-package counsel-projectile
    :after (projectile)
    :config (counsel-projectile-mode)
)
#+END_SRC

* Major Modes
** Org-Mode

Package [[https://orgmode.org][org-mode]] is for keeping notes, maintaining TODO lists,
planning projects, and authoring documents with a fast and effective plain-text system.

The following links might be useful for diving deeper into [[http://orgmode.org/][Org-Mode]]:
- [[http://orgmode.org/manual/index.html][Org Mode Manual]]
- [[http://orgmode.org/worg/][Worg, the Org Mode Community]]
- [[https://www.emacswiki.org/emacs/OrgMode][EmacsWiki: Org Mode]]
- [[https://www.suenkler.info/notes/emacs-orgmode/][Aufgabenverwaltung im Emacs Org mode]]
- [[https://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][Dig Into Org Mode]]
- [[http://orgmode.org/worg/org-contrib/babel/][Org Mode Babel]]
- [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][Introduction to Literate Programming]]
- [[https://org-babel.readthedocs.io/en/latest/][Readthedocs about Org Babel]]
- [[http://orgmode.org/worg/orgcard.html][Org Mode reference card]]
- [[http://orgmode.org/orgcard.pdf][Org Mode Ref Card]]
- [[http://ergoemacs.org/emacs/emacs_org_markup.html][Org Mode Markup Cheatsheet]]
- [[http://pragmaticemacs.com/][Pragmatic Emacs]]
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]

*** Temporarily workaround Org-Mode problem :noexport:

*Psimacs* relies on features provided by the [[https://orgmode.org/worg/org-contrib/][Org-mode Contributed Packages]].
At the time of working on this setup, I encountered a problem in the =org-plus-contrib-20200907= package.

The code in this section circumvented the problem by patching one file in this package.
Hopefully, I can get rid of this hack in the near future.

Remove the built-in version of [[https://orgmode.org][org-mode]] from the load-path.

#+BEGIN_SRC emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Remove the built-in version of org-mode from the load-path.
;;
(require 'cl-seq)
(setq load-path
      (cl-remove-if
       (lambda (x)
         (string-match-p "org$" x))
       load-path))
#+END_SRC

The current =org-plus-contrib-20200907= package does have an error in file =org.el= in line 5320.
We use a loaclly patched version of this package with a fixed =org.el=.
We load this patched package by the following =load-path=  modification.

Check on [[https://orgmode.org/elpa/][OrgElpa]] and on [[https://code.orgmode.org/bzg/org-mode][org-mode]].

Hopefully, this will be fixed upstream in the near future. In that case the following statement is
to be removed and the =:ensure org-plus-contrib= is to be activated.

#+BEGIN_SRC emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; Add local path to org-plus-contrib to search path
;;
(add-to-list 'load-path (concat psimacs/config/site-lisp-dir "org-plus-contrib-20200907"))
#+END_SRC

*** The main Org-Mode configuration

If the temporary workaround is in use, the =:straight org-plus-contrib= statement needs to be commented!

#+BEGIN_SRC emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; The main org-mode configuration
;;
(use-package org
    :mode (("\\.\\(org\\|org_archive\\)$" . org-mode))
    :straight org-plus-contrib
    :config
        (setq org-return-follows-link t)
        (setq org-drawers (quote ("PROPERTIES" "CLOCKTABLE" "LOGBOOK" "CLOCK")))
        (setq org-log-done 'time)
        (setq org-log-into-drawer t)
        ;(setq org-completion-use-ido t)
        ;(setq org-tags-exclude-from-inheritance '("review")))

        (setq
            org-todo-keywords '(
                (sequence "TODO(t/!)" "WORK(w/!)" "WAIT(a/!)" "HOLD(h@/!)" "|" "DONE(d/!)" "STOP(s@/!)")
                (sequence "REPORT(r/!)" "BUG(b/!)" "FEEDBACK(f@/!)" "WAITING(i@/!)" "VERIFY(v@/!)" "KNOWNCAUSE(k@/!)" "|" "FIXED(x/!)")
                (sequence "|" "CANCELED(c@/!)" "DELEGATED(e@/!)")
            )
        )

        ;(setq
        ;    org-todo-keyword-faces '(
        ;        ("TODO"         . org-todo)
        ;        ("WORK"         . (:background "Snow" :foreground "DeepPink"  :box (:line-width 1 :style none)))
        ;        ("WAIT"         . (:background "Snow" :foreground "DeepPink"  :box (:line-width 1 :style none)))
        ;        ("HOLD"         . (:background "Snow" :foreground "DeepPink"  :box (:line-width 1 :style none)))
        ;        ("DONE"         . (org-done))
        ;        ("STOP"         . (org-done))

        ;        ("REPORT"       . org-todo)
        ;        ("BUG"          . org-todo)
        ;        ("FEEDBACK"     . (:background "Snow" :foreground "DeepPink"  :box (:line-width 1 :style none)))
        ;        ("WAITING"      . (:background "Snow" :foreground "DeepPink"  :box (:line-width 1 :style none)))
        ;        ("VERIFY"       . (:background "Snow" :foreground "DeepPink"  :box (:line-width 1 :style none)))
        ;        ("KNOWNCAUSE"   . (:background "Snow" :foreground "DeepPink"  :box (:line-width 1 :style none)))
        ;        ("FIXED"        . (org-done))

        ;        ("CANCELED"     . (org-done))
        ;        ("DELEGATED"    . (org-done))
        ;    )
        ;)

        (setq org-tag-alist
            (quote (
                ; Rough task assignment
                (:startgroup)
                ("Science"      . ?s)
                ("Learn"        . ?l)
                ("Develop"      . ?d)
                ("Information"  . ?i)
                ("Bug"          . ?b)
                ("System"       . ?y)
                ("Configuration". ?f)
                (:endgroup)

                ; Category of the task
                (:startgroup)
                ("CADdy"        . ?c)
                ("RenderEngine" . ?r)
                ("Zinc"         . ?z)
                ("OpenSG"       . ?o)
                ("OpenGL"       . ?g)
                ("Boost"        . ?t)
                ("Emacs"        . ?e)
                ("BuildSystem"  . ?m)
                ("CADdyPython"  . ?p)
                (:endgroup)

                ; Context
                (:startgroup)
                ("2D"           . ?2)
                ("3D"           . ?3)
                ("Graphic"      . ?h)
                (:endgroup)

                ; Language
                (:startgroup)
                ("Cpp"          . ?+)
                ("Python"       . ?P)
                ("Lisp"         . ?L)
                ("Bash"         . ?S)
                ("Prolog"       . ?J)
                (:endgroup)

                ; ToDo-Keywrds
                (:startgroup)
                ("TODO"         . ?T)
                ("WORK"         . ?W)
                ("WAIT"         . ?A)
                ("HOLD"         . ?H)
                ("DONE"         . ?D)
                ("STOP"         . ?O)

                ("REPORT"       . ?R)
                ("BUG"          . ?B)
                ("FEEDBACK"     . ?F)
                ("WAITING"      . ?I)
                ("VERIFY"       . ?V)
                ("KNOWNCAUSE"   . ?K)
                ("FIXED"        . ?X)

                ("CANCELED"     . ?C)
                ("DELEGATED"    . ?E)
                (:endgroup)

                ; Common unspecied tags
                ("Faq"          . ??)
                ("Question"     . ?&)
                ("Note"         . ?n)
                ("Meeting"      . ?x)
                ("Private"      . ?a)
                ("Time"         . ?k)
                ("Important"    . ?#)
                ("Flagged"      . ?!)
            ))
        )

        ; maybe later
        ;(setq org-fast-tag-selection-single-key (quote auto))
        ;(setq org-fast-tag-selection-single-key (quote expert))

        (setq org-use-fast-tag-selection t)
        (setq org-complete-tags-always-offer-all-agenda-tags t)

        (add-hook 'org-capture-mode-hook
            (lambda ()
                (setq-local org-tag-alist (org-global-tags-completion-table))
            )
        )

        ;(add-hook 'org-capture-mode-hook
        ;    (lambda ()
        ;        (save-restriction
        ;            (widen)
        ;            (setq-local org-tag-alist (org-get-buffer-tags))
        ;        )
        ;    )
        ;)

        (setq org-todo-state-tags-triggers
            (quote (
                ("TODO"                 ("WORK") ("WAIT") ("HOLD") ("DONE") ("STOP") ("REPORT") ("BUG") ("FEEDBACK") ("WAITING") ("VERIFY") ("KNOWNCAUSE") ("FIXED") ("CANCELED") ("DELEGATED") ("TODO"       . t))
                ("WORK"        ("TODO")          ("WAIT") ("HOLD") ("DONE") ("STOP") ("REPORT") ("BUG") ("FEEDBACK") ("WAITING") ("VERIFY") ("KNOWNCAUSE") ("FIXED") ("CANCELED") ("DELEGATED") ("WORK"       . t))
                ("WAIT"        ("TODO") ("WORK")          ("HOLD") ("DONE") ("STOP") ("REPORT") ("BUG") ("FEEDBACK") ("WAITING") ("VERIFY") ("KNOWNCAUSE") ("FIXED") ("CANCELED") ("DELEGATED") ("WAIT"       . t))
                ("HOLD"        ("TODO") ("WORK") ("WAIT")          ("DONE") ("STOP") ("REPORT") ("BUG") ("FEEDBACK") ("WAITING") ("VERIFY") ("KNOWNCAUSE") ("FIXED") ("CANCELED") ("DELEGATED") ("HOLD"       . t))
                ("DONE"        ("TODO") ("WORK") ("WAIT") ("HOLD")          ("STOP") ("REPORT") ("BUG") ("FEEDBACK") ("WAITING") ("VERIFY") ("KNOWNCAUSE") ("FIXED") ("CANCELED") ("DELEGATED") ("DONE"       . t))
                ("STOP"        ("TODO") ("WORK") ("WAIT") ("HOLD") ("DONE")          ("REPORT") ("BUG") ("FEEDBACK") ("WAITING") ("VERIFY") ("KNOWNCAUSE") ("FIXED") ("CANCELED") ("DELEGATED") ("DONE"       . t))

                ("REPORT"      ("TODO") ("WORK") ("WAIT") ("HOLD") ("DONE") ("STOP")            ("BUG") ("FEEDBACK") ("WAITING") ("VERIFY") ("KNOWNCAUSE") ("FIXED") ("CANCELED") ("DELEGATED") ("REPORT"     . t))
                ("BUG"         ("TODO") ("WORK") ("WAIT") ("HOLD") ("DONE") ("STOP") ("REPORT")         ("FEEDBACK") ("WAITING") ("VERIFY") ("KNOWNCAUSE") ("FIXED") ("CANCELED") ("DELEGATED") ("BUG"        . t))
                ("FEEDBACK"    ("TODO") ("WORK") ("WAIT") ("HOLD") ("DONE") ("STOP") ("REPORT") ("BUG")              ("WAITING") ("VERIFY") ("KNOWNCAUSE") ("FIXED") ("CANCELED") ("DELEGATED") ("FEEDBACK"   . t))
                ("WAITING"     ("TODO") ("WORK") ("WAIT") ("HOLD") ("DONE") ("STOP") ("REPORT") ("BUG") ("FEEDBACK")             ("VERIFY") ("KNOWNCAUSE") ("FIXED") ("CANCELED") ("DELEGATED") ("WAITING"    . t))
                ("VERIFY"      ("TODO") ("WORK") ("WAIT") ("HOLD") ("DONE") ("STOP") ("REPORT") ("BUG") ("FEEDBACK") ("WAITING")            ("KNOWNCAUSE") ("FIXED") ("CANCELED") ("DELEGATED") ("VERIFY"     . t))
                ("KNOWNCAUSE"  ("TODO") ("WORK") ("WAIT") ("HOLD") ("DONE") ("STOP") ("REPORT") ("BUG") ("FEEDBACK") ("WAITING") ("VERIFY")                ("FIXED") ("CANCELED") ("DELEGATED") ("KNOWNCAUSE" . t))
                ("FIXED"       ("TODO") ("WORK") ("WAIT") ("HOLD") ("DONE") ("STOP") ("REPORT") ("BUG") ("FEEDBACK") ("WAITING") ("VERIFY") ("KNOWNCAUSE")           ("CANCELED") ("DELEGATED") ("FIXED"      . t))

                ("CANCELLED"   ("TODO") ("WORK") ("WAIT") ("HOLD") ("DONE") ("STOP") ("REPORT") ("BUG") ("FEEDBACK") ("WAITING") ("VERIFY") ("KNOWNCAUSE") ("FIXED")              ("DELEGATED") ("CANCELED"   . t))
                ("DELEGATED"   ("TODO") ("WORK") ("WAIT") ("HOLD") ("DONE") ("STOP") ("REPORT") ("BUG") ("FEEDBACK") ("WAITING") ("VERIFY") ("KNOWNCAUSE") ("FIXED") ("CANCELED")               ("DELEGATED"  . t))
            ))
        )

        (defun psimacs/internal/org-remove-empty-drawer-on-clock-out()
            (save-excursion
                (beginning-of-line 0)
                (org-remove-empty-drawer-at "LOGBOOK" (point))
            )
        )

        (add-hook 'org-clock-out-hook 'psimacs/internal/org-remove-empty-drawer-on-clock-out 'append)

        (setq org-use-fast-todo-selection t)
        (setq org-treat-S-cursor-todo-selection-as-state-change nil)
        (setq org-src-fontify-natively t)
        (setq org-list-description-max-indent 5)

        (setq org-adapt-indentation nil)
        ;(setq org-hide-leading-stars 'hidestars) ; see org-superstar

        (setq org-indent-mode-turns-off-org-adapt-indentation t)
        (setq org-indent-mode-turns-on-hiding-stars t)

        (setq org-src-preserve-indentation t)

        (org-indent-mode t)

        (setq org-agenda-files (list psimacs/config/agenda-dir))

        (setq org-highest-priority ?A)
        (setq org-lowest-priority  ?C)
        (setq org-default-priority ?A)

        (setq org-priority-faces '(
            (?A . (:background "Snow" :foreground "Red"))
            (?B . (:background "Snow" :foreground "BlueViolet"))
            (?C . (:background "Snow" :foreground "DarkGreen"))
        ))

        (setq org-agenda-window-setup 'current-window)

        (unless (file-directory-p psimacs/config/agenda-dir)
            (mkdir psimacs/config/agenda-dir t)
        )

        (defun psimacs/internal/org-capture-file-link ()
            (let (
                (result "")
                (file (org-capture-get :original-file))
                )
                (when file
                    (setq result
                        (concat
                            "[[file:"
                            file
                            "::"
                            (with-current-buffer (org-capture-get :original-file-nondirectory) (number-to-string (line-number-at-pos)))
                            "]["
                            (org-capture-get :original-file-nondirectory)
                            "]]")))
                result
            )
        )

        (defun psimacs/internal/org-capture-code-block ()
            (let (region-text result mode arg)
                (setq retult "")
                (setq region-text (org-capture-get :initial))
                (if (> (length region-text) 0)
                    (progn
                        (setq mode (with-current-buffer (org-capture-get :original-file-nondirectory) major-mode))
                        (setq arg "")
                        (when (equal mode 'awk-mode)          (setq arg "awk"))
                        (when (equal mode 'c++-mode)          (setq arg "cpp"))
                        (when (equal mode 'c-mode)            (setq arg "C"))
                        (when (equal mode 'calc-mode)         (setq arg "calc"))
                        (when (equal mode 'graphviz-dot-mode) (setq arg "dot"))
                        (when (equal mode 'lisp-mode)         (setq arg "emacs-lisp"))
                        (when (equal mode 'latex-mode)        (setq arg "latex"))
                        (when (equal mode 'org-mode)          (setq arg "org"))
                        (when (equal mode 'perl-mode)         (setq arg "perl"))
                        (when (equal mode 'plantuml-mode)     (setq arg "plantuml"))
                        (when (equal mode 'python-mode)       (setq arg "python"))
                        (when (equal mode 'sh-mode)           (setq arg "shell"))
                        (when (equal mode 'prolig-mode)       (setq arg "prolog"))

                        (setq result (concat
                            "\n"
                            "#+BEGIN_SRC" " " arg "\n"
                            region-text "\n"
                            "#+END_SRC" "\n"
                            ))))
                result
            )
        )

        (defun psimacs/internal/org-catpure-set-templates ()
            (let (
                    (code-point-template "* %? %^G\nEntered: %U\n%(psimacs/internal/org-capture-file-link)\n %(psimacs/internal/org-capture-code-block)\n")
                    (todo-template      "* TODO [#A] %? %^G\nEntered:   %U\nScheduled: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%i\n")
                    (note-template      "* %? :Note:%^G\nEntered: %U\n")
                    (meeting-template   "* %? :Meeting:%^G\nEntered:   %U\nScheduled: %T\n")
                    (journal-template   "** %^{Heading}\nEntered: %U\n%i\n%a")
                    (log-time-template  "** %U - %^{Activity} :Time:")

                    (code-diary-file (concat psimacs/config/agenda-dir psimacs/config/org-capture-coding-diary-file))
                    (diary-file      (concat psimacs/config/agenda-dir "Diary.org"))
                    (journal-file    (concat psimacs/config/agenda-dir "Journal.org"))
                    (time-log-file   (concat psimacs/config/agenda-dir "TimeLog.org"))
                )

                (setq org-capture-templates
                    `(
                        ("c" "Code Point" entry (file+headline ,diary-file      "Code Points") ,code-point-template :empty-lines 1)
                        ("C" "Code Point" entry (file+headline ,code-diary-file "Code Points") ,code-point-template :empty-lines 1)
                        ("t" "ToDo"       entry (file+headline ,diary-file      "Tasks")       ,todo-template       :empty-lines 1)
                        ("T" "ToDo"       entry (file+headline ,code-diary-file "Tasks")       ,todo-template       :empty-lines 1)
                        ("n" "Note"       entry (file+headline ,diary-file      "Notes")       ,note-template       :empty-lines 1)
                        ("N" "Note"       entry (file+headline ,code-diary-file "Notes")       ,note-template       :empty-lines 1)
                        ("m" "Meeting"    entry (file+headline ,diary-file      "Meetings")    ,meeting-template    :empty-lines 1)
                        ("M" "Meeting"    entry (file+headline ,code-diary-file "Meetings")    ,meeting-template    :empty-lines 1)
                        ("j" "Journal"    entry (file+datetree ,journal-file)                  ,journal-template)
                        ("l" "Log Time"   entry (file+datetree ,time-log-file)                 ,log-time-template)
                    )
                )
            )
        )

        (psimacs/internal/org-catpure-set-templates)

        ;
        ; Counsel tag completion does not work properly.
        ;
        (require 'counsel)
        (with-eval-after-load 'org
            (define-key org-mode-map (kbd "C-c C-S-q") #'counsel-org-tag))
        (with-eval-after-load 'org-agenda
            (define-key org-agenda-mode-map (kbd "C-c C-S-q") #'counsel-org-tag-agenda))

        ; warn me of any deadlines in next 7 days
        (setq org-deadline-warning-days 7)
        ; show me tasks scheduled or due in next fortnight
        (setq org-agenda-span (quote fortnight))
        ; don't show tasks as scheduled if they are already shown as a deadline
        (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
        ; don't give awarning colour to tasks with impending deadlines if they are scheduled to be done
        (setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
        ; don't show tasks that are scheduled or have deadlines in the normal todo list
        (setq org-agenda-todo-ignore-deadlines (quote all))
        (setq org-agenda-todo-ignore-scheduled (quote all))
        ; sort tasks in order of when they are due and then by priority
        (setq org-agenda-sorting-strategy
            (quote
                (

                    (agenda deadline-up priority-down)
                    (todo priority-down category-keep)
                    (tags priority-down category-keep)
                    (search category-keep)
                )
            )
        )

        ; Do not dim blocked tasks
        (setq org-agenda-dim-blocked-tasks nil)
        ; Compact the block agenda view
        (setq org-agenda-compact-blocks t)

        (setq org-confirm-babel-evaluate nil)


        (defun psimacs/internal/org-inline-css-hook (exporter)
            "Insert custom inline css on html export.

Insert custom inline css to automatically set the background of
code to whatever theme I'm using's background."
            (when (eq exporter 'html)
                (let* (
                        (pre-bg (face-background 'default))
                        (pre-fg (face-foreground 'default))
                    )
                    (setq org-html-head-extra
                        (concat
                            org-html-head-extra
                            (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n" pre-bg pre-fg)
                        )
                    )
                )
            )
        )


        (add-hook 'org-export-before-processing-hook 'psimacs/internal/org-inline-css-hook)

        ;; Org babel language support
        (org-babel-do-load-languages 'org-babel-load-languages '(
            (C . t)
            (python . t)
            (plantuml . t)
            (dot . t)
            (emacs-lisp . t)
            (latex . t)
        ))

        (setq org-plantuml-jar-path (expand-file-name psimacs/config/plantuml-jar-file))


        (defun psimacs/internal/export-filter-section-canceled (text backend info)
          "Do not export the content of sections marked as canceled."
          (message "TEXT: %s" text)
          ""
          )

        (require 'ox)
        (add-to-list 'org-export-filter-headline-functions 'psimacs/internal/export-filter-section-canceled)

    :bind (
        ("C-c a" . org-agenda)
    )
    :bind* (
        ("C-c c" . org-capture)
    )
)
#+END_SRC

*** Prettify headings with Org-Superstar

Prettify headings and plain lists in Org mode. Package [[https://github.com/integral-dw/org-superstar-mode][org-superstar]] is a direct descendant of
[[https://github.com/sabof/org-bullets][org-bullets]], with most of the code base completely rewritten.


#+BEGIN_SRC emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; Prettify headings and plain lists in Org mode
;;
(use-package org-superstar
    :after org
    :config
        ;(setq org-superstar-special-todo-items t)

        ;(setq org-superstar-headline-bullets-list '( "Ⅰ" "Ⅱ" "Ⅲ" "Ⅳ" "Ⅴ" "Ⅵ" "Ⅶ" "Ⅷ" "Ⅸ" "Ⅹ" ))
        (setq org-superstar-headline-bullets-list '( "✸" "◆" "★" "▶" "✿" "✜" "■" "●" ))
        (setq org-superstar-item-bullet-alist '( (?* . ?☆) (?+ . ?○) (?- . ?▷) ))

        ;    ;; Document Title, (\huge)
        (set-face-attribute 'org-document-title nil
                             :height 2.074
                             :foreground 'unspecified
                             :inherit 'default
        )

        (set-face-attribute 'org-superstar-item nil :height 1.2)
        (set-face-attribute 'org-superstar-header-bullet nil :height 1.2)
        (set-face-attribute 'org-superstar-leading nil :height 1.3)

        (setq org-hide-leading-stars nil)
        ;(setq org-superstar-leading-bullet ?\s)
        ;(setq org-superstar-leading-bullet ".")
        (setq org-superstar-leading-bullet "‧")

        ;(setq org-superstar-remove-leading-stars t)

        ;; Hide away leading stars on terminal.
        (setq org-superstar-leading-fallback ?\s)

        ;(setq inhibit-compacting-font-caches t)

        (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
)
#+END_SRC

*** Insert links from the clipboard

The [[https://github.com/rexim/org-cliplink][org-cliplink]] package inserts [[https://orgmode.org][org-mode]] links from the clipboard.

A simple command =C-x p i= that takes a URL from the clipboard and inserts an [[https://orgmode.org][org-mode]] link with a title
of a page found by the URL into the current buffer.

See also: [[https://github.com/rexim/org-cliplink][org-cliplink]]

| Keybinding | Command            | Description                               |
|------------+--------------------+-------------------------------------------|
| =C-x p i=  | =M-x org-cliplink= | Insert [[https://orgmode.org][org-mode]] links from the clipboard. |
|------------+--------------------+-------------------------------------------|

#+BEGIN_SRC emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; Insert links from the clipboard
;;
(use-package org-cliplink
    :after org
    :bind*
        ("C-x p i" . org-cliplink)
)
#+END_SRC

*** Auto completion for Org-Mode :noexport:

[[https://github.com/aki2o/org-ac][Org-ac]] is an extension of *Emacs* that provide auto-complete sources for [[https://orgmode.org][org-mode]].
You'll be able to use auto-complete as substitute for pcomplete which is bound
to =M-<TAB>=.

#+BEGIN_SRC emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; Provide auto-complete sources for org-mode
;;
(use-package org-ac
    :after org
    :init
        (org-ac/config-default)
)
#+END_SRC

*** Presentation with Org-Mode

Presenting with [[https://orgmode.org][org-mode]]:
- [[http://orgmode.org/worg/exporters/beamer/ox-beamer.html][Org Manual: Beamer presentations]]
- [[http://orgcandman.github.io/blog/2016/01/:dat/Writing-emacs-presentations-with-beamer.html][Writing presentations in emacs with Beamer]]
- [[https://github.com/eschulte/epresent][epresent Package]]
- [[http://orgmode.org/worg/org-tutorials/non-beamer-presentations.html][Writing Non-Beamer presentations in org-mode]]
- [[http://sachachua.com/blog/2013/04/how-to-present-using-org-mode-in-emacs/][How to present using Org-mode in Emacs]]

#+BEGIN_SRC emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; Presentations with org-mode
;;
(use-package ox-beamer :straight nil :after org)
(use-package epresent :straight t :after org)
#+END_SRC

*** Keybinding for Org-Mode                                        :noexport:

Some personal org-mode Key-bindings. This is only a suggestion from [[http://doc.norang.ca/org-mode.html][Organize Your Life In Plain Text!]].
Therefore it is currently diasabled and should be activated after getting familiar with [[https://orgmode.org][org-mode]].

#+BEGIN_SRC emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; Custom Org-Mode key bindings
;;
(global-set-key (kbd "<f12>") 'org-agenda)
(global-set-key (kbd "<f5>") 'bh/org-todo)
(global-set-key (kbd "<S-f5>") 'bh/widen)
(global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
(global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
(global-set-key (kbd "<f9> <f9>") 'bh/show-org-agenda)
(global-set-key (kbd "<f9> b") 'bbdb)
(global-set-key (kbd "<f9> c") 'calendar)
(global-set-key (kbd "<f9> f") 'boxquote-insert-file)
(global-set-key (kbd "<f9> g") 'gnus)
(global-set-key (kbd "<f9> h") 'bh/hide-other)
(global-set-key (kbd "<f9> n") 'bh/toggle-next-task-display)

(global-set-key (kbd "<f9> I") 'bh/punch-in)
(global-set-key (kbd "<f9> O") 'bh/punch-out)

(global-set-key (kbd "<f9> o") 'bh/make-org-scratch)

(global-set-key (kbd "<f9> r") 'boxquote-region)
(global-set-key (kbd "<f9> s") 'bh/switch-to-scratch)

(global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
(global-set-key (kbd "<f9> T") 'bh/toggle-insert-inactive-timestamp)

(global-set-key (kbd "<f9> v") 'visible-mode)
(global-set-key (kbd "<f9> l") 'org-toggle-link-display)
(global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)
(global-set-key (kbd "C-<f9>") 'previous-buffer)
(global-set-key (kbd "M-<f9>") 'org-toggle-inline-images)
(global-set-key (kbd "C-x n r") 'narrow-to-region)
(global-set-key (kbd "C-<f10>") 'next-buffer)
(global-set-key (kbd "<f11>") 'org-clock-goto)
(global-set-key (kbd "C-<f11>") 'org-clock-in)
(global-set-key (kbd "C-s-<f12>") 'bh/save-then-publish)
(global-set-key (kbd "C-c c") 'org-capture)

(defun bh/hide-other ()
    (interactive)
    (save-excursion
        (org-back-to-heading 'invisible-ok)
        (hide-other)
        (org-cycle)
        (org-cycle)
        (org-cycle)))

(defun bh/set-truncate-lines ()
    "Toggle value of truncate-lines and refresh window display."
    (interactive)
    (setq truncate-lines (not truncate-lines))
    ;; now refresh window display (an idiom from simple.el):
    (save-excursion
        (set-window-start (selected-window)
            (window-start (selected-window)))))

(defun bh/make-org-scratch ()
    (interactive)
    (find-file "/tmp/publish/scratch.org")
    (gnus-make-directory "/tmp/publish"))

(defun bh/switch-to-scratch ()
    (interactive)
    (switch-to-buffer "*scratch*"))
#+END_SRC

** LaTeX

Support for writing text with [[https://www.latex-project.org/][LaTeX.]] *Psimacs* uses the [[https://www.gnu.org/software/auctex/][AUCTeX]] package for assisting the [[https://www.latex-project.org/][LaTeX]] text editing.
On default, *Psimacs* generates [[https://en.wikipedia.org/wiki/PDF][PDF-files]] and configures the free [[https://www.sumatrapdfreader.org/free-pdf-reader.html][SumatraPDF]] application for viewing these
files.

| Key binding | Command                  | Description                               |
|-------------+--------------------------+-------------------------------------------|
| =C-c C-c=   | =M-x TeX-command-master= | You get a list of actions to choose from. |
|-------------+--------------------------+-------------------------------------------|

Following an unsorted list if references:
- [[https://www.gnu.org/software/auctex/][AUCTeX]]
- [[https://www.gnu.org/software/auctex/reftex.html][RefTeX]]
- [[https://www.emacswiki.org/emacs/LaTeX][EmacsWiki: LaTeX]]
- [[https://www.emacswiki.org/emacs/AUCTeX][EmacsWiki: AUCTeX]]
- [[https://www.emacswiki.org/emacs/RefTeX][EmacsWiki: RefTeX]]
- [[https://github.com/cdominik/cdlatex][CDLaTex]]
- [[http://latex.tugraz.at/programme/emacs][LaTeX]]
- [[https://www.latex-project.org/][The LaTeX Project]]
- [[https://en.wikibooks.org/wiki/LaTeX][WikiBooks: LaTeX]]
- [[https://en.wikibooks.org/wiki/LaTeX/Mathematics][WikiBooks: LaTeX Mathematics]]
- [[http://tug.ctan.org/info/lshort/english/lshort.pdf][The Not So Short Introduction to LaTeX2e]]
- [[https://www.youtube.com/playlist?list=PL1D4EAB31D3EBC449][LaTeX tutorial on YouTube]]
- [[https://www.dante.de/][Dante e.V.]]
- [[https://www.tug.org/texlive/][TeX Live]]
- [[https://miktex.org/][MiKTeX]]
- [[https://www.ctan.org/?lang=en][CTAN]]
- [[https://www.golatex.de/wiki/KOMA-Script][KOMA-Script]]

#+BEGIN_SRC emacs-lisp :tangle config/init-major-modes-latex-mode.el :var file-description="Major Modes - latex-mode setup"
;;
;; RefTex configuration
;;
(use-package reftex
    :config
        (setq reftex-cite-prompt-optional-args t) ; Prompt for empty optional arguments in cite
)
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle config/init-major-modes-latex-mode.el
;;
;; Latex configuration
;;
(use-package tex-site
    :straight auctex
    :mode ("\\.tex\\'" . latex-mode)
    :config
        (setq TeX-auto-save t)
        (setq TeX-parse-self t)
        (setq-default TeX-master nil)

        (defcustom LaTeX-indent-level-item-continuation 10
          "*Indentation of continuation lines for items in itemize-like environments."
          :group 'LaTeX-indentation
          :type 'integer)

        (defun LaTeX-indent-item ()
          "Provide proper indentation for LaTeX \"itemize\",\"enumerate\", and \"description\" environments.

\"\\item\" is indented `LaTeX-indent-level' spaces relative to
the the beginning of the environment.

Continuation lines are indented either twice
`LaTeX-indent-level', or `LaTeX-indent-level-item-continuation'
if the latter is bound."

          (save-match-data
            (let* ((offset LaTeX-indent-level)
                   (contin (or (and (boundp 'LaTeX-indent-level-item-continuation)
                                    LaTeX-indent-level-item-continuation)
                               (* 2 LaTeX-indent-level)))
                   (re-beg "\\\\begin{")
                   (re-end "\\\\end{")
                   (re-env "\\(itemize\\|\\enumerate\\|description\\)")
                   (indent (save-excursion
                             (when (looking-at (concat re-beg re-env "}"))
                               (end-of-line))
                             (LaTeX-find-matching-begin)
                             (current-column))))
              (cond ((looking-at (concat re-beg re-env "}"))
                     (or (save-excursion
                           (beginning-of-line)
                           (ignore-errors
                             (LaTeX-find-matching-begin)
                             (+ (current-column)
                                (if (looking-at (concat re-beg re-env "}"))
                                    contin
                                  offset))))
                         indent))
                    ((looking-at (concat re-end re-env "}"))
                     indent)
                    ((looking-at "\\\\item")
                     (+ offset indent))
                    (t
                     (+ contin indent))))))

        (add-hook 'LaTeX-mode-hook
            (lambda ()
                ;(rainbow-delimiters-mode)
                ;(company-mode)
                ;(smartparens-mode)

                (setq LaTeX-indent-level 4)
                (setq LaTeX-item-indent  0)
                (setq TeX-brace-indent-level 4)
                (setq TeX-newline-function 'reindent-then-newline-and-indent)
                (setq LaTeX-indent-environment-list
                        (nconc '(("itemize" LaTeX-indent-item)
                                 ("enumerate" LaTeX-indent-item)
                                 ("description" LaTeX-indent-item))
                        LaTeX-indent-environment-list))

                ;(add-to-list 'LaTeX-verbatim-environments "pycode")
                ;(add-to-list 'LaTeX-indent-environment-list '("pycode" current-indentation))

                (visual-line-mode)      ; word-wrapped document
                (flyspell-mode)
                (LaTeX-math-mode)       ; (C-c ~) minor mode rebinding the key LaTeX-math-abbrev-prefix to allow easy typing of mathematical symbols
                                        ; ` will read a character from the keyboard, and insert the symbol as specified in LaTeX-math-default and LaTeX-math-list.
                                        ; You can use another prefix key (instead of `) by setting the variable LaTeX-math-abbrev-prefix.
                (turn-on-reftex)
                (setq reftex-plug-into-AUCTeX t)
                (reftex-isearch-minor-mode)

                ;(setq TeX-engine 'xetex)
                ;(setq TeX-engine 'luatex)

                (setq TeX-PDF-mode t)
                ;(setq TeX-PDF-from-DVI "Dvips")
                ;(setq TeX-PDF-from-DVI "Dvipdfmx")
                (setq TeX-save-query nil)       ; C-c C-a will silently save the file before firing LaTeX

                (setq preview-image-type 'pnm)

                (setq TeX-source-correlate-mode t)
                (setq TeX-source-correlate-method 'synctex)
                (setq TeX-source-correlate-start-server t)


                ;;
                ;; Use emacs internal pdf viewer
                ;;
                ;; Update PDF buffers after successful LaTeX runs
                (add-hook 'TeX-after-TeX-LaTeX-command-finished-hook #'TeX-revert-document-buffer)

                ;;
                ;; Using external Sumatra PDF viewer
                ;;
                (setq TeX-view-program-list
                  `(
                    ;; SumatraPDF viewer
                    (,psimacs/config/pdf-viewer-name (
                                                      ,(concat psimacs/config/pdf-viewer-runtime " -reuse-instance")
                                                      (mode-io-correlate " -forward-search \"%b\" %n ") " %o"
                                                     ))
                   ))

                (setq TeX-view-program-selection `(
                                                   (output-pdf ,psimacs/config/pdf-viewer-name)
                                                   (output-dvi "Yap")
                                                   ((output-dvi style-pstricks) "dvips and start")
                                                   (output-html "start")
                                                  ))

                ;;
                ;; Using internal pdf-tools PDF viewer: This does currently not work for me!!!
                ;;
                ;;(add-hook 'LaTeX-mode-hook 'pdf-tools-instal)
                ;;
                ;;(setq TeX-view-program-list
                ;;      '(
                ;;        ("pdf-tools" "TeX-pdf-tools-sync-view")
                ;;       ))
                ;;
                ;;(setq TeX-view-program-selection '(
                ;;                                   (output-pdf "pdf-tools")
                ;;                                  )
                ;;      TeX-source-correlate-start-server t
                ;;      )
    ))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle config/init-major-modes-latex-mode.el
(use-package ivy-bibtex
    :bind ("C-c i b" . ivy-bibtex)
    :config
        (setq bibtex-completion-bibliography '(concat psimacs/config/latex-share-dir "references-zot.bib"))
        (setq bibtex-completion-library-path
            '(concat psimacs/config/latex-share-dir "references-pdf")
             (concat psimacs/config/latex-share-dir "references-etc"))

        ;; using bibtex path reference to pdf file
        (setq bibtex-completion-pdf-field "File")

        ;;open pdf with external viwer foxit
        (setq bibtex-completion-pdf-open-function
            (lambda (fpath)
                (call-process (concat psimacs/config/pdf-viewer-runtime " -reuse-instance") nil 0 nil fpath)))

        (setq ivy-bibtex-default-action 'bibtex-completion-insert-citation)
)
#+END_SRC

*** pdf-tools :noexport:

Package [[https://github.com/politza/pdf-tools][pdf-tools]] provids an internal [[https://en.wikipedia.org/wiki/PDF][PDF-files]] viewer. Unfortunately, I could not get this one to work
on my Windows OS setup.

#+BEGIN_SRC emacs-lisp :tangle no config/init-major-modes-latex-mode.el
(use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-tools-install)
    :bind ("C-c i g" . pdf-sync-forward-search)
    :config
        (setq mouse-wheel-follow-mouse t)
        (setq pdf-view-resize-factor 1.10)
)
#+END_SRC

* Overview of Psimacs key bindings

The following tables summarizes the key bindings added explicitly by *Psimacs*. Neither shown are the bindings provided
by the various packages nor by *Emacs* itself.

| Prefix command                       | Description               |
|--------------------------------------+---------------------------|
| =H-h= and =s-h=                      | Hydras                    |
| =H-c= and =s-c=                      | common user commands      |
| =H-x= and =s-x=                      | common execution commands |
| =H-m=, =H-,= =s-m=, =s-,= and =<f9>= | special user commands     |
|--------------------------------------+---------------------------|

#+ATTR_HTML: :class styledtable
| Key binding         | Command                                                       | Description                                                                                                                                                                                                                                                                                      |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =M-<f4>=            | =M-x psimacs/config/delete-frame=                             | Delete current frame.                                                                                                                                                                                                                                                                            |
| =C-x p=             | =M-x pop-to-mark-command=                                     | Jump to mark, and pop a new position for mark off the local mark ring (this does not affect the global mark ring).                                                                                                                                                                               |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =<f2>=              | =M-x bm-next=                                                 | Jump to the next bookmark.                                                                                                                                                                                                                                                                       |
| =S-<f2>=            | =M-x bm-previous=                                             | Jump to the previous bookmark.                                                                                                                                                                                                                                                                   |
| =C-<f2>=            | =M-x bm-toggle=                                               | Set or unset bookmark.                                                                                                                                                                                                                                                                           |
| =C-S-<f2>=          | =M-x bm-remove-all-current-buffer=                            | Remove all bookmarks of the current buffer.                                                                                                                                                                                                                                                      |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-s=               | =M-x swiper-iseach=                                           | A =swiper= that’s not line-based. Incrementally search with an overview.                                                                                                                                                                                                                         |
| =C-r=               | =M-x swiper=                                                  | Incrementally search with an overview.                                                                                                                                                                                                                                                           |
| =C-c v=             | =M-x ivy-push-view=                                           | Push the current window tree on =ivy-views=                                                                                                                                                                                                                                                      |
| =C-c V=             | =M-x ivy-pop-view=                                            | Delete a view to delete from =ivy-views=.                                                                                                                                                                                                                                                        |
| =C-x b=             | =M-x ivy-switch-buffer=                                       | Switch to another buffer.                                                                                                                                                                                                                                                                        |
| =C-c C-S-r=         | =M-x ivy-resume=                                              | Resumes the last Ivy-based completion.                                                                                                                                                                                                                                                           |
| =M-y=               | =M-x ivy-next-line=                                           | In minibuffer, Move cursor vertically down.                                                                                                                                                                                                                                                      |
| =C-'=               | =M-x ivy-avy=                                                 | Uses avy to select one of the candidates on the current candidate page.                                                                                                                                                                                                                          |
| =M-x=               | =M-x counsel-M-x=                                             | Ivy version of =execute-extended-command=.                                                                                                                                                                                                                                                       |
| =C-M-i=             | =M-x counsel-imenu=                                           | Jump to a buffer position indexed by =imenu=.                                                                                                                                                                                                                                                    |
| =C-x C-f=           | =M-x counsel-find-file=                                       | Counsel, forward to =find-file=.                                                                                                                                                                                                                                                                 |
| =C-c b=             | =M-x counsel-bookmark=                                        | Forward to =bookmark-jump= or =bookmark-set= if bookmark does not exist.                                                                                                                                                                                                                         |
| =C-c c=             | =M-x counsel-compile=                                         | Call =compile= completing with smart suggestions, optionally for DIR.                                                                                                                                                                                                                            |
| =C-c d=             | =M-x counsel-dired-jump=                                      | Jump to a directory below the current directory.                                                                                                                                                                                                                                                 |
| =C-c F=             | =M-x counsel-org-file=                                        | Browse all attachments for current Org file.                                                                                                                                                                                                                                                     |
| =C-c g=             | =M-x counsel-git=                                             | Find file in the current git repository.                                                                                                                                                                                                                                                         |
| =C-c j=             | =M-x counsel-git-grep=                                        | Grep for a string in the current Git repository.                                                                                                                                                                                                                                                 |
| =C-c L=             | =M-x counsel-git-log=                                         | Call the =git log --grep= shell command.                                                                                                                                                                                                                                                         |
| =C-c J=             | =M-x counsel-file-jump=                                       | Jump to a file below the current directory..                                                                                                                                                                                                                                                     |
| =C-c k=             | =M-x counsel-ag=                                              | Grep for a string in a root directory using =ag=.                                                                                                                                                                                                                                                |
| =C-c l=             | =M-x counsel-locate=                                          | Call a "locate" style shell command.                                                                                                                                                                                                                                                             |
| =M-y=               | =M-x counsel-yank-pop=                                        | Ivy replacement for =yank-pop=.                                                                                                                                                                                                                                                                  |
| =C-h f=             | =M-x counsel-describe-function=                               | Forward to =describe-function=.                                                                                                                                                                                                                                                                  |
| =C-h i=             | =M-x counsel-info-lookup-symbol=                              | Forward SYMBOL to =info-lookup-symbol= with ivy completion.                                                                                                                                                                                                                                      |
| =C-h j=             | =M-x counsel-set-variable=                                    | Set a variable SYM with completion.                                                                                                                                                                                                                                                              |
| =C-h l=             | =M-x counsel-find-library=                                    | Find Emacs Lisp source. Forward to =find-library=.                                                                                                                                                                                                                                               |
| =C-h u=             | =M-x counsel-unicode-char=                                    | Insert COUNT copies of a unicode char at point.                                                                                                                                                                                                                                                  |
| =C-h v=             | =M-x counsel-describe-variable=                               | Forward to =describe-function=.                                                                                                                                                                                                                                                                  |
| =C-r=               | =M-x counsel-minibuffer-history=                              | Browse minibuffer history.                                                                                                                                                                                                                                                                       |
| =C-r=               | =M-x counsel-expression-history=                              | In =read-expression-map=                                                                                                                                                                                                                                                                         |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-x p i=           | =M-x org-cliplink=                                            | Insert [[https://orgmode.org][org-mode]] links from the clipboard.                                                                                                                                                                                                                                                        |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =s-p=               | =M-x centaur-tabs-backward=                                   | Select the previous available tab.                                                                                                                                                                                                                                                               |
| =s-n=               | =M-x centaur-tabs-forward=                                    | Select the next available tab.                                                                                                                                                                                                                                                                   |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-c C-e=           | =M-x edit-indirect-region=                                    | Edit region in separate buffer *edit-indirect buffer*                                                                                                                                                                                                                                            |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m (=             | =M-x psimacs/pair/insert-paren=                               | Insert paranthesis =(▮)=.                                                                                                                                                                                                                                                                        |
| =H-m [=             | =M-x psimacs/pair/insert-bracket=                             | Insert brackets =[▮]=.                                                                                                                                                                                                                                                                           |
| =H-m {=             | =M-x psimacs/pair/insert-brace=                               | Insert braces ={▮}=.                                                                                                                                                                                                                                                                             |
| =H-m "=             | =M-x psimacs/pair/insert-ascii-double-quote=                  | Insert ascii double quotes ="▮"=.                                                                                                                                                                                                                                                                |
| =H-m '=             | =M-x psimacs/pair/insert-ascii-single-quote=                  | Insert ascii single quotes ='▮'=.                                                                                                                                                                                                                                                                |
| =H-m e=             | =M-x psimacs/pair/insert-emacs-quote=                         | Insert emacs quotes =`▮'=.                                                                                                                                                                                                                                                                       |
| =H-m ==             | =M-x psimacs/pair/insert-equal=                               | Insert equality signs ==▮==.                                                                                                                                                                                                                                                                     |
| =H-m *=             | =M-x psimacs/pair/insert-star=                                | Insert stars =*▮*=.                                                                                                                                                                                                                                                                              |
| =H-m /=             | =M-x psimacs/pair/insert-slash=                               | Insert slashes =/▮/=.                                                                                                                                                                                                                                                                            |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =<f12>=             | =M-x cua-mode=                                                | Toggle CUA mode.                                                                                                                                                                                                                                                                                 |
| =H-m c=             | =M-x cua-mode=                                                | Toggle CUA mode.                                                                                                                                                                                                                                                                                 |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-c C-h=       | (find-file-read-only history-file)                            | Open the history file in read-only mode.                                                                                                                                                                                                                                                         |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-f m=         | =M-x flyspell-mode=                                           | Minor mode performing on-the-fly spelling checking.                                                                                                                                                                                                                                              |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-f r=         | =M-x flyspell-region=                                         | Checks all words inside a region.                                                                                                                                                                                                                                                                |
| =H-m C-f b=         | =M-x flyspell-buffer=                                         | Checks the whole buffer.                                                                                                                                                                                                                                                                         |
| =H-m C-f w=         | =M-x flyspell-word=                                           | Spell check a word.                                                                                                                                                                                                                                                                              |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-,=               | =M-x flyspell-goto-next-error=                                | Go to the next detected error.                                                                                                                                                                                                                                                                   |
| =C-.=               | =M-x flyspell-auto-correct-word=                              | Automatically Correct the current word. This command proposes various successive corrections for the current word.                                                                                                                                                                               |
| =C-:=               | =M-x flyspell-auto-correct-previous-word=                     | Auto correct the first mispelled word that occurs before point.                                                                                                                                                                                                                                  |
| =C-;=               | =M-x flyspell-correct-wrapper=                                | By default jumps to the first misspelled word before the point and prompts for correction and gets you back. Calling it with =C-u= gives ability to correct multiple misspelled words in one run. =C-u C-u= changes direction. =C-u C-u C-u= changes direction and enables multiple corrections. |
| =H-m C-f a=         | =M-x flyspell-correct-at-point=                               | To correct word at point.                                                                                                                                                                                                                                                                        |
| =H-m C-f p=         | =M-x flyspell-correct-previous=                               | To correct any visible word before the point.                                                                                                                                                                                                                                                    |
| =H-m C-f n=         | =M-x flyspell-correct-next=                                   | To correct any visible word after the point.                                                                                                                                                                                                                                                     |
| =H-m C-f c=         | =M-x flyspell-check-previous-highlighted-word=                | Correct the closer misspelled word.                                                                                                                                                                                                                                                              |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-f d=         | =M-x psimac/spell/add-word-to-dict=                           | Add the word at the current location to the private dictionary without question.                                                                                                                                                                                                                 |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-f g=         | =M-x psimac/spell/switch-to-german=                           | Change to german language dictionary.                                                                                                                                                                                                                                                            |
| =H-m C-f e=         | =M-x psimac/spell/switch-to-english=                          | Change to english language dictionary.                                                                                                                                                                                                                                                           |
| =H-m C-f t=         | =M-x psimac/spell/toggle-language=                            | Toggle german and english language dictionaries.                                                                                                                                                                                                                                                 |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-l b=         | =M-x langtool-check-buffer=                                   | To check current buffer and show warnings. With prefix =C-u= check with different language.                                                                                                                                                                                                      |
| =H-m C-l p=         | =M-x langtool-goto-previous-error=                            | Goto previous error. Obsoleted function. Should use =langtool-correct-buffer=.                                                                                                                                                                                                                   |
| =H-m C-l n=         | =M-x langtool-goto-next-error=                                | Goto next error. Obsoleted function. Should use =langtool-correct-buffer=.                                                                                                                                                                                                                       |
| =H-m C-l ;=         | =M-x langtool-correct-buffer=                                 | Execute interactive correction after =langtool-check-buffer=. To correct marker follow LanguageTool suggestions.                                                                                                                                                                                 |
| =H-m C-l t=         | =M-x langtool-switch-default-language=                        | Switch ‘langtool-default-language’ to LANG                                                                                                                                                                                                                                                       |
| =H-m C-l m=         | =M-x langtool-show-brief-message-at-point=                    | Show error brief message at point.                                                                                                                                                                                                                                                               |
| =H-m C-l M=         | =M-x langtool-show-message-at-point=                          | Show error details at point..                                                                                                                                                                                                                                                                    |
| =H-m C-l B=         | =M-x langtool-check-done=                                     | Finish LanguageTool process and cleanup existing colorized texts.                                                                                                                                                                                                                                |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-p C-f p=     | =M-x ps-print-buffer-with-faces=                              | Color print buffer via Ghostscript                                                                                                                                                                                                                                                               |
| =H-m C-p C-f r=     | =M-x ps-print-region-with-faces=                              | Color print region via Ghosts                                                                                                                                                                                                                                                                    |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-p C-p b=     | =M-x print-buffer=                                            | B/W print hardcopy of buffer on default printer                                                                                                                                                                                                                                                  |
| =H-m C-p C-p r=     | =M-x print-region=                                            | B/W print hardcopy of region on default printer                                                                                                                                                                                                                                                  |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-p C-q p=     | =M-x ps-print-buffer=                                         | B/W print buffer via Ghostscript                                                                                                                                                                                                                                                                 |
| =H-m C-p C-q r=     | =M-x ps-print-region=                                         | B/W print region via Ghostscript                                                                                                                                                                                                                                                                 |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-p C-r C-p=   | =M-x psimacs/pair/rainbow-toogle-sized-delimiters=            | Toogle the size of the rainbow-delimiters.                                                                                                                                                                                                                                                       |
| =H-m C-p C-r M-C-p= | =M-x psimacs/pair/rainbow-sized-delimiters=                   | All rainbow delimiters have various heights.                                                                                                                                                                                                                                                     |
| =H-m C-p C-r S-C-p= | =M-x psimacs/pair/rainbow-non-sized-delimiters=               | All rainbow delimiters have the same height. This is the default.                                                                                                                                                                                                                                |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-s C-a c=     | =M-x avy-goto-char=                                           | Input one char, jump to it with a tree.                                                                                                                                                                                                                                                          |
| =H-m C-s C-a C=     | =M-x avy-goto-char-2=                                         | Input two consecutive chars, jump to the first one with a tree.                                                                                                                                                                                                                                  |
| =H-m C-s C-a t=     | =M-x avy-goto-char-timer=                                     | Input an arbitrary amount of consecutive chars, jump to the first one with a tree.                                                                                                                                                                                                               |
| =H-m C-s C-a T=     | =M-x avy-org-goto-heading-timer=                              | Type part of an Org heading. When you stop typing it will be jumped to; if more than one matches, you can jump to a heading with Avy.                                                                                                                                                            |
| =H-m C-s C-a l=     | =M-x avy-goto-line=                                           | Input zero chars, jump to a line start with a tree.                                                                                                                                                                                                                                              |
| =H-m C-s C-a w=     | =M-x avy-goto-word-1=                                         | Input one char at word start, jump to a word start with a tree.                                                                                                                                                                                                                                  |
| =H-m C-s C-a W=     | =M-x avy-goto-word-0=                                         | Input zero chars, jump to a word start with a tree.                                                                                                                                                                                                                                              |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-s a=         | =M-x swiper-all=                                              | Incrementally search in all open buffers.                                                                                                                                                                                                                                                        |
| =H-m C-s s=         | =M-x isearch-forward=                                         | Incrementally search forward.                                                                                                                                                                                                                                                                    |
| =H-m C-s r=         | =M-x isearch-backward=                                        | Incrementally search backward.                                                                                                                                                                                                                                                                   |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-t ;=         | =M-x google-translate-smooth-translate=                       | Translate a text using translation directions. Make a prompt in minibuffer for a text to translate. Default text is word at point.                                                                                                                                                               |
| =H-m C-t o=         | =M-x psimacs/spell/google-tanslate/toggle-output-destination= | Toggle output desination between 'current buffer' and 'translation buffer'.                                                                                                                                                                                                                      |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-u C-w t=     | =M-x psimacs/which-key/toogle-sort-order=                     | Toggle the which-key-mode sort order.                                                                                                                                                                                                                                                            |
| =H-m C-u C-w c=     | =M-x psimacs/which-key/cycle-sort-order=                      | Cycle through the which-key-mode sort orders.                                                                                                                                                                                                                                                    |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-w C-x 5 l=   | =M-x psimacs/window/set-frame-creation-strategy-layout=       | Place and size new frames left and right to the main frame. This is the default strategy.                                                                                                                                                                                                        |
| =H-m C-w C-x 5 m=   | =M-x psimacs/window/set-frame-creation-strategy-main=         | Always use the same placement and size as the initial main frame.                                                                                                                                                                                                                                |
| =H-m C-w C-x 5 s=   | =M-x psimacs/window/set-frame-creation-strategy-system=       | Let Emacs and the operating system decide.                                                                                                                                                                                                                                                       |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-w C-s s=     | =M-x smooth-scrolling-mode=                                   | Enable or disable the smooth scrolling mode.                                                                                                                                                                                                                                                     |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-w C-r=       | =M-x golden-ratio-mode=                                       | Toggle automatic window resizing with golden ratio.                                                                                                                                                                                                                                              |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-x C RET=     | =M-x counsel-search=                                          | Shows search suggestions as you type and visit page in your default browser on =RET=.                                                                                                                                                                                                            |
| =H-m C-x C s=       | =M-x counsel-web-suggest=                                     | Shows search suggestions as you type. Press =RET= to accept the suggestion and send it to =counsel-web-search=.                                                                                                                                                                                  |
| =H-m C-x C w=       | =M-x counsel-web-search=                                      | Searches and presents the results in the ivy minibuffer.                                                                                                                                                                                                                                         |
| =H-m C-x C p=       | =M-x counsel-web-thing-at-point=                              | Interactively search the web for the THING at point.                                                                                                                                                                                                                                             |
| =H-m C-x C t=       | =M-x psimacs/web/toogle-search-engine=                        | Toogle the search engine of [[https://github.com/abo-abo/swiper][counsel]] and  [[https://github.com/mnewt/counsel-web][counsel-web]] between 'duckduckgo' and 'goole'.                                                                                                                                                                                                           |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-x G SPC=     | =M-x google-this-region=                                      | Google the current region. PREFIX determines quoting.                                                                                                                                                                                                                                            |
| =H-m C-x G a=       | =M-x google-this-ray=                                         | Google text between the point and end of the line. If there is a selected region, googles the region.                                                                                                                                                                                            |
| =H-m C-x G c=       | =M-x google-this-translate-query-or-region=                   | If region is active =google-translate-at-point=, otherwise =google-translate-query-translate=.                                                                                                                                                                                                   |
| =H-m C-x G e=       | =M-x google-this-error=                                       | Google the current error in the compilation buffer. PREFIX determines quoting.                                                                                                                                                                                                                   |
| =H-m C-x G f=       | =M-x google-this-forecast=                                    | Search google for "weather". With PREFIX, ask for location.                                                                                                                                                                                                                                      |
| =H-m C-x G g=       | =M-x google-this-lucky-search=                                | Exactly like =google-this-search=, but use the "I’m feeling lucky" option. PREFIX determines quoting.                                                                                                                                                                                            |
| =H-m C-x G i=       | =M-x google-this-lucky-and-insert-url=                        | Fetch the url that would be visited by ‘google-this-lucky’.                                                                                                                                                                                                                                      |
| =H-m C-x G l=       | =M-x google-this-line=                                        | Google the current line. PREFIX determines quoting.                                                                                                                                                                                                                                              |
| =H-m C-x G m=       | =M-x google-maps=                                             |                                                                                                                                                                                                                                                                                                  |
| =H-m C-x G n=       | =M-x google-this-noconfirm=                                   | Decide what the user wants to google and go without confirmation. Exactly like =google-this= or =google-this-search=, but don’t ask for confirmation.                                                                                                                                            |
| =H-m C-x G r=       | =M-x google-this-cpp-reference=                               | Visit the most probable cppreference.com page for this word.                                                                                                                                                                                                                                     |
| =H-m C-x G s=       | =M-x google-this-symbol=                                      | Google the current symbol.                                                                                                                                                                                                                                                                       |
| =H-m C-x G t=       | =M-x google-this=                                             | Decide what the user wants to google (always something under point). Unlike =google-this-search= (which presents an empty prompt with "this" as the default value), this function inserts the query in the minibuffer to be edited.                                                              |
| =H-m C-x G w=       | =M-x google-this-word=                                        | Google the current word.                                                                                                                                                                                                                                                                         |
| =H-m C-x G RET=     | =M-x google-this-search=                                      | Write and do a google search.                                                                                                                                                                                                                                                                    |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-x S RET=     | =M-x sx-tab-all-questions=                                    | Display a list of All-Questions questions for SITE.                                                                                                                                                                                                                                              |
| =H-m C-x S s=       | =M-x sx-search=                                               | Display search on SITE for question titles containing QUERY.                                                                                                                                                                                                                                     |
| =H-m C-x S r=       | =M-x sx-question-list-refresh=                                | Update the list of questions.                                                                                                                                                                                                                                                                    |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-x C-a=       | =M-x abbrev-mode=                                             | Enable/Disable abbreviation mode.                                                                                                                                                                                                                                                                |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m H-h C-m=       | =M-x discover-my-major=                                       | Create a listing of all major-mode keys with their description.                                                                                                                                                                                                                                  |
| =H-m H-h M-m=       | =M-x discover-my-mode=                                        | Create a listing of all MODE keys with their description.                                                                                                                                                                                                                                        |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m H-h b=         | =M-x helm-descbinds=                                          | Create a listing of all key bindings of current major mode.                                                                                                                                                                                                                                      |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m H-h m=         | =M-x helm-describe-modes=                                     | Create a listing of all modes of current major mode.                                                                                                                                                                                                                                             |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-x r=             | =M-x recentf-open-files=                                      | Show a dialog to open a recent file.                                                                                                                                                                                                                                                             |
| =H-x C-r=           | =M-x recentf-open-more-files=                                 | Show a dialog to open a recent file that is not in the menu.                                                                                                                                                                                                                                     |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-x f=             | =M-x counsel-recentf=                                         | Find a file on recent file list.                                                                                                                                                                                                                                                                 |
| =H-x C-f=           | =M-x counsel-buffer-or-recentf=                               | Find a buffer visiting a file or file on recent file list.                                                                                                                                                                                                                                       |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-x C c            | =M-x recentf-cleanup=                                         | Cleanup the recent file list.                                                                                                                                                                                                                                                                    |
| =H-x C C-c          | =M-x psimacs/config/recentf-cleanup-directory-files=          | Remove all files of DIR from recent file list.                                                                                                                                                                                                                                                   |
|---------------------+---------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
