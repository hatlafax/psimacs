# -*- mode: org; coding: utf-8; -*-
#+TITLE: Psimacs Emacs configuration
#+DESCRIPTION: Loading Emacs configuration using org-babel
#+TAGS: Emacs
#+CATEGORIES: editing
#+STARTUP: showeverything
#+OPTIONS: toc:4 h:4
# #+SETUPFILE: site-lisp/org-html-themes/org/theme-readtheorg.setup
# #+SETUPFILE: site-lisp/org-html-themes/org/theme-bigblow.setup
# #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
#+HTML_HEAD: <link rel="stylesheet" href="http://dakrone.github.io/org.css" type="text/css" />

* Introduction
This is *Psimacs*, a /modern/ *Emacs* configuration build from the ground up using a [[https://de.wikipedia.org/wiki/Literate_programming][literate programming]] technique.
The complete configuration [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]] code is embedded into a single [[https://orgmode.org/][org-mode]] file. This is the file that your are
currently reading.

Additionally, *Psimacs* allows the synchronization of the user's local *Emacs* configuration with a configuration
repository residing on [[https://www.dropbox.com/][Dropbox]]. This comes quite handy if sharing of one configuration with multiple machines is
desired.

This document not only describes the *Psimacs* configuration, but also some additional information useful
for working with *Emacs* in general. In this respect it serves as a kind of mind map for the author.

** Motivation

A lot of *Emacs* configurations can be found on the Internet. Many of them are well crafted and could be used out of
the box. Especially, the great *Emacs* distributions like [[https://www.spacemacs.org/][Spacemacs]], [[https://github.com/hlissner/doom-emacs][Doom-Emacs]] and [[https://github.com/seagle0128/.emacs.d][Centaur-Emacs]] are worth giving a try.
But I wanted to craft my own configuration that is tailored to my needs and that allowed me to learn more about the
vast *Emacs* universe. My configuration it not perfect for everyone and it will not be able to compete against the big
frameworks that are build by a lot of talented people. So feel free to use it or blame it. I am fine with it.

The name *Psimacs* is arbitrarily. I was in search for a catchy name with just one syllable in front of the *macs*.

** Installation

This configuration uses *Emacs* >= 27. Clone the git repository into your *.emcas.d* directory

#+BEGIN_EXAMPLE
mv ~/.emacs.d ~/.emacs.d.bak
git clone https://github.com/hatlafax/psimacs.git ~/.emacs.d
#+END_EXAMPLE

and just run *Emacs*.

The only file really needed is the =early-init.el= file. On startup, it reads the file =init.org= and extracts all the
initialization code into the main =init.el= and various additionally =config/init-*.el= files. The created =init.el=
file is then read and evaluated in the further startup procedure. The =init.el= file loads the other =config/init-*.el=
files on evaluation.

Never edit transient file =init.el= or =config/init-*.el= directly. They will be overridden by the next run of
*Psimacs*. Instead modify the =init.org= file to change your configuration.

You can create a HTML document =init.html= of this file by simply typing =C-c C-e h h= in the *Emacs* buffer for
this file. It is recommended to use this =init.html= for browser reading.

** Usage

All functions and variables that are defined in *Psimacs* are prefixed by a path like string  =psimacs/category=.
The /category/ is used to order the functions and variables by topic. For example the /string/ related function
/starts-with/ is defined as =psimacs/string/starts-with=.

** Dependencies

The configuration does have some dependencies that should be installed separately and beforehand of *Psimacs*.
On default the non *Emacs* dependencies are expected to be installed into directory *c:/utils/* on /Windows OS/.
A directory constant =psimacs/config/dependencies-dir= will be defined by the configuration that allows to change
the default location of the dependencies.

** Disclaimer

This is an *Emacs* beginners configuration and the usage is at one's own risk. It is not tested thoroughly. Please
bear in mind.

Many of the configuration settings are borrowed from other similar endeavors out there.

This is work in progress. Sometimes this *Readme* is ahead of times or not yet updated.

** Limitations / Known Issues

- Tested on Windows operating system only

** License (GPL v3)

Copyright (C) 2020-2021 Johannes Brunen (hatlafax@gmx.de)

License: GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

* Working with Org-Mode
** Embedding code
[[https://orgmode.org/][Org-mode]] allows embedding of source code blocks into =.org=-files and evaluating them by [[https://orgmode.org/worg/org-contrib/babel/][babel]] a core feature build
into [[https://orgmode.org/manual/Working-with-Source-Code.html][org]]. The [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]] code is embedded into special code blocks:

#+BEGIN_EXAMPLE
#+BEGIN_SRC emacs-lisp :tangle no
<BODY>
#+END_SRC
#+END_EXAMPLE

Code block with =:tangle yes= or with =:tangle filename= are part of the configuration. However, any code block
can be deactivated, i.e. omitted from the configuration, by using =:tangle no= in the
block declaration.

#+BEGIN_EXAMPLE
#+BEGIN_SRC emacs-lisp :tangle no
(message "this should never be seen in the Message buffer!")
#+END_SRC
#+END_EXAMPLE

Additionally, a whole section can also be deactivated by a /CANCELED/ or a /DISABLED/ item, e.g.:

*** CANCELED Avoid generating /Emacs Lisp/ code per section

The following [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]] block should therefore also not be part of the generated =.el= file although the =:tangle yes=
attribute was used.

#+BEGIN_EXAMPLE
#+BEGIN_SRC emacs-lisp :tangle yes
(message "this should not be seen in the Message buffer!")
#+END_SRC
#+END_EXAMPLE

** Debugging the configuration

Loading of the configuration can always be halted on spot by entering and activating the following source code block
which will enter enter the debugger on execution.

#+BEGIN_EXAMPLE
#+BEGIN_SRC emacs-lisp :tangle no
(debug)
#+END_SRC
#+END_EXAMPLE

*** Debugging ELisp with EDebug
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html#Edebug][Edebug]] is a source-level debugger for Emacs Lisp programs that is very useful developing /Lisp/ code. In the following
you can find a some useful commands and settings for debugging with [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html#Edebug][Edebug]]:

Embedding a breakpoint into source code: =(edebug)=

| Keybinding        | Command                                 | Description                                                                                                                                                                                  |
|-------------------+-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-u C-M-x=       | =M-x eval-defun=                        | Instrument the Lisp code at point. Any call to the function activates Edebug.                                                                                                                |
|-------------------+-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =h=               | =M-x edebug-goto-here=                  | Proceed to the stop point near where point is.                                                                                                                                               |
| =f=               | =M-x edebug-forward-sexp=               | Run the program for one expression.                                                                                                                                                          |
| =o=               | =M-x edebug-step-out=                   | Run the program until the end of the containing sexp.                                                                                                                                        |
| =i=               | =M-x edebug-step-in=                    | Step into the function or macro called by the form after point.                                                                                                                              |
|-------------------+-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =b=               | =M-x edebug-set-breakpoint=             | Set a breakpoint at the stop point at or after point. If you use a prefix argument, the breakpoint is temporary -- it turns off the first time it stops the program.                         |
| =u=               | =M-x edebug-unset-breakpoint=           | Unset the breakpoint (if any) at the stop point at or after point.                                                                                                                           |
| =U=               | =M-x edebug-unset-breakpoints=          | Unset any breakpoints in the current form.                                                                                                                                                   |
| =D=               | =M-x edebug-toggle-disable-breakpoint=  | Toggle whether to disable the breakpoint near point.                                                                                                                                         |
| =x condition RET= | =M-x edebug-set-conditional-breakpoint= | Set a conditional breakpoint which stops the program only if evaluating condition produces a non-nil value.                                                                                  |
| =B=               | =M-x edebug-next-breakpoint=            | Move point to the next breakpoint in the current definition.                                                                                                                                 |
|-------------------+-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =S=               | =M-x edebug-stop=                       | Stop: don't execute any more of the program, but wait for more Edebug commands                                                                                                               |
| =SPC=             | =M-x edebug-step-mode=                  | Step: stop at the next stop point encountered.                                                                                                                                               |
| =n=               | =M-x edebug-next-mode=                  | Next: stop at the next stop point encountered after an expression.                                                                                                                           |
| =t=               | =M-x edebug-trace-mode=                 | Trace: pause (normally one second) at each Edebug stop point.                                                                                                                                |
| =T=               | =M-x edebug-Trace-fast-mode=            | Rapid trace: update the display at each stop point, but don't actually pause.                                                                                                                |
| =g=               | =M-x edebug-go-mode=                    | Go: run until the next breakpoint.                                                                                                                                                           |
| =c=               | =M-x edebug-continue-mode=              | Continue: pause one second at each breakpoint, and then continue.                                                                                                                            |
| =C=               | =M-x edebug-Continue-fast-mode=         | Rapid continue: move point to each breakpoint, but don't pause.                                                                                                                              |
| =G=               | =M-x edebug-Go-nonstop-mode=            | Go non-stop: ignore breakpoints. You can still stop the program by typing S, or any editing command.                                                                                         |
|-------------------+-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =?=               | =M-x edebug-help=                       | Display the help message for Edebug.                                                                                                                                                         |
| =C-]=             | =M-x abort-recursive-edit=              | Abort one level back to the previous command level                                                                                                                                           |
| =q=               | =M-x top-level=                         | Return to the top level editor command loop. This exits all recursive editing levels, including all levels of Edebug activity.                                                               |
| =Q=               | =M-x edebug-top-level-nonstop=          | Like q, but don't stop even for protected code. Like q, but don't stop even for protected code.                                                                                              |
| =r=               | =M-x edebug-previous-result=            | Redisplay the most recently known expression result in the echo area.                                                                                                                        |
| =d=               | =M-x edebug-backtrace=                  | Display a backtrace, excluding Edebug's own functions for clarity.                                                                                                                           |
|-------------------+-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =v=               | =M-x edebug-view-outside=               | Switch to viewing the outside window configuration.  Type =C-x X w= to return to Edebug.                                                                                                     |
| =p=               | =M-x edebug-bounce-point=               | Temporarily display the outside current buffer with point at its outside position, pausing for one second before returning to Edebug. With a prefix argument n, pause for n seconds instead. |
| =w=               | =M-x edebug-where=                      | Move point back to the current stop point in the source code buffer.                                                                                                                         |
| =W=               | =M-x edebug-toggle-save-windows=        | Toggle whether Edebug saves and restores the outside window configuration.                                                                                                                   |
|-------------------+-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =e exp RET=       | =M-x edebug-eval-expression=            | Evaluate expression exp in the context outside of Edebug. That is, Edebug tries to minimize its interference with the evaluation.                                                            |
| =M-: exp RET=     | =M-x eval-expression=                   | Evaluate expression exp in the context of Edebug itself.                                                                                                                                     |
| =C-x C-e=         | =M-x edebug-eval-last-sexp=             | Evaluate the expression before point, in the context outside of Edebug.                                                                                                                      |
| =C-u 0 C-x C-e=   | =C-u 0 M-x edebug-eval-last-sexp=       | Dito, but don't shorten long items (like strings and lists).                                                                                                                                 |
| =E=               | =M-x edebug-visit-eval-list=            | Switch to the evaluation list buffer *edebug*                                                                                                                                                |
| =C-j=             | =M-x edebug-eval-print-last-sexp=       | Evaluate the expression before point, in the outside context, and insert the value in the buffer.                                                                                            |
| =C-u 0 C-j=       | =C-u 0 M-x edebug-eval-print-last-sexp= | Dito, but don't shorten long items (like strings and lists).                                                                                                                                 |
| =C-c C-u=         | =M-x edebug-update-eval-list=           | Build a new evaluation list from the contents of the buffer.                                                                                                                                 |
| =C-c C-d=         | =M-x edebug-delete-eval-item=           | Delete the evaluation list group that point is in.                                                                                                                                           |
| =C-c C-w=         | =M-x edebug-where=                      | Switch back to the source code buffer at the current stop point.                                                                                                                             |
|-------------------+-----------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

** References to Org-Mode markup
An [[https://writequit.org/denver-emacs/presentations/files/example.org.html][example org-mode file]] used to show basic [[https://orgmode.org][org-mode]] usage. [[https://orgmode.org/manual/Markup-for-Rich-Contents.html][Markup for Rich Contents]] gives detail explanation about
the markup rules used in [[https://orgmode.org][org-mode]] files.

** References to Org-Mode
The following links might be useful for diving deeper into [[http://orgmode.org/][Org-Mode]]:
- [[http://orgmode.org/manual/index.html][Org Mode Manual]]
- [[http://orgmode.org/worg/][Worg, the Org Mode Community]]
- [[https://www.emacswiki.org/emacs/OrgMode][EmacsWiki: Org Mode]]
- [[https://www.suenkler.info/notes/emacs-orgmode/][Aufgabenverwaltung im Emacs Org mode]]
- [[https://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][Dig Into Org Mode]]
- [[http://orgmode.org/worg/org-contrib/babel/][Org Mode Babel]]
- [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][Introduction to Literate Programming]]
- [[https://org-babel.readthedocs.io/en/latest/][Readthedocs about Org Babel]]
- [[http://orgmode.org/worg/orgcard.html][Org Mode reference card]]
- [[http://orgmode.org/orgcard.pdf][Org Mode Ref Card]]
- [[http://ergoemacs.org/emacs/emacs_org_markup.html][Org Mode Markup Cheatsheet]]
- [[http://pragmaticemacs.com/][Pragmatic Emacs]]
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]

** References to Emacs Lisp
The following links might be useful for diving deeper into [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]]:
- [[https://www.gnu.org/software/emacs/manual/eintr.html][Introduction to Programming in Emacs Lisp]]
- [[https://www.emacswiki.org/emacs/ElispCookbook][EmacsWiki: Lisp Cookbook]]
- [[http://wikemacs.org/wiki/Emacs_Lisp_Cookbook][WikEmacs: Emacs Lisp Cookbook]]
- [[https://github.com/chrisdone/elisp-guide][Emacs Lisp Guide]]

* Keybinding
I am trying to setup keybinding in a /mnemonics/ way so it's easy to remember (and use).
I am staying with the /standard/ emacs keybinding as much as possible.

*Emacs*'s keybindings has well-defined conventions listed at [[https://www.gnu.org/software/emacs/manual/html%5Fnode/elisp/Key-Binding-Conventions.html][Emacs Key Bindings Convention]].
In summary, the general rules are:
- =C-x= reserved for Emacs native essential keybindings: buffer, window, frame, file, directory, etc.
- =F5= ... =F9= without modifier keys are reserved for users to define.
- =C-c=
    - =C-c C-letter=, =C-c digit= are reserved for major modes.
    - =C-c punctuation= with punctuation in { } < > : ; are also reserved for major modes.
    - =C-c punctuation= with any other punctuation are allocated for minor modes.
    - =C-c letter= are reserved for users.
- Don't rebind =C-g=, =C-h= and =ESC=.

Worth readings about *Emacs* keybindings are [[https://karl-voit.at/2018/07/08/emacs-key-bindings/][UOMF: My Emacs Key Binding Strategy]], [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][Mastering Key Bindings in Emacs]] and
[[http://www.wilfred.me.uk/blog/2018/01/06/the-emacs-guru-guide-to-key-bindings/][The Emacs Guru Guide to Key Bindings]].

* Early initialization

Starting with *Emacs* 27, an early-init.el file can be used to do early configuration and optimization.
For more information read [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Starting-Up.html#Starting-Up][Starting Up Emacs]] and [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Init-File.html][The Init File]].

#+BEGIN_QUOTE
Emacs can now be configured using an early init file. The file is called early-init.el, in user-emacs-directory.
It is loaded very early in the startup process: before graphical elements such as the tool bar are initialized,
and before the package manager is initialized. The primary purpose is to allow customizing how the package
system is initialized given that initialization now happens before loading the regular init file (see below).

We recommend against putting any customizations in this file that don't need to be set up before initializing
installed add-on packages, because the early init file is read too early into the startup process, and some
important parts of the Emacs session, such as 'window-system' and other GUI features, are not yet set up,
which could make some customization fail to work.
#+END_QUOTE

*Psimacs* uses the =early-init.el= for three purposes. At first, the evaluation of this file tangles the =init.org= file's
embedded elips source code into the corresponding elips files. Especially, the =early-init.el= file is itself
updated on this way, as it is also described in the =init.org= file. Crazy isn't is :-). Secondly, the =early-init.el=
is responsible for synchronizing with a *Psimacs* /dropbox/ repository. This is quite useful when working with multiple
machines and sharing the very same *Emacs* environment. Thirdly, the primary duty of the =early-init.el= file is to
optimize the *Emacs* startup procedure.

As mentioned above, the elisp source of this section is tangled directly into the =early-init.el= file. Since the
tangling happens at startup time on evaluation of the =early-init.el= file, the =early-init.el= might overwritten
itself at startup.

** Preamble

#+BEGIN_SRC emacs-lisp :tangle early-init.el :var file-description="Early initialization"
;;; Commentary:
;;
;; Emacs 27 introduces early-init.el, which is run before init.el,
;; before package and UI initialization happens.
;;
#+END_SRC

** Some basic constants

*** Tangle anything at startup

*Psimacs* allows the tangling of the configuration source code at startup time. The following flag allows to suppresses
this feature completely.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Tangling procedure constants.
;;
(defconst psimacs/config/tangle-anything t
  "If this flag is nil no code is generated by the startup.
This flag allows to only use the 'init-*.el' files of the framework.")
#+END_SRC

*** Tangle early-init.el at startup

*Psimacs* allows the tangling of the =early-init.el= file itself at startup. The following flag suppresses
this feature.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defconst psimacs/config/tangle-early-init-file t
  "If this flag is t the 'early-init.el' file is generated at startup.
If nil, only the 'early-init.el' file is omitted from the code generation process.")
#+END_SRC

*** Synchronize with Dropbox at startup

*Psimacs* allows the synchronization of files and folders with a /Dropbox/ repository at startup time.
The following flag allows inhibition of this feature.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Synchronization procedure constants.
;;
(defconst psimacs/config/synchronize-at-startup t
  "If this flag is t the 'early-init.el' file synchronizes the configuration with Dropbox.
The local configuration can be synchronized with a mirror configuration on Dropbox. This
allows sharing of a single configuration on multiple machines.")
#+END_SRC

*** Some size numbers

Huge byte sizes are conveniently written in /Mega Bytes/ or even in /Giga Bytes/ by *Psimacs*. Therefore we define
some size constants early.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Conveniency byte size constants
;;
(defconst   1MB (* 1024 1024))
(defconst  20MB (*  20 1MB))
(defconst  30MB (*  30 1MB))
(defconst  50MB (*  50 1MB))
(defconst  64MB (*  64 1MB))
(defconst 128MB (* 128 1MB))
#+END_SRC

*** Primary initalization files and directories

The primary initialization files and directories must be known by the initialization process early in time in order
to allow the =early-init.el= to full fill its duty. These files are evaluated and/or synchronized with a possible
/dropbox/ repository.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Primary Psimacs file and directory constants use for tangling and synchronization
;;
(defconst psimacs/config/main-org-file "init.org"
  "The psimacs initialization file.")

(defconst psimacs/config/icon-file "psi.ico"
  "The psimacs icon file.")

(defconst psimacs/config/license-file "LICENSE"
  "The psimacs license file.")

(defconst psimacs/config/custom-file "custom.el"
  "The psimacs custom elips file.")

(defconst psimacs/config/agenda-dir "agenda"
  "The psimacs agenda directory.")

(defconst psimacs/config/latex-dir "latex"
  "The psimacs latex directory.")

(defconst psimacs/config/assets-dir "assets"
  "The psimacs assets directory.")
 #+END_SRC

*** Copyright and author information

Copyright information that should be inserted into all tangled code.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defconst psimacs/config/copyright/year       "2020-2021")
(defconst psimacs/config/copyright/author     "Johannes Brunen")
(defconst psimacs/config/copyright/pseudonyme "hatlafax")
(defconst psimacs/config/copyright/email      "hatlafax@gmx.de")
(defconst psimacs/config/copyright/url        "https://github.com/hatlafax/psimacs")
(defconst psimacs/config/copyright/license    "GNU GENERAL PUBLIC LICENSE")
(defconst psimacs/config/copyright/version    "Version 3, 29 June 2007")
 #+END_SRC

*** Garbage collection

Fine tuning the garbage collection after startup initialization.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defconst psimacs/config/gc-cons-threshold 64MB
  "The default value to use for 'gc-cons-threshold'.
If you experience freezing, decrease this. If you experience stuttering,
increase this.")

(defconst psimacs/config/gc-cons-percentage 0.1
  "This variable specifies the amount of consing before garbage collection occurs.
It is the fraction of the current heap size."
)
#+END_SRC

** Some early optimization settings

- Lexical Scope and binding

  [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical Binding]] is condensed to the following quote:

#+BEGIN_QUOTE
  A lexically-bound variable has /lexical scope/, meaning that any reference to the variable must be located
  textually within the binding construct.
#+END_QUOTE

  Its usage is explained in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Lexical-Binding.html][Emacs manual]].

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Use lexical binding instead of dynamic binding.
;;
(setq-default lexical-binding t)
#+END_SRC

-  Before *Emacs* 27, the init file was responsible for initializing the package manager by calling
  =package-initialize=. *Emacs* 27 changed the default behavior: It now calls =package-initialize= before loading the
  init file. Since we use the =straight= package manager in *Psimacs*, we inhibit the package manager initialization
  at all.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Inhibit the package manager at all
;;
(setq package-enable-at-startup nil)
#+END_SRC

- Let's inhibit resizing the frame at early stage.

  [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Implied-Frame-Resizing.html][Implied Frame Resizing]]:
#+BEGIN_QUOTE
  By default, Emacs tries to keep the number of lines and columns of a frame's text area unaltered when, for example,
  toggling its menu or tool bar, changing its default font or setting the width of any of its scroll bars. This means
  that in such case Emacs must ask the window manager to resize the frame's window in order to accommodate the size
  change.

  Occasionally, such implied frame resizing may be unwanted, for example, when a frame has been maximized or made
  full-screen (where it's turned off by default). In general, users can disable implied resizing with the following
  option:
#+END_QUOTE

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; If this option is nil, changing a frame' font, menu bar, tool bar, internal borders,
;; fringes or scroll bars may resize its outer frame in order to keep the number of
;; columns or lines of its text area unaltered. If this option is t, no such resizing
;; is done.
;;
(setq frame-inhibit-implied-resize t)
#+END_SRC

- Never use the menu-bar, the tool-bar or the scroll-bar:

  It will be faster to disable them here before they've been initialized.

  *Psimacs* does disable these features by default because these items make Emacs really beautiful on every platform.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Beautify Emacs
;;
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(horizontal-scroll-bar-mode -1)
#+END_SRC

- Avoid flickering of the screen

  Set theme colors early. The colors are taken from the alect-colors found in the 'alect-themes.el'.
  If another theme is used on default, these settings should be adapted, accordingly.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Change color to avoid screen flickering
;;
(when (display-graphic-p)
  (set-face-background 'default "#4f4f4f" nil)
  (set-face-foreground 'default "#f0dfaf" nil)
)
#+END_SRC

- Avoid garbage collection at startup

  For detail information read the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html][Garbage Collection manual entry]].

  Later in the initialization process the garbage collection procedure is even more fine tuned.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Garbage collection optimization
;;
(setq gc-cons-threshold  most-positive-fixnum
      ;; The value of this variable is the number of bytes of storage that must
      ;; be allocated for Lisp objects after one garbage collection in order to
      ;; trigger another garbage collection.

      gc-cons-percentage 0.6
      ;; The value of this variable specifies the amount of consing before a
      ;; garbage collection occurs, as a fraction of the current heap size.
)


;;
;; After initialization set the garbage collection threshold to a reasonable value.
;;
(add-hook 'add-init-hook
          `(lambda ()
            (setq gc-cons-threshold  psimacs/config/gc-cons-threshold
                  gc-cons-percentage psimacs/config/gc-cons-percentage)
            (garbage-collect)
                  ) t)
#+END_SRC


- Another small optimization concerns on =file-name-handler-alist=

  On every .el and .elc file loaded during start up, it has to runs those regexps against the filename;
  setting it to nil and after initialization finished put the value back make the initialization process quicker.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defvar psimacs/config/file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

;;
;; After initialization reset the file-name-handler-alist
;;
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq file-name-handler-alist psimacs/config/file-name-handler-alist)
            (makunbound 'psimacs/config/file-name-handler-alist)
            ))
#+END_SRC

- Disable warnings generated when functions are redefined with defadvice

  Defines what to do with redefinitions during Advice de/activation.
  Redefinition occurs if a previously activated function that already has an
  original definition associated with it gets redefined and then de/activated.
  In such a case we can either accept the current definition as the new
  original definition, discard the current definition and replace it with the
  old original, or keep it and raise an error. The values `accept', `discard',
  `error' or `warn' govern what will be done. `warn' is just like `accept' but
  it additionally prints a warning message. All other values will be
  interpreted as `error'.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Suppressing ad-handle-definition warnings
;;
(setq ad-redefinition-action 'accept)
#+END_SRC


- Debugging on error and message buffer limit

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(setq debug-on-error  t                 ; That will open the debugger when the error is raised.
      message-log-max t                 ; Specifies how many lines to keep in the *Messages* buffer.
                                        ; The value t means there is no limit on how many lines to keep.
)
#+END_SRC

** Preamble for any =.el= file

Any generated initialization file should start with the same preamble concerning author, license etc.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Preamble support
;;
(defun psimacs/config/generate-preamble (file org-file description)
  "Generate a proper preamble string for the given file.
FILE        : el file that get generated
ORG-FILE    : org mode file that is prints
DESCRIPTION : short description text"
  (let (
        (preamble (concat (format ";;; %s ---%s-*- lexical-binding: t -*-\n" (file-name-nondirectory file) description)
                                  ";;\n"
                          (format ";; Don't edit this file, edit %s instead ...\n" (file-name-nondirectory org-file))
                                  ";;\n"
                                  "\n"
                          (format ";; Copyright (C) %s %s (%s)\n"
                                  psimacs/config/copyright/year
                                  psimacs/config/copyright/author
                                  psimacs/config/copyright/pseudonyme)
                                  "\n"
                          (format ";; Author:  %s <%s>\n"
                                  psimacs/config/copyright/author
                                  psimacs/config/copyright/email)
                          (format ";; URL:     %s\n" psimacs/config/copyright/url)
                          (format ";; License: %s %s\n"
                                  psimacs/config/copyright/license
                                  psimacs/config/copyright/version)
                                  "\n"
                                  ";; This file is not part of GNU Emacs.\n"
                                  ";;\n"
                                  ";; This program is free software; you can redistribute it and/or\n"
                          (format ";; modify it under the terms of the %s\n"
                                  psimacs/config/copyright/license)
                          (format ";; %s published by the Free Software Foundation.\n" psimacs/config/copyright/version)
                                  ";;\n"
                                  ";; This program is distributed in the hope that it will be useful,\n"
                                  ";; but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
                                  ";; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n"
                                  ";; General Public License for more details.\n"
                                  ";;\n"
                                  ";; You should have received a copy of the GNU General Public License\n"
                                  ";; along with this program; see the file LICENSE.  If not, write to\n"
                                  ";; the Free Software Foundation, Inc., 51 Franklin Street, Fifth\n"
                                  ";; Floor, Boston, MA 02110-1301, USA.\n"
                                  ";;\n"
                                  "\n")))
    preamble
  )
)
#+END_SRC

** Tangling support without org-bable

The code generation process is not performed with the [[http://orgmode.org/worg/org-contrib/babel/][Org Mode Babel]] functionality. That is because the startup
should be pretty fast and not rely on loading [[https://orgmode.org][org-mode]] only for this task. Additionally, the tangling function
does do some special stuff that is not supported by the  [[http://orgmode.org/worg/org-contrib/babel/][Org Mode Babel]] framework.

Sections that are marked as =Canceled= or =Disabled= should be filtered.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defun psimacs/config/tangle-section-canceled ()
  "Return t if the current section header was 'CANCELED' or 'DISABLED', else nil.

Section headers starts with '*', '**', etc, e.g.:

'** CANCELED Some section header text'"
  (save-excursion (if (re-search-backward "^\\*+\\s-+\\(.*?\\)?\\s-*$" nil t)
                      (or (string-prefix-p "CANCELED" (match-string 1) t)
                          (string-prefix-p "DISABLED" (match-string 1) t)) nil)))
#+END_SRC


The main tangling function.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defun psimacs/config/tangle-config-org (orgfile elfile)
  "This function will write all source blocks from 'file.org' into 'file.el' that are ...
        - not marked as :tangle no
        - have a source-code of =emacs-lisp=
        - doesn't have the todo-markers CANCELED or DISABLED

Elisp source code blocks that are marked as ':tangle foo.el' are written to file 'foo.el' instead.
For these files extra header and footer are written. In this case, also an additional header argument
':var file-description \"text\" is evaluated and used in the file header.

Shortly, all tangled source code blocks for file foo.el are written to one file 'foo.el' that look like

;; foo.el --- text -*- lexical-binding: t -*-
;;
;; Don't edit this file, edit file.org instead ...
;;
...
(provide 'foo)

Source code blocks that tangle to early-init.el are handled differently. In this case neither a
'require' statement in file.el nor the 'provide' clause is added to the file early-init.el.
"
  (let* ((body-list ())
         (src-block-regexp   (concat
                              ;; (1) indentation                 (2) lang
                              "^\\([ \t]*\\)#\\+begin_src[ \t]+\\([^ \f\t\n\r\v]+\\)[ \t]*"
                              ;; (3) switches
                              "\\([^\":\n]*\"[^\"\n*]*\"[^\":\n]*\\|[^\":\n]*\\)"
                              ;; (4) header arguments
                              "\\([^\n]*\\)\n"
                              ;; (5) body
                              "\\([^\000]*?\n\\)??[ \t]*#\\+end_src"))
         (found-files-alist ())
         (found-load-dir-alist ()))
    (with-temp-buffer (insert-file-contents orgfile)
                      (goto-char (point-min))
                      (while (re-search-forward src-block-regexp nil t)
                        (let ((lang (match-string 2))
                              (args (match-string 4))
                              (body (match-string 5))
                              (canc (psimacs/config/tangle-section-canceled)))
                          (when (and (string= lang "emacs-lisp")
                                     (not (string-match-p "^.*:tangle\\s-+no.*$" args))
                                     (not canc))
                            (when (string-match "^.*:tangle\\s-+\\([^:]+\\).*$" args)
                              (let ((dst (string-trim (match-string 1 args)))
                                    (dst-file)
                                    (dst-dir)
                                    (line)
                                    (package-name)
                                    (relative-dir))
                                (if (string= dst "yes")
                                    (progn
                                      (setq body (concat body "\n"))
                                      (add-to-list 'body-list body))
                                  ;; ...else a .el file is requested explicitly.
                                  (progn
                                    (setq dst-file (expand-file-name (concat user-emacs-directory dst)))
                                    (setq dst-dir  (file-name-directory dst-file))
                                    (setq package-name (file-name-sans-extension (file-name-nondirectory dst-file)))

                                    (when (or
                                           (not (equal package-name "early-init"))
                                           (and
                                            (equal package-name "early-init")
                                            psimacs/config/tangle-early-init-file))
                                      (unless (cdr (assoc dst-file found-files-alist))
                                        (when (file-exists-p dst-file)
                                          (delete-file dst-file))

                                        (unless (file-exists-p dst-dir)
                                          (make-directory dst-dir t))

                                        (setq relative-dir (file-relative-name (file-name-directory dst-dir)
                                                                               user-emacs-directory))

                                        (unless (or
                                                 (cdr (assoc dst-dir found-load-dir-alist))
                                                 (equal relative-dir "./"))
                                          (setq line (format
                                                      "(add-to-list 'load-path (concat user-emacs-directory \"%s\"))\n\n"
                                                      relative-dir))
                                          (add-to-list 'body-list line)
                                          (map-put found-load-dir-alist dst-dir t)
                                        )

                                        (let ((description " "))
                                          (when (string-match
                                                 "^.*:var\\s-+file-description\\s-*=\\s-*\"\\([^\"]+\\).*$"
                                                 args)
                                            (setq description (concat " " (string-trim (match-string 1
                                                                                                     args))
                                                                      " ")))

                                          (unless (equal package-name "early-init")
                                            (if (equal description " ")
                                                (setq line (format "(require '%s)\n\n" package-name))
                                              (progn
                                               (setq line (format "(require '%s)" package-name))
                                               (setq line (concat line (make-string (- 42 (length line)) ?\s) (format ";;%s\n\n" description)))
                                               ))
                                            (add-to-list 'body-list line))

                                          (with-temp-buffer (insert (psimacs/config/generate-preamble
                                                                     dst-file
                                                                     orgfile
                                                                     description))
                                                            (write-region (point-min)
                                                                          (point-max) dst-file t))
                                        )
                                        (map-put found-files-alist dst-file t)
                                      )
                                      (with-temp-buffer (insert body)
                                                        (insert "\n")
                                                        (write-region (point-min)
                                                                      (point-max) dst-file t)))))))))))

    ;;
    ;; Add the config pathes to Emacs load path list and add the final provide-clause to the
    ;; written emacs package files.
    ;;
    (dolist (element found-files-alist)
      (let* ((file (car element))
             (package-name (file-name-sans-extension (file-name-nondirectory file))))

        (unless (equal package-name "early-init")
          (with-temp-buffer (insert (format "(provide '%s)\n" package-name))
                            (write-region (point-min)
                                          (point-max) file t)))))
    (with-temp-file elfile
      (insert (psimacs/config/generate-preamble elfile orgfile " Initialization file "))
      (apply 'insert (reverse body-list))
      (insert "\n"))

    ;; Byte compiling the init file is not recommendet
    ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html
    ;;(byte-compile-file elfile)
    ))
#+END_SRC


In case that the resulting configuration file is named =init.el= no explicit loading is necessary. Otherwise, we
must load the =.el= file.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Next function extracts the elips code from the org-file and possibly loads the
;; resulting elips file.
;;
(defun psimacs/config/load-configuration-file (orgfile)
  "Load the given configuration file unless it equals to 'init.el' itself.

File 'init.el' is loaded automatically at startup. No extra loading is necessary.
This function is basically an efficient replacement of org-babel-load-file.
However, it performs some extra task on extraction of the elisp source code blocks.
This happens in the tangle-config-org function.
No byte compiling is performed for any elips file generated by the tangling procedure.
"
  (let* ((base-name (file-name-sans-extension orgfile))
         (elfile    (concat base-name ".el"))
         ;;(elcfile (concat base-name ".elc")) ;; Byte compiling the init file is not recommendet
         )
    (when (and psimacs/config/tangle-anything
               (or (not (file-exists-p elfile))
                   (file-newer-than-file-p orgfile elfile)))

      ;; Byte compiling the init file is not recommendet
      ;;(file-newer-than-file-p orgfile elcfile)
      ;;(file-newer-than-file-p elfile  elcfile)

      (psimacs/config/tangle-config-org orgfile elfile))
    (unless (equal (file-name-nondirectory elfile) "init.el")
      (load (file-name-sans-extension elfile)))))
#+END_SRC

** Directory synchronization system functions

Two useful functions that allow one or two way directory synchronizations.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defun psimacs/file-system/copy-directory-files (src dst &optional only-newer-files)
  "Copy all files from SRC directory into DST directory recursively.
If optional argument ONLY-NEWER-FILES is non nil source files are copied only if their time stamp is
newer then the time stamp of the destination file."
  (if (file-exists-p src)
      (progn
        (unless (file-exists-p dst)
          (make-directory dst t))
        (dolist (f (directory-files-recursively src ".*" t))
          (if (file-directory-p f)
              (let ((f-relative (file-relative-name f src)))
                (when f-relative (let ((dst-dir (concat (file-name-as-directory dst) f-relative)))
                                   (unless (file-exists-p dst-dir)
                                     (make-directory dst-dir t)))))
            ;; ...else is file
            (let* ((src-dir (file-name-directory f))
                   (f-relative (file-relative-name src-dir src))
                   (dst-dir dst)
                   (dst-file))
              (when f-relative
                (setq dst-dir (concat (file-name-as-directory dst) f-relative)))
              (unless (file-exists-p dst-dir)
                (make-directory dst-dir t))
              (setq dst-file (concat (file-name-as-directory dst-dir)
                                     (file-name-nondirectory f)))

                                        ;(if (file-exists-p dst-file)
              (if only-newer-files (when (file-newer-than-file-p f dst-file)
                                     (copy-file f dst-file t t))
                ;; ...else always copy
                (copy-file f dst-file t t))
                                        ;)
              )))
        )
    (make-directory src t)))
#+END_SRC

Two way synchronization if possible with the following function.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defun psimacs/file-system/synchronize-directories(src dst)
  "This function synchronizes two directories.
All files that are found in SRC and that are either not in DST or newer in SRC are copied to DST.
All files that are found in DST and that are either not in SRC or newer in DST are copied to SRC.

After this function is finished the two directories are identical.
 "
  (psimacs/file-system/copy-directory-files src dst t)
  (psimacs/file-system/copy-directory-files dst src t))
#+END_SRC

** Dropbox configuration sharing support

The following functionality allows the synchronization between the user *Psimacs* configuration and a shared
/Dropbox/ configuration repository. Basically, allowing multiple machines to share the same *Psimacs* setup.

The /Dropbox/ location is determined at run time.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Sync with dropbox
;;   The main config file is taken from the dropbox folder but it is loaded from
;;   the local directory (see below). Therefore we copy the main config file from
;;   the dropbox emacs folder into the emacs home directory. If the main config
;;   file in the emacs home directory is newer than the file in the dropbox folder
;;   we update that one with the newer local one.
;;   The agenda files are worked on the dropbox directly, but a local copy is made
;;   for backup purpose.
;;
(defun psimacs/config/find-dropbox-folder ()
  "Get the current dropbox folder on the running machine. Otherwise nil"
  (interactive)
  (let* ((db-appdat-info-file      (concat (expand-file-name (file-name-as-directory (getenv
                                                                                      "APPDATA")))
                                           "Dropbox/info.json"))
         (db-localappdat-info-file (concat (expand-file-name (file-name-as-directory (getenv
                                                                                      "LOCALAPPDATA")))
                                           "Dropbox/info.json"))
         (db-user-home-info-file   "~/Dropbox/info.json")
         (json-path (cond ((eq system-type 'windows-nt)
                           (if (file-exists-p db-appdat-info-file) db-appdat-info-file (if
                                                                                           (file-exists-p
                                                                                            db-localappdat-info-file)
                                                                                           db-localappdat-info-file
                                                                                         (if
                                                                                             (file-exists-p
                                                                                              db-user-home-info-file)
                                                                                             db-user-home-info-file
                                                                                           nil))))
                          ((or
                            (eq system-type 'darwin)
                            (eq system-type 'gnu-linux))
                           (if (file-exists-p db-user-home-info-file) db-user-home-info-file
                             nil)))))
    (if (and json-path
             (file-exists-p json-path))
        (progn
          (require 'json)
          (cdr (assoc 'path (car (json-read-file json-path))))) nil)))
#+END_SRC

*Psimacs* is expected to reside in sub-directory =emacs/psimacs/emacs=. The author uses the same sub-directory
in its home directory and avoids the =.emcad.d= directory completely. Instead the use of environment variable
=XDG_CONFIG_HOME= allows to run various *Emacs* configuration simultaneously.

The following /Windows Batch-File/ is used for starting *Psimacs*:

#+BEGIN_SRC
@echo off

set XDG_CONFIG_HOME=c:\home\emacs\psimacs
C:\utils\Emacs\bin\runemacs.exe
#+END_SRC

The constant =psimacs/config/dropbox-dir= is the actual /Dropbox/ directory found on your machine. It is determined by
the function =psimacs/config/find-dropbox-folder= at initialization time. The constant
=psimacs/config/dropbox-emacs-dir= is a sub directory to =psimacs/config/dropbox-dir=. For a multiple configuration
setup it should be =emacs/psimacs/emacs=. In a traditional Emacs setup, it would be set to =.emacs.d=.
Other configurations then can exchange the /psimacs/ string to something other.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Initialize the directory constants for dropbox...
;;
(defconst psimacs/config/dropbox-dir
  (let ( (f (psimacs/config/find-dropbox-folder)) )
    (if f (file-name-as-directory f) nil))
  "The psimacs dropbox directory or nil.")

;;
;; ... and the its emacs configuration directory
;;
(defconst psimacs/config/dropbox-emacs-dir
  (if psimacs/config/dropbox-dir (file-name-as-directory (concat psimacs/config/dropbox-dir
                                                                 "emacs/psimacs/emacs")) nil)
  "The psimacs dropbox emacs configuration directory or nil.")
#+END_SRC

The actual synchronization function. In its preamble it creates list of files and directories that should be
synchronized. These list might be adapted in the future as the configuration evolves.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; The synchronization function.
;;
(defun psimacs/config/sync-with-dropbox ()
  "Synchronize with dropbox directory if it exists.

The expected place in the dropbox directory is 'emacs/psimacs/emacs'.
"
  (if (and psimacs/config/dropbox-dir
           (file-directory-p psimacs/config/dropbox-dir))
      (let* ((db-dir psimacs/config/dropbox-emacs-dir)
             (sync-files-alist ())
             (sync-dirs-alist  ()))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/main-org-file)
                                             (concat db-dir psimacs/config/main-org-file)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory psimacs/config/icon-file)
                                             (concat db-dir psimacs/config/icon-file)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/license-file)
                                             (concat db-dir psimacs/config/license-file)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/custom-file)
                                             (concat db-dir psimacs/config/custom-file)))
        (add-to-list 'sync-dirs-alist  (cons (file-name-as-directory (concat user-emacs-directory
                                                                             psimacs/config/agenda-dir))
                                             (file-name-as-directory (concat db-dir
                                                                             psimacs/config/agenda-dir))))
        (add-to-list 'sync-dirs-alist  (cons (file-name-as-directory (concat user-emacs-directory
                                                                             psimacs/config/latex-dir))
                                             (file-name-as-directory (concat db-dir
                                                                             psimacs/config/latex-dir))))
        (add-to-list 'sync-dirs-alist  (cons (file-name-as-directory (concat user-emacs-directory
                                                                             psimacs/config/assets-dir))
                                             (file-name-as-directory (concat db-dir
                                                                             psimacs/config/assets-dir))))

        ;;
        ;; Create missing dropbox emacs directory
        ;;
        (unless (file-directory-p db-dir)
          (make-directory db-dir t))
        (dolist (files sync-files-alist)
          (let ((file    (car files))
                (db-file (cdr files)))
            ;;
            ;; Try to copy the file from dropbox to emacs directory...
            ;;
            (if (file-exists-p db-file)
                (progn
                  ;;
                  ;; If the local file is newer, we update dropbox first
                  ;;
                  (when (file-newer-than-file-p file db-file)
                    (copy-file file db-file t t))
                  (when (or (not (file-exists-p file))
                            (file-newer-than-file-p db-file file))
                    (copy-file db-file file t t)))

              ;; ...else try to upload to dropbox
              (if (file-exists-p file)
                  (copy-file file db-file t t)))))
        (dolist (files sync-dirs-alist)
          (let ((directory    (car files))
                (db-directory (cdr files)))
            (psimacs/file-system/synchronize-directories db-directory directory))))))
#+END_SRC

** Execution of the Dropbox synchronization

This starts the synchronization between the user *Psimacs* configuration and the Dropbox configuration repository.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Synchronize with dropbox
;;
(when psimacs/config/synchronize-at-startup
  (psimacs/config/sync-with-dropbox))
#+END_SRC

** Tangling the main =init.org= file.

This starts the processing of this org file (=init.org=), resulting in the final configuration files for *Psimacs*.

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;;
;; Extract elisp code from org files if necessary and load that code into
;; emacs.
;;
(psimacs/config/load-configuration-file (expand-file-name (concat user-emacs-directory
                                                                  psimacs/config/main-org-file)))
#+END_SRC

* Preamble to the =init.el= file

Until this point, all *Psimacs* source code tangled to the =early-inti.el= file. From now on, the actual configuration
file is setup. It starts with a commentary preamble written to the primary =init.el= file.

#+BEGIN_SRC emacs-lisp :tangle yes
;;; Commentary:
;;
;; Emacs 27 introduces early-init.el, which is run before init.el,
;; before package and UI initialization happens.
;;
#+END_SRC

*Psimacs* splits the configuration into various =init-*.el=-files. This will allow better looking up specific
settings or perform some experimentation. Each of these configuration files will be properly documented and it
is possible to completely relinquish the tangling process and work with the =init-*.el = initialization files
alone.

The main configuration starts now. It is sectioned into different topics. Each topic starts with a prime section
of its own.

* System helpers

This has to be provided early in the initialization process so that it is available for the subsequent code.

** System constants flags

The following boolean constants are defined for convenience.

#+BEGIN_SRC emacs-lisp :tangle config/init-config-helper.el :var file-description="Configuration helper"
;;
;; System constants for convenience
;;
(defconst psimacs/system/is-gui-flag        (display-graphic-p)          "Are we running on a GUI Emacs?")
(defconst psimacs/system/is-windows-nt-flag (eq system-type 'windows-nt) "Are we running on a Windows OS system?")
(defconst psimacs/system/is-gnu-linux-flag  (eq system-type 'gnu/linux)  "Are we running on a GNU/Linux system?")
(defconst psimacs/system/is-darwin-flag     (eq system-type 'darwin)     "Are we running on a MAC system?")
#+END_SRC

** Helper functions for assembling folders and files

Some functions to ease the code.

#+BEGIN_SRC emacs-lisp :tangle config/init-config-helper.el
;;
;; Helper functions for file and directory handling
;;
(defun psimacs/file-system/concat-directory (dir subdir)
  "Assemble directory and subdirectory to a new directory."
  (expand-file-name (file-name-as-directory (concat (file-name-as-directory dir) subdir)))
)

(defun psimacs/file-system/concat-file (dir file)
  "Assemble directory and file."
  (expand-file-name (concat (file-name-as-directory dir) file))
)

(defun psimacs/file-system/prefer-dropbox-directory (dir)
  "Evaluates either to the local or to the dropbox pendant directory.
This functions always prefers DIR on dropbox."
  (let ((local-dir (psimacs/file-system/concat-directory user-emacs-directory dir))
        (dropbox-dir (if psimacs/config/synchronize-at-startup
                         psimacs/config/dropbox-emacs-dir
                       nil))
        )
    (if dropbox-dir
        (psimacs/file-system/concat-directory dropbox-dir dir)
      local-dir)))
#+END_SRC

* Configuration constants

In the following various *Psimacs* configuration constants are defined. They are just defined at a central place, but
used only later in the configuration. This section is rather boring. However, I decided to concentrate
all these settings together so that it is easy to lookup or change them.

** Primary directory constants

This defines the =site-lisp= directory for storing local elisp code and the dependencies directory where non *Emacs*
programs are installed.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el :var file-description="Configuration constants"
;;
;; Directory constants used by Psimacs
;;
(defconst psimacs/config/site-lisp-dir
  (psimacs/file-system/concat-directory user-emacs-directory "site-lisp")
  "The psimacs personal site-lisp directory.")

(defconst psimacs/config/session-dir
  (psimacs/file-system/concat-directory user-emacs-directory "session")
  "The psimacs session directory used for storing various session information.")
#+END_SRC

** Tools directory

The tools directory contains non *Emacs* / *Lisp* tools, that are not readily available, but are important for
*Psimacs* configuration. For instance =msys64= is needed by *Psimacs* but an appropriate installation can be provided
by resources from the web. Therefore =msys64= is not found in tools. Goal is it that the =psimacs/config/tools-dir=
is empty.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Installation of 'personal' tools
;;
(defconst psimacs/config/tools-dir
  (psimacs/file-system/concat-directory psimacs/config/site-lisp-dir "tools")
  "The psimac personal tools directory.")
#+END_SRC

** System resources directory

Many dependencies exists to external programs that are used by *Psimacs*. On default most of them are expected
to be installed in the =psimacs/config/system-utils-dir=. For each tool that *Psimacs* expects a detailed installation
recipe is provided.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Installation of system wide utilities and resources
;;
(defconst psimacs/config/system-utils-dir
  (expand-file-name (file-name-as-directory "c:/utils"))
  "The psimac system resources and utility directory.")
#+END_SRC

** Backup constants

*Psimacs* supports the creation of backup files.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for backups
;;
(defconst psimacs/config/backup-root-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "backups")
  "The psimacs backup root directory.")

(defconst psimacs/config/backup-dir
  (psimacs/file-system/concat-directory psimacs/config/backup-root-dir "computer")
  "The psimacs backup directory.")

(defconst psimacs/config/backup-max-number-files 36
  "The psimacs maximal number of tracked backup files.")
#+END_SRC

** Auto saving

Auto saving is performed by *Psimacs* a lot.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for auto saving
;;
(defconst psimacs/config/auto-save-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "auto-save")
  "The psimacs auto save directory.")
#+END_SRC

** Bookmarking

*Psimacs* uses the [[https://github.com/joodland/bm][Visible bookmarks in buffer (bm)]] for bookmarking.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for bookmarking
;;
(defconst psimacs/config/bookmarks-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "bm")
  "The psimacs bookmarks directory.")

(defconst psimacs/config/bm-bookmarks-file
  (psimacs/file-system/concat-file psimacs/config/bookmarks-dir ".bm-bookmarks")
  "The psimacs bm bookmarks file.")
#+END_SRC

** Emacs client/server

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][Client/Server]] support for *Psimacs*. We use the default /server/ directory. Since we allow multiple
*Emacs* configurations side by side, we must either set the global environment variable =EMACS_SERVER_FILE=
to the correct server file, or we must call *emacsclient* with option =-f server-file=.

*Psimacs* handles that in the following way:
- *Psimacs* uses the =EMACS_SERVER_FILE=
- If at startup a =EMACS_SERVER_FILE= if already defined in the environment and it does not correspond to
  the current configuration, =EMACS_SERVER_FILE= is not modified and the //*Emacs server*/ is not started.
- If the =EMACS_SERVER_FILE= is not defined, or it points to a non existing file, it is set to the
  current configuration's /server-file/ in the user environment.
  Additionally, a =kill-emacs-hook= is set up that removes the environment variable on exit of the *Emacs* session.

References:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][Using Emacs as a Server]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/TCP-Emacs-server.html#TCP-Emacs-server][TCP Emacs server]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/emacsclient-Options.html][*emacsclient* Options]]

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for client/server storage
;;
(defconst psimacs/config/server-dir
  (psimacs/file-system/concat-directory user-emacs-directory "server")
  "The psimacs server directory.")

(defconst psimacs/config/server-file
  (psimacs/file-system/concat-file psimacs/config/server-dir "server")
  "The psimacs server file.")


;;
;; ToDo: this should go to the server setup code below
;;
(defvar psimacs/config/found-server-file
   (getenv "EMACS_SERVER_FILE")
   "The active server file.")

(when (and psimacs/system/is-windows-nt-flag
            (or (not psimacs/config/found-server-file)
                (not (file-exists-p psimacs/config/found-server-file))
                (equal psimacs/config/found-server-file psimacs/config/server-file)))
   (start-process "SETX" nil "setx" "EMACS_SERVER_FILE" psimacs/config/server-file)
   (add-hook 'kill-emacs-hook
             (lambda ()
               (call-process "reg.exe" nil nil nil "delete" "HKCU\\Environment" "/v" "EMACS_SERVER_FILE" "/f"))))
#+END_SRC

** Agenda files

Quoting [[http://cachestocaches.com/2016/9/my-workflow-org-agenda/][My Workflow with Org-Agenda]]:
#+BEGIN_QUOTE
The agenda view scans your =.org= files (set by customizing the org-agenda-files variable) and collects all of the
headings with a TODO (or related) keyword. Without the agenda view, keeping track of projects, which I ensure are
top-level TODO items, is difficult. The agenda provides a convenient way of tracking your projects and managing
your calendar.
#+END_QUOTE


#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Org-Agenda directory
;;
(defconst psimacs/config/org-agenda-dir
    (psimacs/file-system/prefer-dropbox-directory "agenda")
    "The psimacs org agenda  directory.")

;;
;; Diary files
;;
(defcustom psimacs/config/org-capture-coding-diary-file "CodingDiary.org"
    "The diary file for capturing coding points.")

(defcustom psimacs/config/org-capture-coding-diary-files
    '(
        "CodingDiary.org"
        "ShadowProject.org"
    )
    "The list of supported diary files for capturing coding points.")
#+END_SRC

** Recent files

Constants that relate to recent file management.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Recent file constants
;;
(defconst psimacs/config/recent-file
    (psimacs/file-system/concat-file psimacs/config/session-dir ".recentf")
    "The psimacs recent file.")
#+END_SRC

** History

Configuration constants for saving the history.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Save history management
;;
(defconst psimacs/config/history-file
    (psimacs/file-system/concat-file psimacs/config/session-dir ".history")
    "The psimacs history file.")
#+END_SRC

** Save-Places
Save place allows store the current cursor position for the next session.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Save cursor positions for the next session
;;
(defconst psimacs/config/save-places-file
    (psimacs/file-system/concat-file psimacs/config/session-dir ".save-places")
    "The psimacs save places file.")
#+END_SRC

** The custom.el file.

The =custom.el= file contains customizations by the user. This file is not synchronized with the /Dropbox/
repository.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; The custom.el file. This file gets not be synchronized
;;
(defconst psimacs/config/custom-file
    (psimacs/file-system/concat-file user-emacs-directory ".custom.el")
    "The psimacs customization file.")
#+END_SRC

** Latex file sharing

LaTeX bibliography should be shared.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; LaTeX file sharing
;;
(defconst psimacs/config/latex-share-dir
  (psimacs/file-system/prefer-dropbox-directory "latex")
  "The psimacs shared latex directory.")
#+END_SRC

** The Amx file

[[https://github.com/DarwinAwardWinner/amx][Amx]] is an alternative interface for M-x in Emacs.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Amx package support file
;;
(defconst psimacs/config/amx-file
  (psimacs/file-system/concat-file psimacs/config/session-dir ".amxf")
  "The psimacs amx file.")
#+END_SRC

** MSYS2

*Psimacs* uses a lot of external programs provided by the [[https://www.msys2.org/][MSYS2]] framework.  [[https://www.msys2.org/][MSYS2]] is a collection of tools and
libraries providing you with an easy-to-use environment for building, installing and running native Windows software.

Download the [[https://www.msys2.org/#installation][installer]] for the [[https://www.msys2.org/][MSYS2]] framework and follow the installation instructions. Install into folder
=c:/utils/msys64= which is the default for *Psimacs*. The installation does not need to be entered in the system path
environment. *Psimacs* handles a proper executable path internally. After finishing the base installation some packages
must be installed with the [[https://www.msys2.org/][MSYS2]] package manager /pacman/. For that, open the =MSYS2 MinGW 64-bit= terminal and execute
the following commands:
*** Packages
- pacman -Syu
- pacman -Su
- pacman -S mingw64-w64-x86_64-cmake
- pacman -S mingw64-w64-x86_64-qt5
- pacman -S mingw-w64-x86_64-toolchain
- pacman -S mingw-w64-x86_64-ninja
- pacman -S mingw-w64-x86_64-clang
- pacman -S mingw-w64-x86_64-clang-analyzer
- pacman -S mingw-w64-x86_64-clang-tools-extra
- pacman -S mingw-w64-x86_64-compiler-rt
- pacman -S mingw-w64-x86_64-libblocksruntime
- pacman -S mingw-w64-x86_64-openblas
- pacman -S mingw-w64-x86_64-boost
- pacman -S mingw-w64-x86_64-eigen3
- pacman -S mingw-w64-x86_64-zeromq
- pacman -S mingw-w64-x86_64-pkg-config
- pacman -S mingw-w64-x86_64-doxygen
- pacman -S mingw-w64-x86_64-graphviz
- pacman -S mingw-w64-x86_64-glm
- pacman -S mingw-w64-x86_64-hunspell
- pacman -S mingw-w64-x86_64-hunspell-en
- pacman -S mingw-w64-x86_64-aspell
- pacman -S mingw-w64-x86_64-aspell-de
- pacman -S mingw-w64-x86_64-aspell-en

Some of the packages are not really required but I use them and I would like to memorize my installation procedure
here. So, feel free to only install the packages you require.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; MSYS2 installation
;;
(defconst psimacs/config/msys-root-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "msys64")
  "The psimacs msys64 root directory.")

(defconst psimacs/config/msys-runtime-dir
  (psimacs/file-system/concat-directory psimacs/config/msys-root-dir "usr/bin")
  "The psimacs msys runtime directory.")

(defconst psimacs/config/msys-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/msys-runtime-dir "bash.exe")
  "The psimacs bash executable.")

(defconst psimacs/config/mingw-root-dir
  (psimacs/file-system/concat-directory psimacs/config/msys-root-dir "mingw64")
  "The psimacs mingw64 root directory.")

(defconst psimacs/config/mingw-runtime-dir
  (psimacs/file-system/concat-directory psimacs/config/mingw-root-dir "bin")
  "The psimacs mingw64 runtime directory.")
#+END_SRC

** Spell checking

Basically two spell checkers are usable with *Emacs*. Either [[https://github.com/hunspell/hunspell][Hunspell]] or [[http://aspell.net/][Aspell]]. Currently *Psimacs* uses
[[https://github.com/hunspell/hunspell][Hunspell]].

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Spell checking with hunspell
;;
(defconst psimacs/config/spell-checker-dir
  psimacs/config/assets-dir
  "The psimacs spell checker directory.
In this directory the file 'plain-word-list.txt' is expected.")

(defconst psimacs/config/spell-checker-dictionary-dir
  (psimacs/file-system/concat-directory psimacs/config/mingw-root-dir "share/hunspell")
  ;;(psimacs/file-system/concat-directory psimacs/config/mingw-root-dir "share/myspell")
  "The psimacs spell checker dictionary directory")

(defconst psimacs/config/spell-checker-file
  (psimacs/file-system/concat-file  psimacs/config/mingw-runtime-dir "hunspell.exe")
  ;;(psimacs/file-system/concat-file  psimacs/config/spell-checker-dir "aspell.exe")
  "The spell checker program to use.")

(defconst psimacs/config/personal-spell-dict-file
  (psimacs/file-system/concat-file psimacs/config/session-dir ".hunspell_personal")
  "The psimacs personal hunspell dictionary file.")
#+END_SRC

** Multilingual grammar and style checker

[[https://languagetool.org][LanguageTool]] is a multilingual grammar and style checker. The stable version is installed from [[https://languagetool.org/download/][download]].

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Multilingual grammar and style checker
;;
(defconst psimacs/config/language-tool-dir
  (psimacs/file-system/concat-directory  psimacs/config/system-utils-dir "LanguageTool")
  "The psimacs language tool directory")
#+END_SRC

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. The following constant provides the main /project/ directories,
i.e. a directories in which [[https://github.com/bbatsov/projectile][Projectile]] searches for projects.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Projectile search pathes
;;
(defconst psimacs/config/project-search-path
    '("~/projects/source"
      "d:/projects/source"
      )
    "The psimacs project search path")
#+END_SRC

** Printing support

Printing relies on an installed [[https://www.ghostscript.com/][Ghostscript]] interpreter for the PostScript language and PDF files.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Ghostscript interpreter for PostScript and PDF files
;;
(defconst psimacs/config/ghostscript-exe
  (psimacs/file-system/concat-file  psimacs/config/mingw-runtime-dir "gswin32c.exe")
  "The psimacs ghost script executable.")
#+END_SRC

** Snippets

Snippets are used by package [[https://github.com/joaotavora/yasnippet][Yasnippet]]. Beside of the installed snippets, user provided snippets used. These
are to be installed into the following directory.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; User provided snippets
;;
(defconst psimacs/config/snippets-dir
  (psimacs/file-system/concat-directory  psimacs/config/site-lisp-dir "snippets")
  "The psimacs personal snippets directory.")
#+END_SRC

** Python tools

[[https://www.python.org/][Python]] is one of my favorite languages. I use the Windows OS [[https://www.python.org/][Python]] installer and not the [[https://www.msys2.org/][MSYS2]] python package.

Installation of the following packages is recommended: autopep8, black, cmake-language-server, flake8, ipython, jupyter,
mypy, mypy-extensions, pyflakes, pylint, pyls-black, pyls-isort, pyls-mypy, ptvsd, pycodestyle, pycparser, pydocstyle,
pywin32, pywinpty

*Psimacs* installation does reference the python tools explicitly. Nevertheless, the Windows OS [[https://www.python.org/][Python]] runtime directory
as well as the Windows OS [[https://www.python.org/][Python]] scripts directory will be added to the environment search path list prior to [[https://www.msys2.org/][MSYS2]]
pathes. Therefore our Windows OS [[https://www.python.org/][Python]] should always be at work.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Python configuration constants
;;
(defconst psimacs/config/python-tools-dir
  (psimacs/file-system/concat-directory psimacs/config/tools-dir "py-tools")
  "The psimacs personal python-tools directory.")

(defconst psimacs/config/python-vc-visual-studio-dir
  (psimacs/file-system/concat-directory psimacs/config/python-tools-dir "MS-Visual-Studio")
  "The psimacs personal MS Visual Studio python directory.")

(defconst psimacs/config/python-runtime-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "Python385")
  "The psimacs used python runtime directory.")

(defconst psimacs/config/python-scripts-dir
  (psimacs/file-system/concat-directory psimacs/config/python-runtime-dir "Scripts")
  "The psimacs used python scripts directory.")

(defconst psimacs/config/python-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/python-runtime-dir "python.exe")
  "The psimacs used python runtime.")

(defconst psimacs/config/flake8-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "flake8.exe")
  "The psimacs used python flake8 runtime.")

(defconst psimacs/config/pylint-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "pylint.exe")
  "The psimacs used python pylint runtime.")

(defconst psimacs/config/mypy-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "mypy.exe")
  "The psimacs used python mypy runtime.")

(defconst psimacs/config/pyflakes-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "pyflakes.exe")
  "The psimacs used python pyflakes runtime.")

(defconst psimacs/config/pyls-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "pyls.exe")
  "The psimacs used python pyls runtime.")
#+END_SRC

** PlantUML

. [[https://plantuml.com/][PlantUML]] is an open-source tool allowing users to create [[https://en.wikipedia.org/wiki/Unified_Modeling_Language][UML]] diagrams from a plain text language.

References:
- [[https://en.wikipedia.org/wiki/Unified_Modeling_Language][Wikipedia: Unified Modeling Language]]
- [[https://www.uml-diagrams.org/][The Unified Modeling Language]]

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; PlantUML configration constants
;;
(defconst psimacs/config/plantuml-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "plantUML")
  "The psimacs plantUml tool  directory.")

(defconst psimacs/config/plantuml-jar-file
  (concat psimacs/config/plantuml-dir "lib/plantuml.jar")
  "The psimacs plantUml jar file.")

(defcustom psimacs/config/plantuml_java_arg_limit_size 0
  "Limits image width and heigh to this value.

Note that if you generate very big diagrams, (for example, something
like 20 000 x 10 000 pixels), you can have some memory issues.

Values: 0, 4096, 8192, 16384, 32768

If this value is 0, then no action is taken.")

(defcustom  psimacs/config/plantuml_java_arg_heap-size 0
  "Tune the Java VM heap size

Tune Jav VM heap size: -Xmx for maximum heap size, and -Xms for initial
heap size.

Values: 0, 256, 512, 1024, 2048, 4096, 8192

If this value is 0, then no action is taken.")
#+END_SRC

** Image Magick

The package [[https://github.com/mhayashi1120/Emacs-imagex][image+.el]] uses [[https://imagemagick.org/index.php][ImageMagick]]. I installed the file  [[https://imagemagick.org/script/download.php#windows][ImageMagick-7.0.10-45-portable-Q16-HDRI-x64.zip]].

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Installation site of ImageMagick
;;
(defconst psimacs/config/image-magick-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "ImageMagick")
  "The psimacs ImageMagick tool directory.")
#+END_SRC

** Java

Many packages and tools do need a [[https://www.java.com][Java]] installation. I use the open source implementation [[https://openjdk.java.net/][OpenJDK]] for my purposes.
The portable [[https://download.java.net/java/GA/jdk15.0.1/51f4f36ad4ef43e39d0dfdbaf6549e32/9/GPL/openjdk-15.0.1_windows-x64_bin.zip][Zip]] package for [[https://jdk.java.net/15/][Java Version 15]] is used by me.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Java constants
;;
(defconst psimacs/config/java-runtime-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "java64/bin")
  "The psimacs java runtime directory.")

(defconst psimacs/config/java-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/java-runtime-dir "javaw.exe")
  "The psimacs java executable.")
#+END_SRC

** Git

[[https://git-scm.com/][Git]] is a very important external tool to be installed. *Psimacs* uses the [[https://github.com/raxod502/straight.el][straight]] package manager which relies on a
properly installed [[https://git-scm.com/][Git]] program. A portable version is available at from their [[https://git-scm.com/download/win][download site]].

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Portable Git configuration
;;
(defconst psimacs/config/git-runtime-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "PortableGit/cmd")
  "The psimacs git runtime directory.")

(defconst psimacs/config/git-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/git-runtime-dir "git.exe")
  "The psimacs git executable.")

(defconst psimacs/config/gitk-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/git-runtime-dir "gitk.exe")
  "The psimacs gitk executable.")
#+END_SRC

** Graphviz

[[http://www.graphviz.org/][Graphviz]] is a wonderful tool for diagram generation. Especially [[https://plantuml.com/][PlantUML]] uses it as its backend interpreter for the
[[https://graphviz.org/doc/info/lang.html][Dot]] language.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Graphviz tool constants
;;
(defconst psimacs/config/graphviz-runtime-dir
  psimacs/config/mingw-runtime-dir
  "The psimacs Graphviz directory.")

(defconst psimacs/config/graphviz-runtime-dot-exe
  (psimacs/file-system/concat-file psimacs/config/graphviz-runtime-dir "dot.exe")
  "The psimacs Graphviz dot executable.")
#+END_SRC

** CMake

[[https://cmake.org/][CMake]] is an open-source, cross-platform family of tools designed to build, test and package software.

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; CMake tool configuration constants
;;
(defconst psimacs/config/cmake-runtime-dir
  psimacs/config/mingw-runtime-dir
  "The psimacs CMake directory.")

(defconst psimacs/config/cmake-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/cmake-runtime-dir "cmake.exe")
  "The psimacs CMake cmake runtime file.")

(defconst psimacs/config/ctest-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/cmake-runtime-dir "ctest.exe")
  "The psimacs CMake ctest runtime file.")

(defconst psimacs/config/cpack-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/cmake-runtime-dir "cpack.exe")
  "The psimacs CMake cpack runtime file.")

(defconst psimacs/config/cmcldeps-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/cmake-runtime-dir "cmcldeps.exe")
  "The psimacs CMake cmcldeps runtime file.")

(defconst psimacs/config/cmake-gui-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/cmake-runtime-dir "cmake-gui.exe")
  "The psimacs CMake cmake-gui runtime file.")
#+END_SRC

** Clang/LLVM

[[https://clang.llvm.org/][Clang]] can be used for compiling and linking [[https://en.wikipedia.org/wiki/C%2B%2B][C++]] programs.

Some usefule references for C++:
- [[https://en.wikipedia.org/wiki/C%2B%2B][Wikipedia: C++]]
- [[https://isocpp.org/][News, Status & Discussion about Standard C++]]
- [[https://www.cplusplus.com/][Welcome to cplusplus.com]]
- [[https://en.cppreference.com][C++ Reference]]
- [[https://justinmeiners.github.io/sgi-stl-docs/][Standard Template Library Programmer's Guide]]
- [[https://www.boost.org/][Boost C++ Libraries]]

#+BEGIN_SRC emacs-lisp :tangle config/init-constants.el
;;
;; Clang compiler framework configuration constants
;;
(defconst psimacs/config/clang-runtime-dir
  psimacs/config/mingw-runtime-dir
  "The psimacs clang directory.")

(defconst psimacs/config/clang-c++-compiler-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang++.exe")
  "The psimacs clang++ executable.")

(defconst psimacs/config/clang-cl-compiler-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-cl.exe")
  "The psimacs clang-cl executable.")

(defconst psimacs/config/clangd-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clangd.exe")
  "The psimacs clangd executable.")

(defconst psimacs/config/clang-format-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-format.exe")
  "The psimacs clang-format executable.")

(defconst psimacs/config/clang-include-fixer-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-include-fixer.exe")
  "The psimacs clang-include-fixer executable.")

(defconst psimacs/config/clang-tidy-runtime-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-tidy.exe")
  "The psimacs clang-tidy executable.")

(defconst psimacs/config/clang-check-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-check.exe")
  "The psimacs clang-check executable.")

(defconst psimacs/config/clang-rename-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-rename.exe")
  "The psimacs clang-rename executable.")

(defconst psimacs/config/clang-refactor-exe
  (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-refactor.exe")
  "The psimacs clang-refactor executable.")
#+END_SRC

* Basic setup

Some fundamental setting that *Psimacs* uses are collected here.

** Measuring the startup performance

In order to get expressive timing information about the initialization process, *Psimacs* always prints the
actual startup time into the *Message* buffer.

#+BEGIN_SRC emacs-lisp :tangle config/init-basics.el :var file-description="Basic setup"
;;
;; Perfromance measuring at the end of the initialization
;;
(add-hook 'emacs-startup-hook
    (lambda ()
        (message "Emacs loaded in %s with %d garbage collections."
            (format "%.2f seconds"
                (float-time (time-subtract after-init-time before-init-time))
            )
            gcs-done)
    )
)
#+END_SRC

** Avoid truncated output, i.e annoying ellipsis

The options eval-expression-print-level and eval-expression-print-length control the maximum depth
and length of lists to print in the result of the evaluation commands before abbreviating them. They
are described in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Eval.html][Lisp evaluation]] section of the *Emacs* manual.

#+BEGIN_SRC emacs-lisp :tangle config/init-basics.el
;;
;; Avoid truncated output, i.e annoying ellipsis
;;
(setq eval-expression-print-level nil)
(setq eval-expression-print-length nil)
#+END_SRC


** Personal information

Personal information settings for *Psimacs*. The /private/ folder content is not part of the public bundle.
Package =private/init-private.el= is loaded if it exists and its settings are applied.


#+BEGIN_SRC emacs-lisp :tangle config/init-basics.el

;;
;; Might exists, not mandatory.
;;
(defconst psimacs/config/private-dir (file-name-as-directory (concat user-emacs-directory "private"))
  "A directory that contains non public, i.e.  private data."
)

(setq user-full-name    "Your Name"
      user-mail-address "Your Email"
      calendar-latitude  0
      calendar-longitude 0
      calendar-location-name "Your city, country"
)

(when (file-directory-p psimacs/config/private-dir)
  (add-to-list 'load-path psimacs/config/private-dir)

  (when (file-exists-p (concat psimacs/config/private-dir "init-private.el"))
    (require 'init-private)))

(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs configured for user %s %s in %s" user-full-name user-mail-address calendar-location-name)))
#+END_SRC

* Utility Lisp functions

All functions defined in *Psimacs* are prefixed by =psimacs/category=. For example
the /string/ related function /starts-with/ is defined as =psimacs/string/starts-with=.

** String processing

Utiltiy functions that help with handling of strings.

The following simple string functions are part of the configuration for historical reason. Today, the build-in *Emacs*
functions for string processing should be used instead.

References of string functionality:
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Strings-and-Characters.html#Strings-and-Characters][*Emacs* Manual: String and Characters]]
- [[http://ergoemacs.org/emacs/elisp_string_functions.html][Elips: String Functions by Xah Lee]]
- [[http://ergoemacs.org/emacs/elisp_trim_string.html][Elisp: Trim String Functions by Xah Lee]]
- [[https://github.com/magnars/s.el][*s.el*: The long lost Emacs string manipulation library.]]

#+BEGIN_SRC emacs-lisp :tangle config/init-functions.el :var file-description="Useful Elisp functions"
;;
;; Deprecated helper functions for string processing
;;
(defun psimacs/string/starts-with (s begins)
    "Return non-nil if string S starts with BEGINS."
    (cond (
            (>= (length s) (length begins))
            (string-equal (substring s 0 (length begins)) begins)
        )
        (t nil)
    ))

(defun psimacs/string/ends-with (string suffix)
    "Return t if STRING ends with SUFFIX."
    (and (string-match (rx-to-string `(: ,suffix eos) t) string) t))

(defun psimacs/string/reverse (str)
    "Reverse the str where str is a string"
    (apply #'string (reverse  (string-to-list str))))

(defun psimacs/string/chomp-end (str)
    "Chomp tailing whitespace from STR."
    (replace-regexp-in-string (rx (* (any " \t\n")) eos) "" str))

(defun psimacs/string/chomp (str)
    "Chomp leading and tailing whitespace from STR."
    (replace-regexp-in-string (rx (or (: bos (* (any " \t\n")))
                                      (: (* (any " \t\n")) eos)))
                                ""
                                str))
#+END_SRC
