# -*- mode: org; coding: utf-8; -*-
#+title: Psimacs Emacs configuration
#+description: Loading Emacs configuration using org-babel
#+tags: Emacs
#+categories: editing
# #+startup: showeverything
#+options: toc:4 h:4 tags:nil
#+export_exclude_tags: noexport
#+html_head: <style type="text/css">
#+html_head: .styledtable  col:nth-of-type(1) { width: 15% }
#+html_head: .styledtable  col:nth-of-type(2) { width: 30% }
#+html_head: .styledtable  col:nth-of-type(3) { width: 55% }
#+html_head: .styledtable1 col:nth-of-type(1) { width: 20% }
#+html_head: .styledtable1 col:nth-of-type(2) { width: 50% }
#+html_head: .styledtable1 col:nth-of-type(3) { width: 30% }
#+html_head: </style>
#+html_head: <link rel="stylesheet" href="https://hatlafax.github.io/psimacs/css/psimacs.css" type="text/css" />

* Introduction

This is *Psimacs*, an opionated *Emacs* configuration build from the ground up using a [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] style.
The complete configuration [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]] code is embedded in a single [[https://orgmode.org/][org-mode]] file. This is the file that your are
currently reading.

*Psimacs* tries to stick with the default *Emacs* keybindings, i.e. it does not provide a [[https://de.wikipedia.org/wiki/Vim][Vim]] layer.

*Psimacs* allows the synchronization of the user's local *Emacs* configuration with a configuration repository
residing on [[https://www.dropbox.com/][Dropbox]]. This comes quite handy if sharing of one configuration with multiple machines is desired.

This document not only describes the *Psimacs* configuration, but also additional information useful for working
with *Emacs* in general. In this respect it serves as a kind of mindmap for the author.

*Psimacs* uses the [[https://github.com/raxod502/straight.el][Straight]] package manager, it uses the [[https://github.com/abo-abo/swiper][Ivy]] completion stack and provides a good selection
of packages that support coding and writing.

** Motivation

A lot of *Emacs* configurations can be found on the Internet. Many of them are well crafted and could be used out of
the box. Especially, the great *Emacs* frameworks like [[https://www.spacemacs.org/][Spacemacs]], [[https://github.com/hlissner/doom-emacs][Doom-Emacs]] and [[https://github.com/seagle0128/.emacs.d][Centaur-Emacs]], to name just a few,
are worth giving a try. The author wanted to craft his own configuration that is tailored to his personal needs and
that allowed learning more about the vast *Emacs* universe. This configuration it not perfect for everyone and it
will not be able to compete against the big frameworks that are build by a lot of talented people.
So feel free to use it or blame it. I am fine with it.

This configuration is used on the Windows OS on top of [[https://www.msys2.org/][MSYS2]] stack as well as on Ubuntu Linux.

The name *Psimacs* is arbitrarily. The author was in search for a catchy name with just one syllable in front of
the *macs*.

See also:
- [[https://github.com/caisah/emacs.dz][A list of people with nice Emacs config files]]

** Installation

*** Windows
The Powershell script =bootstrap.ps1=, provided in the distribution, is able to bootstrap *Psimacs* and all of its
dependencies into the user's =%HOME%\psimacs= directory. No administrator privileges are required for the installation.
However, considerable disk space is required for the complete installation. *Psimacs* uses the [[https://www.msys2.org/][MSYS2]] *Emacs* program.

Download the raw =booststrap.ps1= file into a temporary directory and run

#+begin_src
.\booststrap.ps1
#+end_src

in a Powershell console.

The *Psimacs* bootstrapping installs the following tools into the =%HOME%\psimacs= directory:

| Tools                 | Remarks                                                                                                  |
|-----------------------+----------------------------------------------------------------------------------------------------------|
| [[https://www.msys2.org/][MSYS2]]                 | *Psimacs* uses the *Emacs* provided by [[https://www.msys2.org/][MSYS2]].                                                                |
| [[https://conemu.github.io/][ConEmu]]                | Optionally, *Psimacs* can install the [[https://conemu.github.io/][ConEmu]] console emulation. Use option =-conemu= to install the console. |
| [[https://openjdk.org/][Java]]                  | *Psimacs* installs the GPL OpenJDK Java distribution provided by Oracle.                                   |
| [[https://languagetool.org][LanguageTool]]          | [[https://languagetool.org][LanguageTool]] is a spell and grammar checker supported by *Psimacs*.                                        |
| [[https://pandoc.org/][pandoc]]                | *Psimacs* uses the universal document converter [[https://pandoc.org/][Pandoc]].                                                    |
| [[https://plantuml.com][plantUML]]              | [[https://plantuml.com][PlantUML]] diagram generation is supported by *Psimacs*.                                                     |
| [[https://www.python.org/][python]]                | *Psimacs* installs [[https://www.python.org/][Python]] and uses a virtual environment created from this installation.                   |
| [[https://www.sumatrapdfreader.org][SumatraPDF]]            | *Psimacs* uses the free SumatraPDF viewer.                                                                 |
| [[https://github.com/hatlafax/ELSE-grammar-compiler][ELSE Grammar Compiler]] | Tool allowing to create ELSE language specification files.                                               |
|-----------------------+----------------------------------------------------------------------------------------------------------|

To get detail help on the options =bootstrap.ps1= provides, do run:

#+begin_src
.\booststrap.ps1 --help
#+end_src

On bootstrapping *Psimacs* installs the most recent versions of the tools that are known to work
properly in the context of *Psimacs*. Any other tools used by *Psimacs* are installed within the
[[https://www.msys2.org/][MSYS2]] environment, e.g. [[https://www.doxygen.nl/][doxygen]], [[https://www.graphviz.org/][graphviz]] or [[https://mermaid.js.org/][mermaid]].

The bootstrapping operation tries hard to not modify the target system outside of =%HOME%\psimacs= directory,
but there are some exceptions:

- In case that no =%HOME%= variable is defined inside of the active environment, a variable =%HOME%= is created
  and set to value =c:\home\%UserName%=. After that, the =%HOME%= directory is created, if it does not already exists.
- Bootstrapping installs a number of font files into the user's font directory.
- A raw python installation is performed into the local =%HOME%\psimacs= directory. The official python installer does
  modify the registry, which cannot be avoided easily.
- A number of desktop shortcuts are created.

After bootstrapping, the [[https://github.com/raxod502/straight.el][Straight]] based *Psimacs* configuration is performed on the very first startup
of *Psimacs*. This process takes a couple of minutes and asks two times for confirmation to allow the download of
1. a suitable [[https://github.com/nnicandro/emacs-zmq][emacs-zmq]] binary, and
2. for the [[https://github.com/iqbalansari/emacs-emojify][emacs-emojify]] icons.

*Attention:*
- At least 22 GByte of free disk space is used by the default *Psimacs* installation!
- Performing a *Psimacs* bootstrapping operation is at one's own risk!

*Remark:* Windows Powershell typically restricts the execution of scripts. You can
take the following measures in order to get the =bootstrap.ps1= script running:
- Set a proper execution policy for powershell scripts with respect to the user profile:

  #+begin_src powershell
Get-ExecutionPolicy -list
Set-ExecutionPolicy -ExecutionPolicy unrestricted -Scope CurrentUser
  #+end_src

- Downloaded powershell scripts are blocked and not allowed to executed. They need to be unlocked:

  #+begin_src powershell
Unblock-File -Path .\bootstrap.ps1
  #+end_src

Maybe, better ways exists for these problems ;-)

Finally, just run *Emacs*.

The only file really needed is the =early-init.el= file. On startup, it reads the file =init.org= and extracts all the
initialization code into the main =init.el= and various additionally =config/init-*.el= files. The created =init.el=
file is then read and evaluated in the further startup procedure. The =init.el= file loads the other =config/init-*.el=
files on evaluation.

Never edit transient file =early-init.el=,  =init.el= or =config/init-*.el= directly. They will be overridden by the next
run of *Psimacs*. Instead modify the =init.org= file in order to change your configuration.

You can create a HTML document =init.html= from the =init.org= file by simply typing =C-c C-e h h= in the *Emacs* buffer for
this file. It is recommended to use this =init.html= for browser reading.

*** Linux

*Psimacs* is able to run on Ubuntu 24.04 LTS. Currently, no automatic installation method for bootstrapping
*Psimacs* exists on this platform.

Install the following parts:

| Part                  | Source                                                   | Installation                                                                            | Destination / Remark                                                       |
|-----------------------+----------------------------------------------------------+-----------------------------------------------------------------------------------------+----------------------------------------------------------------------------|
| *Psimacs*               | =https://github.com/hatlafax/psimacs=                      | =git clone https://github.com/hatlafax/psimacs.git=                                       | =~/psimacs/psimacs=                                                          |
| *LanguageTool*          | =https://languagetool.org/download/=                       | =https://languagetool.org/download/LanguageTool-6.4.zip=                                  | =~/psimacs/LanguageTool=                                                     |
| *Antlr*                 | =https://www.antlr.org/download/antlr-4.13.1-complete.jar= | copy file.                                                                              | =~/psimacs/Antlr=                                                            |
| *ELSE-grammar-compiler* | =https://github.com/hatlafax/ELSE-grammar-compiler=        | =git clone https://github.com/hatlafax/ELSE-grammar-compiler.git=                         | =~/psimacs/ELSE-grammar-compiler=                                            |
| *Sumatra PDF*           | =https://www.sumatrapdfreader.org/free-pdf-reader=         | with /snap/ over the /App Center/ of Ubuntu.                                                |                                                                            |
| Various tools         | ubuntu package manager                                   | see =~/psimacs/psimas/assets/dependencies/ubuntu/linux/requirements_ubuntu_installed.txt= | This file contains all modules that were installed when writing this text. |
| *Python* packages       | pip tool                                                 | see  =~/psimacs/psimas/assets/dependencies/ubuntu/python/requirements_linux_versions.txt= | This file contains all packages installed when writing this text.          |
|-----------------------+----------------------------------------------------------+-----------------------------------------------------------------------------------------+----------------------------------------------------------------------------|

A virtual python environment is used and created by running =python3 -m venv ./python-0/venv/=. This virtual python environment is activated before starting *Psimacs*.
There are better methods, but that worked for me.

** Usage

All functions and variables that are defined by *Psimacs* are prefixed by a path like string =psimacs/category=.
The /category/ is used to structure the functions and variables by topic. As an example, the /string/ related function
=starts-with= is defined as =psimacs/string/starts-with=.

** Dependencies

The configuration does have many dependencies that could be installed separately, Some are mandatory and some are
optional. By default, all non *Emacs* dependencies are expected to be installed into directory =$home/psimacs=.
A global directory constant =psimacs/config/dependencies-dir= is used by the configuration for changing this default
location conveniently.

Install missing dependencies at the time you notice that they are missing. Most of the dependencies only apply to
very narrow use cases.

The two mentioned =requirements.txt= files for [[https://www.python.org/downloads/][Python]] and [[https://www.msys2.org/][MSYS2]] actually cover many of the cases.
The author tries to tackle as many dependencies as possible with the MSYS2 installation.

** Great Emacs resources
- [[https://www.damtp.cam.ac.uk/user/sje30/ess11/resources/emacs-refcard.pdf][Emacs RefCard]]
- [[https://sachachua.com/blog/wp-content/uploads/2013/05/How-to-Learn-Emacs-v2-Large.png][How to Learn Emacs]]
- [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]
- [[https://github.com/caisah/emacs.dz][Emacs Configurations]]
- [[http://xahlee.info/emacs/index.html][Xah Emacs Site]]
- [[https://emacs.zeef.com/ehartc][Emacs by Ernst de Hart]]
- [[https://www.emacswiki.org/][EmacsWiki]]
- [[https://systemcrafters.net/emacs-from-scratch/][System Crafters]]
- [[https://planet.emacslife.com/][Planet Emacslife]]
- [[https://www.gnu.org/software/emacs/manual/][Emacs Manual]]
- [[https://www.gnu.org/software/emacs/manual/elisp.html][Emacs Lisp Manual]]
- [[https://gigamonkeys.com/book/][Practical Common Lisp]]
- [[https://www.masteringemacs.org/][Mastering Emacs]]
- [[https://endlessparentheses.com/][Endless Parentheses]]
- [[https://pragmaticemacs.wordpress.com/][Pragmatic Emacs]]
- [[https://irreal.org/blog/][Irreal]]
- [[https://sachachua.com/blog/][Living an awesome life of Sacha Chua]]
- [[https://emacsthemes.com/themes/planet-theme.html][Emacs Themes]]

** Disclaimer

This is an opionated *Emacs* configuration and the usage is at one's own risk. It is not tested thoroughly. Please
bear in mind.

Many of the configuration settings are borrowed from other similar endeavors out there. Thank you to all of them.

This is work in progress. Sometimes this *Readme* is ahead of times or not yet updated.

** Limitations / Known Issues

- Tested on *Windows* and Ubuntu operating systems only.
- *Linux* support has just started recently on Ubuntu 24.04 LTS.
- *WSL2* support is planned for the future and might work already with the support of the Ubuntu platform.
- This configuration has a very long startup time. *Emacs client* usage is strongly recommended.

** License (GPL v3)

Copyright (C) 2020-2022 Johannes Brunen (hatlafax@gmx.de)

License: GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

* Working with Psimacs

*Emacs* itself provides a great number of predefined key bindings to many useful commands.
In the following sections some of these bindings are introduced.

Beside of the predefined key bindings, however, *Psimacs* also has many of its own key bindings.
The following two pages provides cheat sheets for these bindings:qqqq

- [[https://hatlafax.github.io/psimacs/docs/keybindings.html][List of all Psimacs Key Bindings]].
- [[https://hatlafax.github.io/psimacs/docs/sortedKeyBindings.html][Psimacs Keybindings on Topic.]]

Additionally, *Psimacs* comes with many /hydras/, providing an alternative usage pattern.
A parent /hydra/ for many of these /hydras/ can be activated by pressing =H-SPC H-SPC=, where
=H-= is the =<apps>= leader key, which is the =menu= key on Windows, the key sitting on the right
of the right =<meta>= keyboard key, i.e. the =RAlt= key.

** Get Help

The major help commands and their key bindings.

#+attr_html: :class styledtable
| Key binding    | Command                                                                            | Description                                                                                            |
|----------------+------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| =C-h ?=  =C-h C-h= | =M-x help-for-help=                                                                  | Help command.                                                                                          |
| =C-h t=          | =M-x help-with-tutorial=                                                             | Select the Emacs learn-by-doing tutorial.                                                              |
| =C-h C-s=        | =M-x search-forward-help-for-help=                                                   | Search forward in the help-for-help window.                                                            |
| =C-h C-a=        | =M-x about-emacs=                                                                    | Display the **About GNU Emacs** buffer.                                                                  |
|----------------+------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| =C-h C-q=        | =M-x help-quick-toggle=                                                              | Toggle display of a window showing popular commands and their bindings.                                |
|----------------+------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| =H-h=            |                                                                                    | Help prefix, giving fast access to the help functions.                                                 |
| =H-SPC h=        | =M-x psimacs/hydra/help/body=                                                        | Hydra Help...                                                                                          |
| =H-SPC H=        | =M-x psimacs/hydra/helpful/body=                                                     | Hydra Helpful...                                                                                       |
|----------------+------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| =C-h e=          | =M-x view-echo-area-messages=                                                        | View the log of recent echo-area messages: the **Messages** buffer.                                      |
|----------------+------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| =C-h b=          | =M-x counsel-descbinds=                                                              | Show a list of all defined key bindings and their definitions.                                         |
| =C-h c=          | =M-x describe-key-briefly=                                                           | Print the name of the function called by key binding.                                                  |
| =C-h k=          | =M-x describe-key=                                                                   | Display documentation of the function invoked by key binding.                                          |
| =H-h H-h b=      | =M-x helm-descbinds=                                                                 | Create a listing of all key bindings of current major mode.                                            |
| =C-h w=          | =M-x where-is=                                                                       | Print message listing key sequences that invoke the command DEFINITION.                                |
|----------------+------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| =C-h f=          | =M-x counsel-describe-function=                                                      | Describe a function in detail incl. key binding and source code. Replacement of =M-x describe-function=. |
| =C-h x=          | =M-x describe-command=                                                               | Only describes commands, and not functions like its sibling below.                                     |
| =C-h F=          | =M-x Info-goto-emacs-command-node=                                                   | Go to the Info node in the Emacs manual for a command.                                                 |
| =C-h a=          | =M-x apropos-command=                                                                | List only the commands.                                                                                |
|----------------+------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| =C-h v=          | =M-x counsel-describe-variable=                                                      | Display the full documentation of variable. Replacement of =M-x describe-variable=.                      |
| =C-h j=          | =M-x counsel-set-variable=                                                           | Allows the setting of variable values.                                                                 |
|----------------+------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| =C-h m=          | =M-x describe-mode=                                                                  | Display documentation of current major mode and minor modes.                                           |
| =H-h H-h m=      | =M-x helm-describe-modes=                                                            | Create a listing of all modes of current major mode.                                                   |
| =H-h C-d m=      | =M-x discover-my-major=                                                              | Create a listing of all major-mode keys with their description.                                        |
| =H-h C-d M=      | =M-x discover-my-mode=                                                               | Create a listing of all MODE keys with their description.                                              |
| =C-h l=          | =M-x counsel-find-library=                                                           | Visit a selected library elisp code.                                                                   |
| =C-h s=          | =M-x describe-syntax=                                                                | Describe the syntax specifications in the syntax table of BUFFER.                                      |
|----------------+------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| =C-h P=          | =M-x describe-package=                                                               | Display the full documentation of a package.                                                           |
| =C-h p=          | =M-x finder-by-keyword=                                                              | Find packages matching a given keyworkd.                                                               |
|----------------+------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
|                | =M-x info=                                                                           | Enter Info the documentation browser.                                                                  |
| =C-h r=          | =M-x info-manual=                                                                    | Display a manual in Info mode - by default, the Emacs manual.                                          |
| =C-x R=          | =M-x info-display-manual=                                                            | Display an Info buffer displaying MANUAL.                                                              |
| =C-h i=          | =M-x counsel-info-lookup-symbol=                                                     | Open info reader and lookup a symbol.                                                                  |
| =C-h o=          | =M-x counsel-describe-symbol=                                                        | Display the full documentation of symbol.                                                              |
|----------------+------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
|                | =M-x apropos=                                                                        | This command will display all symbols that match a given pattern.                                      |
| =C-x c a=        | =M-x helm-apropos=                                                                   | Helm to describe commands, function, variables and faces.                                              |
| =C-h d=          | =M-x apropos-documentation=                                                          | Searches just the documentation.                                                                       |
|                | =M-x apropos-library=                                                                | Lists all variables and functions defined in a library.                                                |
|                | =M-x apropos-user-option=                                                            | Shows user options available through the Customize interface.                                          |
|                | =M-x apropos-value=                                                                  | Searches ll symbols with a particular value.                                                           |
|                | =M-x info-apropos=                                                                   | Search indexes of known Info files on your system for apropos PATTERN.                                 |
|----------------+------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
|                | =M-x counsel-describe-face=                                                          | Display the properties of face FACE on FRAME.                                                          |
| =C-h C=          | =M-x describe-coding-system=                                                         | Display information about CODING-SYSTEM.                                                               |
| =C-h I=          | =M-x describe-input-method=                                                          | Describe input method.                                                                                 |
| =C-h L=          | =M-x describe-language-environment=                                                  | Describe how Emacs supports language environment.                                                      |
| =C-h u=          | =M-x counsel-unicode-char=                                                           | Insert COUNT copies of a Unicode character at point.                                                   |
|----------------+------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| =H-<f1>=         | =M-x (lambda() (interactive) (browse-url psimacs/config/keybindings-html-file)))=    | Open *Psimacs* keybindings as Html in default browser.                                                   |
| =H-<f2>=         | =M-x (lambda() (interactive) (browse-url psimacs/config/init-html-file)))=           | Open *Psimacs* configuration as Html in default browser.                                                 |
| =H-S-<f1>=       | =M-x (lambda() (interactive) (eww-open-file psimacs/config/keybindings-html-file)))= | Open *Psimacs* keybindings as Html in =eww=.                                                               |
| =H-S-<f2>=       | =M-x (lambda() (interactive) (eww-open-file psimacs/config/init-html-file)))=        | Open *Psimacs* configuration as Html in =eww=.                                                             |
|----------------+------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|

** Prefixes

| Prefix command | Description               |
|----------------+---------------------------|
| =H-SPC=          | Hydras                    |
| =H-h=            | Help                      |
| =H-c=            | common user commands      |
| =H-x=            | common execution commands |
| =H-m=            | special user commands     |
|----------------+---------------------------|

** Hydras

All the hydras defined by *Psimacs*.

| Key binding | Command                                 | Description               |
|-------------+-----------------------------------------+---------------------------|
| =H-SPC H-SPC= | =M-x psimacs/hydra/hydra/body=            | Hydras...                 |
| =H-SPC SPC=   | =M-x psimacs/hydra/toggle/body=           | Toggles...                |
| =H-SPC a=     | =M-x psimacs/hydra/apropos/body=          | Apropos...                |
| =H-SPC d=     | =M-x dap-hydra=                           | DAP-Mode hydra...         |
| =H-SPC e=     | =M-x psimacs/hydra/else/body=             | ELSE mode hydra...        |
| =H-SPC h=     | =M-x psimacs/hydra/help/body=             | Help...                   |
| =H-SPC H=     | =M-x psimacs/hydra/helpful/body=          | Helpful...                |
| =H-SPC i=     | =M-x hydra-ivy/body=                      | Ivy...                    |
| =H-SPC j=     | =M-x psimacs/hydra/jupyter/open-hydra=    | Jupyter Notebook hydra... |
| =H-SPC l=     | =M-x psimacs/hydra/lsp/body=              | LSP Mode hydra...         |
| =H-SPC m=     | =M-x major-mode-hydra=                    | Major Mode's hydra...     |
| =H-SPC p=     | =M-x psimacs/hydra/projectile/body=       | Projectile...             |
| =H-SPC t=     | =M-x psimacs/hydra/avy/body=              | Fast Jumping in Text...   |
| =H-SPC T=     | =M-x psimacs/hydra/transpose/body=        | Transposing...            |
| =H-SPC w=     | =M-x psimacs/hydra/window/body=           | Window...                 |
| =H-SPC y=     | =M-x psimacs/hydra/yasnippet/body=        | YASnippet...              |
| =H-SPC C-c=   | =M-x psimacs/hydra/multiple-cursors/body= | Multiple Cursors...       |
| =H-SPC C-f=   | =M-x psimacs/hydra/flycheck/body=         | Flycheck...               |
| =H-SPC C-i=   | =M-x psimacs/hydra/image+/body=           | Image...                  |
| =H-SPC C-l=   | =M-x psimacs/hydra/vlf-large-files/body=  | Large Files...            |
| =H-SPC C-m=   | =M-x psimacs/hydra/word-modes/body=       | CamelCase...              |
| =H-SPC C-o=   | =M-x psimacs/hydra/org/body=              | Org-Mode...               |
| =H-SPC C-p=   | =M-x hydra-projectile-cmake/body=         | Projectile CMake...       |
| =H-SPC C-r=   | =M-x psimacs/hydra/rectangle/body=        | Rectangle...              |
| =H-SPC C-s=   | =M-x psimacs/hydra/straight/body=         | Straight...               |
| =H-SPC H-m=   | =M-x psimacs/hydra/navigation/body=       | Navigation...             |
|-------------+-----------------------------------------+---------------------------|

** Universal, Numeric and Negative Argument

=C-u= or =H-u= runs the command =universal-argument=.

It is bound to =C-u= and =H-u= and it begin a numeric argument for the following command.
Digits or minus sign following =C-u= make up the numeric argument.
=C-u= following the digits or minus sign ends the argument.
=C-u= without digits or minus sign provides 4 as argument.
Repeating =C-u= without digits or minus sign multiplies the argument by 4 each time.
For some commands, just =C-u= by itself serves as a flag that is different in effect from
any particular numeric argument.

| Key binding          | Command                | Description                                                                                                          |
|----------------------+------------------------+----------------------------------------------------------------------------------------------------------------------|
| =C-u=  =H-u=             | =M-x universal-argument= | Begin a numeric argument for the following command. Digits or minus sign following =C-u= make up the numeric argument. |
| =C-u=  =H-u=             | =C-u 4=                  |                                                                                                                      |
| =C-u C-u=  =H-u H-u=     | =C-u 16=                 |                                                                                                                      |
|----------------------+------------------------+----------------------------------------------------------------------------------------------------------------------|
| =C-0=  =M-0=  =C-M-0=  =H-0= | =C-u 0=                  | Runs the command =digit-argument=.                                                                                     |
| =C-1=  =M-1=  =C-M-1=  =H-1= | =C-u 1=                  | Runs the command =digit-argument=.                                                                                     |
| =C-2=  =M-2=  =C-M-2=  =H-2= | =C-u 2=                  | Runs the command =digit-argument=.                                                                                     |
| =C-3=  =M-3=  =C-M-3=  =H-3= | =C-u 3=                  | Runs the command =digit-argument=.                                                                                     |
| =C-4=  =M-4=  =C-M-4=  =H-4= | =C-u 4=                  | Runs the command =digit-argument=.                                                                                     |
| =C-5=  =M-5=  =C-M-5=  =H-5= | =C-u 5=                  | Runs the command =digit-argument=.                                                                                     |
| =C-6=  =M-6=  =C-M-6=  =H-6= | =C-u 6=                  | Runs the command =digit-argument=.                                                                                     |
| =C-7=  =M-7=  =C-M-7=  =H-7= | =C-u 7=                  | Runs the command =digit-argument=.                                                                                     |
| =C-8=  =M-8=  =C-M-8=  =H-8= | =C-u 8=                  | Runs the command =digit-argument=.                                                                                     |
| =C-9=  =M-9=  =C-M-9=  =H-9= | =C-u 9=                  | Runs the command =digit-argument=.                                                                                     |
|----------------------+------------------------+----------------------------------------------------------------------------------------------------------------------|
| =C--=  =M--=  =C-M--=  =H--= | =C-u -=                  | Runs the command =negative-argument=.                                                                                  |
|----------------------+------------------------+----------------------------------------------------------------------------------------------------------------------|

** Basic movements

The table that follows contain the basic movement commands with their corresponding
key bindings. In case that *Psimacs* has a differing binding, the *Psimacs* binding is
provided but the standard binding is given in the second column.

References:
- [[https://www.youtube.com/watch?v=wT_jUtEGfeg][Efficient Movement with Emacs Key Bindings - Emacs Essentials #2]]

| Key binding    | Standard                | Command                                                   | Description                                                                                                           |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =C-f=            |                         | =M-x forward-char=                                          | Move point forward by one character.                                                                                  |
| =C-b=            |                         | =M-x backward-char=                                         | Move point backward by one character.                                                                                 |
| =C-n=            |                         | =M-x next-line=                                             | Move point forward by one line, keeping horizontal position.                                                          |
| =C-p=            |                         | =M-x previous-line=                                         | Move point backward by one line, keeping horizontal position.                                                         |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =<Left>=         |                         | =M-x left-char=                                             | Properly respect the /right-to-left/ text.                                                                              |
| =<Rigth>=        |                         | =M-x right-char=                                            | Dito.                                                                                                                 |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =C-a=            |                         | =M-x move-beginning-of-line=                                | Goto the beginning of the line.                                                                                       |
| =C-e=            |                         | =M-x move-end-of-line=                                      | Goto the end of the line.                                                                                             |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =M-<=            |                         | =M-x beginning-of-buffer=                                   | Goto the beginning of the buffer.                                                                                     |
| =M->=            |                         | =M-x end-of-buffer=                                         | Goto the end of the buffer.                                                                                           |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =C-<Home>=       |                         | =M-x beginning-of-buffer=                                   | Goto the beginning of the buffer.                                                                                     |
| =C-<End>=        |                         | =M-x end-of-buffer=                                         | Goto the end of the buffer.                                                                                           |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =M-g M-g=  =M-g g= |                         | =M-x goto-line=                                             | Goto line number N                                                                                                    |
| =M-g <Tab>=      |                         | =M-x move-to-column=                                        | Move point to column number N                                                                                         |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =M-f=            |                         | =M-x forward-word=                                          | Move point forward by one word.                                                                                       |
| =M-b=            |                         | =M-x backward-word=                                         | Move point backward by one word.                                                                                      |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =M-{=            |                         | =M-x forward-paragraph=                                     | Move point forward by one paragraph.                                                                                  |
| =M-}=            |                         | =M-x backward-paragraph=                                    | Move point backward by one paragrah.                                                                                  |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =C-<Down>=       |                         | =M-x forward-paragraph=                                     | Move point forward by one paragraph.                                                                                  |
| =C-<Up>=         |                         | =M-x backward-paragraph=                                    | Move point backward by one paragrah.                                                                                  |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =C-M-f=          |                         | =M-x forward-sexp=                                          | Move point forward across one balanced expression.                                                                    |
| =C-M-b=          |                         | =M-x backward-sexp=                                         | Move point backward across one balanced expression.                                                                   |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =M-e=            |                         | =M-x forward-sentence=                                      | Move point forward by one sentence.                                                                                   |
| =M-a=            |                         | =M-x backward-sentence=                                     | Move point backward by one sentence.                                                                                  |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =C-v=            |                         | =M-x scroll-up-command=                                     | Move the window to the next page. Disable =cua-mode= for that by pressing =<f12>= in *Psimacs*.                             |
| =M-v=            |                         | =M-x scroll-down-command=                                   | Move the window to the previous page.                                                                                 |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =<PageDown>=     |                         | =M-x scroll-up-command=                                     | Move the window to the next page. Disable =cua-mode= for that by pressing =<f12>= in *Psimacs*.                             |
| =<PageUp>=       |                         | =M-x scroll-down-command=                                   | Move the window to the previous page.                                                                                 |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =C-l=            |                         | =M-x recenter-top-bottom=                                   | Center line of point to the middle of the buffer window. Pressing it repeatedly cycles throug /top/, /bottom/ and /center/. |
| =C-M-l=          |                         | =M-x reposition-window=                                     | Attempt to scroll the screen to fit as much as possible in the window.                                                |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =H-m C-s s=      | =C-s=                     | =M-x isearch-forward=                                       | Search term forward and places point after the occurence.                                                             |
| =H-m C-s r=      | =C-r=                     | =M-x isearch-backward=                                      | Search term backward and places point before the occurence.                                                           |
| =H-s=            |                         | =M-x psimacs/config/isearch-menu=                           | In isearch mode, opens an isearch menu, allowing to easily utilize the functionality.                                 |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =C-s=            |                         | =M-x swiper-isearch=                                        | Isearch enhanced by /Ivy Swiper/.                                                                                       |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =M-m=            |                         | =M-x back-to-indentation=                                   | Move point to the first non-whitespace character in the current line.                                                 |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|
| =C-x C-n=        | =M-x set-goal-=column=     | Set the current horizontal position as a goal column.     |                                                                                                                       |
| =C-u C-x C-n=    | =C-u M-x set-goal-=column= | Cleas out the goal column and resume to normal operation. |                                                                                                                       |
|----------------+-------------------------+-----------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------|

** Basic selection

The fundamental selection commands with their corresponding key bindings are listed in the next table.

References:
- [[https://www.youtube.com/watch?v=Dq5UOt63Mms][Efficient Text Selection with Emacs Key Bindings - Emacs Essentials #3]]
- Read also [[https://spwhitton.name/blog/entry/transient-mark-mode/][GNU Emacs' Transient Mark mode]]

#+attr_html: :class styledtable
| Key binding     | Command                               | Description                                                                                                                                                                                                                                          |
|-----------------+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-SPC=           | =M-x cua-set-mark= =M-x set-mark-command= | Set mark where point is, clear mark, or jump to mark. With no prefix argument, clear mark if already set. Otherwise, mark, and push old mark position on local mark ring; also push mark on global mark ring if last mark was set in another buffer. |
| =C-@=             |                                       |                                                                                                                                                                                                                                                      |
|-----------------+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-u C-SPC=       | =M-x pop-to-mark-command=               | Jump to mark, and pop a new position for mark off the local mark ring (this does not affect the global mark ring).                                                                                                                                   |
| =C-u C-@=         |                                       |                                                                                                                                                                                                                                                      |
| =H-x p=           |                                       |                                                                                                                                                                                                                                                      |
|-----------------+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-x C-SPC=       | =M-x pop-global-mark=                   | Jump to a mark off the global mark ring.                                                                                                                                                                                                             |
| =C-x C-@=         |                                       |                                                                                                                                                                                                                                                      |
| =H-x q=           |                                       |                                                                                                                                                                                                                                                      |
|-----------------+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-SPC C-SPC=     |                                       | Jumps to the next position off the local (or global) mark ring. Set the mark, pushing it onto the mark ring, without activating it.                                                                                                                  |
| =C-u C-u C-SPC=   |                                       | Unconditionally set mark.                                                                                                                                                                                                                            |
| =C-x C-x=         | =M-x exchange-point-and-mark=           | Set mark where point is, and move point to last deactivated mark if any. Transient mark mode modifies the behaviour.                                                                                                                                 |
|-----------------+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =S-C-f=           | =M-x forward-char S-<Ret>=              | Set mark where point is, and move point forward by one character, thereby creating a selection.                                                                                                                                                      |
| =S-...=           | =M-x ... S-<Ret>=                       | Set mark where point is, and move point ..., thereby creating a selection. Attention, this does not work for all movement command.                                                                                                                   |
|-----------------+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-w=             | =M-x kill-region=                       | Deletes text in region and copies it to kill ring.                                                                                                                                                                                                   |
| =M-w=             | =M-x kill-ring-save=                    | Copies text in region to the kill ring.                                                                                                                                                                                                              |
| =C-y=             | =M-x yank=                              | Paste the most recently added text to the kill-ring at point.                                                                                                                                                                                        |
| =M-y=             | =M-x counsel-yank-pop=                  | Replace just-yanked text with former copied or killed text.                                                                                                                                                                                          |
|-----------------+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-x C-u=         | =M-x upcase-region=                     | Convert all charcters in region to upper case. Disable =cua-mode= for that by pressing =<f12>= in *Psimacs*.                                                                                                                                               |
| =C-x C-l=         | =M-x downcase-region=                   | Convert all charcters in region to lower case. Disable =cua-mode= for that by pressing =<f12>= in *Psimacs*.                                                                                                                                               |
| =H-x H-x C-x C-u= | =M-x crux-upcase-region=                | Convert all charcters in region to upper case when =transient-mark-mode= is on and region is active.                                                                                                                                                   |
| =H-x H-x C-x C-l= | =M-x crux-downcase-region=              | Convert all charcters in region to lower case when =transient-mark-mode= is on and region is active.                                                                                                                                                   |
|-----------------+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-g=             | =M-x psimacs/config/keyboard-quit-dwim= | When the region is active, disable it. When a minibuffer is open, but not focused, close the minibuffer. When the Completions buffer is selected, close it.                                                                                          |
|-----------------+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =M-@=             | =M-x mark-word=                         | Sets mark at end of next word without moving point.                                                                                                                                                                                                  |
| =C-M-@=           | =M-x mark-sexp=                         | Sets mark at end of next s-expression without moving point.                                                                                                                                                                                          |
| =M-h=             | =M-x mark-paragraph=                    | Sets mark at end of next paragraph without moving point.                                                                                                                                                                                             |
| =C-M-h=           | =M-x mark-defun=                        | Marks the whole /defun/ under point.                                                                                                                                                                                                                   |
| =C-x C-p=         | =M-x mark-page=                         | Sets mark at end of page/buffer without moving point, i.e. selecting from point to the end of the page/buffer.                                                                                                                                       |
| =C-x h=           | =M-x mark-whole-buffer=                 | Move point at the beginning of buffer, sets mark at end of buffer, i.e. selecting the whole buffer. In every other case use the regular `keyboard-quit'."                                                                                            |
|-----------------+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-x e=           | =M-x er/expand-region=                  | Expand region intelligently.                                                                                                                                                                                                                         |
|-----------------+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

** Registers and Bookmarks

*** Registers

Emacs registers are compartments where you can save text, rectangles, positions, and other things for later use.

In the following table =Chr= is any single key character.

Reference: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html][Registers]]

#+attr_html: :class styledtable
| Key binding     | Command                                      | Description                                                                                                                                                                         |
|-----------------+----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|                 | =M-x view-register RET Chr=                    | Display a description of what register Chr contains.                                                                                                                                |
|-----------------+----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-x r SPC Chr=   | =M-x point-to-register RET Chr=                | Record the position of point and the current buffer in register Chr.                                                                                                                |
| =C-x r SPC r Chr= | =M-x point-to-register RET Chr=                | Saves both the position of point and the current buffer in register Chr.                                                                                                            |
| =C-x r j Chr=     | =M-x jump-to-register RET Chr=                 | Jump to the position and buffer saved in register Chr.                                                                                                                              |
|-----------------+----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-x r s Chr=     | =M-x copy-to-register RET Chr=                 | Copy region into register Chr.                                                                                                                                                      |
| =C-u C-x r s Chr= | =C-u M-x copy-to-register RET Chr=             | Copies the text into register Chr and deletes the text from the buffer as well.                                                                                                     |
| =C-x r i Chr=     | =M-x insert-register RET Chr=                  | Insert text from register Chr.                                                                                                                                                      |
|-----------------+----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|                 | =M-x append-to-register RET Chr=               | Append region to text in register Chr.                                                                                                                                              |
|                 | =C-u M-x append-to-register RET Chr=           | Append region to text in register Chr and deletes the text from the buffer as well.                                                                                                 |
| =C-x r + Chr=     | =M-x increment-register RET Chr=               | When register Chr contains text, use this command to append to that register.                                                                                                       |
|                 | =M-x prepend-to-register RET Chr=              | Prepend region to text in register Chr.                                                                                                                                             |
|-----------------+----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-x r r Chr=     | =M-x copy-rectangle-to-register RET Chr=       | Copy the region-rectangle into register Chr. With prefix argument, delete it as well.                                                                                               |
| =C-x r i Chr=     | =M-x insert-register RET Chr=                  | Insert the rectangle stored in register Chr (if it contains a rectangle).                                                                                                           |
|-----------------+----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-x r w Chr=     | =M-x window-configuration-to-register RET Chr= | Save the state of the selected frame’s windows in register Chr.                                                                                                                     |
| =C-x r f Chr=     | =M-x frameset-to-register RET Chr=             | Save the state of all frames, including all their windows, in register Chr.                                                                                                         |
| =C-x r j Chr=     | =M-x jump-to-register RET Chr=                 | To restore a window or frame configuration stored in register Chr. When you restore a frame configuration, any existing frames not included in the  configuration become invisible. |
| =C-u C-x r j Chr= | =C-u M-x jump-to-register RET Chr=             | Use Prefix to also delete pre-existing frames.                                                                                                                                      |
|-----------------+----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-x C-k x Chr=   | =M-x kmacro-to-register RET Chr=               | Stores the last keyboard macro in register Chr.                                                                                                                                     |
| =C-x r j Chr=     | =M-x jump-to-register RET Chr=                 | To execute the keyboard macro in register Chr.                                                                                                                                      |
|-----------------+----------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

*** Bookmarks

Bookmarks are somewhat like registers in that they record positions you can jump to. Unlike registers,
they have long names, and they persist automatically.

Reference: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html][Bookmarks]]

#+attr_html: :class styledtable
| Key binding      | Command                                       | Description                                                                                                                                                                                                     |
|------------------+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-x r m=          | =M-x bookmark-set RET=                          | Set the bookmark for the visited file, at point.                                                                                                                                                                |
| =C-x r m Bookmark= | =M-x bookmark-set Bookmark RET=                 | Set the bookmark named Bookmark at point.                                                                                                                                                                       |
| =C-x r M Bookmark= | =M-x bookmark-set-no-overwrite Bookmark RET=    | Like =C-x r m=, but don’t overwrite an existing bookmark.                                                                                                                                                         |
| =C-x r b Bookmark= | =M-x bookmark-jump Bookmark RET=                | Jump to the bookmark named Bookmark.                                                                                                                                                                            |
| =C-x r l=          | =M-x list-bookmarks=                            | List all bookmarks.                                                                                                                                                                                             |
|                  | =M-x bookmark-save=                             | Save all the current bookmark values in the default bookmark file.                                                                                                                                              |
|                  | =M-x bookmark-write RET Filename RET=           | Save all the current bookmark values in the file Filename.                                                                                                                                                      |
|                  | =M-x bookmark-load RET Filename RET=            | Load a file named Filename that contains a list of bookmark values. You can use this command, as well as bookmark-write, to work with other files of bookmark values in addition to your default bookmark file. |
|                  | =M-x bookmark-delete RET Bookmark RET=          | Delete the bookmark named Bookmark.                                                                                                                                                                             |
|                  | =M-x bookmark-insert-location RET Bookmark RET= | Insert in the buffer the name of the file that bookmark Bookmark points to.                                                                                                                                     |
|                  | =M-x bookmark-insert RET Bookmark RET=          | Insert in the buffer the contents of the file that bookmark Bookmark points to.                                                                                                                                 |
|------------------+-----------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

** Useful commands

In the following, a table is provided that contains useful commands and their key bindings.
The list is not exhaustive, but contains just bindings and commands that I did not know
about beforhand or that I might forget about in the future.

#+attr_html: :class styledtable
| Key binding | Command                    | Description                                                                                                       |
|-------------+----------------------------+-------------------------------------------------------------------------------------------------------------------|
| =C-x z=       | =M-x repeat=                 | Repeat the most recently executed command. After first execution pressing key =z= repeats the command further.      |
| =C-x M-:=     | =M-x repeat-complex-command= | Edit and re-evaluate last complex command, or ARGth from last. A complex command is one that used the minibuffer. |
|             | =M-x view-lossage=           | Display last few input keystrokes and the commands run.                                                           |
|-------------+----------------------------+-------------------------------------------------------------------------------------------------------------------|
| =C-x C--=     | =C-u -1 M-x zoom-out=        | Decrease the default face height by one step.                                                                     |
| =C-x C-+=     | =C-u +1 M-x zoom-in=         | Increase the default face height by one step.                                                                     |
| =C-x C-0=     | =C-u  0 M-x zoom-frm-unzoom= | Reset the default face height to the global default.                                                              |
|-------------+----------------------------+-------------------------------------------------------------------------------------------------------------------|

* Working with Info

This is just a brief overview over the most important *Info* commands:

| Key binding | Command  | Description                           |
|-------------+----------+---------------------------------------|
| =H-SPC h i=   | =M-x info= | Enter *Info* the documentation browser. |
|-------------+----------+---------------------------------------|

Inside *Info* the following commands are useful:

#+attr_html: :class styledtable
| Key binding    | Command                     | Description                                                                                                              |
|----------------+-----------------------------+--------------------------------------------------------------------------------------------------------------------------|
| =?=              |                             | Provide brief list of commands in *Info*.                                                                                  |
| =q=              |                             | Quit info.                                                                                                               |
| =C-l=            |                             | Redisplay                                                                                                                |
|                | =M-x visible-mode=            | Show or hide invisible text.                                                                                             |
|----------------+-----------------------------+--------------------------------------------------------------------------------------------------------------------------|
| =b=  =e=           |                             | Jump to /beginning/ or /end/ of node text                                                                                    |
|----------------+-----------------------------+--------------------------------------------------------------------------------------------------------------------------|
| =g=              |                             | Go to node if /node's name/ is given, e.g. =gGo to Node<ret>=, =g(dir)Top<ret>=, =g(emacs)Top<ret>=, =g*<ret>=, =g(FILENAME)*<ret>=. |
| =n=  =p=           |                             | Go to /next/ or /previous/ node at same level.                                                                               |
| =SPC=  =BACKSPC=   |                             | Move /forward/ or /backward/ in node and might move to /next/ or /previous/ logical node.                                        |
| =]=  =[=           |                             | Move to /next/ or /previous/ logical node.                                                                                   |
|----------------+-----------------------------+--------------------------------------------------------------------------------------------------------------------------|
| =d=              | =M-x Info-directory=          | Go to /directory/ node.                                                                                                    |
| =t=              | =M-x Info-top-node=           | Go to current manual /top/ node, i.e. =gTop<ret>=                                                                            |
|----------------+-----------------------------+--------------------------------------------------------------------------------------------------------------------------|
| =m=              |                             | Go to /subnode/ found in node's menu.                                                                                      |
| =1= ... =9=        |                             | Go to /N-th subnode/ found in node's menu.                                                                                 |
| =0=              |                             | Go to /last subnode/ found in node's menu.                                                                                 |
| =u=              |                             | Go to /parent node/.                                                                                                       |
| =<tab>=  =S-<tab>= |                             | Go to /next/ or /previous/ node menu entry or cross reference.                                                               |
|----------------+-----------------------------+--------------------------------------------------------------------------------------------------------------------------|
| =f=              |                             | /Follow/ cross reference.                                                                                                  |
|----------------+-----------------------------+--------------------------------------------------------------------------------------------------------------------------|
| =l=  =r=           |                             | Move /backward/ or /forward/ in the node and cross reference history list.                                                   |
| =L=              |                             | Create a virtual node with menu of /all nodes visited/.                                                                    |
|----------------+-----------------------------+--------------------------------------------------------------------------------------------------------------------------|
| =s=              |                             | /Search/ info file text for string.                                                                                        |
| =C-s=  =C-r=       |                             | /Incremental search forward/ or /backward/ info file text.                                                                   |
| =i=              |                             | /Searches the index/ for string.                                                                                           |
| =,=              |                             | After =i=, visit additional index entries which match.                                                                     |
| =I=              | =M-x Info-virtual-index=      | Construct a virtual info node displaying results of an index search.                                                     |
|                | =M-x index-apropos=           | Search in all the indices of all the *Info* documents known by the system.                                                 |
|----------------+-----------------------------+--------------------------------------------------------------------------------------------------------------------------|
| =M-n=            | =M-x clone-buffer=            | Create and return a twin copy of the current buffer, i.e. a new Info-buffer from the current node.                       |
| =C-u m=  =C-u g=   |                             | Go to new Info-buffer in another window.                                                                                 |
|----------------+-----------------------------+--------------------------------------------------------------------------------------------------------------------------|
|                | =M-x info-display-manual=     | Show the *Info* manual by name.                                                                                            |
|                | =C-u M-x info-display-manual= | Show the *Info* manual by name, but limits the completion alternatives to currently visited info files.                    |
|----------------+-----------------------------+--------------------------------------------------------------------------------------------------------------------------|

* Working with Org-Mode

** Embedding code

[[https://orgmode.org/][Org-mode]] allows embedding of source code blocks into =.org=-files and evaluating them by [[https://orgmode.org/worg/org-contrib/babel/][babel]] a core feature build
into [[https://orgmode.org/manual/Working-with-Source-Code.html][org]]. The [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]] code is embedded into special code blocks:

#+begin_example
#+begin_src emacs-lisp :tangle no
<BODY>
#+end_src
#+end_example

Code block with =:tangle yes= or with =:tangle filename= are part of the configuration. However, any code block
can be deactivated, i.e. omitted from the configuration, by using =:tangle no= in the
block declaration:

#+begin_example
#+begin_src emacs-lisp :tangle no
(message "this should never be seen in the Message buffer!")
#+end_src
#+end_example

#+begin_example
#+begin_src emacs-lisp :tangle no early-init.el :var file-description="Early initialization"
(message "this should never be seen in the Message buffer!")
#+end_src
#+end_example

Additionally, a whole section can also be deactivated by a /CANCELED/ or a /DISABLED/ item, e.g.:

*** CANCELED Avoid generating /Emacs Lisp/ code per section

The following [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]] block should therefore also not be part of the generated =.el= file although the =:tangle yes=
attribute was used. Same is true for /Disabled/ as well as tag /:noexport:/

#+begin_example
#+begin_src emacs-lisp :tangle yes
(message "this should not be seen in the Message buffer!")
#+end_src
#+end_example

** Debugging the configuration

Loading of the configuration can always be halted on spot by entering and activating the following source code block
which will enter enter the debugger on execution.

#+begin_example
#+begin_src emacs-lisp :tangle no
(debug)
#+end_src
#+end_example

** References to Org-Mode markup

An [[https://writequit.org/denver-emacs/presentations/files/example.org.html][example org-mode file]] used to show basic
[[https://orgmode.org][org-mode]] usage. [[https://orgmode.org/manual/Markup-for-Rich-Contents.html][Markup for Rich Contents]] gives detail
explanation about the markup rules used in [[https://orgmode.org][org-mode]] files.

** References to Org-Mode

The following links might be useful for diving deeper into [[http://orgmode.org/][Org-Mode]]:
- [[http://orgmode.org/manual/index.html][Org Mode Manual]]
- [[http://orgmode.org/worg/][Worg, the Org Mode Community]]
- [[https://www.emacswiki.org/emacs/OrgMode][EmacsWiki: Org Mode]]
- [[https://www.suenkler.info/notes/emacs-orgmode/][Aufgabenverwaltung im Emacs Org mode]]
- [[https://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][Dig Into Org Mode]]
- [[http://orgmode.org/worg/org-contrib/babel/][Org Mode Babel]]
- [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][Introduction to Literate Programming]]
- [[https://org-babel.readthedocs.io/en/latest/][Readthedocs about Org Babel]]
- [[http://orgmode.org/worg/orgcard.html][Org Mode reference card]]
- [[http://orgmode.org/orgcard.pdf][Org Mode Ref Card]]
- [[http://ergoemacs.org/emacs/emacs_org_markup.html][Org Mode Markup Cheatsheet]]
- [[http://pragmaticemacs.com/][Pragmatic Emacs]]
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]

* Working with ELisp

This section gives some basic help with [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]] and debugging of [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]] code.

** Debugging ELisp with Debug and EDebug

*Emacs* has two [[https://www.gnu.org/software/emacs/manual/html_node/eintr/debug.html][debuggers]],
[[https://www.gnu.org/software/emacs/manual/html_node/eintr/debug.html][Debug]] and
[[https://www.gnu.org/software/emacs/manual/html_node/eintr/edebug.html][Edebug]].
The first is built into the internals of Emacs and is always with you; the second requires that you instrument a function before you can use it.

*** Debug

You can enter the debugger when you call the function by calling =debug-on-entry=, e.g. =M-x debug-on-entry RET my-function RET=.
To cancel the effect of =debug-on-entry=, call =cancel-debug-on-entry= with the same function name.

Since a break is a /recursive edit/, all the usual editing facilities of Emacs are available;
you can even run programs that will enter the debugger recursively.

If you want errors to enter the debugger, set the variable =debug-on-error= to =non-nil=. However, if variable
=eval-expression-debug-on-error= is =non-nil=, then =debug-on-error= is set to =t= in case of running command =eval-expression=.

The most used commads are the following. For more detail see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Debugger-Commands.html][Debugger Commands]].

| Key binding | Description                                                                                                                                                   |
|-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =c=           | Exit the debugger and continue execution.                                                                                                                     |
| =q=           | Terminate the program being debugged; return to top-level Emacs command execution.                                                                            |
| =d=           | Continue execution, but enter the debugger the next time any Lisp function is called.                                                                         |
| =l=           | Display a list of functions that will invoke the debugger when called. This is a list of functions that are set to break on entry by means of debug-on-entry. |
| =e=           | Read a Lisp expression in the minibuffer, evaluate it.                                                                                                        |
|-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------|

*** Edebug

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html#Edebug][Edebug]] is a source-level debugger for Emacs Lisp programs that is very useful developing /Lisp/ code. In the following
you can find some useful commands and settings for debugging with [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html#Edebug][Edebug]]:

- Using  [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html#Edebug][Edebug]]:
  To debug a Lisp program with [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html#Edebug][Edebug]], you must first instrument the Lisp code that you want to debug.
  A simple way to do this is to first move point into the definition of a function or macro and then do
  =C-u C-M-x=.

- Embedding a breakpoint into source code: =(edebug)=

References:
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Debugging.html][Debugging]]
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html][Edebug]]
- [[https://endlessparentheses.com/debugging-emacs-lisp-part-1-earn-your-independence.html][Debugging Elisp Part 1: Earn your independence]]
- [[https://endlessparentheses.com/debugging-elisp-part-2-advanced-topics.html][Debugging Elisp Part 2: Advanced topics]]
- [[http://blog.binchen.org/posts/my-work-flow-to-debug-emacs-plugin.html][My work flow to debug emacs plugin from Chen Bin]]
- [[https://www.youtube.com/watch?v=odkYXXYOxpo][Debugging basics]]

#+attr_html: :class styledtable1
| Key binding     | Command                               | Description                                                                                                                                                                                  |
|-----------------+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-f C-f=     | =M-x find-function=                     | Find the definition of function near point                                                                                                                                                   |
|-----------------+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-u C-M-x=       | =M-x edebug-defun=                      | Instrument the Lisp code at point. Any call to the function activates Edebug.                                                                                                                |
| =C-M-x=           | =M-x eval-defun=                        | Undo instrumentation.                                                                                                                                                                        |
|-----------------+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =h=               | =M-x edebug-goto-here=                  | Proceed to the stop point near where point is.                                                                                                                                               |
| =f=               | =M-x edebug-forward-sexp=               | Run the program for one expression.                                                                                                                                                          |
| =o=               | =M-x edebug-step-out=                   | Run the program until the end of the containing sexp.                                                                                                                                        |
| =i=               | =M-x edebug-step-in=                    | Step into the function or macro called by the form after point.                                                                                                                              |
|-----------------+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =b=               | =M-x edebug-set-breakpoint=             | Set a breakpoint at the stop point at or after point. If you use a prefix argument, the breakpoint is temporary -- it turns off the first time it stops the program.                         |
| =u=               | =M-x edebug-unset-breakpoint=           | Unset the breakpoint (if any) at the stop point at or after point.                                                                                                                           |
| =U=               | =M-x edebug-unset-breakpoints=          | Unset any breakpoints in the current form.                                                                                                                                                   |
| =D=               | =M-x edebug-toggle-disable-breakpoint=  | Toggle whether to disable the breakpoint near point.                                                                                                                                         |
| =x= /condition/ =RET= | =M-x edebug-set-conditional-breakpoint= | Set a conditional breakpoint which stops the program only if evaluating condition produces a non-nil value.                                                                                  |
| =B=               | =M-x edebug-next-breakpoint=            | Move point to the next breakpoint in the current definition.                                                                                                                                 |
|-----------------+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =S=               | =M-x edebug-stop=                       | Stop: don't execute any more of the program, but wait for more Edebug commands                                                                                                               |
| =SPC=             | =M-x edebug-step-mode=                  | Step: stop at the next stop point encountered.                                                                                                                                               |
| =n=               | =M-x edebug-next-mode=                  | Next: stop at the next stop point encountered after an expression.                                                                                                                           |
| =t=               | =M-x edebug-trace-mode=                 | Trace: pause (normally one second) at each Edebug stop point.                                                                                                                                |
| =T=               | =M-x edebug-Trace-fast-mode=            | Rapid trace: update the display at each stop point, but don't actually pause.                                                                                                                |
| =g=               | =M-x edebug-go-mode=                    | Go: run until the next breakpoint.                                                                                                                                                           |
| =c=               | =M-x edebug-continue-mode=              | Continue: pause one second at each breakpoint, and then continue.                                                                                                                            |
| =C=               | =M-x edebug-Continue-fast-mode=         | Rapid continue: move point to each breakpoint, but don't pause.                                                                                                                              |
| =G=               | =M-x edebug-Go-nonstop-mode=            | Go non-stop: ignore breakpoints. You can still stop the program by typing S, or any editing command.                                                                                         |
|-----------------+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =?=               | =M-x edebug-help=                       | Display the help message for Edebug.                                                                                                                                                         |
| =C-]=             | =M-x abort-recursive-edit=              | Abort one level back to the previous command level                                                                                                                                           |
| =q=               | =M-x top-level=                         | Return to the top level editor command loop. This exits all recursive editing levels, including all levels of Edebug activity.                                                               |
| =Q=               | =M-x edebug-top-level-nonstop=          | Like q, but don't stop even for protected code. Like q, but don't stop even for protected code.                                                                                              |
| =r=               | =M-x edebug-previous-result=            | Redisplay the most recently known expression result in the echo area.                                                                                                                        |
| =d=               | =M-x edebug-pop-to-backtrace=           | Display the current backtrace in a backtrace-mode window                                                                                                                                     |
|-----------------+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =v=               | =M-x edebug-view-outside=               | Switch to viewing the outside window configuration.  Type =C-x X w= to return to Edebug.                                                                                                       |
| =p=               | =M-x edebug-bounce-point=               | Temporarily display the outside current buffer with point at its outside position, pausing for one second before returning to Edebug. With a prefix argument n, pause for n seconds instead. |
| =w=               | =M-x edebug-where=                      | Move point back to the current stop point in the source code buffer.                                                                                                                         |
| =W=               | =M-x edebug-toggle-save-windows=        | Toggle whether Edebug saves and restores the outside window configuration.                                                                                                                   |
|-----------------+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =e exp RET=       | =M-x edebug-eval-expression=            | Evaluate expression exp in the context outside of Edebug. That is, Edebug tries to minimize its interference with the evaluation.                                                            |
| =M-: exp RET=     | =M-x eval-expression=                   | Evaluate expression exp in the context of Edebug itself.                                                                                                                                     |
| =C-x C-e=         | =M-x edebug-eval-last-sexp=             | Evaluate the expression before point, in the context outside of Edebug.                                                                                                                      |
| =C-u 0 C-x C-e=   | =C-u 0 M-x edebug-eval-last-sexp=       | Dito, but don't shorten long items (like strings and lists).                                                                                                                                 |
| =E=               | =M-x edebug-visit-eval-list=            | Switch to the evaluation list buffer *edebug*                                                                                                                                                  |
| =C-j=             | =M-x edebug-eval-print-last-sexp=       | Evaluate the expression before point, in the outside context, and insert the value in the buffer.                                                                                            |
| =C-u 0 C-j=       | =C-u 0 M-x edebug-eval-print-last-sexp= | Dito, but don't shorten long items (like strings and lists).                                                                                                                                 |
| =C-c C-u=         | =M-x edebug-update-eval-list=           | Build a new evaluation list from the contents of the buffer.                                                                                                                                 |
| =C-c C-d=         | =M-x edebug-delete-eval-item=           | Delete the evaluation list group that point is in.                                                                                                                                           |
| =C-c C-w=         | =M-x edebug-where=                      | Switch back to the source code buffer at the current stop point.                                                                                                                             |
|-----------------+---------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

** References to Emacs Lisp

The following links might be useful for diving deeper into [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]]:
- [[https://www.gnu.org/software/emacs/manual/eintr.html][Introduction to Programming in Emacs Lisp]]
- [[https://www.emacswiki.org/emacs/ElispCookbook][EmacsWiki: Lisp Cookbook]]
- [[http://wikemacs.org/wiki/Emacs_Lisp_Cookbook][WikEmacs: Emacs Lisp Cookbook]]
- [[https://github.com/chrisdone/elisp-guide][Emacs Lisp Guide]]
- [[https://www.masteringemacs.org/article/evaluating-elisp-emacs][Evaluating Elisp in Emacs]]
- [[http://ergoemacs.org/emacs/elisp.html][Practical Emacs Lisp]]

* Key binding

I am trying to setup keybinding in a /mnemonics/ way so it's easy to remember (and use).
I am staying with the /standard/ emacs keybinding as much as possible.

*Emacs*'s keybindings has well-defined conventions listed at [[https://www.gnu.org/software/emacs/manual/html%5Fnode/elisp/Key-Binding-Conventions.html][Emacs Key Bindings Convention]].
In summary, the general rules are:
- =C-x= reserved for Emacs native essential keybindings: buffer, window, frame, file, directory, etc.
- =F5= ... =F9= without modifier keys are reserved for users to define.
- =C-c=
    - =C-c C-letter=, =C-c digit= are reserved for major modes.
    - =C-c punctuation= with punctuation in { } < > : ; are also reserved for major modes.
    - =C-c punctuation= with any other punctuation are allocated for minor modes.
    - =C-c letter= are reserved for users. In practice most third-party packages don't give a hoot
      and will gladly stuff their own key binds in there.
- Don't rebind =C-g=, =C-h= and =ESC=.
- =<hyper>= and =<super>= are two prefix keys reserved to you. They are remnants from ancient keyboards used in the 80s,
  but live on today in Emacs. Most PC-compatible  keyboards won't have a =<super>= or =<hyper>= key so we rebind
  the =<lwindow>= and =<rwindow>= /Windows/ keys and the =<apps>= /Application Context/ key to be the =<super>=
  and =<hyper>= prefix keys instead.

*Psimacs* uses the ~<super>~ and ~<hyper>~ key prefixes for most of its own key bindings.

| Key     | Mnemonic | Keyboard                                          |
|---------+----------+---------------------------------------------------|
| =<hyper>= | =H-=       | =<Menu>= or =<Prnt-Scrn>= in case of Lenovo notebook. |
| =<super>= | =s-=       | =<Left-Window>= and =<Right-Window>=                  |
| =<meta>=  | =M-=       | =<Alt>=                                             |
| =<ctrl>=  | =C-=       | =<Strg>=                                            |
|---------+----------+---------------------------------------------------|

Worth readings about *Emacs* keybindings:
- [[https://karl-voit.at/2018/07/08/emacs-key-bindings/][UOMF: My Emacs Key Binding Strategy]]
- [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][Mastering Key Bindings in Emacs]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Windows-Keyboard.html][Keyboard Usage on MS-Windows]]
- [[http://www.wilfred.me.uk/blog/2018/01/06/the-emacs-guru-guide-to-key-bindings/][The Emacs Guru Guide to Key Bindings]]
- [[http://ergoemacs.org/emacs/emacs_hyper_super_keys.html][Emacs: How to Bind Super Hyper Keys]]

** Using an US keyboard with support for German umlaut characters

I use the /EurKEY/ keyboard layout on my Windows and on my Ubuntu box. This allows the access of the German umlaut
characteres with the help of right =AltGr= key. Nothing especially has to be configured inside
of the *Psimacs* configuration.

On Ubuntu I followed the answer given on /ask Ubuntu/ and on Windows I used the installer provided on
the [[https://eurkey.steffen.bruentjen.eu/download.html][EurKEY]] website.

Reference:
- [[https://eurkey.steffen.bruentjen.eu/?lang=de][EurKEY Das Europäische Tastaturlayout]]
- [[https://askubuntu.com/questions/1449580/use-the-eurkey-keyboard-layout][Use the EurKEY keyboard layout]]

** Remapping the Capslock key

The =Ctrl= key is one of the most used keys, although it is one of the most inconvenient
and ergonomically bad key to type possible leading to strain injury when used often as in *Emacs*.

On the other hand, =Capslock= while in a convenient position is one of the most useless keys as it
is not used often and upper case letters can be typed just by holding the shift key while typing
the underlying letter.

Also the =Print Screen= (often abbreviated =Print Scrn=, =Prnt Scrn=, =Prt Scrn=, =Prt Scn=, =Prt Scr=,
=Prt Sc= or =Pr Sc= and in german =Druck= or =Drucken=) save a bitmap image of the current screen,
or screenshot, to their clipboard or comparable storage area. In my whole life time, I actually never used
this key.

Therefore I remap the =Left-Ctrl= to the =Capslock= key and the original =Capslock= key to the =Prnt Scrn= key.
This way I lose the original =Prnt Scrn= functionality, but I don't bother. The reason that I do not simply
exchange the =Left-Ctrl= and =Capslock= keys is that after years I'm used to the =Left-Ctrl= key and I still
press this key often automatically. This however, is disruptive when I have changed the meaning of the =Left-Ctrl=
key. So basically, now I have two =Left-Ctrl= keys and no =Prnt Scrn= :-).

In the following I describe the way I have done that on my Windows 10 based machine. The change can be performed by
providing the following entry to the /Windows Registry/:

#+begin_example
regedit
Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout
Edit -> New -> Binary Value -> "Scancode Map"

00 00 00 00  # The header version, which is always 0
00 00 00 00  # The header flag, which is always 0
03 00 00 00  # The sum of number of key entries to change and the extra NULL terminator line. In this case 2 key entries changed, therefore, 3.
1d 00 3a 00  # Map Left-Ctrl key to Capslock key
3a 00 37 e0  # Map Capslock key to Prnt Scrn key
00 00 00 00  # NULL terminator line
#+end_example

| Key       | Scancode |
|-----------+----------|
| =Left-Ctrl= | 1d 00    |
| =Capslock=  | 3a 00    |
| =Prnt Scrn= | 37 e0    |
|-----------+----------|

In case of a minimal Lenovo ThinkPad keyboard that does not have a =<Menu>=, i.e. =<Hyper>= key, but that have the =<Prnt-Scrn>= key positioned between
the =<Alt Gr>= and the =<Right-Ctrl>= keys the following layout might be an alternative, provided one can relinquish on the =<Capslock>= and the
=<Prnt-Scrn>= keys. In this layout, the =<Left-Ctrl>= key is mapped to the =<Capslock>= key and the =<Menu>=, i.e. =<Hyper>= key is mapped to the =<Prnt-Scrn>=
key.

| Key         | Scancode |
|-------------+----------|
| =Left-Ctrl=   | 1d 00    |
| =Capslock=    | 3a 00    |
| =Prnt Scrn=   | 37 e0    |
| =Menu (Meta)= | 5d e0    |
|-------------+----------|

References:
- [[https://en.wikipedia.org/wiki/Computer_keyboard][Computer keyboard]]
- [[https://en.wikipedia.org/wiki/Keyboard_layout][Keyboard layout]]
- [[https://en.wikipedia.org/wiki/Scancode][English Wikipedia: Scancode]]
- [[https://de.wikipedia.org/wiki/Scancode][German Wikipedia: Scancode]]
- [[https://www.win.tue.nl/~aeb/linux/kbd/scancodes.html][Keyboard scancodes]]
- [[http://www.winfaq.de/faq_html/Content/tip1500/onlinefaq.php?h=tip1576.htm][WinFAQ - Die deutsche WinFAQ: ScanCodes der Tasten]]
- [[https://www.mavjs.org/post/swap-ctrl-and-capslock-on-windows/][Swap Control and Caps Lock on Windows]]
- [[https://opensource.com/article/18/11/how-swap-ctrl-and-caps-lock-your-keyboard][How to swap Ctrl and Caps Lock keys in Linux]]
- [[https://en.wikipedia.org/wiki/Repetitive_strain_injury][Repetitive strain injury]]

* Early initialization

Starting with *Emacs* 27, an early-init.el file can be used to do early configuration and optimization.
For more information read [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Starting-Up.html#Starting-Up][Starting Up Emacs]] and [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Init-File.html][The Init File]].

#+begin_quote
Emacs can now be configured using an early init file. The file is called early-init.el, in user-emacs-directory.
It is loaded very early in the startup process: before graphical elements such as the tool bar are initialized,
and before the package manager is initialized. The primary purpose is to allow customizing how the package
system is initialized given that initialization now happens before loading the regular init file (see below).

We recommend against putting any customizations in this file that don't need to be set up before initializing
installed add-on packages, because the early init file is read too early into the startup process, and some
important parts of the Emacs session, such as 'window-system' and other GUI features, are not yet set up,
which could make some customization fail to work.
#+end_quote

*Psimacs* uses the =early-init.el= for three purposes. At first, the evaluation of this file tangles the =init.org= file's
embedded elips source code into the corresponding elips files. Especially, the =early-init.el= file is itself
updated on this way, as it is also described in the =init.org= file. Crazy isn't is :-). Secondly, the =early-init.el=
is responsible for synchronizing with a *Psimacs* /dropbox/ repository. This is quite useful when working with multiple
machines and sharing the very same *Emacs* environment. Thirdly, the primary duty of the =early-init.el= file is to
optimize the *Emacs* startup procedure.

As mentioned above, the elisp source of this section is tangled directly into the =early-init.el= file. Since the
tangling happens at startup time on evaluation of the =early-init.el= file, the =early-init.el= might overwritten
itself at startup.

** Preamble

#+begin_src emacs-lisp :tangle early-init.el :var file-description="Early initialization"
;;; Commentary:
;;
;; Emacs 27 introduces early-init.el, which is run before init.el,
;; before package and UI initialization happens.
;;

;;; Code:
#+end_src

** Setup Garbage Collection

For the initialization procedure we try to avoid any garbage collection operation.

The GC can easily double startup time, so we suppress it at startup by turning up =gc-cons-threshold=
and the =gc-cons-percentage= temporarily.

For detail information read the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html][Garbage Collection manual entry]].

Later in the initialization process the garbage collection procedure is even more fine tuned.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Garbage collection optimization
;;      Defer garbage collection further back in the startup process
;;
(setq gc-cons-threshold most-positive-fixnum
      ;; The value of this variable is the number of bytes of storage that must
      ;; be allocated for Lisp objects after one garbage collection in order to
      ;; trigger another garbage collection.

      gc-cons-percentage 0.8
      ;; The value of this variable specifies the amount of consing before a
      ;; garbage collection occurs, as a fraction of the current heap size.
)

#+end_src

** Some basic constants

*** Timing of the Emacs load time

*Psimacs* allows the timing of the complete startup procedure.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Start up timing
;;
(defconst psimacs/config/startup-timing t
  "Enables the timing of the startup procedure.")

(defvar psimacs/config/last-time-point before-init-time
  "This time point is updated for each feature timing.")

(defvar psimacs/config/startup-timing-result '()
  "Collects the result of the timing measurements.")

(defun psimacs/config/load-feature-timing (feature)
  "Prints the load time of the FEATURE.

This function prints the time since beginning of the startup procedure and
also the time since it is was called the last time."
    (when psimacs/config/startup-timing
        (let* ((ct  (current-time) )
               (msg (format "It took %s and %s from startup to load feature %s."
                    (format "%6.3f seconds" (float-time (time-subtract ct psimacs/config/last-time-point)))
                    (format "%6.2f seconds" (float-time (time-subtract ct before-init-time)))
                    feature
                    )))
            (push msg psimacs/config/startup-timing-result)
        )
        (setq psimacs/config/last-time-point (current-time))
    )
)
#+end_src

*** Tangle anything at startup

*Psimacs* allows the tangling of the configuration source code at startup time. The following flag allows to suppresses
this feature completely.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Tangling procedure constants.
;;
(defconst psimacs/config/tangle-anything t
  "If this flag is nil no code is generated by the startup.

This flag allows to only use the `init-*.el' files of the framework.")
#+end_src

*** Tangle early-init.el at startup

*Psimacs* allows the tangling of the =early-init.el= file itself at startup. However, the tangled =early-init.el=
is used only with the following *Psimacs* startup. Tangling of the =early-init.el= can be suppresseed completely
with the following variable.

#+begin_src emacs-lisp :tangle early-init.el
(defconst psimacs/config/tangle-early-init-file t
  "If this flag is t the `early-init.el' file is generated at startup.
If nil, only the `early-init.el' file is omitted from the code generation process.")
#+end_src

*** Synchronize with Dropbox at startup

*Psimacs* allows the synchronization of files and folders with a /Dropbox/ repository at startup time.
The following flag allows inhibition of this feature.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Synchronization procedure constants.
;;
(defconst psimacs/config/synchronize-at-startup nil
  "If this flag is t the `early-init.el' file synchronizes the configuration with Dropbox.

The local configuration can be synchronized with a mirror configuration on Dropbox.
This allows sharing of a single configuration on multiple machines.")
#+end_src

*** Byte compiling configuration

*Psimacs* allows the byte compilation of the configuration files which are found in the
=config= directory after tangling. The performance increase is very small currently. It
is done nevertheless.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Inhibit the byte compilation of the config folder
;;
(defconst psimacs/config/inhibit-byte-compile-config-folder nil
  "If set to true, config directory will not be byte-compiled.")

(defvar psimacs/config/byte-compile-config-folder nil
  "If true, config directory will be byte-compiled after initialization.

This variable is set during the configuration process. If you would like
to inhibit byte compilation use the constant `psimacs/config/inhibit-byte-compile-config-folder'.

Do not change it here!!!")
#+end_src

*** Some size numbers

Huge byte sizes are conveniently written in /Mega Bytes/ or even in /Giga Bytes/ by *Psimacs*. Therefore we define
some size constants early.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Conveniency byte size constants
;;
(defconst   1KB 1024)
(defconst 512KB (*  512 1KB))
(defconst   1MB (* 1024 1KB))
(defconst   1GB (* 1024 1MB))

(defconst   2MB (*   2 1MB))
(defconst   4MB (*   4 1MB))
(defconst   8MB (*   8 1MB))
(defconst  16MB (*  16 1MB))
(defconst  24MB (*  24 1MB))
(defconst  32MB (*  32 1MB))
(defconst  64MB (*  64 1MB))
(defconst 128MB (* 128 1MB))
(defconst 256MB (* 256 1MB))
(defconst 512MB (* 512 1MB))

(defconst   2GB (*   2 1GB))
(defconst   4GB (*   4 1GB))
(defconst   8GB (*   8 1GB))
(defconst  16GB (*  16 1GB))
(defconst  24GB (*  24 1GB))
(defconst  32GB (*  32 1GB))
(defconst  64GB (*  64 1GB))
(defconst 128GB (* 128 1GB))
(defconst 256GB (* 256 1GB))
(defconst 512GB (* 512 1GB))
#+end_src

*** Primary initalization files and directories

The primary initialization files and directories must be known by the initialization process early in time in order
to allow the =early-init.el= to fullfill its duty. These files are evaluated and/or synchronized with a possible
/dropbox/ repository.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Primary Psimacs file and directory constants use for tangling and synchronization
;;
(defconst psimacs/config/main-org-file-name "init.org"
  "The psimacs initialization file.")

(defconst psimacs/config/main-html-file-name "init.html"
  "The psimacs htmlized initialization file.")

(defconst psimacs/config/keybindings-html-file-name "keybindings.html"
  "The psimacs htmlized keybindings file.")

(defconst psimacs/config/keybindings-org-file-name "keybindings.org"
  "The psimacs org keybindings file.")

(defconst psimacs/config/sorted-keybindings-html-file-name "sortedKeyBindings.html"
  "The psimacs htmlized sorted keybindings file.")

(defconst psimacs/config/sorted-keybindings-org-file-name "sortedKeyBindings.org"
  "The psimacs org sorted keybindings file.")

(defconst psimacs/config/icon-file-name "psi.ico"
  "The psimacs icon file.")

(defconst psimacs/config/icon-cli-file-name "psi-cli.ico"
  "The psimacs client icon file.")

(defconst psimacs/config/license-file-name "LICENSE"
  "The psimacs license file.")

(defconst psimacs/config/readme-file-name "Readme.org"
  "The psimacs readme file.")

(defconst psimacs/config/git-ignore-file-name ".gitignore"
  "The psimacs gitignore file.")

(defconst psimacs/config/custom-file-name "custom.el"
  "The psimacs custom elips file.")

(defconst psimacs/config/content-folder "content"
  "The psimacs top level content directory.")

(defconst psimacs/config/assets-folder "assets"
  "The psimacs assets directory.")

(defconst psimacs/config/private-folder "private"
  "The psimacs private directory.")

(defconst psimacs/config/site-lisp-folder "site-lisp"
  "The psimacs site-lisp directory.")

(defconst psimacs/config/docs-folder "docs"
  "The psimacs docs directory.")

(defconst psimacs/config/work-lisp-folder "work-lisp"
  "The psimacs work-lisp directory.")

(defconst psimacs/config/straight-version-folder "straight/versions"
  "The psimacs straight versions directory.")

(defconst psimacs/config/config-folder "config"
  "The psimacs config directory.")

(defconst psimacs/config/session-dir
  (expand-file-name (file-name-as-directory (concat (file-name-as-directory user-emacs-directory) "session")))
  "The psimacs session directory used for storing various session information.")

(defconst psimacs/config/native-comp-dir
  (expand-file-name (file-name-as-directory (concat (file-name-as-directory psimacs/config/session-dir) "eln-cache")))
  "The psimacs native compilation eln directory.")

(defconst psimacs/config/custom-themes-dir
  (expand-file-name (file-name-as-directory (concat (file-name-as-directory psimacs/config/session-dir) "themes")))
  "The psimacs custom themes directory.")
#+end_src

*** Copyright and author information

Copyright information that should be inserted into all tangled code.

#+begin_src emacs-lisp :tangle early-init.el
(defconst psimacs/config/copyright/year       "2020-2025")
(defconst psimacs/config/copyright/author     "Johannes Brunen")
(defconst psimacs/config/copyright/pseudonyme "hatlafax")
(defconst psimacs/config/copyright/email      "hatlafax@gmx.de")
(defconst psimacs/config/copyright/url        "https://github.com/hatlafax/psimacs")
(defconst psimacs/config/copyright/license    "GNU GENERAL PUBLIC LICENSE")
(defconst psimacs/config/copyright/version    "Version 3, 29 June 2007")
#+end_src

*** Garbage collection default parameters

Copyright information that should be inserted into all tangled code.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Psimacs default garbage collection parameters
;;
(defconst psimacs/config/gc-cons-threshold 16MB
  "The default value to use for `gc-cons-threshold'.
If you experience freezing, decrease this. If you experience stuttering,
increase this.")

(defconst psimacs/config/gc-low-cons-threshold 1MB
  "The default value to use for `gcmh-low-cons-threshold'.
If you experience freezing, decrease this. If you experience stuttering,
increase this.")

(defconst psimacs/config/gc-high-cons-threshold psimacs/config/gc-cons-threshold
  "The default value to use for `gcmh-high-cons-threshold'.
If you experience freezing, decrease this. If you experience stuttering,
increase this.")

(defconst psimacs/config/gc-cons-percentage 0.1
  "This variable specifies the amount of consing before garbage collection occurs.
It is the fraction of the current heap size.")
#+end_src

*** Support for Byte and Native compilation

As of /Emacs 28/ navtive elisp compilation is supported. The following code
set the directory where the compiled files are stored.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Byte and native compilation
;;
(setq byte-compile-warnings '(not obsolete docstrings))
(setq byte-compile-verbose nil)
(setq warning-suppress-log-types '((comp) (bytecomp)))

(if (and (featurep 'native-compile)
         (fboundp 'native-comp-available-p)
         (native-comp-available-p))
    ;; Activate `native-compile'
    (setq native-comp-jit-compilation              t
          native-comp-async-report-warnings-errors 'silent
          native-comp-deferred-compilation         nil ; Obsolete since Emacs 29.1
          native-comp-warning-on-missing-source    nil
          package-native-compile                   t)
  ;; Deactivate the `native-compile' feature if it is not available
  (setq features (delq 'native-compile features)))

;;
;; Don't store eln files in ~/.emacs.d/eln-cache
;;
(when (boundp 'native-comp-eln-load-path)
  (startup-redirect-eln-cache psimacs/config/native-comp-dir))
#+end_src

** Custom Theme directory

#+begin_src emacs-lisp :tangle early-init.el
(setq custom-theme-directory psimacs/config/custom-themes-dir)
#+end_src

** Some early optimization settings

- Lexical Scope and binding

  [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical Binding]] is condensed to the following quote:

#+begin_quote
  A lexically-bound variable has /lexical scope/, meaning that any reference to the variable must be located
  textually within the binding construct.
#+end_quote

  Its usage is explained in the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Lexical-Binding.html][Emacs manual]].

Use lexical-binding. [[https://nullprogram.com/blog/2016/12/22/][Why? Explanation]].

=lexical-binding: t= has significant advantages, both in performance and static analysis,
and so it should be used for all future Elisp code. The only reason it's not the default
is because it breaks some old (badly written) code.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Use lexical binding instead of dynamic binding.
;;
(setq-default lexical-binding t)
#+end_src

-  Before *Emacs* 27, the init file was responsible for initializing the package manager by calling
  =package-initialize=. *Emacs* 27 changed the default behavior: It now calls =package-initialize= before loading the
  init file. Since we use the =straight= package manager in *Psimacs*, we inhibit the package manager initialization
  at all.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Inhibit the package manager at all
;;
(setq package-enable-at-startup nil)
#+end_src

- In noninteractive sessions, prioritize non-byte-compiled source files to prevent the use of stale byte-code.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; In noninteractive sessions, prioritize non-byte-compiled source files to
;; prevent the use of stale byte-code. Otherwise, it saves us a little IO time
;; to skip the mtime checks on every *.elc file.
;;
(setq load-prefer-newer noninteractive)
#+end_src

- Let's inhibit resizing the frame at early stage.

  [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Implied-Frame-Resizing.html][Implied Frame Resizing]]:
#+begin_quote
  By default, Emacs tries to keep the number of lines and columns of a frame's text area unaltered when, for example,
  toggling its menu or tool bar, changing its default font or setting the width of any of its scroll bars. This means
  that in such case Emacs must ask the window manager to resize the frame's window in order to accommodate the size
  change.

  Occasionally, such implied frame resizing may be unwanted, for example, when a frame has been maximized or made
   full-screen (where it's turned off by default). In general, users can disable implied resizing with the following
  option:
#+end_quote

#+begin_src emacs-lisp :tangle early-init.el
;;
;; If this option is nil, changing a frame' font, menu bar, tool bar, internal borders,
;; fringes or scroll bars may resize its outer frame in order to keep the number of
;; columns or lines of its text area unaltered. If this option is t, no such resizing
;; is done.
;;
(setq frame-inhibit-implied-resize t)
#+end_src

- Avoid flickering of the screen

  Set theme colors early. The colors are taken from the alect-colors found in the 'alect-themes.el'.
  If another theme is used on default, these settings should be adapted, accordingly.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Change color to avoid screen flickering
;;
;(set-face-foreground 'default "#d0bf8f" nil) ; the alect-dark theme forground color
;(set-face-background 'default "#3f3f3f" nil) ; the alect-dark theme background color
;(set-face-foreground 'default "#bbc2cf" nil) ; the doom-one theme forground color
;(set-face-background 'default "#282c34" nil) ; the doom-one theme background color
;(set-face-background 'default "#2B2320" nil) ; the kaolin-valley-dark theme background color
(set-face-background 'default "#1a1a1a" nil) ; the nimbus theme background color
#+end_src

Premature redisplays can substantially affect startup times and produce
ugly flashes of unstyled Emacs.

#+begin_src emacs-lisp :tangle early-init.el
(unless (or (daemonp) noninteractive)
    ;;
    ;; Premature redisplays can substantially affect startup times and produce
    ;; ugly flashes of unstyled Emacs.
    ;;
    (setq inhibit-startup-screen            t
          inhibit-startup-message           t
          inhibit-startup-echo-area-message user-login-name
          inhibit-redisplay                 t
          inhibit-message                   t
          initial-buffer-choice             nil
          inhibit-startup-buffer-menu       t
          inhibit-x-resources               t
    )

    ;;
    ;; Disable bidirectional text scanning for a modest performance boost.
    ;;
    (setq-default bidi-display-reordering  'left-to-right
                  bidi-paragraph-direction 'left-to-right)

    ;;
    ;; Give up some bidirectional functionality for slightly faster re-display.
    ;;
    (setq bidi-inhibit-bpa t)

    ;;
    ;; Remove "For information about GNU Emacs..." message at startup
    ;;
    (advice-add #'display-startup-echo-area-message :override #'ignore)

    ;;
    ;; Suppress the vanilla startup screen completely. We've disabled it with
    ;; `inhibit-startup-screen', but it would still initialize anyway.
    ;;
    (advice-add #'display-startup-screen :override #'ignore)

    (add-hook 'window-setup-hook
        (lambda ()
            (setq inhibit-redisplay nil
                  inhibit-message nil)
            (redisplay)
        )
    )

    ;;
    ;; Site files tend to use `load-file', which emits "Loading X..." messages in
    ;; the echo area, which in turn triggers a redisplay. Redisplays can have a
    ;; substantial effect on startup times and in this case happens so early that
    ;; Emacs may flash white while starting up.
    ;;
    (define-advice load-file (:override (file) silence)
        (load file nil 'nomessage))

    ;;
    ;; Undo our `load-file' advice above, to limit the scope of any edge cases it
    ;; may introduce down the road.
    ;;
    (define-advice startup--load-user-init-file (:before (&rest _) init-emacs)
        (advice-remove #'load-file #'load-file@silence))
)
#+end_src

- Prevent flashing of unstyled modeline at startup

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Prevent flashing of unstyled modeline at startup
;;
(setq-default mode-line-format nil)
#+end_src

- Don't pass case-insensitive to `auto-mode-alist'

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Don't pass case-insensitive to `auto-mode-alist'
;;
(setq auto-mode-case-fold nil)
#+end_src

- Never use the menu-bar, the tool-bar or the scroll-bar:

  It will be faster to disable them here before they've been initialized.

  *Psimacs* does disable these features by default because these items make Emacs really beautiful on every platform.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Beautify Emacs
;;
;;
;; Faster to disable these here (before they've been initialized)
;;
(push '(menu-bar-lines . 0)     default-frame-alist)
(push '(tool-bar-lines . 0)     default-frame-alist)
(push '(vertical-scroll-bars)   default-frame-alist)
(push '(horizontal-scroll-bars) default-frame-alist)
(when (featurep 'ns)
    (push '(ns-transparent-titlebar . t) default-frame-alist))
(setq-default mode-line-format nil)

(setq scroll-bar-mode nil)
(when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

;(menu-bar-mode -1)
;(tool-bar-mode -1)
;(scroll-bar-mode -1)
;(horizontal-scroll-bar-mode -1)
#+end_src

- Garbage Collection fine tuning

After initialization we set sensible GC parameters.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; After initialization set the garbage collection threshold to a reasonable value.
;;
(add-hook 'after-init-hook
          `(lambda ()
            (setq gc-cons-threshold  psimacs/config/gc-cons-threshold
                  gc-cons-percentage psimacs/config/gc-cons-percentage)
            (garbage-collect)
                  ) t)
#+end_src

- Another small optimization concerns on =file-name-handler-alist=

  On every .el and .elc file loaded during start up, it has to runs those regexps against the filename;
  setting it to nil and after initialization finished put the value back make the initialization process quicker.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Suppress file handlers operations at startup
;;
(unless (daemonp)
  ;; `file-name-handler-alist' is consulted on each call to `require' and `load'
  (let ((old-value (default-toplevel-value 'file-name-handler-alist)))
    (set-default-toplevel-value
     'file-name-handler-alist
     ;; Determine the state of bundled libraries using calc-loaddefs.el.
     ;; If compressed, retain the gzip handler in `file-name-handler-alist`.
     ;; If compiled or neither, omit the gzip handler during startup for
     ;; improved startup and package load time.
     (if (eval-when-compile
           (locate-file-internal "calc-loaddefs.el" load-path))
         nil
       (list (rassq 'jka-compr-handler old-value))))
    ;; Ensure the new value persists through any current let-binding.
    (set-default-toplevel-value 'file-name-handler-alist
                                file-name-handler-alist)

    ;;
    ;; After initialization reset the file-name-handler-alist
    ;;
    (add-hook 'emacs-startup-hook
              (lambda ()
                "Recover file name handlers."
                (set-default-toplevel-value
                 'file-name-handler-alist
                 ;; Merge instead of overwrite to preserve any changes made
                 ;; since startup.
                 (delete-dups (append file-name-handler-alist old-value))))
              101))
)
#+end_src

- Disable warnings generated when functions are redefined with defadvice

  Defines what to do with redefinitions during Advice de/activation.
  Redefinition occurs if a previously activated function that already has an
  original definition associated with it gets redefined and then de/activated.
  In such a case we can either accept the current definition as the new
  original definition, discard the current definition and replace it with the
  old original, or keep it and raise an error. The values `accept', `discard',
  `error' or `warn' govern what will be done. `warn' is just like `accept' but
  it additionally prints a warning message. All other values will be
  interpreted as `error'.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Suppressing ad-handle-definition warnings
;;
(setq ad-redefinition-action 'accept)
#+end_src


- Debugging on error and message buffer limit

#+begin_src emacs-lisp :tangle early-init.el
(setq debug-on-error  t                 ; That will open the debugger when the error is raised.
      message-log-max t                 ; Specifies how many lines to keep in the *Messages* buffer.
                                        ; The value t means there is no limit on how many lines to keep.
)

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq debug-on-error nil
                  eval-expression-debug-on-error nil)
            ))
#+end_src

** Preamble for any /.el/ file

Any generated initialization file should start with the same preamble concerning author, license etc.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Preamble support
;;
(defun psimacs/config/generate-preamble (file org-file description)
  "Generate a proper preamble string for the given file.
FILE        : el file that get generated
ORG-FILE    : org mode file that is prints
DESCRIPTION : short description text"
  (let (
        (preamble (concat (format ";;; %s ---%s-*- coding: utf-8; lexical-binding: t; -*-\n" (file-name-nondirectory file) description)
                                  ";;; Commentary:\n"
                                  ";;\n"
                          (format ";; Don't edit this file, edit %s instead ...\n" (file-name-nondirectory org-file))
                                  ";;\n"
                                  "\n"
                          (format ";; Copyright (C) %s %s (%s)\n"
                                  psimacs/config/copyright/year
                                  psimacs/config/copyright/author
                                  psimacs/config/copyright/pseudonyme)
                                  "\n"
                          (format ";; Author:  %s <%s>\n"
                                  psimacs/config/copyright/author
                                  psimacs/config/copyright/email)
                          (format ";; URL:     %s\n" psimacs/config/copyright/url)
                          (format ";; License: %s %s\n"
                                  psimacs/config/copyright/license
                                  psimacs/config/copyright/version)
                                  "\n"
                                  ";; This file is not part of GNU Emacs.\n"
                                  ";;\n"
                                  ";; This program is free software; you can redistribute it and/or\n"
                          (format ";; modify it under the terms of the %s\n"
                                  psimacs/config/copyright/license)
                          (format ";; %s published by the Free Software Foundation.\n" psimacs/config/copyright/version)
                                  ";;\n"
                                  ";; This program is distributed in the hope that it will be useful,\n"
                                  ";; but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
                                  ";; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n"
                                  ";; General Public License for more details.\n"
                                  ";;\n"
                                  ";; You should have received a copy of the GNU General Public License\n"
                                  ";; along with this program; see the file LICENSE.  If not, write to\n"
                                  ";; the Free Software Foundation, Inc., 51 Franklin Street, Fifth\n"
                                  ";; Floor, Boston, MA 02110-1301, USA.\n"
                                  ";;\n"
                                  ";;; Code:\n"
                                  "\n")))
    preamble
  )
)
#+end_src

** Tangling support without org-babel

The code generation process is not performed with the [[http://orgmode.org/worg/org-contrib/babel/][Org Mode Babel]] functionality. That is because the startup
should be pretty fast and not rely on loading [[https://orgmode.org][org-mode]] only for this task. Additionally, the tangling function
does do some special stuff that is not supported by the  [[http://orgmode.org/worg/org-contrib/babel/][Org Mode Babel]] framework.

Sections and its subsections that are prefixed with =Canceled= or =Disabled= tokens get filtered out. The
same happens if a section is attributed by the tag =:noexport:=.

Sections that are tagged by =:noexport:= are not exported to html.

#+begin_src emacs-lisp :tangle early-init.el
(defun psimacs/config/tangle-canceled-p (token)
    "Return t if TOKEN is matching the `canceled' criteria."
    (when (or (string-prefix-p "CANCELED" token t)
              (string-prefix-p "DISABLED" token t)
              (string-match-p "^.*:NOEXPORT:.*$" (upcase token))
          )
        t
    )
)

(defun psimacs/config/tangle-section-canceled ()
  "Return t if the current section header is \\='CANCELED\\=' or \\='DISABLED\\=' \\=':noexport:\\=', else nil.

Section headers starts with \\='*\\=', \\='**\\=', etc, e.g.:

\\='** CANCELED Some section header text\\='

This function searches the header tree up to the root. The current header is
regarded \\='CANCELED\\=' if he or any of its parent headers is regarded \\='CANCELED\\='."
    ;;(save-excursion (if (re-search-backward "^\\*+\\s-+\\(.*?\\)?\\s-*$" nil t)
    ;;                   (or (string-prefix-p "CANCELED" (match-string 1) t)
    ;;                       (string-prefix-p "DISABLED" (match-string 1) t)
    ;;                       (string-match-p "^.*:NOEXPORT:.*$" (match-string 1))
    ;;                   ) nil))
    ;;(message "---------------------------------------------------------------------------------------------")
    (save-excursion
        (let ( (result nil) (loop t) (n 0) (i 0) )
            (while (and (not result) loop)
                (if (re-search-backward "^\\(\\*+\\)\\s-+\\(.*?\\)?\\s-*$" nil t)
                    (progn
                        ;;(message "%s" (match-string 0))
                        (setq i (length (match-string 1)))
                        (if (= n 0)
                            (progn
                                (setq n i)
                                (when (psimacs/config/tangle-canceled-p (match-string 2))
                                    (setq result t)
                                    (setq loop nil)
                                    ;;(message "=> early canceled -> result t %s" (match-string 0))
                                )
                            )
                            ;; else n > 0
                            (when (not result)
                                (if (< i n)
                                    (progn
                                        (when (psimacs/config/tangle-canceled-p (match-string 2))
                                            (setq result t)
                                            ;;(message "=> canceled!!! %s" (match-string 0))
                                        )

                                        (when (<= i 1)
                                            (setq loop nil)
                                            ;;(message "=> stopped!!! %s" (match-string 0))
                                        )

                                        (setq n i)
                                    )
                                  ;;(message "=> discarded i = %s, n = %s" i n)
                                )
                            )
                        )
                    )
                  (setq loop nil)
                )
            )
            ;;(message "=> final result %s" result)
            result
        )
    )
)
#+end_src

The main tangling function.

#+begin_src emacs-lisp :tangle early-init.el
(defun psimacs/config/tangle-config-org (orgfile elfile)
  "This function will write all source blocks from \\='file.org\\=' into \\='file.el\\=' that are ...

- not marked as :tangle no
- have a source-code of =emacs-lisp=
- doesn't have the todo-markers CANCELED or DISABLED
- doesn't be tagged by :noexport:

ORGFILE - input file
ELFILE - output file

Elisp source code blocks that are marked as \\=':tangle foo.el\\=' are written to file \\='foo.el\\=' instead.
For these files extra header and footer are written. In this case, also an additional header argument
\\=':var file-description \"text\"\\=' is evaluated and used in the file header.

Shortly, all tangled source code blocks for file foo.el are written to one file \\='foo.el\\=' that look like

;; foo.el --- text -*- coding: utf-8; lexical-binding: t; -*-
;;
;; Don't edit this file, edit file.org instead ...
;;
...
\\=(provide `foo)

Source code blocks that tangle to early-init.el are handled differently. In this case neither a
`require' statement in file.el nor the `provide' clause is added to the file early-init.el."
  (let* ((body-list ())
         (required-files-alist ())
         (required-files-last-alist ())
         (src-block-regexp   (concat
                              ;; (1) indentation                 (2) lang
                              "^\\([ \t]*\\)#\\+begin_src[ \t]+\\([^ \f\t\n\r\v]+\\)[ \t]*"
                              ;; (3) switches
                              "\\([^\":\n]*\"[^\"\n*]*\"[^\":\n]*\\|[^\":\n]*\\)"
                              ;; (4) header arguments
                              "\\([^\n]*\\)\n"
                              ;; (5) body
                              "\\([^\000]*?\n\\)??[ \t]*#\\+end_src"))
         (found-files-alist ())
         (found-load-dir-alist ()))
    (with-temp-buffer (insert-file-contents orgfile)
                      (require 'map) ;; needed for map-put
                      (require 'subr-x)

                      (goto-char (point-min))
                      (while (re-search-forward src-block-regexp nil t)
                        (let ((lang (match-string 2))
                              (args (match-string 4))
                              (body (match-string 5))
                              (canc (psimacs/config/tangle-section-canceled)))
                          (when (and (string= lang "emacs-lisp")
                                     (not (string-match-p "^.*:tangle\\s-+no.*$" args))
                                     (not canc))
                            (when (string-match "^.*:tangle\\s-+\\([^:]+\\).*$" args)
                              (let ((dst (string-trim (match-string 1 args)))
                                    (dst-file)
                                    (dst-dir)
                                    (line)
                                    (package-name)
                                    (relative-dir))
                                (if (string= dst "yes")
                                    (progn
                                      (setq body (concat body "\n"))
                                      (add-to-list 'body-list body))
                                  ;; ...else a .el file is requested explicitly.
                                  (progn
                                    (setq dst-file (expand-file-name (concat user-emacs-directory dst)))
                                    (setq dst-dir  (file-name-directory dst-file))
                                    (setq package-name (file-name-sans-extension (file-name-nondirectory dst-file)))

                                    (when (or
                                           (not (equal package-name "early-init"))
                                           (and
                                            (equal package-name "early-init")
                                            psimacs/config/tangle-early-init-file))
                                      (unless (cdr (assoc dst-file found-files-alist))
                                        (when (file-exists-p dst-file)
                                          (delete-file dst-file))

                                        (unless (file-exists-p dst-dir)
                                          (make-directory dst-dir t))

                                        (setq relative-dir (file-relative-name (file-name-directory dst-dir)
                                                                               user-emacs-directory))

                                        (unless (or
                                                 (cdr (assoc dst-dir found-load-dir-alist))
                                                 (equal relative-dir "./"))
                                          (setq line (format
                                                      "(add-to-list 'load-path (concat user-emacs-directory \"%s\"))\n\n"
                                                      relative-dir))
                                          (add-to-list 'body-list line)
                                          (map-put found-load-dir-alist dst-dir t)
                                          )

                                        (let ((description " "))
                                          (when (string-match
                                                 "^.*:var\\s-+file-description\\s-*=\\s-*\"\\([^\"]+\\).*$"
                                                 args)
                                            (setq description (concat " " (string-trim (match-string 1
                                                                                                     args))
                                                                      " ")))

                                          (unless (equal package-name "early-init")
                                            (if (equal description " ")
                                                (setq line (format "(require '%s)\n\n" package-name))
                                              (progn
                                                (setq description (string-trim-right description))
                                                (setq line (format "(require '%s)" package-name))
                                                (setq line (concat line (make-string (- 42 (length line)) ?\s) (format ";;%s\n\n" description)))
                                                ))
                                            (add-to-list 'required-files-alist line)
                                            (add-to-list 'body-list line))

                                          (with-temp-buffer (insert (psimacs/config/generate-preamble
                                                                     dst-file
                                                                     orgfile
                                                                     description))
                                                            (apply 'insert (reverse required-files-last-alist))
                                                            (setq required-files-last-alist required-files-alist)

                                                            (write-region (point-min)
                                                                          (point-max) dst-file t))
                                          )
                                        (map-put found-files-alist dst-file t)
                                        )
                                      (with-temp-buffer (insert body)
                                                        (insert "\n")
                                                        (write-region (point-min)
                                                                      (point-max) dst-file t)))))))))))

    ;;
    ;; Add the config pathes to Emacs load path list and add the final provide-clause to the
    ;; written emacs package files.
    ;;
    (dolist (element found-files-alist)
      (let* ((file (car element))
             (package-name (file-name-sans-extension (file-name-nondirectory file))))

        (unless (equal package-name "early-init")
          (with-temp-buffer (insert (format "(psimacs/config/load-feature-timing \"%s\")\n" package-name))
                            (insert "\n")
                            (insert (format "(provide '%s)\n" package-name))
                            (insert (format ";;; %s.el ends here\n" package-name))
                            (write-region (point-min)
                                          (point-max) file t)))))
    (with-temp-file elfile
      (insert (psimacs/config/generate-preamble elfile orgfile " Initialization file "))
      (apply 'insert (reverse body-list))
      (insert "\n"))
    ))
#+end_src


In case that the resulting configuration file is named =init.el= no explicit loading is necessary. Otherwise, we
must load the =.el= file.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Next function extracts the elips code from the org-file and possibly loads the
;; resulting elips file.
;;
(defun psimacs/config/load-configuration-file (orgfile)
  "Load the given configuration file ORGFILE unless it equals to \\='init.el\\=' itself.

File \\='init.el\\=' is loaded automatically at startup. No extra loading is necessary.
This function is basically an efficient replacement of `org-babel-load-file'.
However, it performs some extra task on extraction of the elisp source code blocks.
This happens in the `tangle-config-org' function.
No byte compiling is performed for any elips file generated by the tangling procedure."
  (let* ((base-name (file-name-sans-extension orgfile))
         (elfile    (concat base-name ".el"))
        )
    (when (and psimacs/config/tangle-anything
               (or (not (file-exists-p elfile))
                   (file-newer-than-file-p orgfile elfile)))

      (let ( (config-dir (file-name-as-directory (concat user-emacs-directory psimacs/config/config-folder))) )

        ;; Empty config directory. It will be refilled by the following tangle command.
        (when (file-directory-p config-dir)
            (delete-directory config-dir t))

        (psimacs/config/tangle-config-org orgfile elfile)

        (unless psimacs/config/inhibit-byte-compile-config-folder
            (setq psimacs/config/byte-compile-config-folder t))
      )

    (unless (equal (file-name-nondirectory elfile) "init.el")
      (load (file-name-sans-extension elfile))))))
#+end_src

** Directory synchronization system functions

Two useful functions that allow one or two way directory synchronizations.

#+begin_src emacs-lisp :tangle early-init.el
(defun psimacs/file-system/copy-directory-files (src dst &optional only-newer-files)
  "Copy all files from SRC directory into DST directory recursively.

If optional argument ONLY-NEWER-FILES is non nil source files are copied only if their time stamp is
newer then the time stamp of the destination file."
  (if (file-exists-p src)
      (progn
        (unless (file-exists-p dst)
          (make-directory dst t))
        (dolist (f (directory-files-recursively src ".*" t))
          (if (file-directory-p f)
              (let ((f-relative (file-relative-name f src)))
                (when f-relative (let ((dst-dir (concat (file-name-as-directory dst) f-relative)))
                                   (unless (file-exists-p dst-dir)
                                     (make-directory dst-dir t)))))
            ;; ...else is file
            (let* ((src-dir (file-name-directory f))
                   (f-relative (file-relative-name src-dir src))
                   (dst-dir dst)
                   (dst-file))
              (when f-relative
                (setq dst-dir (concat (file-name-as-directory dst) f-relative)))
              (unless (file-exists-p dst-dir)
                (make-directory dst-dir t))
              (setq dst-file (concat (file-name-as-directory dst-dir)
                                     (file-name-nondirectory f)))

                                        ;(if (file-exists-p dst-file)
              (if only-newer-files (when (file-newer-than-file-p f dst-file)
                                     (copy-file f dst-file t t))
                ;; ...else always copy
                (copy-file f dst-file t t))
                                        ;)
              )))
        )
    (make-directory src t)))
#+end_src

Two way synchronization if possible with the following function.

#+begin_src emacs-lisp :tangle early-init.el
(defun psimacs/file-system/synchronize-directories(src dst)
  "This function synchronizes two directories.

All files that are found in SRC and that are either not in DST or newer in SRC are copied to DST.
All files that are found in DST and that are either not in SRC or newer in DST are copied to SRC.

After this function is finished the two directories are identical."
  (psimacs/file-system/copy-directory-files src dst t)
  (psimacs/file-system/copy-directory-files dst src t))
#+end_src

** Dropbox configuration sharing support

The following functionality allows the synchronization between the user *Psimacs* configuration and a shared
/Dropbox/ configuration repository. Basically, allowing multiple machines to share the same *Psimacs* setup.

The /Dropbox/ location is determined at run time.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Sync with dropbox
;;   The main config file is taken from the dropbox folder but it is loaded from
;;   the local directory (see below). Therefore we copy the main config file from
;;   the dropbox emacs folder into the emacs home directory. If the main config
;;   file in the emacs home directory is newer than the file in the dropbox folder
;;   we update that one with the newer local one.
;;   The agenda  and the roam-notes files are worked on the dropbox directly, but
;;   a local copy is made for backup purpose.
;;
(defun psimacs/config/find-dropbox-folder ()
  "Get the current dropbox folder on the running machine. Otherwise nil."
  (interactive)
  (let ((json-path
	 (cond
	  ((eq system-type 'windows-nt)
	   (let* (
		  (env-appdat      (getenv      "APPDATA"))
		  (env-localappdat (getenv "LOCALAPPDATA"))
		  (db-appdat-info-file
		   (if env-appdat
		       (concat (expand-file-name (file-name-as-directory env-appdat)) "Dropbox/info.json")
		     nil))
		  (db-localappdat-info-file
		   (if env-localappdat
		       (concat (expand-file-name (file-name-as-directory env-localappdat)) "Dropbox/info.json")
		     nil))
		  (db-user-home-info-file   "~/Dropbox/info.json")
		  )
	     (if (and db-appdat-info-file (file-exists-p db-appdat-info-file))
		 db-appdat-info-file
	       (if (and db-localappdat-info-file (file-exists-p db-localappdat-info-file))
                   db-localappdat-info-file
                 (if (and db-user-home-info-file (file-exists-p db-user-home-info-file))
                     db-user-home-info-file
                   nil)))
	     ))
	  ((or
            (eq system-type 'darwin)
            (eq system-type 'gnu/linux))
	   (let* (
		  (db-user-home-info-file   "~/.dropbox/info.json")
		  )
	     (if (and db-user-home-info-file (file-exists-p db-user-home-info-file))
		 db-user-home-info-file
	       nil)))
	  )))
    (if (and json-path
             (file-exists-p json-path))
        (progn
          (require 'json)
          (cdr (assoc 'path (car (json-read-file json-path))))) nil))
)
#+end_src

*Psimacs* is expected to reside in sub-directory =psimacs/psimacs=. The author uses the same sub-directory
in its home directory and avoids the =.emcad.d= directory completely. Instead the use of environment variable
=XDG_CONFIG_HOME= allows to run various *Emacs* configuration simultaneously.

The following /Windows Batch-File/ is used for starting *Psimacs*:

#+begin_src
@echo off

set XDG_CONFIG_HOME=c:\home\emacs\psimacs
C:\utils\Emacs\bin\runemacs.exe
#+end_src

The constant =psimacs/config/dropbox-dir= is the actual /Dropbox/ directory found on your machine. It is determined by
the function =psimacs/config/find-dropbox-folder= at initialization time. The constant
=psimacs/config/dropbox-emacs-dir= is a sub directory to =psimacs/config/dropbox-dir=. For a multiple configuration
setup it should be =psimacs=. In a traditional Emacs setup, it would be set to =.emacs.d=.
Other configurations then can exchange the /psimacs/ string to something other.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Initialize the directory constants for dropbox...
;;
(defconst psimacs/config/dropbox-dir
  (let ( (f (psimacs/config/find-dropbox-folder)) )
    (if f (file-name-as-directory f) nil))
  "The psimacs dropbox directory or nil.")

;;
;; ... and the emacs configuration directory
;;
(defconst psimacs/config/dropbox-emacs-dir
  (if psimacs/config/dropbox-dir (file-name-as-directory (concat psimacs/config/dropbox-dir
                                                                 "psimacs")) nil)
  "The psimacs dropbox Emacs configuration directory or nil.")
#+end_src

The actual synchronization function. In its preamble it creates list of files and directories that should be
synchronized. These list might be adapted in the future as the configuration evolves.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; The synchronization function.
;;
(defun psimacs/config/sync-with-dropbox ()
  "Synchronize with \\='dropbox\\=' directory if it exists.

The expected place in the \\='dropbox\\=' directory is \\='psimacs\\='."
  (if (and psimacs/config/dropbox-dir
           (file-directory-p psimacs/config/dropbox-dir))
      (let* ((db-dir psimacs/config/dropbox-emacs-dir)
             (sync-files-alist ())
             (sync-dirs-alist  ()))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/main-org-file-name)
                                             (concat db-dir psimacs/config/main-org-file-name)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/main-html-file-name)
                                             (concat db-dir psimacs/config/main-html-file-name)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/keybindings-html-file-name)
                                             (concat db-dir psimacs/config/keybindings-html-file-name)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/sorted-keybindings-html-file-name)
                                             (concat db-dir psimacs/config/sorted-keybindings-html-file-name)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/keybindings-org-file-name)
                                             (concat db-dir psimacs/config/keybindings-org-file-name)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/sorted-keybindings-org-file-name)
                                             (concat db-dir psimacs/config/sorted-keybindings-org-file-name)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory psimacs/config/icon-file-name)
                                             (concat db-dir psimacs/config/icon-file-name)))

        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory psimacs/config/icon-cli-file-name)
                                             (concat db-dir psimacs/config/icon-cli-file-name)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/license-file-name)
                                             (concat db-dir psimacs/config/license-file-name)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/readme-file-name)
                                             (concat db-dir psimacs/config/readme-file-name)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/git-ignore-file-name)
                                             (concat db-dir psimacs/config/git-ignore-file-name)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/custom-file-name)
                                             (concat db-dir psimacs/config/custom-file-name)))
        (add-to-list 'sync-dirs-alist  (cons (file-name-as-directory (concat user-emacs-directory
                                                                             psimacs/config/content-folder))
                                             (file-name-as-directory (concat db-dir
                                                                             psimacs/config/content-folder))))
        (add-to-list 'sync-dirs-alist  (cons (file-name-as-directory (concat user-emacs-directory
                                                                             psimacs/config/assets-folder))
                                             (file-name-as-directory (concat db-dir
                                                                             psimacs/config/assets-folder))))
        (add-to-list 'sync-dirs-alist  (cons (file-name-as-directory (concat user-emacs-directory
                                                                             psimacs/config/private-folder))
                                             (file-name-as-directory (concat db-dir
                                                                             psimacs/config/private-folder))))
        (add-to-list 'sync-dirs-alist  (cons (file-name-as-directory (concat user-emacs-directory
                                                                             psimacs/config/straight-version-folder))
                                             (file-name-as-directory (concat db-dir
                                                                             psimacs/config/straight-version-folder))))
        (add-to-list 'sync-dirs-alist  (cons (file-name-as-directory (concat user-emacs-directory
                                                                             psimacs/config/site-lisp-folder))
                                             (file-name-as-directory (concat db-dir
                                                                             psimacs/config/site-lisp-folder))))
        (add-to-list 'sync-dirs-alist  (cons (file-name-as-directory (concat user-emacs-directory
                                                                             psimacs/config/work-lisp-folder))
                                             (file-name-as-directory (concat db-dir
                                                                             psimacs/config/work-lisp-folder))))
        (add-to-list 'sync-dirs-alist  (cons (file-name-as-directory (concat user-emacs-directory
                                                                             psimacs/config/docs-folder))
                                             (file-name-as-directory (concat db-dir
                                                                             psimacs/config/docs-folder))))



        ;;
        ;; Create missing dropbox emacs directory
        ;;
        (unless (file-directory-p db-dir)
          (make-directory db-dir t))
        (dolist (files sync-files-alist)
          (let ((file    (car files))
                (db-file (cdr files)))
            ;;
            ;; Try to copy the file from dropbox to emacs directory...
            ;;
            (if (file-exists-p db-file)
                (progn
                  ;;
                  ;; If the local file is newer, we update dropbox first
                  ;;
                  (when (file-newer-than-file-p file db-file)
                    (copy-file file db-file t t))
                  (when (or (not (file-exists-p file))
                            (file-newer-than-file-p db-file file))
                    (copy-file db-file file t t)))

              ;; ...else try to upload to dropbox
              (if (file-exists-p file)
                  (copy-file file db-file t t)))))
        (dolist (files sync-dirs-alist)
          (let ((directory    (car files))
                (db-directory (cdr files)))
            (psimacs/file-system/synchronize-directories db-directory directory))))))
#+end_src

** Execution of the Dropbox synchronization

This starts the synchronization between the user *Psimacs* configuration and the Dropbox configuration repository.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Synchronize with dropbox
;;
(when psimacs/config/synchronize-at-startup
  (psimacs/config/sync-with-dropbox)
  (psimacs/config/load-feature-timing "early-init.el: sync-with-dropbox")
)
#+end_src

** Tangling the main /init.org/ file.

This starts the processing of this org file (=init.org=), resulting in the final configuration files for *Psimacs*.

#+begin_src emacs-lisp :tangle early-init.el
;;
;; Extract elisp code from org files if necessary and load that code into
;; emacs.
;;
(psimacs/config/load-configuration-file (expand-file-name (concat user-emacs-directory
                                                                  psimacs/config/main-org-file-name)))

(psimacs/config/load-feature-timing "early-init.el: load-configuration-file")

(provide 'early-init)
#+end_src

* Preamble to the /init.el/ file

Until this point, all *Psimacs* source code tangled to the =early-inti.el= file. From now on, the actual configuration
file is setup. It starts with a commentary preamble written to the primary =init.el= file.

#+begin_src emacs-lisp :tangle yes
;;; Commentary:
;;
;; Emacs 27 introduces early-init.el, which is run before init.el,
;; before package and UI initialization happens.
;;

;;; Code:
;;
;; Psimacs has been setup with Emacs 29.2. No suport for older version.
;;
(when (version< emacs-version "29.2")
    (message "Only tested with Emacs 29.2 and above!"))

(when (version< emacs-version "28.2")
    (error "This requires Emacs 28.2 and above!"))
#+end_src

*Psimacs* splits the configuration into various =init-*.el=-files. This will allow better looking up specific
settings or perform some experimentation. Each of these configuration files will be properly documented and it
is possible to completely relinquish the tangling process and work with the =init-*.el= initialization files
alone.

The main configuration starts now. It is sectioned into different topics. Each topic starts with a prime section
of its own.

* System helpers

This has to be provided early in the initialization process so that it is available for the subsequent code.

** Startup frame size and position

Early up we set the *Psimacs* frame's size and position in order to avoid distracting frame repositioning and resizing.
*Psimacs* provides three simple strategies for positioning and sizing new frames. These strategies can be activated
by the following functions which are actually defined in section [[Frame size and position][Frame size and position]].

#+attr_html: :class styledtable1
| Key binding     | Command                                               | Description                                                                               |
|-----------------+-------------------------------------------------------+-------------------------------------------------------------------------------------------|
| =H-m C-w C-x 5 l= | =M-x psimacs/window/set-frame-creation-strategy-layout= | Place and size new frames left and right to the main frame. This is the default strategy. |
| =H-m C-w C-x 5 m= | =M-x psimacs/window/set-frame-creation-strategy-main=   | Always use the same placement and size as the initial main frame.                         |
| =H-m C-w C-x 5 s= | =M-x psimacs/window/set-frame-creation-strategy-system= | Let Emacs and the operating system decide.                                                |
|-----------------+-------------------------------------------------------+-------------------------------------------------------------------------------------------|

If you do not like the =layout= preset, change variable =psimacs/config/default-frame-creation-strategy= according
to it's documentation string.

#+begin_src emacs-lisp :tangle config/init-config-helper.el :var file-description="Configuration helper"
;;
;; Define initial Emacs frame size and position...
;;

;;
;; Resizing the Emacs frame can be costly when changing the font. Disable this
;; to improve startup times with larger than the system default.
;;
(setq frame-resize-pixelwise t)

;;
;; However, do not resize windows pixelwise, as this can cause crashes in some
;; cases when resizing too many windows at once or rapidly.
;;
(setq window-resize-pixelwise nil)

(defconst psimacs/config/default-frame-offset 20)

(let* ((primary-monitor (car (display-monitor-attributes-list)))
       (geometry        (assoc 'geometry primary-monitor))
      )

    (defconst psimacs/config/initial-frame-pos-x  (round (* 28 (/ (nth 3 geometry) 100))))
    (defconst psimacs/config/initial-frame-pos-y  0)
    (defconst psimacs/config/initial-frame-size-x (round (* 60 (/ (nth 3 geometry) 100))))
    (defconst psimacs/config/initial-frame-size-y (- (nth 4 geometry) 90))

    (defconst psimacs/config/default-frame-1-pos-x  0)
    (defconst psimacs/config/default-frame-1-pos-y  psimacs/config/initial-frame-pos-y)
    (defconst psimacs/config/default-frame-1-size-x (- psimacs/config/initial-frame-pos-x  (+ psimacs/config/default-frame-1-pos-x psimacs/config/default-frame-offset)))
    (defconst psimacs/config/default-frame-1-size-y (round (/ psimacs/config/initial-frame-size-y 2)))

    (defconst psimacs/config/default-frame-2-pos-x  0)
    (defconst psimacs/config/default-frame-2-pos-y  (+ psimacs/config/default-frame-1-size-y psimacs/config/initial-frame-pos-y (round (* psimacs/config/default-frame-offset 1.75))))
    (defconst psimacs/config/default-frame-2-size-x (- psimacs/config/initial-frame-pos-x  (+ psimacs/config/default-frame-2-pos-x psimacs/config/default-frame-offset)))
    (defconst psimacs/config/default-frame-2-size-y (- psimacs/config/initial-frame-size-y psimacs/config/default-frame-2-pos-y))


    (defconst psimacs/config/default-frame-3-pos-x  (+ psimacs/config/initial-frame-pos-x psimacs/config/initial-frame-size-x psimacs/config/default-frame-offset))
    (defconst psimacs/config/default-frame-3-pos-y  psimacs/config/initial-frame-pos-y)
    (defconst psimacs/config/default-frame-3-size-x (- (nth 3 geometry) (+ psimacs/config/default-frame-3-pos-x (round (* psimacs/config/default-frame-offset 1.5)))))
    (defconst psimacs/config/default-frame-3-size-y (round (/ psimacs/config/initial-frame-size-y 2)))

    (defconst psimacs/config/default-frame-4-pos-x  (+ psimacs/config/initial-frame-pos-x psimacs/config/initial-frame-size-x psimacs/config/default-frame-offset))
    (defconst psimacs/config/default-frame-4-pos-y  (+ psimacs/config/default-frame-1-size-y psimacs/config/initial-frame-pos-y (round (* psimacs/config/default-frame-offset 1.75))))
    (defconst psimacs/config/default-frame-4-size-x (- (nth 3 geometry) (+ psimacs/config/default-frame-4-pos-x (round (* psimacs/config/default-frame-offset 1.5)))))
    (defconst psimacs/config/default-frame-4-size-y (- psimacs/config/initial-frame-size-y psimacs/config/default-frame-2-pos-y))

    (defvar psimacs/config/default-frame-placement-counter 1)

    ;;
    ;; The initial frame
    ;;
    (set-frame-position (selected-frame) psimacs/config/initial-frame-pos-x  psimacs/config/initial-frame-pos-y)
    (set-frame-size     (selected-frame) psimacs/config/initial-frame-size-x psimacs/config/initial-frame-size-y t)

    (unless (daemonp)
      ;;
      ;; Somewhat redundant
      ;;
      (add-to-list 'initial-frame-alist `(_left   . ,psimacs/config/initial-frame-pos-x))
      (add-to-list 'initial-frame-alist `(_top    . ,psimacs/config/initial-frame-pos-y))
      (add-to-list 'initial-frame-alist `(_width  . (text-pixels . ,psimacs/config/initial-frame-size-x)))
      (add-to-list 'initial-frame-alist `(_height . (text-pixels . ,psimacs/config/initial-frame-size-y)))

      (add-to-list 'default-frame-alist `(_left   . ,psimacs/config/initial-frame-pos-x))
      (add-to-list 'default-frame-alist `(_top    . ,psimacs/config/initial-frame-pos-y))
      (add-to-list 'default-frame-alist `(_width  . (text-pixels . ,psimacs/config/initial-frame-size-x)))
      (add-to-list 'default-frame-alist `(_height . (text-pixels . ,psimacs/config/initial-frame-size-y)))

      ;;
      ;; Hacky, we need a redisplay
      ;;
      (setq-default inhibit-redisplay nil
                    inhibit-message   nil)
      (redisplay)
      (setq-default inhibit-redisplay t
                    inhibit-message   t)
    )
)

;;
;; Track the current frame creation strategy
;;
(defvar psimacs/config/default-frame-creation-strategy "layout"
  "The strategy that is used for placing and sizing new frames.

Supported strategies are:
  `layout'      -> new frames surround the main frame
  `main'        -> new frames get always the same size and position of the main frame
  `system'      -> let emacs decide")

;;
;; Prepare for the choosen frame creation strategy
;;
(defun psimacs/window/set-frame-creation-strategy-layout ()
    "Set the frame layout creation strategy to `layout'."
    (interactive)
    (let* ( (primary-monitor (car (display-monitor-attributes-list)))
            (geometry        (assoc 'geometry primary-monitor))
            (_left            0)
            (_top             0)
            (_width           (nth 3 geometry))
            (_height          (nth 4 geometry))
          )
        (setq default-frame-alist (assq-delete-all '_left   default-frame-alist))
        (setq default-frame-alist (assq-delete-all '_top    default-frame-alist))
        (setq default-frame-alist (assq-delete-all '_width  default-frame-alist))
        (setq default-frame-alist (assq-delete-all '_height default-frame-alist))

        (when (= psimacs/config/default-frame-placement-counter 1)
          (add-to-list 'default-frame-alist `(_left   . ,psimacs/config/default-frame-1-pos-x))
          (add-to-list 'default-frame-alist `(_top    . ,psimacs/config/default-frame-1-pos-y))
          (add-to-list 'default-frame-alist `(_width  . (text-pixels . ,psimacs/config/default-frame-1-size-x)))
          (add-to-list 'default-frame-alist `(_height . (text-pixels . ,psimacs/config/default-frame-1-size-y)))
          )

        (when (= psimacs/config/default-frame-placement-counter 2)
          (add-to-list 'default-frame-alist `(_left   . ,psimacs/config/default-frame-2-pos-x))
          (add-to-list 'default-frame-alist `(_top    . ,psimacs/config/default-frame-2-pos-y))
          (add-to-list 'default-frame-alist `(_width  . (text-pixels . ,psimacs/config/default-frame-2-size-x)))
          (add-to-list 'default-frame-alist `(_height . (text-pixels . ,psimacs/config/default-frame-2-size-y)))
          )

        (when (= psimacs/config/default-frame-placement-counter 3)
          (add-to-list 'default-frame-alist `(_left   . ,psimacs/config/default-frame-3-pos-x))
          (add-to-list 'default-frame-alist `(_top    . ,psimacs/config/default-frame-3-pos-y))
          (add-to-list 'default-frame-alist `(_width  . (text-pixels . ,psimacs/config/default-frame-3-size-x)))
          (add-to-list 'default-frame-alist `(_height . (text-pixels . ,psimacs/config/default-frame-3-size-y)))
          )

        (when (= psimacs/config/default-frame-placement-counter 4)
          (add-to-list 'default-frame-alist `(_left   . ,psimacs/config/default-frame-4-pos-x))
          (add-to-list 'default-frame-alist `(_top    . ,psimacs/config/default-frame-4-pos-y))
          (add-to-list 'default-frame-alist `(_width  . (text-pixels . ,psimacs/config/default-frame-4-size-x)))
          (add-to-list 'default-frame-alist `(_height . (text-pixels . ,psimacs/config/default-frame-4-size-y)))
          )

        (setq psimacs/config/default-frame-creation-strategy "layout")
        (message "Switched to frame layout creation strategy.")))

(defun psimacs/window/set-frame-creation-strategy-main ()
    "Set the frame layout creation strategy to `main'."
    (interactive)
    (let* ( (primary-monitor (car (display-monitor-attributes-list)))
            (geometry        (assoc 'geometry primary-monitor))
            (_left            0)
            (_top             0)
            (_width           (nth 3 geometry))
            (_height          (nth 4 geometry))
          )
        (setq default-frame-alist (assq-delete-all '_left   default-frame-alist))
        (setq default-frame-alist (assq-delete-all '_top    default-frame-alist))
        (setq default-frame-alist (assq-delete-all '_width  default-frame-alist))
        (setq default-frame-alist (assq-delete-all '_height default-frame-alist))

        (add-to-list 'default-frame-alist `(_left   . ,psimacs/config/initial-frame-pos-x))
        (add-to-list 'default-frame-alist `(_top    . ,psimacs/config/initial-frame-pos-y))
        (add-to-list 'default-frame-alist `(_width  . (text-pixels . ,psimacs/config/initial-frame-size-x)))
        (add-to-list 'default-frame-alist `(_height . (text-pixels . ,psimacs/config/initial-frame-size-y)))

        (setq psimacs/config/default-frame-creation-strategy "main")
        (message "Switched to main frame creation strategy.")))

(defun psimacs/window/set-frame-creation-strategy-system ()
    "Set the frame layout creation strategy to `system'."
    (interactive)
    (let* ( (primary-monitor (car (display-monitor-attributes-list)))
            (geometry        (assoc 'geometry primary-monitor))
            (_left            0)
            (_top             0)
            (_width           (nth 3 geometry))
            (_height          (nth 4 geometry))
          )
        (setq default-frame-alist (assq-delete-all '_left   default-frame-alist))
        (setq default-frame-alist (assq-delete-all '_top    default-frame-alist))
        (setq default-frame-alist (assq-delete-all '_width  default-frame-alist))
        (setq default-frame-alist (assq-delete-all '_height default-frame-alist))

        (setq psimacs/config/default-frame-creation-strategy "system")
        (message "Switched to system frame creation strategy.")))

(defun psimacs/window/set-frame-creation-strategy ()
    "Apply the current frame creation strategy."
    (interactive)
    (cond ((string= psimacs/config/default-frame-creation-strategy "layout")
           (psimacs/window/set-frame-creation-strategy-layout))
          ((string= psimacs/config/default-frame-creation-strategy "main")
           (psimacs/window/set-frame-creation-strategy-main))
          ((string= psimacs/config/default-frame-creation-strategy "system")
           (psimacs/window/set-frame-creation-strategy-system)))
    )

;;
;; Initialize the frame creation strategy
;;
(unless (daemonp)
    (psimacs/window/set-frame-creation-strategy-layout)
)

;;
;; Prepare for the next frame creation
;;
(add-hook 'after-make-frame-functions
            (lambda (_frame)
                (let* ( (primary-monitor (car (display-monitor-attributes-list)))
                        (geometry        (assoc 'geometry primary-monitor))
                        (_left            0)
                        (_top             0)
                        (_width           (nth 3 geometry))
                        (_height          (nth 4 geometry))
                      )
                    (when (equal psimacs/config/default-frame-creation-strategy "layout")
                      (setq default-frame-alist (assq-delete-all '_left   default-frame-alist))
                      (setq default-frame-alist (assq-delete-all '_top    default-frame-alist))
                      (setq default-frame-alist (assq-delete-all '_width  default-frame-alist))
                      (setq default-frame-alist (assq-delete-all '_height default-frame-alist))

                      (setq psimacs/config/default-frame-placement-counter (+ psimacs/config/default-frame-placement-counter 1))

                      (when (> psimacs/config/default-frame-placement-counter 4)
                        (setq psimacs/config/default-frame-placement-counter 1)
                        )

                      (when (= psimacs/config/default-frame-placement-counter 1)
                        (add-to-list 'default-frame-alist `(_left   . ,psimacs/config/default-frame-1-pos-x))
                        (add-to-list 'default-frame-alist `(_top    . ,psimacs/config/default-frame-1-pos-y))
                        (add-to-list 'default-frame-alist `(_width  . (text-pixels . ,psimacs/config/default-frame-1-size-x)))
                        (add-to-list 'default-frame-alist `(_height . (text-pixels . ,psimacs/config/default-frame-1-size-y)))
                        )

                      (when (= psimacs/config/default-frame-placement-counter 2)
                        (add-to-list 'default-frame-alist `(_left   . ,psimacs/config/default-frame-2-pos-x))
                        (add-to-list 'default-frame-alist `(_top    . ,psimacs/config/default-frame-2-pos-y))
                        (add-to-list 'default-frame-alist `(_width  . (text-pixels . ,psimacs/config/default-frame-2-size-x)))
                        (add-to-list 'default-frame-alist `(_height . (text-pixels . ,psimacs/config/default-frame-2-size-y)))
                        )

                      (when (= psimacs/config/default-frame-placement-counter 3)
                        (add-to-list 'default-frame-alist `(_left   . ,psimacs/config/default-frame-3-pos-x))
                        (add-to-list 'default-frame-alist `(_top    . ,psimacs/config/default-frame-3-pos-y))
                        (add-to-list 'default-frame-alist `(_width  . (text-pixels . ,psimacs/config/default-frame-3-size-x)))
                        (add-to-list 'default-frame-alist `(_height . (text-pixels . ,psimacs/config/default-frame-3-size-y)))
                        )

                      (when (= psimacs/config/default-frame-placement-counter 4)
                        (add-to-list 'default-frame-alist `(_left   . ,psimacs/config/default-frame-4-pos-x))
                        (add-to-list 'default-frame-alist `(_top    . ,psimacs/config/default-frame-4-pos-y))
                        (add-to-list 'default-frame-alist `(_width  . (text-pixels . ,psimacs/config/default-frame-4-size-x)))
                        (add-to-list 'default-frame-alist `(_height . (text-pixels . ,psimacs/config/default-frame-4-size-y)))
                        )
                      ))))

(add-hook 'after-delete-frame-functions
            (lambda (_frame)
                (let* ( (primary-monitor (car (display-monitor-attributes-list)))
                        (geometry        (assoc 'geometry primary-monitor))
                        (_left            0)
                        (_top             0)
                        (_width           (nth 3 geometry))
                        (_height          (nth 4 geometry))
                      )
                    (when (equal psimacs/config/default-frame-creation-strategy "layout")
                      (setq default-frame-alist (assq-delete-all '_left   default-frame-alist))
                      (setq default-frame-alist (assq-delete-all '_top    default-frame-alist))
                      (setq default-frame-alist (assq-delete-all '_width  default-frame-alist))
                      (setq default-frame-alist (assq-delete-all '_height default-frame-alist))

                      (setq psimacs/config/default-frame-placement-counter (- psimacs/config/default-frame-placement-counter 1))

                      (when (< psimacs/config/default-frame-placement-counter 1)
                        (setq psimacs/config/default-frame-placement-counter 1)
                        )

                      (when (= psimacs/config/default-frame-placement-counter 1)
                        (add-to-list 'default-frame-alist `(_left   . ,psimacs/config/default-frame-1-pos-x))
                        (add-to-list 'default-frame-alist `(_top    . ,psimacs/config/default-frame-1-pos-y))
                        (add-to-list 'default-frame-alist `(_width  . (text-pixels . ,psimacs/config/default-frame-1-size-x)))
                        (add-to-list 'default-frame-alist `(_height . (text-pixels . ,psimacs/config/default-frame-1-size-y)))
                        )

                      (when (= psimacs/config/default-frame-placement-counter 2)
                        (add-to-list 'default-frame-alist `(_left   . ,psimacs/config/default-frame-2-pos-x))
                        (add-to-list 'default-frame-alist `(_top    . ,psimacs/config/default-frame-2-pos-y))
                        (add-to-list 'default-frame-alist `(_width  . (text-pixels . ,psimacs/config/default-frame-2-size-x)))
                        (add-to-list 'default-frame-alist `(_height . (text-pixels . ,psimacs/config/default-frame-2-size-y)))
                        )

                      (when (= psimacs/config/default-frame-placement-counter 3)
                        (add-to-list 'default-frame-alist `(_left   . ,psimacs/config/default-frame-3-pos-x))
                        (add-to-list 'default-frame-alist `(_top    . ,psimacs/config/default-frame-3-pos-y))
                        (add-to-list 'default-frame-alist `(_width  . (text-pixels . ,psimacs/config/default-frame-3-size-x)))
                        (add-to-list 'default-frame-alist `(_height . (text-pixels . ,psimacs/config/default-frame-3-size-y)))
                        )

                      (when (= psimacs/config/default-frame-placement-counter 4)
                        (add-to-list 'default-frame-alist `(_left   . ,psimacs/config/default-frame-4-pos-x))
                        (add-to-list 'default-frame-alist `(_top    . ,psimacs/config/default-frame-4-pos-y))
                        (add-to-list 'default-frame-alist `(_width  . (text-pixels . ,psimacs/config/default-frame-4-size-x)))
                        (add-to-list 'default-frame-alist `(_height . (text-pixels . ,psimacs/config/default-frame-4-size-y)))
                        )
                      ))))
#+end_src

** System constants flags

The following boolean constants are defined for convenience.

#+begin_src emacs-lisp :tangle config/init-config-helper.el
;;
;; System constants for convenience
;;
(defconst psimacs/system/is-gui-p              (display-graphic-p)                                 "Are we running on a GUI Emacs?")
(defconst psimacs/system/is-win32-p            (eq system-type 'windows-nt)                        "Are we running on a WinTel system?")
(defconst psimacs/system/is-linux-p            (eq system-type 'gnu/linux)                         "Are we running on a GNU/Linux system?")
(defconst psimacs/system/is-mac-p              (eq system-type 'darwin)                            "Are we running on a Mac system?")
(defconst psimacs/system/is-mac-x-p            (and (display-graphic-p) psimacs/system/is-mac-p)   "Are we running under X on a Mac system?")
(defconst psimacs/system/is-mac-ns-p           (eq window-system 'ns)                              "Are we running on a GNUstep or Macintosh Cocoa display?")
(defconst psimacs/system/is-mac-cocoa-p        (featurep 'cocoa)                                   "Are we running with Cocoa on a Mac system?")
(defconst psimacs/system/is-mac-port-p         (eq window-system 'mac)                             "Are we running a macport build on a Mac system?")
(defconst psimacs/system/is-linux-x-p          (and (display-graphic-p) psimacs/system/is-linux-p) "Are we running under X on a GNU/Linux system?")
(defconst psimacs/system/is-cygwin-p           (eq system-type 'cygwin)                            "Are we running on a Cygwin system?")
(defconst psimacs/system/is-root-p             (string-equal "root" (getenv "USER"))               "Are you using ROOT user?")

(defconst emacs/>=27p (>= emacs-major-version 27) "Emacs is 27 or above.")
(defconst emacs/>=28p (>= emacs-major-version 28) "Emacs is 28 or above.")
(defconst emacs/>=29p (>= emacs-major-version 29) "Emacs is 29 or above.")
(defconst emacs/>=30p (>= emacs-major-version 30) "Emacs is 30 or above.")
(defconst emacs/>=31p (>= emacs-major-version 31) "Emacs is 31 or above.")
(defconst emacs/>=32p (>= emacs-major-version 32) "Emacs is 32 or above.")
#+end_src

** Helper functions for assembling folders and files

Some functions to ease the code.

#+begin_src emacs-lisp :tangle config/init-config-helper.el
;;
;; Helper functions for file and directory handling
;;
(defun psimacs/file-system/concat-directory (dir subdir)
  "Assemble directory DIR and subdirectory SUBDIR to a new directory."
  (expand-file-name (file-name-as-directory (concat (file-name-as-directory dir) subdir)))
  )

(defun psimacs/file-system/concat-file (dir file)
  "Assemble directory DIR and file FILE."
  (expand-file-name (concat (file-name-as-directory dir) file))
  )

(defun psimacs/file-system/prefer-dropbox-directory (dir)
  "Evaluate either to the local or to the dropbox pendant directory.
This functions always prefers DIR on dropbox."
  (let ((local-dir (psimacs/file-system/concat-directory user-emacs-directory dir))
        (dropbox-dir (if psimacs/config/synchronize-at-startup
                         psimacs/config/dropbox-emacs-dir
                       nil))
        )
    (if dropbox-dir
        (psimacs/file-system/concat-directory dropbox-dir dir)
      local-dir)))

(defun psimacs/file-system/copy-files (path pattern destination &optional override override-always)
  "Copy files matching PATTERN in PATH to DESTINATION.

OVERRIDE        : overriding only happens when t
OVERRIDE-ALWAYS : overriding always happens when t and OVERRIDE is also t"
  (when (file-directory-p path)
    (unless (file-exists-p destination)
      (make-directory destination))
    (when (file-directory-p destination)
      (dolist (f (directory-files path t pattern))
        (let ( (new-f (concat destination (file-name-nondirectory f))) )
          (when (or (not (file-exists-p new-f)) (and override (or override-always (file-newer-than-file-p new-f f) )))
            (copy-file f destination t)
        )))))
)

(defun psimacs/file-system/make-directory (dir)
  "Create directory DIR if it does not exists yet. Otherwise do nothing."
    (unless (file-exists-p dir)
      (make-directory dir t))
)
#+end_src

** Helper functions for message printing

Some convenience functions for message printing.

#+begin_src emacs-lisp :tangle config/init-config-helper.el
;;
;; Easy message function for lists
;;
(defun psimacs/config/message-elements-of-list (list)
  "Print each element of LIST to the message buffer on a line of its own."
  (while list
    (message (car list))
    (setq list (cdr list))))
#+end_src

** Helper functions for Info system

Some convenience functions for configuring the Info system.

#+begin_src emacs-lisp :tangle config/init-config-helper.el
;;
;; Add info file
;;
(defun psimacs/config/add-to-info-system (new-info-file new-info-entry info-dir info-file)
  "Add file to Info directory and put Info entry into Info file.

NEW-INFO-FILE  : a new Info file to be added
NEW-INFO-ENTRY : text region to be added to the Info directory file.
INFO-DIR       : destination a directory if NEW-INFO-FILE.
INFO-FILE      : the info directory file into which NEW-INFO-ENTRY will be added."
  (when (and
         (file-exists-p new-info-file)
         (file-directory-p info-dir)
         ;(file-exists-p info-file)
        )
    (let ( (new-info-dst-file (concat info-dir (file-name-nondirectory new-info-file))) )
      (when (or (not (file-exists-p new-info-dst-file)) (file-newer-than-file-p new-info-file new-info-dst-file))
        (copy-file new-info-file new-info-dst-file t)
        (with-temp-buffer (set-buffer-file-coding-system 'utf-8-unix)
                          (insert new-info-entry)
                          (write-region (point-min)
                                        (point-max) info-file t))
       ))))
#+end_src

** Miscellaneous Helper functions

#+begin_src emacs-lisp :tangle config/init-config-helper.el
;;
;; Extract value for a key from a text file
;;
(defun psimacs/config/read-key-value-from-file (key file)
  (with-temp-buffer
    (insert-file-contents file)
    (let ((str (buffer-string)))
      (when (string-match (concat "^" key "[[:space:]]+\\(.*\\)$") str)
        (match-string 1 str)))))
#+end_src

* Configuration constants

In the following various *Psimacs* configuration constants are defined. They are just defined at a central place, but
used only later in the configuration. This section is rather boring. However, I decided to concentrate
all these settings together so that it is easy to lookup or change them.

** Primary directories

This defines the =site-lisp= directory for storing local elisp code and the dependencies directory where non *Emacs*
programs are installed.

#+begin_src emacs-lisp :tangle config/init-constants.el :var file-description="Configuration constants"
;;
;; Directory constants used by Psimacs
;;
(defconst psimacs/config/home-dir (getenv "HOME")
  "The user home directory used by Emacs.")

(defconst psimacs/config/emacs-dir
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-directory invocation-directory "..")
    (psimacs/file-system/concat-directory psimacs/config/home-dir "usr")
  )
  "The installation directory of Emacs.")

(defconst psimacs/config/config-dir
  (psimacs/file-system/concat-directory user-emacs-directory psimacs/config/config-folder)
  "The psimacs config directory.")

(defconst psimacs/config/site-lisp-dir
  (psimacs/file-system/concat-directory user-emacs-directory psimacs/config/site-lisp-folder)
  "The psimacs personal site-lisp directory.")

(defconst psimacs/config/work-lisp-dir
  (psimacs/file-system/concat-directory user-emacs-directory psimacs/config/work-lisp-folder)
  "The psimacs personal work-lisp directory for hacking.")

(defconst psimacs/config/assets-dir
  (psimacs/file-system/concat-directory user-emacs-directory psimacs/config/assets-folder)
  "The psimacs assets directory.")

(defconst psimacs/config/content-dir
  (psimacs/file-system/prefer-dropbox-directory psimacs/config/content-folder)
  "The psimacs top level content directory. This directory is DropBox synchronized.")

(psimacs/file-system/make-directory psimacs/config/content-dir)

(defconst psimacs/config/straight-dir
  (psimacs/file-system/concat-directory user-emacs-directory "straight")
  "The psimacs straight directory.")
#+end_src

** Private directory

*Psimacs* uses some optional private information that should not go public. These data are stored in
the following directory.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Private directory and file might exists; not mandatory.
;;
(defconst psimacs/config/private-dir
  (psimacs/file-system/concat-directory user-emacs-directory psimacs/config/private-folder)
  "A directory that contains non public, i.e.  private data."
  )

(defconst psimacs/config/private-file
  (psimacs/file-system/concat-file psimacs/config/private-dir "init-private.el")
  "A emacs file containig some private data."
  )

(defconst psimacs/config/keys-file
  (psimacs/file-system/concat-file psimacs/config/private-dir "keys.txt")
  "A text file with some keys in it."
  )
#+end_src

** Logos and the like

This defines some logos and images that are used to give *Psimacs* a good look.

#+begin_src emacs-lisp :tangle config/init-constants.el :var file-description="Configuration constants"
;;
;; Logos and the like
;;
(defconst psimacs/config/logo-file-private
  (psimacs/file-system/concat-file psimacs/config/private-dir "psimacs.png")
  "The psimacs logo image.")

(defconst psimacs/config/logo-file
  (if (file-exists-p psimacs/config/logo-file-private)
    psimacs/config/logo-file-private
      (psimacs/file-system/concat-file psimacs/config/assets-dir "emacs.png")
  )
  "The psimacs logo image.")

(defconst psimacs/config/homepage
  "https://github.com/hatlafax/psimacs"
  "The Github page of Psimacs.")
#+end_src

** Tools directory

The tools directory contains non *Emacs* / *Lisp* tools, that are not readily available, but are important for
*Psimacs* configuration. For instance =msys64= is needed by *Psimacs* but an appropriate installation can be provided
by resources from the web. Therefore =msys64= is not found in tools. Goal is it that the =psimacs/config/tools-dir=
is empty.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Installation of 'personal' tools
;;
(defconst psimacs/config/tools-dir
  (psimacs/file-system/concat-directory psimacs/config/site-lisp-dir "tools")
  "The psimac personal tools directory.")
#+end_src

** System resources directory

Many dependencies exists to external programs that are used by *Psimacs*. On default most of them are expected
to be installed in the =psimacs/config/system-utils-dir=. For each tool that *Psimacs* expects a detailed installation
recipe is provided.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Installation of system wide utilities and resources
;;
(defconst psimacs/config/system-utils-dir
  (psimacs/file-system/concat-directory psimacs/config/home-dir "psimacs")
  "The psimac system resources and utility directory.")
#+end_src

Screenshot directory used by the system:

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Installation of system wide utilities and resources
;;
(defconst psimacs/config/system-screenshot-dir
  (cond (psimacs/system/is-win32-p "c:/utils/images")
        (psimacs/system/is-linux-p (psimacs/file-system/concat-directory psimacs/config/home-dir "Pictures/Screenshots"))
        (t nil)
  )
  "The system image directory used for screenshots.")
#+end_src

** HTML documentation

*Psimacs* provides two HTML documents. At first the HTML exported =init.org= file, which provides the full detailed
information about *Psimacs*. Secondly, an extract of the =init.org= file that does only contain the text and keybinding
tables but no elsips code.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Installation of system wide utilities and resources
;;
(defconst psimacs/config/docs-dir
    (psimacs/file-system/concat-directory user-emacs-directory psimacs/config/docs-folder)
    "The HTML documentation directory.")

(defconst psimacs/config/init-html-file
    (psimacs/file-system/concat-file psimacs/config/docs-dir psimacs/config/main-html-file-name)
    "The HTML exported configuration file.")

(defconst psimacs/config/keybindings-html-file
    (psimacs/file-system/concat-file psimacs/config/docs-dir psimacs/config/keybindings-html-file-name)
    "The HTML exported keybindings file.")
#+end_src

** Emacs Info directory

*Emacs* primary Info directory.

#+begin_src emacs-lisp :tangle config/init-constants.el :var file-description="Configuration constants"
;;
;; The primary Info directory
;;
(defconst psimacs/config/emacs-info-dir
  (let ((info-dir (psimacs/file-system/concat-directory psimacs/config/emacs-dir "share/info") ))
    (psimacs/file-system/make-directory info-dir)
    info-dir
  )
  "The primary Info directory of Emacs."
)

(defconst psimacs/config/emacs-info-file
    (psimacs/file-system/concat-file psimacs/config/emacs-info-dir "dir")
    "The psimacs primary Emacs Info file.")
#+end_src

** Backup constants

*Psimacs* supports the creation of backup files.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for backups
;;
(defconst psimacs/config/backup-root-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "backups")
  "The psimacs backup root directory.")

(defconst psimacs/config/backup-dir
  (psimacs/file-system/concat-directory psimacs/config/backup-root-dir "computer")
  "The psimacs backup directory.")

(defconst psimacs/config/backup-max-number-files 36
  "The psimacs maximal number of tracked backup files.")
#+end_src

** Auto saving

Auto saving is performed by *Psimacs* a lot.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for auto saving
;;
(defconst psimacs/config/auto-save-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "auto-save")
  "The psimacs auto save directory.")
#+end_src

** Dirvish

The directory [[https://github.com/alexluigit/dirvish][dirvish]] stores its runtime files.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for dirvish
;;
(defconst psimacs/config/dirvish-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "dirvish")
  "The psimacs dirvish directory.")
#+end_src

** Bookmarking

*Psimacs* uses the [[https://github.com/joodland/bm][Visible bookmarks in buffer (bm)]] for bookmarking.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for bookmarking
;;
(defconst psimacs/config/bookmarks-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "bm")
  "The psimacs bookmarks directory.")

(defconst psimacs/config/bm-bookmarks-file
  (psimacs/file-system/concat-file psimacs/config/bookmarks-dir ".bm-bookmarks")
  "The psimacs bm bookmarks file.")
#+end_src

Additionally the vanilla bookmark mode file is also defined in the =psimacs/config/session-dir=.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for bookmarking
;;
(defconst psimacs/config/bookmarks-file
  (psimacs/file-system/concat-file psimacs/config/bookmarks-dir ".bookmarks")
  "The psimacs bookmarks file.")
#+end_src

** Multiple Cursors

*Psimacs* supports package [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]. This package
uses a file that tracks two lists of commands: the run-once list and the run-for-all list. The package
ask for some commands whether they are belonging to the first or second list, respectively.
The following constant defines the file path for this command tracking file.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for multiple-cursors
;;
(defconst psimacs/config/multiple-cursor-file
  (psimacs/file-system/concat-file psimacs/config/session-dir ".mc-lists.el")
  "The psimacs multiple-cursor command tracking file.")
#+end_src

** Tramp

To avoid the tramp history file to appear in the configuration root directory, we set the =tramp-persistency-file-name=
variable.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Tramp history file
;;
(defconst psimacs/config/tramp-persistency-file-name
  (psimacs/file-system/concat-file psimacs/config/session-dir ".tramp")
  "The psimacs tramp history file.")
#+end_src

** Abbreviations

*Psimacs uses the default *Emacs* [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html][abbreviation]] facility.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for abbreviations
;;
(defconst psimacs/config/abbrev-file
  (psimacs/file-system/concat-file psimacs/config/session-dir ".abbreviations")
  "The psimacs abbreviation file.")
#+end_src

** Completion

Some *Psimacs* constants related to the completion system.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for abbreviations
;;
(defconst psimacs/config/company-statistics-file
  (psimacs/file-system/concat-file psimacs/config/session-dir ".company-statistics")
  "The psimacs company statistics file.")
#+end_src

** Else Mode constants

Template =.lse=-files of the [[https://github.com/peter-milliken/ELSE][Emacs Language Sensitive Editor (ELSE)]] mode.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for else-mode
;;
(defconst psimacs/config/else-lse-pkg-dir
  (psimacs/file-system/concat-directory psimacs/config/site-lisp-dir "else-pkg")
  "The psimacs else package directory.")

(defconst psimacs/config/else-lse-dir
  (psimacs/file-system/concat-directory psimacs/config/site-lisp-dir "else")
  "The psimacs else directory.")

(defconst psimacs/config/else-esl-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "else")
  "The psimacs else esl directory.")

(defconst psimacs/config/else-extension-dir
  (psimacs/file-system/concat-directory psimacs/config/else-lse-dir "extensions")
  "The psimacs else extension directory.")

(defconst psimacs/config/else-python-dir
  (psimacs/file-system/concat-directory psimacs/config/else-lse-dir "python")
  "The psimacs else python directory.")

(defconst psimacs/config/else-mako-template-dir
  (psimacs/file-system/concat-directory psimacs/config/else-python-dir "mako")
  "The psimacs else python mako template directory.")

(defconst psimacs/config/else-grammar-compiler-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "ELSE-grammar-compiler")
  "The psimacs ELSE grammar compiler directory.")

(defconst psimacs/config/else-grammar-compiler-out-dir
  (psimacs/file-system/concat-directory psimacs/config/else-grammar-compiler-dir "out")
  "The psimacs ELSE grammar compiler output directory.")

(defconst psimacs/config/else-grammar-compiler-py
  (psimacs/file-system/concat-file psimacs/config/else-grammar-compiler-dir "Antlr4ToElseCompiler.py")
  "The psimacs ELSE grammar compiler python programm.")

(defconst psimacs/config/ebnf-convert-dir
  (psimacs/file-system/concat-directory psimacs/config/else-grammar-compiler-dir "tools/ebnf-convert")
  "The psimacs ebnf grammar converter directory.")

(defconst psimacs/config/ebnf-railroad-dir
  (psimacs/file-system/concat-directory psimacs/config/else-grammar-compiler-dir "tools/railroad")
  "The psimacs ebnf railroad directory.")

(defconst psimacs/config/ebnf-convert-jar-file
  (psimacs/file-system/concat-file psimacs/config/ebnf-convert-dir "ebnf-convert.war")
  "The psimacs ebnf grammar converter jar file.")

(defconst psimacs/config/ebnf-railroad-jar-file
  (psimacs/file-system/concat-file psimacs/config/ebnf-railroad-dir "rr.war")
  "The psimacs ebnf railroad jar file.")
#+end_src

** Emacs client/server

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][Client/Server]] support for *Psimacs*. We use the default /server/ directory. Since we allow multiple
*Emacs* configurations side by side, we must either set the global environment variable =EMACS_SERVER_FILE=
to the correct server file, or we must call *emacsclient* with option =-f server-file=.

*Psimacs* handles that in the following way:
- *Psimacs* uses the =EMACS_SERVER_FILE=
- If at startup a =EMACS_SERVER_FILE= if already defined in the environment and it does not correspond to
  the current configuration, =EMACS_SERVER_FILE= is not modified and the //*Emacs server*/ is not started.
- If the =EMACS_SERVER_FILE= is not defined, or it points to a non existing file, it is set to the
  current configuration's /server-file/ in the user environment.
  Additionally, a =kill-emacs-hook= is set up that removes the environment variable on exit of the *Emacs* session.

References:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][Using Emacs as a Server]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/TCP-Emacs-server.html#TCP-Emacs-server][TCP Emacs server]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/emacsclient-Options.html][*emacsclient* Options]]

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for client/server storage
;;
(defconst psimacs/config/server-dir
  (psimacs/file-system/concat-directory user-emacs-directory "server")
  "The psimacs server directory.")

(defconst psimacs/config/server-file
  (psimacs/file-system/concat-file psimacs/config/server-dir "server")
  "The psimacs server file.")


;;
;; ToDo: this should go to the server setup code below
;;
(defvar psimacs/config/found-server-file
   (getenv "EMACS_SERVER_FILE")
   "The active server file.")

(when (and psimacs/system/is-win32-p
            (or (not psimacs/config/found-server-file)
                (not (file-exists-p psimacs/config/found-server-file))
                (equal psimacs/config/found-server-file psimacs/config/server-file)))
   (start-process "SETX" nil "setx" "EMACS_SERVER_FILE" psimacs/config/server-file)
   (add-hook 'kill-emacs-hook
             (lambda ()
               (call-process "reg.exe" nil nil nil "delete" "HKCU\\Environment" "/v" "EMACS_SERVER_FILE" "/f"))))
#+end_src

** Org-Mode and agenda files

Quoting [[http://cachestocaches.com/2016/9/my-workflow-org-agenda/][My Workflow with Org-Agenda]]:
#+begin_quote
The agenda view scans your =.org= files (set by customizing the org-agenda-files variable) and collects all of the
headings with a TODO (or related) keyword. Without the agenda view, keeping track of projects, which I ensure are
top-level TODO items, is difficult. The agenda provides a convenient way of tracking your projects and managing
your calendar.
#+end_quote


#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Org-Persist caching directory
;;
(defconst psimacs/config/org-persisit-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "org-persist")
  "The psimacs org mode persist directory.")

;;
;; Org files directory
;;
(defconst psimacs/config/org-content-dir
  (psimacs/file-system/concat-directory psimacs/config/content-dir "org")
  "The psimacs org mode content directory.")

(psimacs/file-system/make-directory psimacs/config/org-content-dir)

;;
;; Org-Roam-Notes directory
;;
(defconst psimacs/config/roam-notes-dir
  (psimacs/file-system/concat-directory psimacs/config/org-content-dir "roam")
    "The psimacs org roam-notes directory.")

(psimacs/file-system/make-directory psimacs/config/roam-notes-dir)

(psimacs/file-system/make-directory (psimacs/file-system/concat-directory psimacs/config/roam-notes-dir "articles"))
(psimacs/file-system/make-directory (psimacs/file-system/concat-directory psimacs/config/roam-notes-dir "cortex"))
(psimacs/file-system/make-directory (psimacs/file-system/concat-directory psimacs/config/roam-notes-dir "dailies"))
(psimacs/file-system/make-directory (psimacs/file-system/concat-directory psimacs/config/roam-notes-dir "faq"))
(psimacs/file-system/make-directory (psimacs/file-system/concat-directory psimacs/config/roam-notes-dir "projects"))
(psimacs/file-system/make-directory (psimacs/file-system/concat-directory psimacs/config/roam-notes-dir "references"))
(psimacs/file-system/make-directory (psimacs/file-system/concat-directory psimacs/config/roam-notes-dir "research"))
(psimacs/file-system/make-directory (psimacs/file-system/concat-directory psimacs/config/roam-notes-dir "notebooks"))
(psimacs/file-system/make-directory (psimacs/file-system/concat-directory psimacs/config/roam-notes-dir "books"))
(psimacs/file-system/make-directory (psimacs/file-system/concat-directory psimacs/config/roam-notes-dir "cookbooks"))

(defconst psimacs/config/roam-templates-dir
    (psimacs/file-system/concat-directory psimacs/config/site-lisp-dir "roam-templates")
    "The psimacs org roam capture template directory.")

(defconst psimacs/config/roam-session-dir
    (psimacs/file-system/concat-directory psimacs/config/session-dir "org-roam")
    "The psimacs org roam session directory.")

(defconst psimacs/config/roam-db-file
    (psimacs/file-system/concat-file psimacs/config/roam-session-dir "org-roam.db")
    "The psimacs org roam database.")

;;
;; Org-Agenda directory
;;
(defconst psimacs/config/agenda-dir
    (psimacs/file-system/concat-directory psimacs/config/org-content-dir "agenda")
    "The psimacs org agenda directory.")

(psimacs/file-system/make-directory psimacs/config/agenda-dir)

(defconst psimacs/config/org-id-file
    (psimacs/file-system/concat-file psimacs/config/agenda-dir ".org-id-locations")
    "The psimacs org id locations file.")

;;
;; Diary files
;;
(defcustom psimacs/config/org-capture-coding-diary-file "DiaryCoding.org"
    "The diary file for capturing coding points."
  :group 'org-capture
  :type 'string)

(defcustom psimacs/config/org-capture-coding-diary-files
    '(
        "Diary.org"
        "DiaryCpp.org"
        "DiaryJavascript.org"
        "DiaryEmacs.org"
        "DiaryLaTeX.org"
        "DiaryNodejs.org"
        "DiaryOrg.org"
        "DiaryPython.org"
    )
    "The list of supported diary files for capturing coding points."
  :group 'org-capture
  :type 'string)


(defconst psimacs/config/libre-office-exe
  (if psimacs/system/is-win32-p
      "C:\\Program Files\\LibreOffice\\program\\soffice.exe"
    "soffice")
    "The otd to docx converter of the LibreOffice suite.")
#+end_src

** Bibliopgraphy directory

The place, preferably on [[https://www.dropbox.com/][Dropbox]], where my bibliography notes are stored.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Bibliography directory
;;
(defconst psimacs/config/bibliography-dir
  (psimacs/file-system/concat-directory psimacs/config/content-dir "bibliography")
    "The psimacs bibliography directory.")

(psimacs/file-system/make-directory psimacs/config/bibliography-dir)
(psimacs/file-system/make-directory (psimacs/file-system/concat-directory psimacs/config/bibliography-dir "pdf"))
(psimacs/file-system/make-directory (psimacs/file-system/concat-directory psimacs/config/bibliography-dir "notes"))

;;
;; Citation Style Language direcotry
;;
(defconst psimacs/config/org-cite-csl-styles-dir
  (psimacs/file-system/concat-directory psimacs/config/bibliography-dir "csl")
  "The psimacs org mode cite csl style directory.")
#+end_src

** Recent files

Constants that relate to recent file management.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Recent file constants
;;
(defconst psimacs/config/recent-file
    (psimacs/file-system/concat-file psimacs/config/session-dir ".recentf")
    "The psimacs recent file.")
#+end_src

** History

Configuration constants for saving the history.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Save history management
;;
(defconst psimacs/config/history-file
    (psimacs/file-system/concat-file psimacs/config/session-dir ".history")
    "The psimacs history file.")
#+end_src

** Save-Places

Save place allows store the current cursor position for the next session.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Save cursor positions for the next session
;;
(defconst psimacs/config/save-places-file
    (psimacs/file-system/concat-file psimacs/config/session-dir ".save-places")
    "The psimacs save places file.")
#+end_src

** StackExchange utilization

Cache directory of the package [[https://github.com/vermiculus/sx.el][sx]] that utilizes working with the StackExchange service.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Cache directory of the package sx.
;;
(defconst psimacs/config/sx-cache-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir ".sx")
  "The psimacs sx cache directory.")
#+end_src

** The custom.el file.

The =custom.el= file contains customizations by the user. This file is not synchronized with the /Dropbox/
repository.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; The custom.el file. This file gets not be synchronized
;;
(defconst psimacs/config/custom-file
    (psimacs/file-system/concat-file user-emacs-directory psimacs/config/custom-file-name)
    "The psimacs customization file.")
#+end_src

** Eshell

Cache directory of package eshell.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Cache directory of the package eshell.
;;
(defconst psimacs/config/eshell-cache-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "eshell")
  "The psimacs eshell cache directory.")
#+end_src

Reference:
- [[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][Mastering Eshell]]

** MSYS2

[[https://www.msys2.org/][MSYS2]] is software distribution and a building platform for Windows.
It provides a Unix-like environment, a command-line interface and a software repository making
it easier to install, use, build and port software on Windows.

It is an independent rewrite of MSys, based on modern Cygwin (POSIX compatibility layer) and
MinGW-w64 with the aim of better interoperability with native Windows software.

*Psimacs* uses a lot of external programs provided by the [[https://www.msys2.org/][MSYS2]] framework.
[[https://www.msys2.org/][MSYS2]] is a collection of tools and libraries providing you with an
easy-to-use environment for building, installing and running native Windows software.

Download the [[https://www.msys2.org/#installation][installer]] for the [[https://www.msys2.org/][MSYS2]] framework and follow the installation instructions. Install into folder
=c:/utils/msys64= which is the default for *Psimacs*. The installation does not need to be entered in the system path
environment. *Psimacs* handles a proper executable path internally. After finishing the base installation some packages
must be installed with the [[https://www.msys2.org/][MSYS2]] package manager /pacman/. For that, open the =MSYS2 MinGW 64-bit= terminal and execute
the following commands:

Remarks:
- In order to get the Windows environment exported to a [[https://www.msys2.org/][MSYS2]] bash shell, you need to change one line in
  file =msys2-shell.cmd= which resides in the root of the [[https://www.msys2.org/][MSYS2]] installation. You will find a commented lines
  =rem set MSYS2_PATH_TYPE=inherit=, which should be =set MSYS2_PATH_TYPE=inherit= if you like to see the Windows
  environment as defined by the Windows =Path= variables.

*** Packages

#+begin_example
pacman -Syu
pacman -Su
pacman -S git
pacman -S zip
pacman -S unzip
pacman -S winpty
pacman -S base-devel
pacman -S compression
pacman -S mingw-w64-x86_64-python
pacman -S mingw-w64-x86_64-python-distlib
pacman -S mingw-w64-x86_64-python-setuptools
pacman -S mingw-w64-x86_64-python-pip
pacman -S mingw-w64-x86_64-make
pacman -S mingw-w64-x86_64-toolchain
pacman -S mingw-w64-x86_64-zlib
pacman -S mingw-w64-x86_64-libpng
pacman -S mingw-w64-x86_64-poppler
pacman -S mingw-w64-x86_64-imagemagick
pacman -S mingw-w64-x86_64-cmake
pacman -S mingw-w64-x86_64-qt5
pacman -S mingw-w64-x86_64-toolchain
pacman -S mingw-w64-x86_64-ninja
pacman -S mingw-w64-x86_64-clang
pacman -S mingw-w64-x86_64-clang-analyzer
pacman -S mingw-w64-x86_64-clang-tools-extra
pacman -S mingw-w64-x86_64-compiler-rt
pacman -S mingw-w64-x86_64-libblocksruntime
pacman -S mingw-w64-x86_64-openblas
pacman -S mingw-w64-x86_64-boost
pacman -S mingw-w64-x86_64-eigen3
pacman -S mingw-w64-x86_64-zeromq
pacman -S mingw-w64-x86_64-pkg-config
pacman -S mingw-w64-x86_64-doxygen
pacman -S mingw-w64-x86_64-graphviz
pacman -S mingw-w64-x86_64-glm
pacman -S mingw-w64-x86_64-hunspell
pacman -S mingw-w64-x86_64-hunspell-en
pacman -S mingw-w64-x86_64-aspell
pacman -S mingw-w64-x86_64-aspell-de
pacman -S mingw-w64-x86_64-aspell-en
pacman -S mingw-w64-x86_64-gnutls
pacman -S mingw-w64-x86_64-tcl
pacman -S mingw-w64-x86_64-tk
pacman -S mingw-w64-x86_64-ntldd-git
pacman -S mingw-w64-clang-x86_64-ntldd-git
pacman -S mingw-w64-x86_64-hugo
pacman -S mingw-w64-x86_64-emacs-pdf-tools-server
pacman -S mingw-w64-x86_64-ripgrep
pacman -S mingw-w64-x86_64-fd
pacman -S mingw-w64-x86_64-ffmpeg
#+end_example

Some of the packages are not really required but I use them and I would like to memorize my installation procedure
here. So, feel free to only install the packages you require.

Pacman queries the local package database with the =-Q= flag, the sync database with the =-S= flag and the files
database with the =-F= flag. See =pacman -Q --help=, =pacman -S --help= and =pacman -F --help= for the respective
suboptions of each flag.

Most important commands taken from
- [[https://www.msys2.org/docs/package-management/][MSYS2 Package Management]]

| Command              | Description                                                                                                                                      |
|----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|
| =pacman -Syu=          | Synchronizes the repository databases and updates the system's packages, excluding "local" packages that are not in the configured repositories. |
| =pacman -Syuu=         | Synchronizes the repository databases and updates packages. Repeat this step until it says there are no packages to update.                      |
|----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|
| =pacman -S <name>=     | Install package.                                                                                                                                 |
| =pacman -R <name>=     | Uninstall package.                                                                                                                               |
|----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|
| =pacman -Q --help=     | Get help about the sub options for local package database access.                                                                                |
| =pacman -S --help=     | Get help about the sub options for sync database access.                                                                                         |
| =pacman -F --help=     | Get help about the sub options for files database access.                                                                                        |
|----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|
| =pacman -Ss <string>=  | Search for packages in the database, searching both in packages' names and descriptions.                                                         |
| =pacman -Qs <string>=  | To search for already installed packages.                                                                                                        |
| =pacman -F  <string>=  | To search for package file names in remote packages                                                                                              |
|----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|
| =pacman -Si <package>= | To display extensive information about a given package.                                                                                          |
| =pacman -Qi <package>= | For locally installed packages.                                                                                                                  |
| =pacman -Qe <package>= | To retrieve a list of all installed packages.                                                                                                    |
| =pacman -Ql <package>= | To retrieve a list of the files installed by a package.                                                                                          |
|----------------------+--------------------------------------------------------------------------------------------------------------------------------------------------|

*** Installed msys2/mingw64 packages

The following is the list of my currently installed packages. It is generated with the command =pacman -Qe=.
I will update this list from time to time. However, not all of these installed packages are related to *Psimacs*.
This list just what is currently installed on my system.

#+begin_example
asciidoc 10.2.0-3
autoconf-wrapper 20221207-1
autoconf2.13 2.13-5
autogen 5.18.16-4
automake-wrapper 20221207-1
automake1.11 1.11.6-6
automake1.12 1.12.6-6
automake1.13 1.13.4-7
automake1.14 1.14.1-6
automake1.15 1.15.1-4
automake1.16 1.16.5-1
base 2022.06-1
base-devel 2022.12-2
bison 3.8.2-4
btyacc 20221106-1
diffstat 1.65-1
diffutils 3.8-4
dos2unix 7.4.4-1
flex 2.6.4-3
gdb 11.1-6
gettext-devel 0.21-2
git 2.39.2-1
gperf 3.1-5
groff 1.22.4-4
help2man 1.49.2-1
intltool 0.51.0-3
liblzo2 2.10-2
libtool 2.4.7-3
libunrar 6.2.2-1
libunrar-devel 6.2.2-1
lzop 1.04-1
m4 1.4.19-2
make 4.4-1
man-db 2.10.2-3
mercurial 6.3.2-1
mingw-w64-clang-x86_64-boost 1.81.0-6
mingw-w64-clang-x86_64-cgal 5.5.2-1
mingw-w64-clang-x86_64-clang 15.0.7-3
mingw-w64-clang-x86_64-clang-analyzer 15.0.7-3
mingw-w64-clang-x86_64-clang-tools-extra 15.0.7-3
mingw-w64-clang-x86_64-compiler-rt 15.0.7-3
mingw-w64-clang-x86_64-crt-git 10.0.0.r234.g283e5b23a-1
mingw-w64-clang-x86_64-fox 1.6.57-4
mingw-w64-clang-x86_64-git-repo 0.4.20-2
mingw-w64-clang-x86_64-glfw 3.3.8-2
mingw-w64-clang-x86_64-glm 0.9.9.8-2
mingw-w64-clang-x86_64-headers-git 10.0.0.r234.g283e5b23a-1
mingw-w64-clang-x86_64-libmangle-git 10.0.0.r234.g283e5b23a-1
mingw-w64-clang-x86_64-libwinpthread-git 10.0.0.r234.g283e5b23a-1
mingw-w64-clang-x86_64-lld 15.0.7-3
mingw-w64-clang-x86_64-lldb 15.0.7-2
mingw-w64-clang-x86_64-llvm 15.0.7-3
mingw-w64-clang-x86_64-make 4.4-2
mingw-w64-clang-x86_64-mlir 15.0.7-2
mingw-w64-clang-x86_64-ntldd-git r19.7fb9365-2
mingw-w64-clang-x86_64-openmp 15.0.7-3
mingw-w64-clang-x86_64-pkgconf 1~1.8.0-2
mingw-w64-clang-x86_64-polly 15.0.7-2
mingw-w64-clang-x86_64-qt6-3d 6.4.2-1
mingw-w64-clang-x86_64-qt6-3d-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-5compat 6.4.2-1
mingw-w64-clang-x86_64-qt6-5compat-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-activeqt 6.4.2-1
mingw-w64-clang-x86_64-qt6-activeqt-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-base 6.4.2-5
mingw-w64-clang-x86_64-qt6-base-debug 6.4.2-5
mingw-w64-clang-x86_64-qt6-charts 6.4.2-1
mingw-w64-clang-x86_64-qt6-charts-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-connectivity 6.4.2-1
mingw-w64-clang-x86_64-qt6-connectivity-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-datavis3d 6.4.2-1
mingw-w64-clang-x86_64-qt6-datavis3d-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-declarative 6.4.2-1
mingw-w64-clang-x86_64-qt6-declarative-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-doc 6.4.1-1
mingw-w64-clang-x86_64-qt6-imageformats 6.4.2-1
mingw-w64-clang-x86_64-qt6-imageformats-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-lottie 6.4.2-1
mingw-w64-clang-x86_64-qt6-lottie-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-multimedia 6.4.2-2
mingw-w64-clang-x86_64-qt6-multimedia-debug 6.4.2-2
mingw-w64-clang-x86_64-qt6-networkauth 6.4.2-1
mingw-w64-clang-x86_64-qt6-networkauth-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-positioning 6.4.2-1
mingw-w64-clang-x86_64-qt6-positioning-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-quick3d 6.4.2-1
mingw-w64-clang-x86_64-qt6-quick3d-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-quicktimeline 6.4.2-1
mingw-w64-clang-x86_64-qt6-quicktimeline-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-remoteobjects 6.4.2-1
mingw-w64-clang-x86_64-qt6-remoteobjects-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-scxml 6.4.2-1
mingw-w64-clang-x86_64-qt6-scxml-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-sensors 6.4.2-1
mingw-w64-clang-x86_64-qt6-sensors-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-serialbus 6.4.2-1
mingw-w64-clang-x86_64-qt6-serialbus-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-serialport 6.4.2-1
mingw-w64-clang-x86_64-qt6-serialport-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-shadertools 6.4.2-1
mingw-w64-clang-x86_64-qt6-shadertools-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-svg 6.4.2-1
mingw-w64-clang-x86_64-qt6-svg-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-tools 6.4.2-1
mingw-w64-clang-x86_64-qt6-tools-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-translations 6.4.2-1
mingw-w64-clang-x86_64-qt6-virtualkeyboard 6.4.2-1
mingw-w64-clang-x86_64-qt6-virtualkeyboard-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-webchannel 6.4.2-1
mingw-w64-clang-x86_64-qt6-webchannel-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-websockets 6.4.2-1
mingw-w64-clang-x86_64-qt6-websockets-debug 6.4.2-1
mingw-w64-clang-x86_64-qt6-webview 6.4.2-1
mingw-w64-clang-x86_64-qt6-webview-debug 6.4.2-1
mingw-w64-clang-x86_64-spirv-headers 1~1.3.239.0-1
mingw-w64-clang-x86_64-spirv-tools 2023.1-1
mingw-w64-clang-x86_64-tools-git 10.0.0.r234.g283e5b23a-1
mingw-w64-clang-x86_64-vulkan-headers 1.3.242-1
mingw-w64-clang-x86_64-vulkan-loader 1.3.242-1
mingw-w64-clang-x86_64-vulkan-validation-layers 1.3.242-1
mingw-w64-clang-x86_64-winpthreads-git 10.0.0.r234.g283e5b23a-1
mingw-w64-clang-x86_64-winstorecompat-git 10.0.0.r234.g283e5b23a-1
mingw-w64-ucrt-x86_64-aspell 0.60.8-2
mingw-w64-ucrt-x86_64-aspell-de 20161207-2
mingw-w64-ucrt-x86_64-aspell-en 2020.12.07-1
mingw-w64-ucrt-x86_64-boost 1.81.0-6
mingw-w64-ucrt-x86_64-cgal 5.5.2-1
mingw-w64-ucrt-x86_64-clang-analyzer 15.0.7-3
mingw-w64-ucrt-x86_64-clang-tools-extra 15.0.7-3
mingw-w64-ucrt-x86_64-cmake 3.25.2-1
mingw-w64-ucrt-x86_64-compiler-rt 15.0.7-3
mingw-w64-ucrt-x86_64-crt-git 10.0.0.r234.g283e5b23a-1
mingw-w64-ucrt-x86_64-doxygen 1.9.6-2
mingw-w64-ucrt-x86_64-eigen3 3.4.0-1
mingw-w64-ucrt-x86_64-emacs-pdf-tools-server 1.0.0-1
mingw-w64-ucrt-x86_64-fd 8.7.0-1
mingw-w64-ucrt-x86_64-ffmpeg 5.1.2-3
mingw-w64-ucrt-x86_64-fox 1.6.57-4
mingw-w64-ucrt-x86_64-gcc-ada 12.2.0-10
mingw-w64-ucrt-x86_64-gcc-fortran 12.2.0-10
mingw-w64-ucrt-x86_64-gcc-libgfortran 12.2.0-10
mingw-w64-ucrt-x86_64-gcc-objc 12.2.0-10
mingw-w64-ucrt-x86_64-gdb 13.1-3
mingw-w64-ucrt-x86_64-gdb-multiarch 13.1-3
mingw-w64-ucrt-x86_64-git-repo 0.4.20-2
mingw-w64-ucrt-x86_64-glfw 3.3.8-2
mingw-w64-ucrt-x86_64-glm 0.9.9.8-2
mingw-w64-ucrt-x86_64-gnutls 3.8.0-1
mingw-w64-ucrt-x86_64-graphviz 2.44.1-12
mingw-w64-ucrt-x86_64-headers-git 10.0.0.r234.g283e5b23a-1
mingw-w64-ucrt-x86_64-hugo 0.111.1-1
mingw-w64-ucrt-x86_64-hunspell 1.7.2-1
mingw-w64-ucrt-x86_64-hunspell-en 2020.12.07-1
mingw-w64-ucrt-x86_64-imagemagick 7.1.0.62-1
mingw-w64-ucrt-x86_64-inkscape 1.2.2-2
mingw-w64-ucrt-x86_64-libblocksruntime 0.4.1-1
mingw-w64-ucrt-x86_64-libgccjit 12.2.0-10
mingw-w64-ucrt-x86_64-libmangle-git 10.0.0.r234.g283e5b23a-1
mingw-w64-ucrt-x86_64-libwinpthread-git 10.0.0.r234.g283e5b23a-1
mingw-w64-ucrt-x86_64-lld 15.0.7-3
mingw-w64-ucrt-x86_64-lldb 15.0.7-2
mingw-w64-ucrt-x86_64-llvm 15.0.7-3
mingw-w64-ucrt-x86_64-make 4.4-2
mingw-w64-ucrt-x86_64-meld3 3.22.0-1
mingw-w64-ucrt-x86_64-mlir 15.0.7-2
mingw-w64-ucrt-x86_64-ninja 1.11.1-3
mingw-w64-ucrt-x86_64-ntldd-git r19.7fb9365-2
mingw-w64-ucrt-x86_64-openblas 0.3.21-7
mingw-w64-ucrt-x86_64-openmp 15.0.7-3
mingw-w64-ucrt-x86_64-pkgconf 1~1.8.0-2
mingw-w64-ucrt-x86_64-polly 15.0.7-2
mingw-w64-ucrt-x86_64-python-pip 23.0.1-1
mingw-w64-ucrt-x86_64-qt5-3d 5.15.8-3
mingw-w64-ucrt-x86_64-qt5-activeqt 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-base 5.15.8+kde+r181-1
mingw-w64-ucrt-x86_64-qt5-charts 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-connectivity 5.15.8+kde+r5-1
mingw-w64-ucrt-x86_64-qt5-datavis3d 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-declarative 5.15.8+kde+r21-1
mingw-w64-ucrt-x86_64-qt5-doc 5.15.5-1
mingw-w64-ucrt-x86_64-qt5-gamepad 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-graphicaleffects 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-imageformats 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-location 5.15.8+kde+r3-1
mingw-w64-ucrt-x86_64-qt5-lottie 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-multimedia 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-networkauth 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-purchasing 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-quick3d 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-quickcontrols 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-quickcontrols2 5.15.8+kde+r7-1
mingw-w64-ucrt-x86_64-qt5-quicktimeline 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-remoteobjects 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-script 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-scxml 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-sensors 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-serialbus 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-serialport 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-speech 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-svg 5.15.8+kde+r8-1
mingw-w64-ucrt-x86_64-qt5-tools 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-translations 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-virtualkeyboard 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-webchannel 5.15.8+kde+r3-1
mingw-w64-ucrt-x86_64-qt5-webglplugin 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-websockets 5.15.8+kde+r2-1
mingw-w64-ucrt-x86_64-qt5-webview 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-winextras 5.15.8-1
mingw-w64-ucrt-x86_64-qt5-xmlpatterns 5.15.8-1
mingw-w64-ucrt-x86_64-qt6-3d 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-3d-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-5compat 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-5compat-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-activeqt 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-activeqt-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-base 6.4.2-5
mingw-w64-ucrt-x86_64-qt6-base-debug 6.4.2-5
mingw-w64-ucrt-x86_64-qt6-charts 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-charts-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-connectivity 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-connectivity-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-datavis3d 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-datavis3d-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-declarative 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-declarative-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-doc 6.4.1-1
mingw-w64-ucrt-x86_64-qt6-imageformats 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-imageformats-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-lottie 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-lottie-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-multimedia 6.4.2-2
mingw-w64-ucrt-x86_64-qt6-multimedia-debug 6.4.2-2
mingw-w64-ucrt-x86_64-qt6-networkauth 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-networkauth-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-positioning 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-positioning-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-quick3d 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-quick3d-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-quicktimeline 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-quicktimeline-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-remoteobjects 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-remoteobjects-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-scxml 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-scxml-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-sensors 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-sensors-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-serialbus 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-serialbus-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-serialport 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-serialport-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-shadertools 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-shadertools-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-svg 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-svg-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-tools 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-tools-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-translations 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-virtualkeyboard 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-virtualkeyboard-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-webchannel 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-webchannel-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-websockets 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-websockets-debug 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-webview 6.4.2-1
mingw-w64-ucrt-x86_64-qt6-webview-debug 6.4.2-1
mingw-w64-ucrt-x86_64-quazip-qt5 1.4-2
mingw-w64-ucrt-x86_64-ripgrep 13.0.0-1
mingw-w64-ucrt-x86_64-spirv-headers 1~1.3.239.0-1
mingw-w64-ucrt-x86_64-spirv-tools 2023.1-1
mingw-w64-ucrt-x86_64-tools-git 10.0.0.r234.g283e5b23a-1
mingw-w64-ucrt-x86_64-tree-sitter 0.20.7-1
mingw-w64-ucrt-x86_64-vulkan-headers 1.3.242-1
mingw-w64-ucrt-x86_64-vulkan-loader 1.3.242-1
mingw-w64-ucrt-x86_64-vulkan-validation-layers 1.3.242-1
mingw-w64-ucrt-x86_64-winpthreads-git 10.0.0.r234.g283e5b23a-1
mingw-w64-ucrt-x86_64-winstorecompat-git 10.0.0.r234.g283e5b23a-1
mingw-w64-ucrt-x86_64-zeromq 4.3.4-2
mingw-w64-x86_64-aspell 0.60.8-2
mingw-w64-x86_64-aspell-de 20161207-2
mingw-w64-x86_64-aspell-en 2020.12.07-1
mingw-w64-x86_64-binutils 2.40-2
mingw-w64-x86_64-boost 1.81.0-6
mingw-w64-x86_64-cgal 5.5.2-1
mingw-w64-x86_64-clang 15.0.7-3
mingw-w64-x86_64-clang-analyzer 15.0.7-3
mingw-w64-x86_64-clang-tools-extra 15.0.7-3
mingw-w64-x86_64-cmake 3.25.2-1
mingw-w64-x86_64-compiler-rt 15.0.7-3
mingw-w64-x86_64-crt-git 10.0.0.r234.g283e5b23a-1
mingw-w64-x86_64-doxygen 1.9.6-2
mingw-w64-x86_64-eigen3 3.4.0-1
mingw-w64-x86_64-emacs-pdf-tools-server 1.0.0-1
mingw-w64-x86_64-fd 8.7.0-1
mingw-w64-x86_64-ffmpeg 5.1.2-3
mingw-w64-x86_64-gcc 12.2.0-10
mingw-w64-x86_64-gcc-ada 12.2.0-10
mingw-w64-x86_64-gcc-fortran 12.2.0-10
mingw-w64-x86_64-gcc-libgfortran 12.2.0-10
mingw-w64-x86_64-gcc-objc 12.2.0-10
mingw-w64-x86_64-gdb 13.1-3
mingw-w64-x86_64-gdb-multiarch 13.1-3
mingw-w64-x86_64-glfw 3.3.8-2
mingw-w64-x86_64-glm 0.9.9.8-2
mingw-w64-x86_64-gnutls 3.8.0-1
mingw-w64-x86_64-graphviz 2.44.1-12
mingw-w64-x86_64-headers-git 10.0.0.r234.g283e5b23a-1
mingw-w64-x86_64-hugo 0.111.1-1
mingw-w64-x86_64-hunspell 1.7.2-1
mingw-w64-x86_64-hunspell-en 2020.12.07-1
mingw-w64-x86_64-imagemagick 7.1.0.62-1
mingw-w64-x86_64-inkscape 1.2.2-2
mingw-w64-x86_64-libblocksruntime 0.4.1-1
mingw-w64-x86_64-libgccjit 12.2.0-10
mingw-w64-x86_64-libmangle-git 10.0.0.r234.g283e5b23a-1
mingw-w64-x86_64-make 4.4-2
mingw-w64-x86_64-meld3 3.22.0-1
mingw-w64-x86_64-ninja 1.11.1-3
mingw-w64-x86_64-ntldd-git r19.7fb9365-2
mingw-w64-x86_64-openblas 0.3.21-7
mingw-w64-x86_64-python-pip 23.0.1-1
mingw-w64-x86_64-qt5 5.15.3-1
mingw-w64-x86_64-quazip-qt5 1.4-2
mingw-w64-x86_64-ripgrep 13.0.0-1
mingw-w64-x86_64-spirv-headers 1~1.3.239.0-1
mingw-w64-x86_64-spirv-tools 2023.1-1
mingw-w64-x86_64-tools-git 10.0.0.r234.g283e5b23a-1
mingw-w64-x86_64-tree-sitter 0.20.7-1
mingw-w64-x86_64-vulkan-validation-layers 1.3.242-1
mingw-w64-x86_64-winpthreads-git 10.0.0.r234.g283e5b23a-1
mingw-w64-x86_64-winstorecompat-git 10.0.0.r234.g283e5b23a-1
mingw-w64-x86_64-zeromq 4.3.4-2
p7zip 17.04-1
pactoys r55.8860e1f-1
patch 2.7.6-2
patchutils 0.4.2-3
pkgconf 1.9.4-1
pkgfile 21-2
quilt 0.66-3
reflex 20221012-1
scons 3.1.2-9
swig 4.0.2-3
texinfo 7.0.2-1
texinfo-tex 7.0.2-1
unrar 6.2.2-1
unzip 6.0-2
winpty 0.4.3-1
xmlto 0.0.28-4
zip 3.0-3
#+end_example

*** Constants

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; MSYS2 installation
;;
(defconst psimacs/config/msys-root-dir
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "msys64")
    "/")
  "The psimacs msys64 root directory.")

(defconst psimacs/config/msys-share-dir
  (psimacs/file-system/concat-directory psimacs/config/msys-root-dir "usr/share")
  "The psimacs msys64 share directory.")

(defconst psimacs/config/msys-info-dir
  (psimacs/file-system/concat-directory psimacs/config/msys-root-dir "usr/share/info")
  "The psimacs msys64 info directory.")

(defconst psimacs/config/msys-runtime-dir
  (psimacs/file-system/concat-directory psimacs/config/msys-root-dir "usr/bin")
  "The psimacs msys runtime directory.")

(defconst psimacs/config/msys-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/msys-runtime-dir "bash.exe")
    "bash")
  "The psimacs bash executable.")


(defconst psimacs/config/msys-env-root-dir
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-directory psimacs/config/msys-root-dir
        (if (getenv "MSYS2_ENV")
            (getenv "MSYS2_ENV")
          "ucrt64"))
    "/usr")
  "The psimacs environment root directory.")

(defconst psimacs/config/msys-env-share-dir
    (psimacs/file-system/concat-directory psimacs/config/msys-env-root-dir "share")
  "The psimacs actual msys environment share directory.")

(defconst psimacs/config/msys-env-info-dir
    (psimacs/file-system/concat-directory psimacs/config/msys-env-root-dir "share/info")
  "The psimacs actual msys environment info directory.")

(defconst psimacs/config/msys-env-runtime-dir
  (psimacs/file-system/concat-directory psimacs/config/msys-env-root-dir "bin")
  "The psimacs actual msys environment runtime directory.")

(defconst psimacs/config/msys-env-lib-dir
    (psimacs/file-system/concat-directory psimacs/config/msys-env-root-dir "lib")
  "The psimacs actual msys environment lib directory.")
#+end_src

** SSH

The search path for the SSH executables. We set this on the Windows platfom, because of problems
with the /MSYS2 ssh/ integration into /Emacs/.

#+begin_src emacs-lisp :tangle config/init-constants.el
(defconst psimacs/config/ssh-env-dir
  (if psimacs/system/is-win32-p
        "C:/Windows/System32/OpenSSH"
    nil)
  "The psimacs OpenSSH environment directory.")
#+end_src

** Latex

LaTeX bibliography should be shared.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; LaTeX file sharing
;;
(defconst psimacs/config/latex-dir
  (psimacs/file-system/concat-directory psimacs/config/content-dir "latex")
  "The psimacs shared latex directory.")

(psimacs/file-system/make-directory psimacs/config/latex-dir)

(defconst psimacs/config/tex-runtime-dir
  ;;(psimacs/file-system/concat-directory psimacs/config/system-utils-dir "MiKTeX/miktex/bin/x64")
  ;;(psimacs/file-system/concat-directory psimacs/config/system-utils-dir "texlive/bin/win32")
  psimacs/config/msys-env-runtime-dir
  "The psimacs tex runtime directory.")
#+end_src

** PDF viewer

The  [[https://en.wikipedia.org/wiki/PDF][PDF-files]] viewer to use.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; PDF file viewing
;;
(defconst psimacs/config/pdf-viewer-name "SumatraPDF" "The psimacs pdf viewer name.")

(defconst psimacs/config/pdf-viewer-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "SumatraPDF")
  "The psimacs pdf viewer directory.")

(defconst psimacs/config/pdf-viewer-runtime
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/pdf-viewer-dir "SumatraPDF-3.2-64.exe")
    "sumatrapdf")
  "The psimacs pdf viewer executable.")
#+end_src

** The Amx file

[[https://github.com/DarwinAwardWinner/amx][Amx]] is an alternative interface for M-x in Emacs.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Amx package support file
;;
(defconst psimacs/config/amx-file
  (psimacs/file-system/concat-file psimacs/config/session-dir ".amxf")
  "The psimacs amx file.")
#+end_src

** The Treemacs constants

[[https://github.com/Alexander-Miller/treemacs][Treemacs]] is a tree layout file explorer for *Emacs*.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Treemacs package support files
;;
(defconst psimacs/config/treemacs-persist-file
  (psimacs/file-system/concat-file psimacs/config/session-dir ".treemacs-persist")
  "The psimacs treemacs persist file.")

(defconst psimacs/config/treemacs-last-error-persist-file
  (psimacs/file-system/concat-file psimacs/config/session-dir ".treemacs-last-error-persist")
  "The psimacs treemacs last error persist file.")
#+end_src

** Spell checking

Basically two spell checkers are usable with *Emacs*. Either [[https://github.com/hunspell/hunspell][Hunspell]] or [[http://aspell.net/][Aspell]]. Currently *Psimacs* uses
[[https://github.com/hunspell/hunspell][Hunspell]].

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Spell checking with hunspell
;;
(defconst psimacs/config/spell-checker-hunspell-runtime
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/msys-env-runtime-dir "hunspell.exe")
    "hunspell")
  "The hunspell executable to use.")

(defconst psimacs/config/spell-checker-aspell-runtime
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/msys-env-runtime-dir "aspell.exe")
    "aspell")
  "The aspell executable to use.")

(defconst psimacs/config/spell-checker-hunspell-extra-args '("-i" "utf-8")       "Extra hunspell arguments.")
(defconst psimacs/config/spell-checker-aspell-extra-args   '("--sug-mode=ultra") "Extra aspell arguments.")

(defconst psimacs/config/spell-checker-hunspell-list-command "-l"     "Command list option for hunspell.")
(defconst psimacs/config/spell-checker-aspell-list-command   "--list" "Command list option for aspell.")

(defconst psimacs/config/spell-checker-hunspell-personal-dir
  (psimacs/file-system/concat-directory psimacs/config/assets-dir "hunspell")
  "The hunspell dictionary directory provided by the MSYS2 package.")

(defconst psimacs/config/spell-checker-hunspell-dir
  (psimacs/file-system/concat-directory psimacs/config/msys-env-root-dir "share/hunspell")
  "The psimacs spell checker dictionary directory for hunspell.")

(defconst psimacs/config/spell-checker-aspell-dir
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-directory psimacs/config/msys-env-root-dir "lib/aspell-0.60")
    (psimacs/file-system/concat-directory psimacs/config/msys-env-share-dir "aspell")
    )
  "The psimacs spell checker dictionary directory for aspell.")

(defconst psimacs/config/spell-checker-hunspell-german-dict "de_DE"
  "The hunspell german dictionary to use.")

(defconst psimacs/config/spell-checker-hunspell-english-dict "en_US"
  "The hunspell english dictionary to use.")

(defconst psimacs/config/spell-checker-aspell-german-dict "deutsch8"
  "The aspell german dictionary to use.")

(defconst psimacs/config/spell-checker-aspell-english-dict "american"
  "The aspell english dictionary to use.")

(defconst psimacs/config/spell-checker-hunspell-personal-dict-file
  (psimacs/file-system/concat-file psimacs/config/session-dir ".hunspell_")
  "The psimacs personal hunspell dictionary file.")

(defconst psimacs/config/spell-checker-aspell-personal-dict-file
  (psimacs/file-system/concat-file psimacs/config/session-dir ".aspell_")
  "The psimacs personal aspell dictionary file.")

(defconst psimacs/config/spell-checker-complete-word-dictionary-file
  (psimacs/file-system/concat-file psimacs/config/assets-dir "plain-word-list.txt")
  "A plain english word list.")

;;
;; Some derived constants to simplify setup
;;
(defconst psimacs/internal/spell-checker-use-aspell nil
  "Default spell checker is aspell.
Use the aspell spell checker if true, otherwise use the hunspell spell checker.")

(defconst psimacs/config/spell-checker-runtime
  (if psimacs/internal/spell-checker-use-aspell
      psimacs/config/spell-checker-aspell-runtime
    psimacs/config/spell-checker-hunspell-runtime)
  "The spell checker executable to use.")

(defconst psimacs/config/spell-checker-extra-args
  (if psimacs/internal/spell-checker-use-aspell
      psimacs/config/spell-checker-aspell-extra-args
    psimacs/config/spell-checker-hunspell-extra-args)
  "Extra spell checker arguments.")

(defconst psimacs/config/spell-checker-list-command
  (if psimacs/internal/spell-checker-use-aspell
      psimacs/config/spell-checker-aspell-list-command
    psimacs/config/spell-checker-hunspell-list-command)
  "Command list option for spell checker.")

(defconst psimacs/config/spell-checker-dir
  (if psimacs/internal/spell-checker-use-aspell
      psimacs/config/spell-checker-aspell-dir
    psimacs/config/spell-checker-hunspell-dir)
  "The psimacs spell checker dictionary directory.")

(defconst psimacs/config/spell-checker-german-dict
  (if psimacs/internal/spell-checker-use-aspell
      psimacs/config/spell-checker-aspell-german-dict
    psimacs/config/spell-checker-hunspell-german-dict)
  "The german dictionary to use.")

(defconst psimacs/config/spell-checker-english-dict
  (if psimacs/internal/spell-checker-use-aspell
      psimacs/config/spell-checker-aspell-english-dict
    psimacs/config/spell-checker-hunspell-english-dict)
  "The english dictionary to use.")

(defconst psimacs/config/spell-checker-personal-dict-file
  (if psimacs/internal/spell-checker-use-aspell
      psimacs/config/spell-checker-aspell-personal-dict-file
    psimacs/config/spell-checker-hunspell-personal-dict-file)
  "The psimacs personal dictionary file.")
#+end_src

** Multilingual grammar and style checker

[[https://languagetool.org][LanguageTool]] is a multilingual grammar and style checker. The stable version is installed from [[https://languagetool.org/download/][download]].

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Multilingual grammar and style checker
;;
(defconst psimacs/config/language-tool-dir
  (psimacs/file-system/concat-directory  psimacs/config/system-utils-dir "LanguageTool")
  "The psimacs language tool directory.")
#+end_src

** Perspective

The [[https://github.com/nex3/perspective-el][perspective]] package provides multiple named workspaces
(or "perspectives") in *Emacs*, similar to multiple desktops in window managers.

#+begin_src emacs-lisp :tangle config/init-constants.el
(defconst psimacs/config/persp-save-dir
  psimacs/config/session-dir
  "The perspective save directory.")

(defconst psimacs/config/persp-auto-save-file
  (psimacs/file-system/concat-file  psimacs/config/persp-save-dir ".perspective")
  "The perspective auto save file.")
#+end_src

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs. The following constant provides the main /project/ directories,
i.e. a directories in which [[https://github.com/bbatsov/projectile][Projectile]] searches for projects.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Projectile search pathes
;;
(defconst psimacs/config/project-content-dir
    (psimacs/file-system/concat-directory  psimacs/config/content-dir "projects")
    "The psimacs project content directory.")

(psimacs/file-system/make-directory psimacs/config/project-content-dir)

(defconst psimacs/config/project-search-path
  (if psimacs/system/is-win32-p
      `("~/projects/source"
        "d:/projects/source"
        ,psimacs/config/project-content-dir
        )
      `("~/projects/source"
        ))
    "The psimacs project search path.")
#+end_src

** Printing support

Printing relies on an installed [[https://www.ghostscript.com/][Ghostscript]] interpreter for the PostScript language and PDF files.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Ghostscript interpreter for PostScript and PDF files
;;
(defconst psimacs/config/ghostscript-exe
  ;(psimacs/file-system/concat-file  psimacs/config/system-utils-dir "gs/gs9.53.3/bin/gswin64c.exe")
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file  psimacs/config/msys-env-runtime-dir "gs.exe")
    "gs")
  "The psimacs ghost script executable.")
#+end_src

** Snippets

Snippets are used by package [[https://github.com/joaotavora/yasnippet][Yasnippet]]. Beside of the installed snippets, user provided snippets used. These
are to be installed into the following directory.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; User provided snippets
;;
(defconst psimacs/config/snippets-dir
  (psimacs/file-system/concat-directory  psimacs/config/site-lisp-dir "snippets")
  "The psimacs personal snippets directory.")
#+end_src

** Python

[[https://www.python.org/][Python]] is one of my favorite languages. I use the Windows OS [[https://www.python.org/][Python]] installer and not the [[https://www.msys2.org/][MSYS2]] python package.

Installation of the following packages is recommended: autopep8, autoflake, black, certifi, cmake-language-server, cmake-format, flake8,
ipython, jupyter, mypy, mypy-extensions, pyflakes, pylint, pyls-black, pyls-isort, pyls-mypy, ptvsd, pycodestyle,
pycparser, pydocstyle, pywin32, pywinpty, sphinx, debugpy, pyright, antlr4-python3-runtime, pyqt6, PyQt6-WebEngine, PyGetWindow, epc,
isbntools.

A /python pip/ =requirements.txt= file can be found in the =site-lisp/python= directory for convenience:

#+begin_example
pip install -r requirements.txt
#+end_example

If using [[https://www.sphinx-doc.org/en/master/][Sphinx]] with a non default contrib theme or extension, additional =pip= installation might be necessary.

*Psimacs* installation does reference the python tools explicitly. Nevertheless, the Windows OS [[https://www.python.org/][Python]] runtime directory
as well as the Windows OS [[https://www.python.org/][Python]] scripts directory will be added to the environment search path list prior to [[https://www.msys2.org/][MSYS2]]
pathes. Therefore our Windows OS [[https://www.python.org/][Python]] should always be at work.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Python configuration constants
;;
(defconst psimacs/config/python-tools-dir
  (psimacs/file-system/concat-directory psimacs/config/tools-dir "py-tools")
  "The psimacs personal python-tools directory.")

(defconst psimacs/config/python-vc-visual-studio-dir
  (psimacs/file-system/concat-directory psimacs/config/python-tools-dir "MS-Visual-Studio")
  "The psimacs personal MS Visual Studio python directory.")

(defun psimacs/config/find-python-dir ()
    "Get a decent python installation.

This is pretty ugly, but different python installation might be in use on different machines."
    (interactive)
    (if psimacs/system/is-win32-p
        (if (getenv "VIRTUAL_ENV")
            (psimacs/file-system/concat-directory (getenv "VIRTUAL_ENV") "Scripts")
          (let ((py3-10  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "Python310"))
                (py3-11  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "Python311"))
                (py3-12  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "Python312"))
                (py3-13  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "Python313"))
                (py3-14  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "Python314"))
                (py3-15  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "Python315"))
                (py3-16  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "Python316"))
                (py3-17  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "Python317"))
                (py3-18  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "Python318"))
                (py3-19  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "Python319"))
                (py3-20  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "Python320"))
                (py3-21  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "Python321"))
               )

              (or (getenv "EMACS_PYTHON")
                  (cond
                        ((file-exists-p py3-21 ) py3-21)
                        ((file-exists-p py3-20 ) py3-20)
                        ((file-exists-p py3-19 ) py3-19)
                        ((file-exists-p py3-18 ) py3-18)
                        ((file-exists-p py3-17 ) py3-17)
                        ((file-exists-p py3-16 ) py3-16)
                        ((file-exists-p py3-15 ) py3-15)
                        ((file-exists-p py3-14 ) py3-14)
                        ((file-exists-p py3-13 ) py3-13)
                        ((file-exists-p py3-12 ) py3-12)
                        ((file-exists-p py3-11 ) py3-11)
                        ((file-exists-p py3-10 ) py3-10)
                  ))
          )
        )
      ;; Linux
      (if (getenv "VIRTUAL_ENV")
          (psimacs/file-system/concat-directory (getenv "VIRTUAL_ENV") "bin")
        psimacs/config/msys-runtime-dir
      )
    )
)

(defconst psimacs/config/python-install-dir
  (let ( (f (psimacs/config/find-python-dir)) )
    (if f (file-name-as-directory f) nil))
  "The psimacs used python installation directory.")

(defconst psimacs/config/python-runtime-dir
  psimacs/config/python-install-dir
  "The psimacs used python runtime directory.")

(defconst psimacs/config/python-scripts-dir
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-directory psimacs/config/python-install-dir "Scripts")
    psimacs/config/python-runtime-dir
  )
  "The psimacs used python scripts directory.")

(defconst psimacs/config/python-extensions-dir
  (psimacs/file-system/concat-directory psimacs/config/site-lisp-dir "python")
  "The psimacs python exctensions scripts directory.")

(defconst psimacs/config/python-mako-cache-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "mako-cache")
  "The python mako template cache directory used by psimacs.")

(defconst psimacs/config/python-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-runtime-dir "python.exe")
    "python3")
  "The psimacs used python runtime.")

(defconst psimacs/config/ipython-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "ipython3.exe")
    "ipython3")
  "The psimacs used ipython runtime.")

(defconst psimacs/config/jupyter-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "jupyter.exe")
    "jupyter")
  "The psimacs used jupyter runtime.")

(defconst psimacs/config/flake8-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "flake8.exe")
    "flake8")
  "The psimacs used python flake8 runtime.")

(defconst psimacs/config/pylint-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "pylint.exe")
    "pylint")
  "The psimacs used python pylint runtime.")

(defconst psimacs/config/mypy-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "mypy.exe")
    "mypy")
  "The psimacs used python mypy runtime.")

(defconst psimacs/config/pyflakes-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "pyflakes.exe")
    "pyflakes")
  "The psimacs used python pyflakes runtime.")

(defconst psimacs/config/autoflake-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "autoflake.exe")
    "autoflake")
  "The psimacs used python autoflake runtime.")

(defconst psimacs/config/black-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "black.exe")
    "black")
  "The psimacs used python black runtime.")

(defconst psimacs/config/yapf-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "yapf.exe")
    "yapf")
  "The psimacs used python yapf runtime.")

(defconst psimacs/config/pyls-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "pyls.exe")
    "pyls")
  "The psimacs used python pyls runtime.")
#+end_src

** BibTex

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; bibtex configuration constans
;;
(defconst psimacs/config/isbn-meta-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "isbn_meta.exe")
    "isbn_meta")
  "The psimacs used python runtime.")
#+end_src

** Sphinx

[[https://www.sphinx-doc.org/en/master/][Sphinx]] is a tool that makes it easy to create intelligent and beautiful documentation.
It must be alongside with installed with [[https://www.python.org/][Python]].

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Sphinx configuration constants
;;
(defconst psimacs/config/sphinx-apidoc-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "sphinx-apidoc.exe")
    "sphinx-apidoc")
  "The psimacs used sphinx-apidoc runtime.")

(defconst psimacs/config/sphinx-autogen-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "sphinx-autogen.exe")
    "sphinx-autogen")
  "The psimacs used sphinx-autogen runtime.")

(defconst psimacs/config/sphinx-build-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "sphinx-build.exe")
    "sphinx-build")
  "The psimacs used sphinx-build runtime.")

(defconst psimacs/config/sphinx-quickstart-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "sphinx-quickstart.exe")
    "sphinx-quickstart")
  "The psimacs used sphinx-quickstart runtime.")

(defcustom psimacs/config/sphinx/html-theme "sphinx_rtd_theme"
  "Default theme used in sphinx RST to HTML converision."
  :group 'sphinx
  :type '(choice
	    (string :tag "alabaster")
          (string :tag "classic")
          (string :tag "agogo")
          (string :tag "bizstyle")
          (string :tag "haiku")
          (string :tag "nature")
          (string :tag "pyramid")
          (string :tag "scrolls")
          (string :tag "sphinxdoc")
          (string :tag "traditional")
          (string :tag "furo")
          (string :tag "sphinx_rtd_theme")
          (string :tag "cloud")
          (string :tag "pydata_sphinx_theme")
          (string :tag "renga")
          (string :tag "sphinx_book_theme")
          (string :tag "sphinx_celery")
          (string :tag "sphinx_materialdesign_theme")
          (string :tag "sphinx_modern_theme")
          (string :tag "readable")
          (string :tag "sphinx_ustack_theme")
          (string :tag "sphinxbootstrap4theme")
          (string :tag "sphinxjp")
          (string :tag "stanford_theme")
          (string :tag "sunpy")
          (string :tag "zerovm")
    ))

(defcustom psimacs/config/sphinx/builder "html"
  "Default builder used in sphinx RST converision."
  :group 'sphinx
  :type '(choice
	    (string :tag "html")
          (string :tag "dirhtml")
          (string :tag "singlehtml")
          (string :tag "htmlhelp")
          (string :tag "qthelp")
          (string :tag "devhelp")
          (string :tag "epub")
          (string :tag "applehelp")
          (string :tag "latex")
          (string :tag "texinfo")
          (string :tag "text")
          (string :tag "gettext")
          (string :tag "doctest")
          (string :tag "linkcheck")
          (string :tag "xml")
          (string :tag "pseudoxml")
    ))
#+end_src

** Pandoc

[[https://pandoc.org/][Pandoc]] is a universal document converter.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Pandoc configuration constants
;;
(defconst psimacs/config/pandoc-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "pandoc")
  "The psimacs pandoc tool directory.")

(defconst psimacs/config/pandoc-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/pandoc-dir "pandoc.exe")
    "pandoc")
  "The psimacs used pandoc runtime.")
#+end_src

** PlantUML

[[https://plantuml.com/][PlantUML]] is an open-source tool allowing users to create [[https://en.wikipedia.org/wiki/Unified_Modeling_Language][UML]] diagrams from a plain text language.

References:
- [[https://en.wikipedia.org/wiki/Unified_Modeling_Language][Wikipedia: Unified Modeling Language]]
- [[https://www.uml-diagrams.org/][The Unified Modeling Language]]

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; PlantUML configration constants
;;
(defconst psimacs/config/plantuml-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "plantUML")
  "The psimacs plantUml tool directory.")

(defconst psimacs/config/plantuml-jar-file
  (concat psimacs/config/plantuml-dir "plantuml.jar")
  "The psimacs plantUml jar file.")

(defcustom psimacs/config/plantuml_java_arg_limit_size 0
  "Limits image width and heigh to this value.

Note that if you generate very big diagrams, (for example, something
like 20 000 x 10 000 pixels), you can have some memory issues.

Values: 0, 4096, 8192, 16384, 32768

If this value is 0, then no action is taken."
:group 'plantuml
:type 'integer
)

(defcustom  psimacs/config/plantuml_java_arg_heap-size 0
  "Tune the Java VM heap size.

Tune Java VM heap size: -Xmx for maximum heap size, and -Xms for initial
heap size.

Values: 0, 256, 512, 1024, 2048, 4096, 8192

If this value is 0, then no action is taken."
:group 'plantuml
:type 'integer)
#+end_src

** Mermaid

[[https://mermaid.js.org][Mermaid]] is an open-source tool allowing users to create diagrams and charts from a plain text language.
It is similar to plantUML. Psimacs supports integration of Mermaid code into ORG documents and provides a dedicated mermaid-mode.

References:
- [[https://mermaid.js.org][Mermaid]]
- [[https://github.com/arnm/ob-mermaid][ob-mermaid]]
- [[https://github.com/mermaid-js/mermaid-cli][mermaid-cli]]
- [[https://github.com/abrochard/mermaid-mode][mermaid-mode]]
- [[https://mermaid.live/][Mermaid Live Editor]]

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Mermaid configration constants
;;
(defconst psimacs/config/mermaid-runtime-cmd
  (psimacs/file-system/concat-file psimacs/config/msys-env-lib-dir "mmdc.cmd")
  "The psimacs mermaid program directory.")
#+end_src

** ImageMagick

The package [[https://github.com/mhayashi1120/Emacs-imagex][image+.el]] uses [[https://imagemagick.org/index.php][ImageMagick]]. I installed the file  [[https://imagemagick.org/script/download.php#windows][ImageMagick-7.0.10-45-portable-Q16-HDRI-x64.zip]].

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Installation site of ImageMagick
;;
(defconst psimacs/config/image-magick-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "ImageMagick")
  "The psimacs ImageMagick tool directory.")
#+end_src

** Java

Many packages and tools do need a [[https://www.java.com][Java]] installation. I use the open source implementation [[https://openjdk.java.net/][OpenJDK]] for my purposes.
The portable [[https://download.java.net/java/GA/jdk15.0.1/51f4f36ad4ef43e39d0dfdbaf6549e32/9/GPL/openjdk-15.0.1_windows-x64_bin.zip][Zip]] package for [[https://jdk.java.net/15/][Java Version 15]] is used by me.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Java constants
;;
(defconst psimacs/config/java-runtime-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "java64/bin")
  "The psimacs java runtime directory.")

(defconst psimacs/config/java-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/java-runtime-dir "javaw.exe")
    "java")
  "The psimacs java executable.")
#+end_src

** Git

[[https://git-scm.com/][Git]] is a very important external tool to be installed. *Psimacs* uses the [[https://github.com/radian-software/straight.el][Straight]] package manager which relies on a
properly installed [[https://git-scm.com/][Git]] program. A portable version is available at from their [[https://git-scm.com/download/win][download site]].

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Portable Git configuration
;;
(defconst psimacs/config/git-runtime-dir
  (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "PortableGit/cmd")
  "The psimacs git runtime directory.")

(defconst psimacs/config/git-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/git-runtime-dir "git.exe")
    "git")
  "The psimacs git executable.")

(defconst psimacs/config/gitk-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/git-runtime-dir "gitk.exe")
    "gitk")
  "The psimacs gitk executable.")
#+end_src

** Graphviz

[[http://www.graphviz.org/][Graphviz]] is a wonderful tool for diagram generation. Especially [[https://plantuml.com/][PlantUML]] uses it as its backend interpreter for the
[[https://graphviz.org/doc/info/lang.html][Dot]] language.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Graphviz tool constants
;;
(defconst psimacs/config/graphviz-runtime-dir
  psimacs/config/msys-env-runtime-dir
  "The psimacs Graphviz directory.")

(defconst psimacs/config/graphviz-runtime-dot-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/graphviz-runtime-dir "dot.exe")
    "dot")
  "The psimacs Graphviz dot executable.")
#+end_src

** CMake

[[https://cmake.org/][CMake]] is an open-source, cross-platform family of tools designed to build, test and package software.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; CMake tool configuration constants
;;
(defconst psimacs/config/cmake-runtime-dir
  psimacs/config/msys-env-runtime-dir
  "The psimacs CMake directory.")

(defconst psimacs/config/cmake-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/cmake-runtime-dir "cmake.exe")
    "cmake")
  "The psimacs CMake cmake runtime file.")

(defconst psimacs/config/ctest-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/cmake-runtime-dir "ctest.exe")
    "ctest")
  "The psimacs CMake ctest runtime file.")

(defconst psimacs/config/cpack-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/cmake-runtime-dir "cpack.exe")
    "cpack")
  "The psimacs CMake cpack runtime file.")

(defconst psimacs/config/cmcldeps-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/cmake-runtime-dir "cmcldeps.exe")
    "cmcldeps")
  "The psimacs CMake cmcldeps runtime file.")

(defconst psimacs/config/cmake-gui-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/cmake-runtime-dir "cmake-gui.exe")
    "cmake-gui")
  "The psimacs CMake cmake-gui runtime file.")

(defconst psimacs/config/cmake-format-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/python-scripts-dir "cmake-format.exe")
    "cmake-format")
  "The psimacs used cmake-format runtime.")
#+end_src

** B2 - Boost Build

[[https://www.bfgroup.xyz/b2/][B2]] makes it easy to build C++ projects, everywhere.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; B2 tool configuration constants
;;
(defconst psimacs/config/b2-root-dir
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "b2")
    psimacs/config/msys-env-root-dir)
  "The psimacs b2 root directory.")

(defconst psimacs/config/b2-runtime-dir
  (psimacs/file-system/concat-directory psimacs/config/b2-root-dir "bin")
  "The psimacs b2 runtime directory.")

(defconst psimacs/config/b2-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/b2-runtime-dir "b2.exe")
    "b2")
  "The psimacs b2 runtime file.")

(defconst psimacs/config/b2-share-dir
  (psimacs/file-system/concat-directory psimacs/config/b2-root-dir "share")
  "The psimacs b2 share directory.")
#+end_src

** Clang/LLVM

[[https://clang.llvm.org/][Clang]] can be used for compiling and linking [[https://en.wikipedia.org/wiki/C%2B%2B][C++]] programs.

Some usefule references for C++:
- [[https://en.wikipedia.org/wiki/C%2B%2B][Wikipedia: C++]]
- [[https://isocpp.org/][News, Status & Discussion about Standard C++]]
- [[https://www.cplusplus.com/][Welcome to cplusplus.com]]
- [[https://en.cppreference.com][C++ Reference]]
- [[https://justinmeiners.github.io/sgi-stl-docs/][Standard Template Library Programmer's Guide]]
- [[https://www.boost.org/][Boost C++ Libraries]]

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Clang compiler framework configuration constants
;;
(defconst psimacs/config/clang-runtime-dir
  psimacs/config/msys-env-runtime-dir
  "The psimacs clang directory.")

(defconst psimacs/config/clang-c-compiler-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang.exe")
    "clang")
  "The psimacs clang executable.")

(defconst psimacs/config/clang-c++-compiler-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang++.exe")
    "clang++")
  "The psimacs clang++ executable.")

(defconst psimacs/config/clang-cl-compiler-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-cl.exe")
    "clang-cl")
  "The psimacs clang-cl executable.")

(defconst psimacs/config/clangd-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clangd.exe")
    "clangd")
  "The psimacs clangd executable.")

(defconst psimacs/config/clang-format-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-format.exe")
    "clang-format")
  "The psimacs clang-format executable.")

(defconst psimacs/config/clang-include-fixer-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-include-fixer.exe")
    "clang-include-fixer")
  "The psimacs clang-include-fixer executable.")

(defconst psimacs/config/clang-tidy-runtime-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-tidy.exe")
    "clang-tidy")
  "The psimacs clang-tidy executable.")

(defconst psimacs/config/clang-check-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-check.exe")
    "clang-check")
  "The psimacs clang-check executable.")

(defconst psimacs/config/clang-rename-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-rename.exe")
    "clang-rename")
  "The psimacs clang-rename executable.")

(defconst psimacs/config/clang-refactor-exe
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/clang-runtime-dir "clang-refactor.exe")
    "clang-refactor")
  "The psimacs clang-refactor executable.")
#+end_src

** Emscripten

[[https://emscripten.org/][Emscripten]] is a [[https://clang.llvm.org/][clang]] based
cross compiler that allow to compile from [[https://en.wikipedia.org/wiki/C%2B%2B][Wikipedia: C++]]
to [[https://webassembly.org/][WebAssembly]]/[[https://en.wikipedia.org/wiki/JavaScript][JavaScript]].
It is based on the [[https://llvm.org/][LLVM Compiler Infrastructure]].

#+begin_src emacs-lisp :tangle config/init-constants.el
(defconst psimacs/config/emscripten-dir
    (psimacs/file-system/concat-directory psimacs/config/system-utils-dir "emscripten/emsdk")
    "The psimacs emscripten directory.")

(defconst psimacs/config/emscripten-emcmake-exe
    (psimacs/file-system/concat-file psimacs/config/emscripten-dir "upstream/emscripten/emcmake.bat")
    "The psimacs emscripten emcmake executable.")

(defconst psimacs/config/emscripten-env
    (list
        (list '*: "PATH"         psimacs/config/emscripten-dir)
        (list '*: "PATH"         (psimacs/file-system/concat-directory psimacs/config/emscripten-dir "upstream/emscripten"))
        (list '*: "PATH"         (psimacs/file-system/concat-directory psimacs/config/emscripten-dir "node/12.18.1_64bit/bin"))
        (list '*: "PATH"         (psimacs/file-system/concat-directory psimacs/config/emscripten-dir "java/8.152_64bit/bin"))
        (list '+  "EMSDK"        psimacs/config/emscripten-dir)
        (list '+  "EM_CONFIG"    (psimacs/file-system/concat-file      psimacs/config/emscripten-dir ".emscripten"))
        (list '+  "EM_CACHE"     (psimacs/file-system/concat-directory psimacs/config/emscripten-dir "upstream/emscripten/cache"))
        (list '+  "EMSDK_NODE"   (psimacs/file-system/concat-file      psimacs/config/emscripten-dir "node/12.18.1_64bit/bin/node.exe"))
        (list '+  "EMSDK_PYTHON" (psimacs/file-system/concat-file      psimacs/config/emscripten-dir "python/3.7.4-pywin32_64bit/python.exe"))
        (list '+  "JAVA_HOME"    (psimacs/file-system/concat-directory psimacs/config/emscripten-dir "java/8.152_64bit"))
    )
    "Environment description that in accordance to the `.projectile-envrc' file format.")

(defun psimacs/config/emscripten-env-test ()
    "Print the psimacs/config/emscripten-env content."
    (interactive)
    (dolist (x psimacs/config/emscripten-env)
        (message (symbol-name (car x)))
        (message (car (cdr x)))
        (message (car (cdr (cdr x))))
    )
)
#+end_src

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]] is used for project management.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Projectile tool configuration constants
;;
(defconst psimacs/config/projectile-dir
  psimacs/config/session-dir
  "The psimacs projectile directory.")

(defconst psimacs/config/projectile-known-projects-file
  (psimacs/file-system/concat-file psimacs/config/projectile-dir ".projectile-bookmarks")
  "The psimacs projectile bookmark file.")

(defconst psimacs/config/projectile-cache-file
  (psimacs/file-system/concat-file psimacs/config/projectile-dir ".projectile.cache")
  "The psimacs projectile cache file.")
#+end_src

** LSP-Mode

*Psimacs* uses the following file for storing [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] session information:

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for lsp-mode
;;
(defconst psimacs/config/lsp-session-file
  (psimacs/file-system/concat-file psimacs/config/session-dir ".lsp-session-v1")
  "The psimacs lsp-mode session file.")

(defconst psimacs/config/lsp-server-install-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir ".cache/lsp")
  "The psimacs lsp-mode server installation directory.")

(defconst psimacs/config/lsp-yaml-schema-store-local-db-file
  (psimacs/file-system/concat-file psimacs/config/lsp-server-install-dir "lsp-yaml-schemas.json")
  "The psimacs lsp-yaml schema store local database file.")
#+end_src

** DAP-Mode

*Psimacs* uses the following file for storing [[https://emacs-lsp.github.io/dap-mode/][dap-mode]] breakpoint information:

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for dap-mode
;;
(defconst psimacs/config/dap-breakpoints-file
  (psimacs/file-system/concat-file psimacs/config/session-dir ".dap-breakpoints")
  "The psimacs dap-mode breakpoints file.")

(defconst psimacs/config/dap-ui-repl-history-dir
  psimacs/config/session-dir
  "The psimacs dap-mode repl history directory.")
#+end_src

** Transient

[[https://github.com/magit/transient][Transient]] is provided by [[https://github.com/magit][magit]]. Transient implements an abstraction involving a prefix command,
infix arguments and suffix commands.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for transient from magit
;;
(defconst psimacs/config/transient-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "transient")
  "The psimacs transient directorty.")

(defconst psimacs/config/transient-levels-file
  (psimacs/file-system/concat-file psimacs/config/transient-dir "levels.el")
  "The psimacs transient levels file.")

(defconst psimacs/config/transient-values-file
  (psimacs/file-system/concat-file psimacs/config/transient-dir "values.el")
  "The psimacs transient values file.")

(defconst psimacs/config/transient-history-file
  (psimacs/file-system/concat-file psimacs/config/transient-dir "history.el")
  "The psimacs transient history file.")
#+end_src

** Emojify

[[https://github.com/iqbalansari/emacs-emojify][Emojify]] is an *Emacs* extension to display emojis. It can display github style emojis like :smile: or plain ascii ones
like :). It tries to be as efficient as possible, while also providing a lot of flexibility.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for emojify
;;
(defconst psimacs/config/emojify-emojis-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "emojis")
  "The psimacs emojify emojis directorty.")
#+end_src

** PCache

[[https://github.com/sigma/pcache][Pcache]] provides a persistent way of caching data, in a hashtable-like structure.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for pcache
;;
(defconst psimacs/config/pcache-dir
  (psimacs/file-system/concat-directory psimacs/config/session-dir "var/pcache")
  "The psimacs pcache directorty.")
#+end_src

** Hugo

[[https://gohugo.io/][Hugo]] is one of the most popular open-source static site generators. With its amazing speed and
flexibility, Hugo makes building websites fun again.

It is a general-purpose website framework. Technically speaking, [[https://gohugo.io/][Hugo]] is a static site generator.
Unlike systems that dynamically build a page with each visitor request, [[https://gohugo.io/][Hugo]] builds pages when you
create or update your content. Since websites are viewed far more often than they are edited, [[https://gohugo.io/][Hugo]]
is designed to provide an optimal viewing experience for your website’s end users and an ideal
writing experience for website authors.

Websites built with [[https://gohugo.io/][Hugo]] are extremely fast and secure. Hugo sites can be hosted anywhere.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Hugo static website generator
;;
(defconst psimacs/config/hugo-site-generator-runtime
  (if psimacs/system/is-win32-p
      (psimacs/file-system/concat-file psimacs/config/msys-env-runtime-dir "hugo.exe")
    "hugo")
  "The hugo executable to use.")
#+end_src

** Emacs Application Framework :noexport:

The package [[https://github.com/emacs-eaf/emacs-application-framework][eaf]] provides a free/libre and open-source extensible framework that
revolutionizes the graphical capabilities of Emacs, the key to ultimately Live in Emacs.

#+begin_src emacs-lisp :tangle config/init-constants.el
;;
;; Constants used by Psimacs for the Emacs Application Framework
;;
(defconst psimacs/config/eaf-config-location
  (psimacs/file-system/concat-directory psimacs/config/session-dir "eaf")
  "The psimacs eaf config directorty.")
#+end_src

* Environment

Extent the execution search path by the external tools that *Psimacs* supports. Do not rely solely on the
correct parents search path setup. Be explicit. Additionally, synchronize the environment search path with
*Emacs*'s =exec-path=.

#+begin_src emacs-lisp :tangle config/init-environment.el :var file-description="Search path setup"
;;
;; Explicitely set the environment to the tools that are important. Do not rely on the parent
;; environment. Synchronize execution path and the environment search path
;;
(setq exec-path
      (append `(
                ,psimacs/config/ssh-env-dir
                ,psimacs/config/python-runtime-dir
                ,psimacs/config/python-scripts-dir
                ,psimacs/config/java-runtime-dir
                ,psimacs/config/git-runtime-dir
                ,psimacs/config/msys-env-runtime-dir
                ,psimacs/config/msys-runtime-dir
                ,psimacs/config/pandoc-dir
                ;;,psimacs/config/tex-runtime-dir         ; tex is part of msys2
                ;;,psimacs/config/cmake-runtime-dir       ; cmake is part of msys2
                ;;,psimacs/config/graphviz-runtime-dir    ; graphviz is part of msys2
                )
              exec-path))

(setenv "PATH" (mapconcat #'identity exec-path path-separator))

;;(message (getenv "PATH"))
;;
;; Print the current exec-path to the message buffer
;;
(psimacs/config/message-elements-of-list exec-path)

;;
;; Use LSP with plists
;;
(setenv "LSP_USE_PLISTS" "1")
#+end_src

* Package management

In this section some security measures are configured and the package manager is initialized.

** Making Emacs secure

Some safety tips regarding your editor are covered in the excellent article [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your Text Editor is Malware]].
So, before going on with the configuration, let's get some things straight. First of all, enable checking
trust on TLS connections.

#+begin_src emacs-lisp :tangle config/init-secure.el :var file-description="Secure Emacs"
(setq tls-checktrust t)
#+end_src

*Emacs* is now not able to fetch HTTPS anymore! Emacs does not distribute trust root certificates.
We have to solve this problem. The [[https://www.python.org/][Python]] package [[https://pypi.org/project/certifi/][certifi]] /provides Mozilla's carefully curated collection of
Root Certificates for validating the trustworthiness of SSL certificates while verifying the identity of TLS hosts./
The [[https://www.python.org/][Python]] package [[https://pypi.org/project/certifi/][certifi]] should be installed by =pip install certifi=. The following [[https://gitlab.com/DiegoVicente/my-emacs/-/tree/master/][code snippet from Diego Vicente]]
allows the evaluation of the generated trustfile.

#+begin_src emacs-lisp :tangle config/init-secure.el
;;
;; With curtsy to https://gitlab.com/DiegoVicente/my-emacs/-/tree/master/
;;
(let
    (
     (trustfile
      (replace-regexp-in-string
       "\\\\" "/"
       (replace-regexp-in-string
        "\n" ""
        ;; requires "pip install certifi"
        (shell-command-to-string (concat psimacs/config/python-runtime-exe " -m certifi"))))
      )
     )

  (setq tls-program (list (format
                           "gnutls-cli%s --x509cafile %s -p %%p %%h"
                           (if (eq window-system 'w32) ".exe" "") trustfile)))

  ;;(message "%s" trustfile)
  ;;(message "%s" tls-program)

  (setq gnutls-verify-error t)
  (setq gnutls-trustfiles (list trustfile))
)
#+end_src

It is important to have added MELPA as an HTTPS site for this secure configuration to work.

The following function allows us to check if this setup is properly done. Thanks again to [[https://gitlab.com/DiegoVicente/my-emacs/-/tree/master/][Diego Vicente]].

#+begin_src emacs-lisp :tangle config/init-secure.el
;;
;; Test function with curtsy to https://gitlab.com/DiegoVicente/my-emacs/-/tree/master/
;;
(defun psimacs/config/check-tls-config ()
    "Check for correctness in the TLS configuration for Emacs."
    (interactive)
    (let ((bad-hosts
        (cl-loop for bad in '("https://wrong.host.badssl.com/" "https://self-signed.badssl.com/")
            if (condition-case _e (url-retrieve bad (lambda (_retrieved) t))
                (error nil))
            collect bad)))
        (if bad-hosts
            (error (format "TLS misconfigured; retrieved %s ok" bad-hosts))
        (url-retrieve "https://badssl.com" (lambda (_retrieved) t))))
)
#+end_src

** Straight package manager

*Psimacs* uses the [[https://github.com/radian-software/straight.el][Straight]] package manager. Note that this package manager depends on [[https://git-scm.com/][Git]].

*** Bootstrap straight.el

To get running at all, the [[https://github.com/radian-software/straight.el][Straight]] package must be installed itself. The code is taken from the [[https://github.com/radian-software/straight.el][Straight]]
/Getting Started/ section.

#+begin_src emacs-lisp :tangle config/init-package-manager.el :var file-description="Package manager"

;;
;; Packages will only be rebuilt when metadata (e.g. the recipe or the Emacs version) changes,
;; or when you manually invoke M-x straight-rebuild-package or M-x straight-rebuild-all.
;; https://www.reddit.com/r/emacs/comments/tb6vvt/decrease_emacs_launch_time_when_using_straightel/
;;
(setq straight-check-for-modifications nil)

;;
;; bootstrap package straight.el
;;
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

*** use-package

[[https://github.com/jwiegley/use-package][use-package]] is a macro that provides convenient syntactic sugar for many common tasks
related to installing and configuring *Emacs* packages. Of course, it does not actually
install the packages, but instead defers to a package manager, like [[https://github.com/radian-software/straight.el][Straight]].

To use use-package, first install it with [[https://github.com/radian-software/straight.el][Straight]]:

#+begin_src emacs-lisp :tangle config/init-package-manager.el
;;
;; To use use-package, first install it with straight.el
;;
(straight-use-package 'use-package)
#+end_src

Now =use-package= will use [[https://github.com/radian-software/straight.el][Straight]] to automatically install missing packages if you provide =:straight t=.

Customize =straight-use-package-by-default= to make it so that =:straight t= is assumed unless you explicitly
override it with =:straight nil=.

Specifying =:straight t= is unnecessary if you set =straight-use-package-by-default= to a non-nil value.

#+begin_src emacs-lisp :tangle config/init-package-manager.el
;;
;; No more ':straight t' necessary anymore
;;
(defvar straight-use-package-by-default)
(setq straight-use-package-by-default t)
;(setq straight-fix-flycheck t)
#+end_src

Any code that relates to /[[https://wikemacs.org/wiki/Package.el][package.el]]/ should be removed; for example, references to =package-initialize=,
=package-archives=, and (if you're using =use-package=) =:ensure= or =use-package-always-ensure=.

While it is technically possible to use both  /[[https://wikemacs.org/wiki/Package.el][package.el]]/ and [[https://github.com/radian-software/straight.el][Straight]] at the same time, there is no real
reason to, and it might result in oddities like packages getting loaded more than once.

Out of the box, you can install any package listed on [[https://melpa.org/#/][MELPA]], [[https://elpa.gnu.org/][GNU ELPA]], or [[https://github.com/emacsmirror][Emacsmirror]], which is to say any
package in existence. (Although  [[https://melpa.org/#/][MELPA]] is used as a package listing, packages are installed by cloning their
[[https://git-scm.com/][Git]] repositories rather than by downloading tarballs like /[[https://wikemacs.org/wiki/Package.el][package.el]]/ does.)

If the package or your configurations aren't being loaded, you probably have something wrong with your
usage of =:init= and =:config=. By default, the behavior of =use-package= is inconsistent:
You must set either =use-package-always-defer= (override with =:demand t=) or =use-package-always-demand=
(override with =:defer t=) to set a default for whether evaluating a =use-package= form will load the
package and your configurations.

If you've set a package to be deferred, you then need to make sure there's a way for it to get loaded when
needed, for example by means of an autoload (either provided by the package, or set up automatically
by =use-package= via =:bind=, or set up manually through =use-package= via =:commands=) or by an explicit
require in one of your custom commands.

If you do want to start optimizing your startup, you will likely end up using just =:hook= for mode triggered
loading and =:defer t= for command triggered loading!

*** Provide the diminish.el package


[[https://github.com/emacsmirror/diminish][Diminish]] implements hiding or abbreviation of the mode line displays (lighters) of minor-modes.
When [[https://github.com/emacsmirror/diminish][diminish]] is installed, you can use the =:diminish= keyword in =use-package= calls. If diminish is not
installed, the =:diminish= keyword does nothing.

#+begin_src emacs-lisp :tangle config/init-package-manager.el
;;
;; Avoid mode line cluttering by using :diminish
;;
(use-package diminish
  :demand t
  :config
        (diminish 'org-indent-mode)
)
#+end_src

*** Provide the dim.el package

The [[https://github.com/alezost/dim.el][dim]] package can be used to change the names of major and minor modes that are displayed in the mode-line.

#+begin_src emacs-lisp :tangle config/init-package-manager.el
;;
;; Allow better names for major and minor modes on the command line.
;;
(use-package dim
  :demand t
  :config
    (dim-major-name 'scheme-mode "λ")
    (dim-major-name 'help-mode "🄷")
    (dim-minor-name 'isearch-mode " 🔎")
    (dim-minor-name 'view-mode " 👀" 'view)
)
#+end_src

*** Provide the bind-key.el package

[[https://github.com/jwiegley/use-package][Use-package]] contains the package
[[https://github.com/jwiegley/use-package/blob/master/bind-key.el][bind-key]]
which is required at various places of the configuration.

#+begin_src emacs-lisp :tangle config/init-package-manager.el
(use-package bind-key :straight use-package)
#+end_src

* Basic setup

Some fundamental setting that *Psimacs* uses are collected here.

** Personal information

Personal information settings for *Psimacs*. The /private/ folder content is not part of the public bundle.
Package =private/init-private.el= is loaded if it exists and its settings are applied.

#+begin_src emacs-lisp :tangle config/init-basic-private.el :var file-description="Basic private setup"
;;
;; Private directory and file might exists; not mandatory.
;;
(setq user-full-name    "Your Name"
      user-mail-address "Your Email"
      calendar-latitude  0
      calendar-longitude 0
      calendar-location-name "Your city, country"
)

(when (file-directory-p psimacs/config/private-dir)
  (add-to-list 'load-path psimacs/config/private-dir)

  (when (file-exists-p psimacs/config/private-file)
    (require 'init-private)))

(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs configured for user %s %s in %s" user-full-name user-mail-address calendar-location-name)))
#+end_src

** Measuring the startup performance

*** Print the startup time

In order to get expressive timing information about the initialization process, *Psimacs* always prints the
actual startup time into the *Message* buffer.

#+begin_src emacs-lisp :tangle config/init-basic-system.el :var file-description="Basic system setup"
;;
;; Perfromance measuring at the end of the initialization
;;
(defun psimacs/config/display-startup-time ()
    "Print the startup time to the message buffer."
    (when psimacs/config/startup-timing
        (let ((rev-list (nreverse psimacs/config/startup-timing-result)))
            (while rev-list
                (message "%s" (car rev-list))
                (setq rev-list (cdr rev-list))
            )
        )
    )

    (message
        "Emacs has loaded in %s with exactly %d garbage collections."
        (format "%.2f seconds" (float-time (time-subtract after-init-time before-init-time)))
        gcs-done
    )
)

(add-hook 'emacs-startup-hook #'psimacs/config/display-startup-time)
#+end_src

*** Detail startup benchmarking

This is a simple benchmark of calls to *Emacs* /require/ and /load/ functions. It can be used to keep track
of where time is being spent during *Emacs* startup in order to optimize startup times.

Usage: The following commands and functions can be used to govern the benchmarking.


| =benchmark-init/show-durations-tabulated= |
| =benchmark-init/show-durations-tree=      |
|                                         |
| =benchmark-init/activate=                 |
| =benchmark-init/deactivate=               |


Using =:defer N= with an integer is for a rare scenario where you do want the package to always be unconditionally
loaded on startup (and not reactively as the result of a file mode or executed command) and want to kick it out by
a few seconds to technically save some startup time.

I personally don't recommend this since it's not going to speed up your actual "time to full functionality," but
instead just improve a narrowly defined metric of "startup time."

References to benchmarking:
- [[https://www.emacswiki.org/emacs/BenchmarkInit][BenchmarkInit]]
- [[https://github.com/dholm/benchmark-init-el][benchmark-init]]
- [[https://www.emacswiki.org/emacs/OptimizingEmacsStartup][OptimizingEmacsStartup]]
- [[https://www.emacswiki.org/emacs/ProfileDotEmacs][Profile Dot Emacs]]

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Detail benchmarking: see benchmark-init/show-durations-tabulated and benchmark-init/show-durations-tree
;; Activated on default.
;;
(use-package benchmark-init
    :demand t
    :init
        (benchmark-init/activate)
)
#+end_src

** Avoid truncated output, i.e annoying ellipsis

The options eval-expression-print-level and eval-expression-print-length control the maximum depth
and length of lists to print in the result of the evaluation commands before abbreviating them. They
are described in the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Eval.html][Lisp evaluation]] section of the *Emacs* manual.

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Avoid truncated output, i.e annoying ellipsis
;;
(setq eval-expression-print-level nil)
(setq eval-expression-print-length nil)
#+end_src

** Performance optimizations

Try to optimize *Psimacs* as much as possible (as far as my *Emacs* knowledge goes).

*** CANCELED Garbage collect when out of focus

Let *Psimacs* perform garbage collection if it does not have the focus.

#+begin_src emacs-lisp :tangle config/init-basic-optimizations.el :var file-description="Basic performance optimizations"
;;
;; Verbose garbage collector
;;
;; (setq garbage-collection-messages t)

;;
;; Garbage collect when out of focus
;;
(add-hook 'emacs-startup-hook
    (lambda ()
      (if (boundp 'after-focus-change-function)
          (add-function :after after-focus-change-function
                        (lambda ()
                          (unless (frame-focus-state)
                            (garbage-collect))))
        (add-hook 'after-focus-change-function 'garbage-collect))))
#+end_src

*** CANCELED Avoid garbage collection in minibuffer

Avoid performing garbage collection operations when using the minibuffer. We do this by enlarging the
garbage collection threshold.

#+begin_src emacs-lisp :tangle config/init-basic-optimizations.el
;;
;; Avoid garbage collection in minibuffer
;;
(defun psimacs/config/gc-minibuffer-setup-hook ()
  "Enlarge the current gc-cons-threshold"
  (setq gc-cons-threshold (* psimacs/config/gc-cons-threshold 10)))

(defun psimacs/config/gc-minibuffer-exit-hook ()
  "Garbage collect and reset the gc-cons-threshold"
  (garbage-collect)
  (setq gc-cons-threshold psimacs/config/gc-cons-threshold))

(add-hook 'minibuffer-setup-hook #'psimacs/config/gc-minibuffer-setup-hook)
(add-hook 'minibuffer-exit-hook  #'psimacs/config/gc-minibuffer-exit-hook)
#+end_src

*** Use the garbage collector magic hack

Enforce a sneaky Garbage Collection strategy to minimize GC interference with the activity.

During normal use a high GC threshold is set. When idling GC is immediately triggered and a low threshold is set.
The [[https://github.com/emacsmirror/gcmh][GCMH (the Garbage Collector Magic Hack)]] package provides us with this functionality.

The GC introduces annoying pauses and stuttering into our Emacs experience,
so we use  [[https://github.com/emacsmirror/gcmh][GCMH]] to stave off the GC while we're using Emacs, and provoke it
when it's idle. However, if the idle delay is too long, we run the risk of
runaway memory usage in busy sessions. If it's too low, then we may as well
not be using gcmh at all.

#+begin_src emacs-lisp :tangle config/init-basic-optimizations.el
;;
;; Use the garbage collector magic hack
;;
(use-package gcmh
    :diminish
    :custom
        (gcmh-auto-idle-delay-factor 20)  ;; Factor to compute the idle delay when in idle-delay auto mode.
                                          ;; The idle delay will be `gcmh-auto-idle-delay-factor' times the
                                          ;; time the last non idle garbage collection time.
        (gcmh-idle-delay 'auto)           ;; Idle time to wait in seconds before triggering GC.
                                          ;; If `auto' this is auto computed based on
                                          ;; `gcmh-auto-idle-delay-factor'.

        (gcmh-verbose nil)                ;; If t, print a message when garbage collecting.


        (gcmh-low-cons-threshold  psimacs/config/gc-low-cons-threshold)   ;; This is the GC threshold used while idling.
        (gcmh-high-cons-threshold psimacs/config/gc-high-cons-threshold)  ;; This should be set to a value that makes GC
                                                                          ;; unlikely but does not cause OS paging.
    :hook
        (emacs-startup . gcmh-mode)
)
#+end_src

*** Process data exchange

Increase the amount of data which *Emacs* reads from processes. Again the *Emacs* default is too low 4K
considering that the some of the language server responses are in 800k - 3M range.

#+begin_src emacs-lisp :tangle config/init-basic-optimizations.el
;;
;; lsp-mode optimization
;;
(setq read-process-output-max 1MB)
#+end_src

** Keyboard configuration

References about keyboard configuration and key bindings:
- [[https://karl-voit.at/2018/07/08/emacs-key-bindings/][UOMF: My Emacs Key Binding Strategy]]
- [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][Mastering Key Bindings in Emacs]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Windows-Keyboard.html][Keyboard Usage on MS-Windows]]
- [[http://www.wilfred.me.uk/blog/2018/01/06/the-emacs-guru-guide-to-key-bindings/][The Emacs Guru Guide to Key Bindings]]
- [[http://ergoemacs.org/emacs/emacs_hyper_super_keys.html][Emacs: How to Bind Super Hyper Keys]]
- [[https://www.emacswiki.org/emacs/AltGrKey][AltGrKey]]

*** How to type C-@ on a German Windows keyboard

Emacs keys may seem to be /hidden/ because MS Windows implements =AltGr= as =Alt + Left Control=.
Therefore key bindings such as =C-@= are quite difficult to type.

Solutions:
- Using the right control key

  #+begin_quote
  The trick is that you must type =AltGr= as the first key, and =Ctrl= must be the right control key,
  not the left one.
  #+end_quote

- Using =C-SPC= instead of =C-@=

  #+begin_quote
  It turns out that instead of =C-@= you can always type =C-SPC=.
  #+end_quote

*** Base configuration of the keyboard

Basically, we stay with the default *Emacs* keyboard configuration. We swallow the =<lwindow>=, =<rwindow>= and =<apps>=
keys as far as possible. We will use them for =<super>= and =<hyper>= prefix keys for *Psimacs* own key bindings.

#+begin_src emacs-lisp :tangle config/init-basic-system.el
(if psimacs/system/is-win32-p
      (progn
        ;;
        ;; Base keyboard configuration: Stay with the defaults, but swallow <lwindow>, <rwindow> ans <apps> if possible
        ;;
        (setq w32-alt-is-meta t                ;; The meta modifier is interpreted as the Alt key (the default)
              ;;w32-register-hot-key [M-tab]   ;; Allow a key sequence M-tab to be seen by Emacs instead of being grabbed by
                                               ;; Windows. Normal Windows handling is probably the better option :-)



              ;;w32-capslock-is-shiftlock t    ;; The CapsLock key will affect non-character keys as well, as if you pressed
                                               ;; the Shift key while typing the non-character key.

              w32-enable-caps-lock t           ;; If the variable w32-enable-caps-lock is set to a nil value, the CapsLock
                                               ;; key produces the symbol capslock instead of the shifted version of they keys.
                                               ;; The default value is t.

              w32-enable-num-lock t            ;; If w32-enable-num-lock is nil, the NumLock key will produce the symbol
                                               ;; kp-numlock. The default is t, which causes NumLock to work as expected:
                                               ;; toggle the meaning of the keys on the numeric keypad.

              32-recognize-altgr t             ;; Whether the <AltGr> key (if it exists on your keyboard), or its equivalent,
                                               ;; the combination of the right <Alt> and left <Ctrl> keys pressed together,
                                               ;; is recognized as the <AltGr> key. The default is t, which means these keys
                                               ;; produce AltGr; setting it to nil causes <AltGr> or the equivalent key
                                               ;; combination to be interpreted as the combination of <Ctrl> and <Meta>
                                               ;; modifiers.

              w32-pass-lwindow-to-system nil   ;; the <lwindow> key is silently swallowed by Emacs, and not passed to Windows.
              w32-pass-rwindow-to-system nil   ;; the <rwindow> key is silently swallowed by Emacs, and not passed to Windows.
              w32-pass-apps-to-system nil      ;; the    <apps> key is silently swallowed by Emacs, and not passed to Windows.

              w32-scroll-lock-modifier nil     ;; Do not specialize the scroll lock key
        )
      )
    (progn
      nil
    )
)
#+end_src

*** Hyper and Super prefix keys

*Psimacs* uses the =<super>= and =<hyper>= key prefixes for all of its own key bindings.

#+begin_src emacs-lisp :tangle config/init-basic-system.el
(if psimacs/system/is-win32-p
      (progn
        ;;
        ;; <lwindow>, <rwindow> and <apps>
        ;;
        (setq  w32-lwindow-modifier 'super
               w32-rwindow-modifier 'super
               w32-apps-modifier    'hyper
        )

        (w32-register-hot-key [s-])
        (w32-register-hot-key [H-])
      )
    (progn
      ;; on nowadays linux, <windows> key is usually configured to Super

      ;; menu key as hyper (Note: for H-s, you need to release <menu> key before pressing 's')
      (define-key key-translation-map [menu] 'event-apply-hyper-modifier) ;H-
      (define-key key-translation-map [apps] 'event-apply-hyper-modifier)

      ;; by default, Emacs bind <menu> to execute-extended-command (same as M-x)
      ;; now <menu> defined as 'hyper, we need to press <menu> twice to get <H-menu>
      (global-set-key (kbd "<H-menu>") 'execute-extended-command)
    )
)

;; (defun psimacs/config/prefix-key-test-super ()
;;   (interactive)
;;   (message "Super key pressed"))

;; (defun psimacs/config/prefix-key-test-hyper ()
;;   (interactive)
;;   (message "Hyper key pressed"))

;; (global-set-key [(super t)] 'psimacs/config/prefix-key-test-super)
;; (global-set-key [(hyper t)] 'psimacs/config/prefix-key-test-hyper)
#+end_src

*** Strip unused key bindings

Free up unused and unnecessary keybindings.

There are a great many keybindings that are actively hostile, in that they are bound to useless or obsolete functions
that are really easy to trigger accidentally.

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Strip unused key bindings
;;
(unbind-key "C-z")              ;; suspend-frame
(unbind-key "M-o")              ;; facemenu-mode
(unbind-key "<mouse-2>")        ;; pasting with mouse-wheel click
(unbind-key "<C-wheel-down>")   ;; text scale adjust
#+end_src

*** Personal key prefix map

For *Psimacs* own functions and goodies separate key prefix maps are defined:

| Prefix command | Description               |
|----------------+---------------------------|
| =H-SPC=          | Hydras                    |
| =H-h=            | Help                      |
| =H-c=            | common user commands      |
| =H-x=            | common execution commands |
| =H-m=            | special user commands     |
|----------------+---------------------------|


#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Separate prefix key maps for Psimacs own bindings
;;
(define-prefix-command 'psimacs/config/global-key-map/common)     ;; used for common user commands
(define-prefix-command 'psimacs/config/global-key-map/special)    ;; special user commands
(define-prefix-command 'psimacs/config/global-key-map/execute)    ;; used for common execution commands
(define-prefix-command 'psimacs/config/global-key-map/hydra)      ;; uses solely for accessing hydras
(define-prefix-command 'psimacs/config/global-key-map/help)       ;; uses solely for accessing help

(global-set-key (kbd "H-SPC") psimacs/config/global-key-map/hydra)
(global-set-key (kbd "H-h"  ) psimacs/config/global-key-map/help)
(global-set-key (kbd "H-c"  ) psimacs/config/global-key-map/common)
(global-set-key (kbd "H-x"  ) psimacs/config/global-key-map/execute)

;(global-set-key (kbd "s-SPC") psimacs/config/global-key-map/hydra)
;(global-set-key (kbd "s-h"  ) psimacs/config/global-key-map/help)
;(global-set-key (kbd "s-c"  ) psimacs/config/global-key-map/common)
;(global-set-key (kbd "s-x"  ) psimacs/config/global-key-map/execute)

(global-set-key (kbd "H-m" ) psimacs/config/global-key-map/special)
;(global-set-key (kbd "H-," ) psimacs/config/global-key-map/special)
;(global-set-key (kbd "s-m" ) psimacs/config/global-key-map/special)
;(global-set-key (kbd "s-," ) psimacs/config/global-key-map/special)

(defun psimacs/config/greetings ()
   "Print hello to message buffer."
   (interactive)
   (message "hello from psimacs"))

(define-key psimacs/config/global-key-map/common  (kbd "C-t C-t") 'psimacs/config/greetings)
(define-key psimacs/config/global-key-map/special (kbd "C-t C-t") 'psimacs/config/greetings)

;;
;; Provide the Windows OS default frame closing expirience
;;
(defun psimacs/config/delete-frame ()
    "This function deletes the selected frame. If the last frame it leaves emacs."
    (interactive)
    (if (= (length (frame-list)) 1)
        (save-buffers-kill-terminal)
      (delete-frame)
      )
)

(global-set-key (kbd "M-<f4>" ) 'psimacs/config/delete-frame)
#+end_src

*** Extend the universal-argument handling to the Hyper key

Because numeric arguments are so useful they are bound to a multitude of keys.
The idea is minimizing the finger movements. For that reason, *Psimacs* extends
that for its =<hyper>= key as well.

Reference:
- [[https://www.masteringemacs.org/article/effective-editing-movement][Effective Editing I: Movement]]

#+begin_src emacs-lisp :tangle config/init-basic-system.el
(global-set-key (kbd "H-0") 'digit-argument)
(global-set-key (kbd "H-1") 'digit-argument)
(global-set-key (kbd "H-2") 'digit-argument)
(global-set-key (kbd "H-3") 'digit-argument)
(global-set-key (kbd "H-4") 'digit-argument)
(global-set-key (kbd "H-5") 'digit-argument)
(global-set-key (kbd "H-6") 'digit-argument)
(global-set-key (kbd "H-7") 'digit-argument)
(global-set-key (kbd "H-8") 'digit-argument)
(global-set-key (kbd "H-9") 'digit-argument)

(global-set-key (kbd "H--") 'negative-argument)
(global-set-key (kbd "H-u") 'universal-argument)
#+end_src

*** Make C-g a bit more helpful

=C-g= should behave more then expected:
- When the region is active, disable it.
- When a minibuffer is open, but not focused, close the minibuffer.
- When the Completions buffer is selected, close it.
- In every other case use the regular `keyboard-quit'."

| Key binding | Command                                   | Description    |
|-------------+-------------------------------------------+----------------|
| =C-g=         | =M-x psimacs/config/keyboard-quit-dwim=   | Quit or abort. |
|-------------+-------------------------------------------+----------------|

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Make C-g a bit more helpful
;;
(defun psimacs/config/keyboard-quit-dwim ()
  "Do-What-I-Mean behaviour for a general `keyboard-quit'.

The generic `keyboard-quit' does not do the expected thing when
the minibuffer is open.  Whereas we want it to close the
minibuffer, even without explicitly focusing it.

The DWIM behaviour of this command is as follows:

- When the region is active, disable it.
- When a minibuffer is open, but not focused, close the minibuffer.
- When the Completions buffer is selected, close it.
- In every other case use the regular `keyboard-quit'."
  (interactive)
  (cond
   ((region-active-p)
    (keyboard-quit))
   ((derived-mode-p 'completion-list-mode)
    (delete-completion-window))
   ((> (minibuffer-depth) 0)
    (abort-recursive-edit))
   (t
    (keyboard-quit)))
)

(define-key global-map (kbd "C-g") #'psimacs/config/keyboard-quit-dwim)
#+end_src

*** Cancels All

Call command =keyboard-escape-quit= immediately on pressing key =H-g=.

See also:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Quitting.html][Quitting and Aborting]]

| Key binding | Command                  | Description    |
|-------------+--------------------------+----------------|
| =H-g=         | =M-x keyboard-escape-quit= | Quit or abort. |
|-------------+--------------------------+----------------|

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Cancels all with <H-g>
;;
(global-set-key (kbd "H-g") 'keyboard-escape-quit)
#+end_src

*** Key cast

The [[https://github.com/tarsius/keycast][keycast]] package provides two modes that display the current command and its key or
mouse binding, and update the displayed information once another command is invoked.

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Show current command and its key or mouse bindings.
;;
(use-package keycast
    :commands keycast-mode
    :hook (after-init . keycast-mode)
    :config
        (define-minor-mode keycast-mode
          "Show current command and its key binding in the mode line."
          :global t
          :group 'dotfiles
          (if keycast-mode
              (progn
                (add-hook 'pre-command-hook 'keycast--update t)
                (add-to-list 'global-mode-string '("" keycast-mode-line "    ")))
            (remove-hook 'pre-command-hook 'keycast--update)
            (setq global-mode-string (remove '("" keycast-mode-line "   ") global-mode-string))))

        (custom-set-faces
         '(keycast-command ((t (:inherit doom-modeline-debug :height 0.9))))
         '(keycast-key     ((t (:inherit custom-modified :height 1.1 :weight bold)))))
)
#+end_src

** User Site-Lisp load path

Our own /Emacs/ code resides in one directory that must be added to the load path.

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Our site-lisp directory.
;;
(when (file-directory-p psimacs/config/work-lisp-dir)
    (add-to-list 'load-path psimacs/config/work-lisp-dir)
)

(add-to-list 'load-path psimacs/config/site-lisp-dir)
#+end_src

** Do not show those confusing warnings when installing packages

When installing a new package, Emacs will show a buffer that contains any warnings
produced by the byte compiler. While this information is useful for developers, it
is highly confusing for users.

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Do not show those confusing warnings when installing packages
;;
(add-to-list 'display-buffer-alist
             '("\\`\\*\\(Warnings\\|Compile-Log\\)\\*\\'"
               (display-buffer-no-window)
               (allow-no-window . t)))
#+end_src

** Automatically compile outdated elips files

The [[https://github.com/emacscollective/auto-compile][Auto-compile]] package provides two minor modes which automatically recompile Emacs Lisp source files.
Together these modes guarantee that Emacs never loads outdated byte code files.

Further reading: [[https://www.emacswiki.org/emacs/AutoRecompile][EmacsWiki: Auto Recompile]]

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Automatically recomile elips files
;;
(use-package auto-compile
    :demand t
    :config
        (auto-compile-on-load-mode)  ;; Force recompilation on load of .el file.
        (auto-compile-on-save-mode)  ;; Force recompilation on save of .el file.

        (setq load-prefer-newer t    ;; Avoid byte-compiled files that are older than their respective source files.
              auto-compile-display-buffer nil  ;; Avoid annoying pop up of the Compile-Log buffer when a file is saved
              auto-compile-mode-line-counter t ;; Only show the number of compile warnings for the current file in
                                               ;; the mode-line.

              auto-compile-source-recreate-deletes-dest t  ;; Whether to delete leftover byte code file when creating
                                                           ;; source file.
        )

        ;(setq auto-compile-toggle-deletes-nonlib-dest   t)      ; Whether to delete non-library byte code files when toggling compilation.
        ;(setq auto-compile-update-autoloads             t)      ; Whether to update autoloads after compiling.
        ;(add-hook 'auto-compile-inhibit-compile-hook
        ;          'auto-compile-inhibit-compile-detached-git-head)
)
#+end_src

** HTML Documentation

Provide keybindings for conveniently access of the *Psimacs* HTML documentation and keybindings.

| Key binding | Command                                                                            | Description                                            |
|-------------+------------------------------------------------------------------------------------+--------------------------------------------------------|
| =H-<f1>=      | =M-x (lambda() (interactive) (browse-url psimacs/config/keybindings-html-file)))=    | Open *Psimacs* keybindings as Html in default browser.   |
| =H-<f2>=      | =M-x (lambda() (interactive) (browse-url psimacs/config/init-html-file)))=           | Open *Psimacs* configuration as Html in default browser. |
| =H-S-<f1>=    | =M-x (lambda() (interactive) (eww-open-file psimacs/config/keybindings-html-file)))= | Open *Psimacs* keybindings as Html in =eww=.               |
| =H-S-<f2>=    | =M-x (lambda() (interactive) (eww-open-file psimacs/config/init-html-file)))=        | Open *Psimacs* configuration as Html in =eww=.             |
|-------------+------------------------------------------------------------------------------------+--------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-system.el
(use-package eww
    :straight nil
    :bind (
        ("H-<f1>"   . (lambda() (interactive) (browse-url psimacs/config/keybindings-html-file)))
        ("H-S-<f1>" . (lambda() (interactive) (eww-open-file psimacs/config/keybindings-html-file)))
        ("H-<f2>"   . (lambda() (interactive) (browse-url psimacs/config/init-html-file)))
        ("H-S-<f2>" . (lambda() (interactive) (eww-open-file psimacs/config/init-html-file)))
    )
)
#+end_src

** Hydra

The package [[https://github.com/abo-abo/hydra][hydra]] can be used to tie related commands into a family of short key bindings with a
common prefix - a /hydra/.

*Psimacs* provides many /hydras/ that gives another usage pattern of *Emacs*. All global /hydras/ are
conveniently accessible through bindings =H-SPC= or =s-SPC=. All *Psimacs* hydras commands start with string
=psimacs/hydra/=. A /hydra/ for the /hydras/ can be activated by pressing =H-SPC H-SPC=.

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Early load the hydra package.
;;
(use-package hydra)
#+end_src

In addition *Psimacs* installs the package [[https://gitlab.com/to1ne/use-package-hydra][use-package-hydra]] which provides =:hydra= keyword for =use-package=.
This allows the the definition of a single [[https://github.com/abo-abo/hydra][hydra]] or a list of [[https://github.com/abo-abo/hydra][hydras]] with the same arguments that as =defhydra=
does.

References:
- [[https://codeberg.org/MooersLab/emacs-hydra-examples][Examples of hydras for Emacs]]


#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Additinally load package use-package-hydra to get :hydra support in use-package
;;
(use-package use-package-hydra)
#+end_src

Similar, the packages [[https://github.com/jerrypnz/major-mode-hydra.el][pretty-hydra]] and  [[https://github.com/jerrypnz/major-mode-hydra.el][major-mode-hydra]] allow the easy setup of nice looking [[https://github.com/abo-abo/hydra][hydras]].
They provide the following functions for defining hydras:

| Function                 | Description                                                                                                                  |
|--------------------------+------------------------------------------------------------------------------------------------------------------------------|
| =pretty-hydra-define=      | Takes columns of /hydra heads/ and expands to =defhydra= calls with pretty docstrings generated from the heads.                  |
| =pretty-hydra-define+=     | Add /heads/ to an already existing [[https://github.com/jerrypnz/major-mode-hydra.el][pretty-hydra]].                                                                               |
|--------------------------+------------------------------------------------------------------------------------------------------------------------------|
| =major-mode-hydra-define=  | Takes a /major-mode/ and columns of /hydra heads/ and expands to =defhydra= calls with pretty docstrings generated from the heads. |
| =major-mode-hydra-define+= | Add /heads/ to an already existing [[https://github.com/jerrypnz/major-mode-hydra.el][major-mode-hydra]].                                                                           |
|--------------------------+------------------------------------------------------------------------------------------------------------------------------|

| use-package keyword |
|---------------------|
| =:pretty-hydra=       |
| =:mode-hydra=         |
|---------------------|

#+begin_src emacs-lisp :tangle config/init-basic-system.el
(use-package pretty-hydra
    :demand t
    :init
        (cl-defun psimacs/config/pretty-hydra-title (title &optional icon-type icon-name &key face height v-adjust)
          "Add an icon in the hydra title."
              (let ( (face (or face `(:foreground ,(face-background 'highlight))))
                     (height (or height 1.0))
                     (v-adjust (or v-adjust 0.0)) )
                (concat
                   (when (and icon-type icon-name)
                     (let ((f (intern (format "all-the-icons-%s" icon-type))))
                       (when (fboundp f)
                         (concat
                          (apply f (list icon-name :face face :height height :v-adjust v-adjust)) " "))))
                   (propertize title 'face face))))
)

(use-package major-mode-hydra
    :demand t
    :config (setq major-mode-hydra-title-generator
                   '(lambda (mode)
                     (s-concat "\n"
                               (s-repeat 10 " ")
                               (all-the-icons-icon-for-mode mode :v-adjust 0.05)
                               " "
                               (symbol-name mode))))
    :bind (
             :map psimacs/config/global-key-map/hydra
                  ("m" . major-mode-hydra)
          )
)
#+end_src

** Transient

[[https://github.com/magit/transient][Transient]] is the library used to implement the keyboard-driven /menus/ in [[https://github.com/magit/magit/][Magit]].
It is distributed as a separate package, so that it can be used to implement similar menus in other packages.

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Magit requires a newer version than the built-in.
;;
(use-package transient
  :demand t
  :config
    (setq transient-levels-file psimacs/config/transient-levels-file)
    (setq transient-values-file psimacs/config/transient-values-file)
    (setq transient-history-file psimacs/config/transient-history-file)
)
#+end_src

** Info system

Add the [[https://www.msys2.org/][MSYS2]] info pathes to the *Emacs Info* search path.

*Attention:* In case that the =info/dir= files in the [[https://www.msys2.org/][MSYS2]] installation are missing or not up to date run in a [[https://www.msys2.org/][MSYS2]]
bash shell the following code each =info= directory. This will create or update the =info/dir= files.

#+begin_src
cd \ils/msys64/usr/share/info
for i in *info*; do install-info.exe $i dir; done

cd c:/utils/msys64/mingw64/share/info
for i in *info*; do install-info.exe $i dir; done
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Extend Emacs info system with the msys2 info material
;;
(require 'info)
(add-to-list 'Info-additional-directory-list psimacs/config/msys-info-dir)
(add-to-list 'Info-additional-directory-list psimacs/config/msys-env-info-dir)
#+end_src

** Printing on Windows

*Psimacs* currently supports two sets of commands for printing on windows:

| Key binding   | Command                        | Description                                     |
|---------------+--------------------------------+-------------------------------------------------|
| =H-m C-p C-p b= | =M-x print-buffer=               | B/W print hardcopy of buffer on default printer |
| =H-m C-p C-p r= | =M-x print-region=               | B/W print hardcopy of region on default printer |
|---------------+--------------------------------+-------------------------------------------------|
| =H-m C-p C-q p= | =M-x ps-print-buffer=            | B/W print buffer via Ghostscript                |
| =H-m C-p C-q r= | =M-x ps-print-region=            | B/W print region via Ghostscript                |
|---------------+--------------------------------+-------------------------------------------------|
| =H-m C-p C-f p= | =M-x ps-print-buffer-with-faces= | Color print buffer via Ghostscript              |
| =H-m C-p C-f r= | =M-x ps-print-region-with-faces= | Color print region via Ghosts                   |
|---------------+--------------------------------+-------------------------------------------------|

For the =print-*= commands to function, I was forced to do some extra work outside of *Emacs*. The reason is that
I am using a network printer with its own IP address. IMHO, *Emacs* does not handle this situation out of the box.
At first I followed the [[https://www.emacswiki.org/emacs/MsWindowsNetworkPrinter][Ms Windows Network Printer]] instructions. That basically work for me. However, I discovered
that I just need to share my printer and then call the following =shell-command= to create a virtual printer
port /LPT3/:

#+begin_src
net use LPT3: "\\127.0.0.1\EPSON ET-4750 Series"
#+end_src

I simply integrated this call into my =psimacs.cmd= command and set the =printer-name= to the virtual printer
port /LPT3/ in the configuration.

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Support for the printer-* commands
;;
(when psimacs/system/is-win32-p
  (setq printer-name "LPT3:")
)
#+end_src

For the =ps-print-*= commands to work I needed to install [[https://www.ghostscript.com/][Ghostscript]]. First I tried the [[https://www.msys2.org/][MSYS2]] which I was not able
to get working correctly. Therefore I tried the 64 Bit [[https://www.ghostscript.com/download/gsdnld.html][Windows installer]] from the [[https://www.ghostscript.com/][Ghostscript]] download site. This worked
perfectly. In order to set this up I followed the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Windows-Printing.html][Printing and MS-Windows]] *Emacs* manual instructions.


#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Support for the ps-print-* commands
;;
(when psimacs/system/is-win32-p
  (setq ps-printer-name t)
  (setq ps-lpr-command psimacs/config/ghostscript-exe)
  (setq ps-lpr-switches '("-q" "-dNOPAUSE" "-dBATCH" "-sDEVICE=mswinpr2" "-sPAPERSIZE=a4"))

  ;;
  ;; Some extra printing customizations that I currently not use
  ;;
  ;; (setq ps-top-margin 0
  ;;       ps-left-margin 0
  ;;       ps-right-margin 0
  ;;       ps-inter-column 0
  ;;       ps-landscape-mode t
  ;;       ps-number-of-columns 2
  ;;       ps-paper-type 'a4
  ;;       ps-font-size 8.25
  ;;       ps-line-number t
  ;;       ps-line-number-font-size 10
  ;;       ps-line-number-step 10
  ;;       ps-print-color-p 'black-white
  ;;       ps-print-header nil
  ;; )
)
#+end_src

** TODO Printing on Linux                                             :todo:

** Basic ELisp Libraries

Load some basic packages that provide support for more elegant [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]] programming.

The following links might be useful for diving deeper into [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Elisp]]:
- [[https://www.gnu.org/software/emacs/manual/eintr.html][Introduction to Programming in Emacs Lisp]]
- [[https://www.emacswiki.org/emacs/ElispCookbook][EmacsWiki: Lisp Cookbook]]
- [[http://wikemacs.org/wiki/Emacs_Lisp_Cookbook][WikEmacs: Emacs Lisp Cookbook]]
- [[https://github.com/chrisdone/elisp-guide][Emacs Lisp Guide]]
- [[https://www.masteringemacs.org/article/evaluating-elisp-emacs][Evaluating Elisp in Emacs]]
- [[http://ergoemacs.org/emacs/elisp.html][Practical Emacs Lisp]]

*** Dash Library

[[https://github.com/magnars/dash.el][Dash]] is a modern list api for *Emacs*. No 'cl required.

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Some basic library packages that mordenize elisp programming
;;
(use-package dash
    :config
        (global-dash-fontify-mode)
)
#+end_src

*** String manipulation with the s.el library

[[https://github.com/magnars/s.el][s]] is a [[https://github.com/magnars/s.el][string manipulation library]] that provides lots of =s-name= functions for easing string programming tasks.

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; A string manipulation library
;;
(use-package s)
#+end_src

*** A file system library named f.el

[[https://github.com/rejeep/f.el][f]] is a [[https://github.com/rejeep/f.el][file system library]] that provides lots of =f-name= functions for easing file system programming tasks.
Basically it provides a modern API for working with files and directories in *Emacs*.

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; A file system library
;;
(use-package f)
#+end_src

*** A Queue data structure library

[[https://www.dr-qubit.org/predictive/queue.el][Queue]] is part of the [[https://www.dr-qubit.org/emacs_data-structures.html][Emacs data structure packages]].

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; A queue data structure library for emacs
;;
(use-package queue)
#+end_src

*** CANCELED Alert an alternative notification interface

Just use [[https://github.com/jwiegley/alert][alert]] instead of message to get a stylized customizable notification interface for *Emacs*.

Usage exaples:

| =(alert "This is an alert")=                                    |
| =(alert "This is an alert" :severity 'high)=                    |
| =(alert "This is an alert" :severity 'trivial)=                 |
| =(alert "This is an alert" :title "My Alert")=                  |
| =(alert "This is an alert" :title "My Alert" :category 'debug)= |

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; A enhanced notification interface
;;
(use-package alert
    :commands alert
    :config
        (setq alert-default-style 'message))
#+end_src

** Customizations

*Psimacs* uses a special file =custom.el= that it uses for writing customization code.
That should avoid always changing the =init.el= file.

You can always create a /custom-file/ by running command =customize-save-customized=.

References about customization:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][Saving Customizations]]
- [[https://www.emacswiki.org/emacs/CustomizingAndSaving][EmacsWiki: Customizing And Saving]]

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Handling of the customization file
;;
(setq custom-file psimacs/config/custom-file)

(if (file-exists-p psimacs/config/custom-file)
    (load custom-file)
)

;;(add-hook 'kill-emacs-query-functions 'custom-prompt-customize-unsaved-options)
#+end_src

** Encoding system

I am by no means an expert in Encoding systems. I followed the implementation of
[[https://github.com/doomemacs/doomemacs][doomemacs]]. I have tested the following
and it worked so far:
- On Windows
    - cut and pase from Windows notepad to *Psimacs* scratch buffer with german /umlaut/ characters
    - tramp ssh connection linux box and editing and saving file with german /umlaut/ characters.
    - jupyter notebook in org-mode

See also:
- [[https://github.com/doomemacs/doomemacs][doomemacs]]
- [[https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs][Working with Coding Systems and Unicode in Emacs]]
- [[http://xahlee.info/emacs/emacs/emacs_file_encoding.html][Emacs Init: Set Default File Encoding]]
- [[http://xahlee.info/comp/unicode_intro.html][Unicode: Character Set, Encoding, UTF-8, Codepoint]]
- [[http://xahlee.info/comp/unicode_index.html][Unicode Characters]]
- [[https://www.emacswiki.org/emacs/ChangingEncodings][EmacsWiki: ChangingEncodings]]
- [[https://www.emacswiki.org/emacs/UnicodeEncoding][EmacsWiki: UnicodeEncoding]]
- [[http://ergoemacs.org/emacs/emacs_encoding_decoding_faq.html][Emacs File Encoding FAQ]]
- [[https://rufflewind.com/2014-07-20/pasting-unicode-in-emacs-on-windows][Pasting Unicode characters in Emacs (Windows)]]
- [[https://en.wikipedia.org/wiki/List_of_Unicode_characters][Wikipdia about Unicode Characters]]


#+attr_html: :class styledtable1
| Key binding | Command                               | Description                                                                                                                                                                                                       |
|-------------+---------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|             | =M-x revert-buffer-with-coding-system=  |                                                                                                                                                                                                                   |
|             | =M-x set-buffer-file-coding-system=     |                                                                                                                                                                                                                   |
|             | =M-x describe-coding-system=            | Information about coding system.                                                                                                                                                                                  |
|             | =M-x list-coding-systems=               |                                                                                                                                                                                                                   |
|             | =M-x find-file-literally=               | Open file without any conversion.                                                                                                                                                                                 |
| =C-x RET c=   | =M-x universal-coding-system-argument== | Ttakes as an argument the coding system you want to use, and a command to execute it with. That makes it possible to open files, shells or run Emacs commands as though you were using a different coding system. |
|-------------+---------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

See also content of variable =buffer-file-coding-system= by use of =C-h v=.

Goal:
- force Emacs to default to UTF-8
- convincing Emacs to treat files as UTF-8 by default, when no information in the file explicitly says it is.

#+begin_src emacs-lisp :tangle config/init-basic-system.el
;;
;; Encodings
;;

;;
;; Doomemacs says
;;    Contrary to what many Emacs users have in their configs, you don't need more
;;    than this to make UTF-8 the default coding system:'
(set-language-environment "UTF-8")

;;
;; ...but `set-language-environment' also sets `default-input-method', which is
;;    a step too opinionated.
;;
(setq default-input-method nil)

;;
;; ...And the clipboard on Windows is often a wider encoding (UTF-16), so leave
;;    Emacs to its own devices there.
;;
(unless psimacs/system/is-win32-p
  (setq selection-coding-system 'utf-8))
#+end_src


** Encoding system :noexport:

I am in no means an expert in Encoding systems. I have not studied all the variables floating in encoding soup.
Below you find the encoding settings that I have in use. Probably this is to much or even wrong. Sorry, for
that.

See also:
- [[https://github.com/doomemacs/doomemacs][doomemacs]]
- [[https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs][Working with Coding Systems and Unicode in Emacs]]
- [[http://xahlee.info/emacs/emacs/emacs_file_encoding.html][Emacs Init: Set Default File Encoding]]
- [[http://xahlee.info/comp/unicode_intro.html][Unicode: Character Set, Encoding, UTF-8, Codepoint]]
- [[http://xahlee.info/comp/unicode_index.html][Unicode Characters]]
- [[https://www.emacswiki.org/emacs/ChangingEncodings][EmacsWiki: ChangingEncodings]]
- [[https://www.emacswiki.org/emacs/UnicodeEncoding][EmacsWiki: UnicodeEncoding]]
- [[http://ergoemacs.org/emacs/emacs_encoding_decoding_faq.html][Emacs File Encoding FAQ]]
- [[https://rufflewind.com/2014-07-20/pasting-unicode-in-emacs-on-windows][Pasting Unicode characters in Emacs (Windows)]]
- [[https://en.wikipedia.org/wiki/List_of_Unicode_characters][Wikipdia about Unicode Characters]]

#+attr_html: :class styledtable1
| Key binding | Command                               | Description                                                                                                                                                                                                       |
|-------------+---------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|             | =M-x revert-buffer-with-coding-system=  |                                                                                                                                                                                                                   |
|             | =M-x set-buffer-file-coding-system=     |                                                                                                                                                                                                                   |
|             | =M-x describe-coding-system=            | Information about coding system.                                                                                                                                                                                  |
|             | =M-x list-coding-systems=               |                                                                                                                                                                                                                   |
|             | =M-x find-file-literally=               | Open file without any conversion.                                                                                                                                                                                 |
| =C-x RET c=   | =M-x universal-coding-system-argument== | Ttakes as an argument the coding system you want to use, and a command to execute it with. That makes it possible to open files, shells or run Emacs commands as though you were using a different coding system. |
|-------------+---------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

See also content of variable =buffer-file-coding-system= by use of =C-h v=.

#+begin_src emacs-lisp :tangle no config/init-basic-system.el
;;
;;  that Emacs is totally UTF-8
;;
(when (fboundp 'set-charset-priority)
  (set-charset-priority   'unicode)
)

;;
;; https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs says
;;   'Note that in newer versions of Emacs you only need the first line...'
;;
(set-default-coding-systems     'utf-8)

;;
;; '...but if you find that it’s not enough to coax all aspects of your Emacs into your coding
;;  system of choice, you can use the longer and more involved method.'
;;

;;
;; Doomemacs says
;;   'Contrary to what many Emacs users have in their configs, you don't need more
;;   than this to make UTF-8 the default coding system:
;;
;; The language environment controls which coding systems to recognize when reading text.
;; Use command describe-language-environment. This tells you which languages this language
;; environment is useful for, and lists the character sets, coding systems, and input methods
;; that go with it.
;;
(set-language-environment      "UTF-8")     ; How to permanently choose a encoding system in emacs for opening and saving

;;
;; The set-locale-environment function normally uses the preferred coding system established by the
;; language environment to decode system messages.
;;
;;(set-locale-environment "en_US.UTF-8")


(prefer-coding-system      'utf-8)
;;(when psimacs/system/is-win32-p
;;    ;(prefer-coding-system      'utf-8-unix)
;;    (prefer-coding-system      'utf-8)
;;)

(set-default-coding-systems    'utf-8)
(set-buffer-file-coding-system 'utf-8)      ; How to set a encoding system for saving file
(set-file-name-coding-system   'utf-8)
(set-terminal-coding-system    'utf-8)      ; configured by prefer-coding-system
(set-keyboard-coding-system    'utf-8)      ; configured by prefer-coding-system

(cond (psimacs/system/is-win32-p
        (progn
            (set-selection-coding-system  'utf-16-le)    ; important on windows os
            (set-clipboard-coding-system  'utf-16-le)    ; included by set-selection-coding-system
            (w32-set-system-coding-system 'utf-8)
        ))
      (psimacs/system/is-linux-p
        (progn
            (set-selection-coding-system  'utf-8)
            (set-clipboard-coding-system  'utf-8)
            (setq select-enable-clipboard t)
        ))
      (t nil)
)

(setq locale-coding-system     'utf-8)

;;(when psimacs/system/is-win32-p
;;    ;(setq default-process-coding-system '(utf-8-dos . utf-8-dos))
;;    (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
;;)

;;(when psimacs/system/is-win32-p
;;    (prefer-coding-system      'utf-8-unix)
;;)

;; Set-language-environment sets default-input-method, which is unwanted.
(setq default-input-method nil) ; this is the default  value
#+end_src

** Emacs server

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][Using Emacs as a Server]] describes the details about configuration of an *Emacs server*. *Psimacs* uses a configuration
method that allows multiple different *Emacs's* be run simultaneously. However, only one can drive the *Emacs server*
at a time. *Psimacs* is configured in such a way that is starts the server only if no other *Emacs* instance exists
that does already run the server. /First come first serve/ principle. For that it uses the =EMACS_SERVER_FILE=
environment variable for server detection. If it is actually, the first one it sets the =EMACS_SERVER_FILE= variable
accordingly.

Caveat: This is only Windows OS specific and I do not know how to setup that on other systems.

References:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][Using Emacs as a Server]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/TCP-Emacs-server.html#TCP-Emacs-server][TCP Emacs server]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/emacsclient-Options.html][emacsclient Options]]

#+begin_src emacs-lisp :tangle config/init-basic-server.el :var file-description="Emacs server setup"
;;
;; Initialize Emacs server if it is not already running.
;;
(defvar psimacs/config/found-server-file
   (getenv "EMACS_SERVER_FILE")
   "The active server file.")

(if psimacs/system/is-win32-p
    (progn
      (when (and psimacs/system/is-gui-p
                 (or (not psimacs/config/found-server-file)
                     (equal psimacs/config/found-server-file psimacs/config/server-file)))
         (start-process "SETX" nil "setx" "EMACS_SERVER_FILE" psimacs/config/server-file)
         (add-hook 'kill-emacs-hook
                   (lambda ()
                     (call-process "reg.exe" nil nil nil "delete" "HKCU\\Environment" "/v" "EMACS_SERVER_FILE" "/f")))

          (unless (file-directory-p psimacs/config/server-dir)
              (make-directory psimacs/config/server-dir t)
          )

          (require 'server)

          (unless (server-running-p)
              (defun server-ensure-safe-dir (_dir) "Noop" t)  ; Suppress error "directory
                                                              ; ~/.emacs.d/server is unsafe"
                                                              ; on windows.

              (message "server-start")
              (server-start)
          )
      )

    )
  ;; else linux ...
  (unless (daemonp)
    (when psimacs/system/is-gui-p
      (require 'server)
      (unless (server-running-p)
        (message "server-start")
        (server-start)
      )
    )
  )
)
#+end_src

** Look and feel

Explicit user interface setup, like look and feel or theming.


*** Killing processes and leaving Emacs

Avoid annoying confirmation queries about killing running processes on exiting Emacs.


#+begin_src emacs-lisp :tangle config/init-basic-ui.el :var file-description="Basic user interface setup"
(setq confirm-kill-processes nil)
#+end_src

*** Basic user interface

No distracting splash screen or annoying startup message :-)

#+begin_src emacs-lisp :tangle config/init-basic-ui.el :var file-description="Basic user interface setup"
;;
;; No startup cludder
;;
(setq inhibit-startup-message t
      inhibit-startup-echo-area-message t
      inhibit-splash-screen t
)

;;
;; Get Emacs a bit more consistent, replace all yes or no questions with simple y or n.
;;
(setopt use-short-answers t)
#+end_src

*** Minibuffer/Completion settings

#+begin_src emacs-lisp :tangle config/init-basic-ui.el :var file-description="Basic user interface setup"
(setopt enable-recursive-minibuffers t)                ; Use the minibuffer whilst in the minibuffer
(setopt completion-cycle-threshold 1)                  ; TAB cycles candidates
(setopt completions-detailed t)                        ; Show annotations
(setopt tab-always-indent 'complete)                   ; When I hit TAB, try to complete, otherwise, indent
(setopt completion-styles '(basic initials substring)) ; Different styles to match input to candidates

(setopt completion-auto-help 'always)                  ; Open completion always; `lazy' another option
(setopt completions-max-height 20)                     ; This is arbitrary
(setopt completions-detailed t)
(setopt completions-format 'one-column)
(setopt completions-group t)
(setopt completion-auto-select 'second-tab)            ; Much more eager
;(setopt completion-auto-select t)                     ; See `C-h v completion-auto-select' for more possible values

(keymap-set minibuffer-mode-map "TAB" 'minibuffer-complete) ; TAB acts more like how it does in the shell
#+end_src


*** Bells

Avoid annoying bells as described in [[https://www.emacswiki.org/emacs/AlarmBell][Alarm Bell]] on [[https://www.emacswiki.org][EmacsWiki]].
The follwoing settings determines that *Emacs* should flash the mode line to represent a bell.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Flash mode line instead of bell
;;
(defun psimacs/config/flash-mode-line ()
  (invert-face 'mode-line)
  (run-with-timer 0.1 nil #'invert-face 'mode-line))

(setq visible-bell nil
      ring-bell-function 'psimacs/config/flash-mode-line)
#+end_src

*** Cursor

The cursor representation is described in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Cursor-Display.html][Displaying the Cursor]] and [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Cursor-Parameters.html][Cursor Parameters]]. *Psimacs* just show a box
cursor in the active window only.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Cursor visible only in the active window
;;
(setq-default cursor-in-non-selected-windows nil)
;;(setq-default cursor-type 'bar)

(setq blink-cursor-delay    10
      blink-cursor-interval 0.7)

;; Don't stretch the cursor to fit wide characters, it is disorienting,
;; especially for tabs.
(setq x-stretch-cursor nil)
#+end_src

*** Highlight current line

As described in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Cursor-Display.html#index-highlight-current-line][Displaying the Cursor]] and in [[https://www.emacswiki.org/emacs/HighlightCurrentLine][WikiEmacs: HighlightCurrentLine]] *Psimacs* makes the cursor even more
visible, by the use of hl-line-mode, a minor mode that highlights the line containing point.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Highlight line containing point
;;
(use-package hl-line
    :straight nil
    :hook ((text-mode prog-mode) . hl-line-mode)
    ;;:config
        ;; (global-hl-line-mode 1)
        ;; (set-face-background 'hl-line "seashell2")

        ;; (set-face-attribute 'hl-line nil :background "gray21")
        ;; (set-face-background 'hl-line "seashell2")
)
#+end_src

*** Beacon, highlight line on scrolling

Whenever the window scrolls up or down a light will blink on your cursor with the help of the [[https://github.com/Malabarba/beacon][beacon]] package.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Highlight on scrolling
;;
(use-package beacon
    :diminish beacon-mode
    :config
        (setq beacon-push-mark 35)
        (setq beacon-color "#666600")
        (beacon-mode 1)
)
#+end_src

*** Yanking position

Do not yank at the mouse position but at cursor position.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Do not yank at the mouse position but at cursor position.
;;
(setq mouse-yank-at-point t)
#+end_src

*** Mode line: time and column information

Show time in the mode line with the usual dispay time format as is customary in my part of the world.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Show time on mode line
;;
(setq display-time-24hr-format t)
(display-time-mode 1)
#+end_src

Beside the row I'd also like to see the column in the mode line.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Show rows and columns in the mode line.
;;
(column-number-mode)
#+end_src

*** Indicate buffer boundaries

Show buffer top and bottom in the margin.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
(setopt indicate-buffer-boundaries 'left)  ; Show buffer top and bottom in the margin
#+end_src

*** Scrolling

Do not centre the point before scrolling. Scroll one line at a time (less "jumpy" than defaults).
Scrolling is explained in [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#Textual-Scrolling][Textual Scrolling]] in the *Emacs* manual.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
  ;;
  ;; Scrolling: Adjust to your likening...
  ;;
  (setq scroll-step 1                                ; keyboard scroll: one line at a time
        scroll-conservatively 10000                  ; scroll one line at a time when you move the cursor past the top or bottom
        scroll-error-top-bottom t                    ; Move point to top/bottom of buffer before signaling a scrolling error.
        ;; Keeps screen position if the scroll command moved it vertically out of the
        ;; window.
        scroll-preserve-screen-position nil          ; this is not windows like, i.e. quite foreign

        ;; Enables faster scrolling through unfontified regions. This may result in
        ;; brief periods of inaccurate syntax highlighting immediately after scrolling,
        ;; which should quickly self-correct.
        fast-but-imprecise-scrolling t

        mouse-wheel-scroll-amount '(1 ((shift) . 1)) ; dito with wheel: one line at a time
        mouse-wheel-progressive-speed nil            ; don't accelerate scrolling
        mouse-wheel-follow-mouse 't                  ; scroll window under mouse

        ;; Reduce cursor lag by :
        ;; 1. Prevent automatic adjustments to `window-vscroll' for long lines.
        ;; 2. Resolve the issue of random half-screen jumps during scrolling.
        auto-window-vscroll nil

        next-line-add-newlines nil                   ; Don't automatically add new lines when scrolling down at the bottom of a buffer.
  )

  (pixel-scroll-precision-mode)                      ; Smooth scrolling
#+end_src

*** Smooth Scrolling

The [[https://github.com/aspiers/smooth-scrolling][smooth-scrolling]] package offers a minor mode which make emacs scroll smoothly. It keeps the point away from
the top and bottom of the current buffer's window in order to keep lines of context around the point visible as
much as possible, whilst minimising the frequency of sudden scroll jumps which are visually confusing.

You can toggle the  [[https://github.com/aspiers/smooth-scrolling][smooth-scrolling-mode]] with the following command.

| Key binding   | Command                   | Description                                  |
|---------------+---------------------------+----------------------------------------------|
| =H-m C-w C-s s= | =M-x smooth-scrolling-mode= | Enable or disable the smooth scrolling mode. |
|---------------+---------------------------+----------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; ...or additionally/alternatively use the smooth-scrolling package
;;
(use-package smooth-scrolling
    :demand t
    :config (smooth-scrolling-mode 1)
    :bind (
         :map psimacs/config/global-key-map/special
              ("C-w C-s s" . smooth-scrolling-mode)
        )
)
#+end_src

*** Confirmation request

Avoid annoying confirmations in various situations as described in [[https://www.masteringemacs.org/article/disabling-prompts-emacs][Disabling Prompts in Emacs]].

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Avoid annyoing conformations
;;
(setq confirm-nonexistent-file-or-buffer nil   ;; annoying confirmation if a file or buffer does not exist
                                               ;; when you use C-x C-f or C-x b
      ido-create-new-buffer 'always            ;; disabling the prompt that asks you if you want to create a
                                               ;; new buffer if you enter a non-existent buffer in C-x b
      kill-buffer-query-functions (remq        ;; do not asks if you want to kill a buffer with a live process attached
                                   'process-kill-buffer-query-function
                                   kill-buffer-query-functions)
)
#+end_src

Allow some things that emacs would otherwise liked to have confirmed.

E.g. be able to do =C-x C-u= / =C-x C-l= to upper/lowercase regions without confirmation.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Allow some things that emacs would otherwise liked to have confirmed.
;;
(put 'eval-expression  'disabled nil)
(put 'downcase-region  'disabled nil)
(put 'upcase-region    'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column  'disabled nil)
#+end_src

*** Titlebar

Have the titlebar contain name and file name of the current buffer.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; frame titelbar contains the name of the current buffer and the file name.
;;
(setq frame-title-format '("%b" (buffer-file-name ": %f")))
#+end_src

*** Automatically revert buffer

Whenever a file that *Psimacs* is editing has been changed by another program the user normally have to execute
the command =revert-buffer= to load the new content of the file into *Psimacs*. We will

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Avoid handy revert-buffer calls
;;
;; Automatically reread from disk if the underlying file changes
(setopt auto-revert-avoid-polling t)
;; Some systems don't do file notifications well; see
;; https://todo.sr.ht/~ashton314/emacs-bedrock/11
(setopt auto-revert-interval 5)
(setopt auto-revert-check-vc-info t)

(setq revert-without-query (list ".")  ; Do not prompt
      auto-revert-stop-on-user-input nil
      auto-revert-verbose t)

(global-auto-revert-mode t)

;;
;; Revert Dired and other buffers
;;
(setq global-auto-revert-non-file-buffers t)
#+end_src

*** Delete seleted text when typing.

Virtually every program out there will delete the selected/highlighted
text as soon as the user types something.
Emacs does not do this by default, even though it has the functionality
available. Let us then enable it.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Delete selected text when typing
;;
(use-package delsel
  :straight nil ; no need to install it as it is built-in
  :hook (after-init . delete-selection-mode))
#+end_src

*** Line numbering

*Psimacs* uses line numbering on default in many major modes.

See also: [[https://www.emacswiki.org/emacs/LineNumbers][EmacsWike: LineNumbers]] and the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Display-Custom.html][Emacs manual]].

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Enable line numbers for almost all major-modes
;;
(require 'display-line-numbers)

(defcustom psimacs/config/display-line-numbers-exempt-modes
    '(  vterm-mode
        eshell-mode
        shell-mode
        term-mode
        ansi-term-mode
        org-mode
        treemacs-mode
        neotree-mode
        dashboard-mode
        pdf-view-mode
    )
    "Major modes on which to disable the linum mode, exempts them from global requirement."
    :group 'display-line-numbers
    :type 'list
    :version "green"
)

;;
;; To disable this in certain major modes, redefine display-line-numbers--turn-on
;;
(defun display-line-numbers--turn-on ()
    "Turn on line numbers but excempting certain major modes defined in
`psimacs/config/display-line-numbers-exempt-modes'"
    (if (and
            (not (member major-mode psimacs/config/display-line-numbers-exempt-modes))
                (not (minibufferp))
        )

        (display-line-numbers-mode)
    )
)

(global-display-line-numbers-mode 1)
#+end_src

*** Spaces between sentences

In my world, sentences end with a single space. This makes sentence navigation commands
work for me.

See also: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Sentences.html][Emacs Manual: Sentence]]

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Sentence end with one space
;;
(setq sentence-end-double-space nil)
#+end_src

*** Fringes

On graphical displays, each Emacs window normally has narrow fringes (gutters/margins)
on the left and right edges. The fringes are used to display symbols that provide
information about the text in the window.

See the following references for fringes:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Fringes.html][Window Fringes]]
- [[https://emacsredux.com/blog/2015/01/18/customizing-the-fringes/][Customizing the Fringes]]
- [[https://www.flycheck.org/en/latest/user/error-reports.html][FlyCheck -> See errors in buffers -> Fringe and margin icons]]

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Usually, fringes defaults to 8 pixel width
;;
(set-fringe-mode 8)
;;(defun my-tone-down-fringes ()
;;  (set-face-attribute 'fringe nil
;;                      :foreground (face-foreground 'default)
;;                      :background (face-background 'default)))
#+end_src

*** Scratch buffer

Show an empty scratch buffer on startup.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Shave seconds off startup time by starting the scratch buffer in
;; `fundamental-mode'
;; Show an empty scratch buffer on startup.
(setq initial-major-mode 'fundamental-mode
      initial-scratch-message nil)
#+end_src

*** No dialog boxes

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dialog-Boxes.html][Using Dialog Boxes]] describes the variable =use-dialog-box=. If this is set to =nil= not dialog boxes appear for
/yes-or-no/ questions beside others special questions. This way *Emacs* always performs /yes-or-no/ prompts using
the echo area and keyboard input.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Prompts should go in the minibuffer, not in a GUI.
;; Disable GUIs because they are inconsistent across systems, desktop
;; environments, and themes, and they don't match the look of Emacs.
;;
(setq use-file-dialog nil)
(setq use-dialog-box nil)
#+end_src

*** Mark and Pop

Handy way of getting back to previous places.

Immediately after you type =C-u C-SPC=, you can type =C-SPC= instead of =C-u C-SPC= to
cycle through the mark ring.

From the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Mark-Ring.html][Emacs Manual: The Mark Ring]]:

#+begin_quote
Each buffer remembers previous locations of the mark, in the mark ring. Commands that set the mark also push the old
mark onto this ring. One of the uses of the mark ring is to remember spots that you may want to go back to.
#+end_quote

#+attr_html: :class styledtable
| Key binding             | Command                               | Description                                                                                                                                                                                                                                          |
|-------------------------+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-SPC=  =C-@=              | =M-x cua-set-mark= =M-x set-mark-command= | Set mark where point is, clear mark, or jump to mark. With no prefix argument, clear mark if already set. Otherwise, mark, and push old mark position on local mark ring; also push mark on global mark ring if last mark was set in another buffer. |
| =C-u C-SPC= =C-u C-@= =H-x p= | =M-x pop-to-mark-command=               | Jump to mark, and pop a new position for mark off the local mark ring (this does not affect the global mark ring).                                                                                                                                   |
| =C-x C-SPC= =C-x C-@= =H-x q= | =M-x pop-global-mark=                   | Jump to a mark off the global mark ring.                                                                                                                                                                                                             |
| =C-SPC C-SPC=             |                                       | Jumps to the next position off the local (or global) mark ring. Set the mark, pushing it onto the mark ring, without activating it.                                                                                                                  |
| =C-u C-u C-SPC=           |                                       | Unconditionally set mark.                                                                                                                                                                                                                            |
|-------------------------+---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

If you set =set-mark-command-repeat-pop= to non-nil, then immediately after you type =C-u C-SPC=, you can type =C-SPC=
instead of =C-u C-SPC= to cycle through the mark ring.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Handy way of getting back to previous places.
;;
(setq set-mark-command-repeat-pop t)
(bind-key "H-x p" 'pop-to-mark-command)
(bind-key "H-x q" 'pop-global-mark)
#+end_src

*** Indentation and Tab stops

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Indent-Convenience.html][Electric Indent mode]] is a global minor mode that automatically indents the line after every =RET= you type.
This mode is enabled by default, which we turn off.

Use instead:

| Key binding | Command                | Description         |
|-------------+------------------------+---------------------|
| =C-j=         | =M-x newline-and-indent= | Indent current line |
|-------------+------------------------+---------------------|

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Matter of taste, do not automatically indent on RET
;;
(setq electric-indent-mode nil)
#+end_src

Do not use tab characters -> fill spaces instead.
Insert a real tab character with =C-q TAB=.

| Key binding | Command           | Description                                                                                     |
|-------------+-------------------+-------------------------------------------------------------------------------------------------|
| =C-q TAB=     | =M-x quoted-insert= | Read next input character (TAB) and insert it. This is useful for inserting control characters. |
|-------------+-------------------+-------------------------------------------------------------------------------------------------|

See also:
- [[https://www.emacswiki.org/emacs/IndentationBasics][Indentation Basics]]
- [[https://www.emacswiki.org/emacs/NoTabs][No Tabs]]
- [[https://www.emacswiki.org/emacs/TabsAreEvil][Tabs Are Evil]]
- [[http://ergoemacs.org/emacs/emacs_tabs_space_indentation_setup.html][Tabs, Space, Indentation Setup]]
- [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]]

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Set the standard indentation
;;
(setq-default standard-indent 4)

;;
;; Always insert space characters instead of tab characters.
;;
(setq-default indent-tabs-mode nil)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Pressing TAB indents first then complete
;;
(setq tab-always-indent 'complete)
#+end_src

Use of standard tab width, that is the length of the =TAB= character.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; We interpret a TAB character with a length of 8 space characters
;;
(setq-default tab-width 4)
#+end_src

Tab stop positions: =M-i=, i.e. =tab-to-tab-stop= moves to the next position.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; This variable defines the tab stop columns used by tab-to-tab-stop.
;; A list of increasing integers, which need not be evenly spaced.
;; The list is implicitly extended to infinity through repetition of the interval
;; between the last and penultimate elements
;;
(setq tab-stop-list '(4 8))
#+end_src

*** Highlight indentation

**** highlight-indent-guides package

[[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]] is a minor mode that
highlights indentation levels via font-lock.
Indent widths are dynamically discovered, which means this correctly highlights in any mode, regardless of
indent width, even in languages with non-uniform indentation such as Haskell.
By default, this mode also inspects your theme dynamically, and automatically chooses appropriate colors
for highlighting. This mode works properly around hard tabs and mixed indentation, and it behaves well
in large buffers.

This was the package used by *Psimacs* for a long time. It is still installed but not activated automatically
anymore. Instead *Psimacs* uses the =indent-bars= package on default.


#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; highlight-indent-guides
;;
(use-package highlight-indent-guides
  ;:hook ((prog-mode . (lambda ()
  ;                    (highlight-indent-guides-mode)
  ;                   (highlight-indent-guides-auto-set-faces))))
  :custom
      (highlight-indent-guides-auto-odd-face-perc 5)
  :config
      (setq highlight-indent-guides-method 'character
            highlight-indent-guides-responsive 'top)
)
#+end_src

**** indent-bars package

[[https://github.com/jdtsmith/indent-bars][indent-bars]] is a minor mode that provides indentation guide bars
in *Emacs*, with optional tree-sitter enhancement.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; indent-bars
;;
(use-package indent-bars
  :straight (indent-bars :host github :repo "jdtsmith/indent-bars")
  :hook
    (prog-mode . (lambda ()
                    (when (and (not (member major-mode '(emacs-lisp-mode scheme-mode lisp-mode)))
                               (display-graphic-p))
                      (indent-bars-mode 1)
                    )))
  :config
    (setq indent-bars-treesit-support t
          indent-bars-treesit-ignore-blank-lines-types '("module")
          indent-bars-treesit-wrap '((c argument_list parameter_list init_declarator)
                                     (python
                                      argument_list parameters ; for python, as an example
                                      list
                                      list_comprehension
                                      dictionary
                                      dictionary_comprehension
                                      parenthesized_expression
                                      subscript))
    )
    (setq indent-bars-no-descend-string t
          indent-bars-color '(highlight :face-bg t :blend 0.15)
          indent-bars-pattern "."
          indent-bars-width-frac 0.1
          indent-bars-pad-frac 0.1
          indent-bars-zigzag nil
          indent-bars-color-by-depth '(:regexp "outline-\\([0-9]+\\)" :blend 1) ; blend=1: blend with BG only
          indent-bars-highlight-current-depth '(:blend 0.5) ; pump up the BG blend on current
          indent-bars-display-on-blank-lines t
    )
)
#+end_src

*** Lock file

Disable creation of lock-files named =.#<filename>=. I do not have problem with simultaneous file editing.

See also:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interlocking.html][Protection against Simultaneous Editing]]
- [[https://www.emacswiki.org/emacs/LockFiles][LockFiles]]

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; No lock-files named .#<filename>
;;
(setq-default create-lockfiles nil)
#+end_src

*** Newline at end

Last line automatically appending with newline as described in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Customize-Save.html][Customizing Saving of Files]] of the manual.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Yes, always add a final newline
;;
(setq require-final-newline t)
#+end_src

*** Case sensitive searches only on capitalization

By default, we want case sensitivity in searches and replaces to be smart.
That is, if your search doesn't use capital letters, *Emacs* will /ignore case/.
If it does, *Emacs* will be /case-sensitive/.

See also:
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Searching-and-Case.html][Searching and Case]]
- [[https://www.emacswiki.org/emacs/CaseFoldSearch][Case Fold Search]]

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Case sensitive searches only on capitalization
;;
(setq-default case-fold-search t)
#+end_src

*** Calendar

Weeks starts on Mondays.

References:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Calendar_002fDiary.html#Calendar_002fDiary][The Calendar and the Diary]]
- [[https://www.emacswiki.org/emacs/CalendarLocalization][Calendar Localization]]

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Weeks starts on Mondays
;;
(use-package calendar
    :straight nil
    :init
        (setq calendar-date-style 'european
              calendar-week-start-day 1
              calendar-mark-holidays-flag t)
)
#+end_src

*** Unicode

The package [[https://github.com/rolandwalker/unicode-
][unicode-fonts]] provides font mappings in the Unicode 8.0 standard.

#+begin_quote
Emacs maintains font mappings on a per-glyph basis, meaning that multiple fonts are used at the
same time (transparently) to display any character for which you have a font. Furthermore, Emacs
does this out of the box.

However, font mappings via fontsets are a bit difficult to configure. In addition, the default
setup does not always pick the most legible fonts. As the manual warns, the choice of font actually
displayed for a non-ASCII character is "somewhat random".

The Unicode standard provides a way to organize font mappings: it divides character ranges into
logical groups called "blocks". This library configures Emacs in a Unicode-friendly way by providing mappings from
each Unicode block to a font with good coverage and makes the settings available via the customization
interface.

This library provides font mappings for 233 of the 255 blocks in the Unicode 8.0 standard which are
public and have displayable characters. It assumes that 6 Latin blocks are covered by the default font.
16/255 blocks are not mapped to any known font.
#+end_quote

- [[https://dejavu-fonts.github.io/Download.html][DejaVu Sans and DejaVu Sans Mono]]
- [[http://www.quivira-font.com/downloads.php][Quivira]]
- [[https://dn-works.com/wp-content/uploads/2020/UFAS-Fonts/][Symbola]]
- [[http://www.google.com/get/noto/][Google Noto Sans and Noto Sans Symbols]]
- [[https://sourcefoundry.org/hack/][Hack Font]]

Testing:

| Key binding | Command                                                             | Description                           |
|-------------+---------------------------------------------------------------------+---------------------------------------|
| =C-h h=       | =M-x view-hello-file=                                                 |                                       |
|             | =M-x list-charset-chars RET unicode-bmp RET=                          | search for eg 210x                    |
|             | =M-x list-charset-chars RET unicode-smp RET=                          | if your backend supports astral chars |
|             | =M-x unicode-fonts-debug-insert-block RET Mathematical_Operators RET= |                                       |
|-------------+---------------------------------------------------------------------+---------------------------------------|

About font setting in *Emacs*:
- [[http://ergoemacs.org/emacs/emacs_list_and_set_font.html][Emacs: Font Setup]]

About Unicode:
- [[https://home.unicode.org/][Unicode home]]
- [[http://www.unicode.org/charts/][Unicode Code Charts]]
- [[https://site.icu-project.org/home][ICU - International Components for Unicode]]

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Setup the unicode font system
;;
(use-package unicode-fonts
    :init
        (setq pcache-directory psimacs/config/pcache-dir)
        (unicode-fonts-setup)

        (if (member "Hack Nerd Font Mono" (font-family-list))
            (let ((mono-spaced-font "Hack Nerd Font Mono")
                  (proportionately-spaced-font "Hack Nerd Font Propo"))
              (set-face-attribute 'default nil :family mono-spaced-font :height 100)
              (set-face-attribute 'fixed-pitch nil :family mono-spaced-font :height 1.0)
              (set-face-attribute 'variable-pitch nil :family proportionately-spaced-font :height 1.0))
            (if (member "DejaVu Sans Mono" (font-family-list))
                (let ((mono-spaced-font "DejaVu Sans Mono")
                      (proportionately-spaced-font "DejaVu Sans"))
                  (set-face-attribute 'default nil :family mono-spaced-font :height 100)
                  (set-face-attribute 'fixed-pitch nil :family mono-spaced-font :height 1.0)
                  (set-face-attribute 'variable-pitch nil :family proportionately-spaced-font :height 1.0))
            )
        )
)
#+end_src

In order to circumvent performance problems with movement in unicode buffers, the following setting is used.
Inhibiting compacting font caches comes at the expense of more memory usage.

References:
- [[https://github.com/purcell/emacs.d/issues/273][moving around between cjk characters is very slow #273]]
- [[https://emacs.stackexchange.com/questions/33510/unicode-txt-slowness][unicode.txt slowness]]

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Performance optimization
;;
(setq inhibit-compacting-font-caches t)
#+end_src

*** Fontification

The build-in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html][font-lock]] minor mode allows major modes to fontify their buffers.

Font Lock mode is enabled by default in major modes that support it.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Build-in font-lock mode. Enabled by default in major modes that support it.
;;
(use-package font-lock
    :straight nil
)
#+end_src

**** CANCELED Font-lock+

[[https://github.com/emacsmirror/font-lock-plus/blob/master/font-lock%2B.el][font-lock+]] provides enhancements to standard library [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html][font-lock]] minor mode.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
(use-package font-lock+)
#+end_src

*** All the icons

The package [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] is a utility for using and formatting various Icon fonts within Emacs. Icon Fonts allow
you to propertize and format icons the same way you would normal text. This enables things such as better scaling
of and anti-aliasing of the icons.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Formatting various Icon fonts within Emacs
;;
(use-package all-the-icons)
#+end_src

The package [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] adds dired support to [[https://github.com/domtronn/all-the-icons.el][all-the-icons]].

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Add dired support to all-the-icons
;;
(use-package all-the-icons-dired
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode)
)
#+end_src


#+begin_src emacs-lisp :tangle no config/init-basic-ui.el
;;
;; Testing of all the icons
;;
;(all-the-icons-insert-icons-for 'alltheicon)
;(all-the-icons-insert-icons-for 'octicon 10)
;(all-the-icons-insert-icons-for 'faicon 1 0.5)
#+end_src

*** Color Identifier Mode

[[https://github.com/ankurdave/color-identifiers-mode][Color Identifier]] is a minor mode for Emacs that highlights each source code
identifier uniquely based on its name.

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Highlights each source code identifier uniquely based on its name.
;;
(use-package color-identifiers-mode
    :demand t
    :diminish
    :hook (after-init . global-color-identifiers-mode)
)
#+end_src

*** Symbol overlay mode

The package [[https://github.com/wolray/symbol-overlay][Symbol Overlay]] highlight symbols with overlays while providing a keymap for
various operations about highlighted symbols. It was originally inspired by the package =highlight-symbol=. The fundamental difference
is that in =symbol-overlay= every symbol is highlighted by the Emacs built-in function =overlay-put= rather than the =font-lock= mechanism
used in =highlight-symbol=. On start up the =symbol-overlay-mode= is not activated.

Additionally, the package [[https://github.com/xenodium/symbol-overlay-mc][symbol-overlay-mc]] is a tiny Emacs package enabling
multiple cursors on symbol overlays.

| Key binding | Command                              | Description                                                         |
|-------------+--------------------------------------+---------------------------------------------------------------------|
| =H-x H-s m= | =M-x symbol-overlay-mode=            | Toggle the automatic symbol highlight. This is disabled on default. |
| =H-x H-s i= | =M-x symbol-overlay-put=             | Toggle all overlays of symbol at point.                             |
| =H-x H-s a= | =M-x symbol-overlay-mc-mark-all=     | place a cursor on every symbol currently highlighted.               |
| =H-x H-s x= | =M-x symbol-overlay-remove-all=      | Remove all highlighted symbols in the buffer.                       |
| =H-x H-s b= | =M-x symbol-overlay-switch-backward= | Switch backward to another symbol.                                  |
| =H-x H-s f= | =M-x symbol-overlay-switch-forward=  | Switch forward to another symbol.                                   |
| =H-x H-s h= | =M-x symbol-overlay-map-help=        | Display the bindings in ‘symbol-overlay-map’.                       |
|-------------+--------------------------------------+---------------------------------------------------------------------|

The bindings in ‘symbol-overlay-map’ that are active when the cursor points a highlighted symbol.

| Key binding | Command                                 | Description                                                         |
|-------------+-----------------------------------------+---------------------------------------------------------------------|
| =H-x H-s i= | =M-x symbol-overlay-put=                | Toggle all overlays of symbol at point.                             |
| =H-x H-s n= | =M-x symbol-overlay-jump-next=          | Jump to the next location of symbol at point.                       |
| =H-x H-s p= | =M-x symbol-overlay-jump-prev=          | Jump to the previous location of symbol at point.                   |
| =H-x H-s <= | =M-x symbol-overlay-jump-first=         | Jump to the first location of symbol at point.                      |
| =H-x H-s >= | =M-x symbol-overlay-jump-last=          | Jump to the last location of symbol at point.                       |
| =H-x H-s w= | =M-x symbol-overlay-save-symbol=        | Copy symbol at point.                                               |
| =H-x H-s t= | =M-x symbol-overlay-toggle-in-scope=    | Toggle overlays to be showed in buffer or only in scope.            |
| =H-x H-s e= | =M-x symbol-overlay-echo-mark=          | Jump back to the mark.                                              |
| =H-x H-s d= | =M-x symbol-overlay-jump-to-definition= | Jump to the definition of symbol at point.                          |
| =H-x H-s s= | =M-x symbol-overlay-isearch-literally=  | Isearch symbol at point literally.                                  |
| =H-x H-s q= | =M-x symbol-overlay-query-replace=      | Query replace symbol at point.                                      |
| =H-x H-s r= | =M-x symbol-overlay-rename=             | Rename symbol at point on all its occurrences.                      |
|-------------+-----------------------------------------+---------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
;;
;; Setup of symbol-overlay
;;
(use-package symbol-overlay
  :commands (symbol-overlay-mc-mark-all)
  :config
    (setq symbol-overlay-idle-time 0.1)

    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "H-x H-s i") 'symbol-overlay-put)
      (define-key map (kbd "H-x H-s n") 'symbol-overlay-jump-next)
      (define-key map (kbd "H-x H-s p") 'symbol-overlay-jump-prev)
      (define-key map (kbd "H-x H-s <") 'symbol-overlay-jump-first)
      (define-key map (kbd "H-x H-s >") 'symbol-overlay-jump-last)
      (define-key map (kbd "H-x H-s w") 'symbol-overlay-save-symbol)
      (define-key map (kbd "H-x H-s t") 'symbol-overlay-toggle-in-scope)
      (define-key map (kbd "H-x H-s e") 'symbol-overlay-echo-mark)
      (define-key map (kbd "H-x H-s d") 'symbol-overlay-jump-to-definition)
      (define-key map (kbd "H-x H-s s") 'symbol-overlay-isearch-literally)
      (define-key map (kbd "H-x H-s R") 'symbol-overlay-query-replace)
      (define-key map (kbd "H-x H-s r") 'symbol-overlay-rename)
      (setq symbol-overlay-map map)
    )

  :bind (
          :map psimacs/config/global-key-map/execute
          ("H-s m" . symbol-overlay-mode)
          ("H-s i" . symbol-overlay-put)
          ("H-s x" . symbol-overlay-remove-all)
          ("H-s b" . symbol-overlay-switch-backward)
          ("H-s f" . symbol-overlay-switch-forward)
          ("H-s h" . symbol-overlay-map-help)

          :map psimacs/config/global-key-map/hydra ("H-s" . psimacs/hydra/symbol-overlay/body)
    )

  :hydra (psimacs/hydra/symbol-overlay (:color pink :hint nil)
"
Symbol Overlay:

^^Symbols     ^^Navigate             ^^Edit         ^^Exit
--------------------------------------------------------------------
_i_ : insert  _p_ : prev             _r_ : rename   _e_ : return
_t_ : toggle  _n_ : next             _R_ : replace  _x_ : remove all
_w_ : save    _b_ : switch backward  _a_ : cursors  _q_ : quit
_m_ : auto    _f_ : switch forward
_h_ : help    _d_ : jump definition
            ^^_<_ : jump first
            ^^_>_ : jump last
            ^^_s_ : search
"
        ("m" symbol-overlay-mode)
        ("i" symbol-overlay-put)
        ("x" symbol-overlay-remove-all :color blue)
        ("b" symbol-overlay-switch-backward)
        ("f" symbol-overlay-switch-forward)
        ("h" symbol-overlay-map-help)
        ("n" symbol-overlay-jump-next)
        ("p" symbol-overlay-jump-prev)
        ("<" symbol-overlay-jump-first)
        (">" symbol-overlay-jump-last)
        ("w" symbol-overlay-save-symbol)
        ("t" symbol-overlay-toggle-in-scope)
        ("e" symbol-overlay-echo-mark :color blue)
        ("d" symbol-overlay-jump-to-definition)
        ("s" symbol-overlay-isearch-literally)
        ("R" symbol-overlay-query-replace)
        ("a" symbol-overlay-mc-mark-all)
        ("r" symbol-overlay-rename)
        ("q"   nil :color blue)
    )
)

(use-package symbol-overlay-mc
  :straight (symbol-overlay-mc :host github :repo "xenodium/symbol-overlay-mc")
  :commands (psimacs/config/disable-lsp-ui-sideline-mode)
  :config
    (defun psimacs/config/disable-lsp-ui-sideline-mode (orig-fun &rest args)
      (let ((enabled (bound-and-true-p lsp-ui-sideline-mode))
            (result nil))
        (when enabled
          (ignore-errors
            (lsp-ui-sideline-mode -1)
            (lsp-ui-sideline--delete-ov)
            ))
        (setq result (apply orig-fun args))

        (when enabled
          (lsp-ui-sideline-mode 1)
        )
        result
      )
    )

    (advice-add 'symbol-overlay-mc-mark-all :around #'psimacs/config/disable-lsp-ui-sideline-mode)
  :bind (
          :map psimacs/config/global-key-map/execute
          ("H-s H-a"   . symbol-overlay-mc-mark-all)
    )
)
#+end_src

*** Fill column indicator

*Emacs* allows to [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Displaying-Boundaries.html][display boundaries]]. *Psimacs* uses this to show an indicator at the fill column position.
The default fill column is set to 120 characters because huge displays are now commonly in use.

| Key binding   | Command                                       | Description                                      |
|---------------+-----------------------------------------------+--------------------------------------------------|
| =H-m C-m C-v f= | =M-x global-display-fill-column-indicator-mode= | Toggle the display of the fill column indicator. |
|---------------+-----------------------------------------------+--------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-ui.el
(setq-default fill-column 120)
(setq display-fill-column-indicator-column nil)
;(global-display-fill-column-indicator-mode 1)

(define-key psimacs/config/global-key-map/special (kbd "C-m C-v f") 'display-fill-column-indicator-mode)

(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src

** Themes

Generally, there are light and dark colored themes. Some functionality
like the Rainbow paranthesis colors must be adapted to these themes
accordingly. Currently, I do not know of a method to automatically determine
the kind of loaded theme. Therefore I keep it simple and just define a
variable for that information.

=M-x counsel-load-theme= does work perfectly well.

#+begin_src emacs-lisp :tangle config/init-basic-themes.el :var file-description="Basic themes configuration"
;;
;; Theming setup
;;
(defvar psimacs/config/default-theme "ef-symbiosis"
    "The theme that should be loaded on default.

afternoon, alect-light, alect-light-alt, alect-dark, alect-dark-alt, alect-black, alect-black-alt,
ample, ample-zen, dracula, flatland, gandalf, github-modern, gruvbox-dark-medium, gruvbox-dark-soft,
gruvbox-dark-hard, gruvbox-light-medium, gruvbox-light-soft, gruvbox-light-hard, pastelmac, moe-dark,
moe-light, monokai, monokai-pro, sanityinc-tomorrow-day, sanityinc-tomorrow-night, sanityinc-tomorrow-blue,
sanityinc-tomorrow-bright, sanityinc-tomorrow-eighties, toxi, zenburn, doom-one, doom-molokai, doom-vibrant,
doom-oceanic-next, kaolin-dark, kaolin-aurora, kaolin-blossom, kaolin-breeze, kaolin-bubblegum, kaolin-light,
kaolin-eclipse, kaolin-ocean, kaolin-galaxy, kaolin-valley-dark, kaolin-valley-light, kaolin-temple,
vscode-dark-plus, nimbus, modus-operandi, modus-operandi-tinted, modus-operandi-deuteranopia, modus-operandi-tritanopia,
modus-vivendi, modus-vivendi-tinted, modus-vivendi-deuteranopia, modus-vivendi-tritanopia,
ef-day, ef-night, ef-light, ef-dark, ef-duo-light, ef-duo-dark, ef-maris-light, ef-maris-dark, ef-spring, ef-autumn,
ef-summer, ef-winter, ef-deuteranopia-dark, ef-symbiosis, leuven.
")

(defvar psimacs/config/theme-is-light-colored t
    "Should be set to true if current theme is light.")

(defvar psimacs/config/after-load-theme-hook nil
  "Hook run after a color theme is loaded using `load-theme'.")
(defadvice load-theme (after run-after-load-theme-hook activate)
  "Run `psimacs/config/after-load-theme-hook'."
  (run-hooks 'psimacs/config/after-load-theme-hook))
#+end_src

A couple of good looking themes are assembled in the configuration. Currently the
/alect-dark/ theme is active on start up. The theme can be changed at runtime with
the commands =load-theme=, =enable-theme= and =disable-theme=.

The following themes are my favorites currently:

| Theme                       |
|-----------------------------|
| =ef-symbiosis=               |
| =modus-vivendi=               |
| =modus-operandi=              |
| =nimbus=                      |
| =kaolin-valley-dark=          |
| =vscode-dark-plus=            |
| =alect-dark=                  |
| =alect-light-alt=             |
| =sanityinc-tomorrow-eighties= |
| =moe-dark=                    |
|-----------------------------|

For the time being, the =ef-symbiosis= is active in my configuration.

See also:
[[https://emacsthemes.com/][Emacs Themes]], [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Custom-Themes.html][Custom Themes Manual]], [[https://www.emacswiki.org/emacs/CustomThemes][EmacsWiki: Custom Themes]]


#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package modus-themes
    :config
        (let ((use-modus-theme nil))
            (when (equal psimacs/config/default-theme "modus-operandi")
                (setq psimacs/config/theme-is-light-colored t)
                (setq use-modus-theme t)
            )

            (when (equal psimacs/config/default-theme "modus-operandi-tinted")
                (setq psimacs/config/theme-is-light-colored t)
                (setq use-modus-theme t)
            )

            (when (equal psimacs/config/default-theme "modus-operandi-deuteranopia")
                (setq psimacs/config/theme-is-light-colored t)
                (setq use-modus-theme t)
            )

            (when (equal psimacs/config/default-theme "modus-operandi-tritanopia")
                (setq psimacs/config/theme-is-light-colored t)
                (setq use-modus-theme t)
            )

            (when (equal psimacs/config/default-theme "modus-vivendi")
                (setq psimacs/config/theme-is-light-colored nil)
                (setq use-modus-theme t)
            )

            (when (equal psimacs/config/default-theme "modus-vivendi-tinted")
                (setq psimacs/config/theme-is-light-colored nil)
                (setq use-modus-theme t)
            )

            (when (equal psimacs/config/default-theme "modus-vivendi-deuteranopia")
                (setq psimacs/config/theme-is-light-colored nil)
                (setq use-modus-theme t)
            )

            (when (equal psimacs/config/default-theme "modus-vivendi-tritanopia")
                (setq psimacs/config/theme-is-light-colored nil)
                (setq use-modus-theme t)
            )

            (when use-modus-theme
                ;; Add all your customizations prior to loading the themes
                (setq modus-themes-italic-constructs t
                      modus-themes-bold-constructs nil)

                ;; Maybe define some palette overrides, such as by using our presets
                (setq modus-themes-common-palette-overrides
                      modus-themes-preset-overrides-intense)
            )

            (when (equal psimacs/config/default-theme "modus-operandi")
                (load-theme 'modus-operandi t)
                (message "loaded theme modus-operandi")
            )

            (when (equal psimacs/config/default-theme "modus-operandi-tinted")
                (load-theme 'modus-operandi-tinted t)
                (message "loaded theme modus-operandi-tinded")
            )

            (when (equal psimacs/config/default-theme "modus-operandi-deuteranopia")
                (load-theme 'modus-operandi-deuteranopia t)
                (message "loaded theme modus-operandi-deuteranopia")
            )

            (when (equal psimacs/config/default-theme "modus-operandi-tritanopia")
                (load-theme 'modus-operandi-tritanopia t)
                (message "loaded theme modus-operandi-tritanopia")
            )

            (when (equal psimacs/config/default-theme "modus-vivendi")
                (load-theme 'modus-vivendi t)
                (message "loaded theme modus-vivendi")
            )

            (when (equal psimacs/config/default-theme "modus-vivendi-tinted")
                (load-theme 'modus-vivendi-tinted t)
                (message "loaded theme modus-vivendi-tinded")
            )

            (when (equal psimacs/config/default-theme "modus-vivendi-deuteranopia")
                (load-theme 'modus-vivendi-deuteranopia t)
                (message "loaded theme modus-vivendi-deuteranopia")
            )

            (when (equal psimacs/config/default-theme "modus-vivendi-tritanopia")
                (load-theme 'modus-vivendi-tritanopia t)
                (message "loaded theme modus-vivendi-tritanopia")
            )
        )
)
#+end_src


#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package ef-themes
    :config
        (let ((use-ef-theme nil))
            (when (equal psimacs/config/default-theme "ef-day")
                (setq psimacs/config/theme-is-light-colored t)
                (setq use-ef-theme t)
            )

            (when (equal psimacs/config/default-theme "ef-light")
                (setq psimacs/config/theme-is-light-colored t)
                (setq use-ef-theme t)
            )

            (when (equal psimacs/config/default-theme "ef-duo-light")
                (setq psimacs/config/theme-is-light-colored t)
                (setq use-ef-theme t)
            )

            (when (equal psimacs/config/default-theme "ef-maris-light")
                (setq psimacs/config/theme-is-light-colored t)
                (setq use-ef-theme t)
            )

            (when (equal psimacs/config/default-theme "ef-spring")
                (setq psimacs/config/theme-is-light-colored t)
                (setq use-ef-theme t)
            )

            (when (equal psimacs/config/default-theme "ef-summer")
                (setq psimacs/config/theme-is-light-colored t)
                (setq use-ef-theme t)
            )

            (when (equal psimacs/config/default-theme "ef-night")
                (setq psimacs/config/theme-is-light-colored nil)
                (setq use-ef-theme t)
            )

            (when (equal psimacs/config/default-theme "ef-dark")
                (setq psimacs/config/theme-is-light-colored nil)
                (setq use-ef-theme t)
            )

            (when (equal psimacs/config/default-theme "ef-duo-dark")
                (setq psimacs/config/theme-is-light-colored nil)
                (setq use-ef-theme t)
            )

            (when (equal psimacs/config/default-theme "ef-maris-dark")
                (setq psimacs/config/theme-is-light-colored nil)
                (setq use-ef-theme t)
            )

            (when (equal psimacs/config/default-theme "ef-autumn")
                (setq psimacs/config/theme-is-light-colored nil)
                (setq use-ef-theme t)
            )

            (when (equal psimacs/config/default-theme "ef-winter")
                (setq psimacs/config/theme-is-light-colored nil)
                (setq use-ef-theme t)
            )

            (when (equal psimacs/config/default-theme "ef-deuteranopia-dark")
                (setq psimacs/config/theme-is-light-colored nil)
                (setq use-ef-theme t)
            )

            (when (equal psimacs/config/default-theme "ef-symbiosis")
                (setq psimacs/config/theme-is-light-colored nil)
                (setq use-ef-theme t)
            )

            (when use-ef-theme
                (setq ef-themes-mixed-fonts nil)
                (setq ef-themes-variable-pitch-ui nil)
            )

            (when (equal psimacs/config/default-theme "ef-day")
                (load-theme 'ef-day t)
                (message "loaded theme ef-day")
            )

            (when (equal psimacs/config/default-theme "ef-light")
                (load-theme 'ef-light t)
                (message "loaded theme ef-light")
            )

            (when (equal psimacs/config/default-theme "ef-duo-light")
                (load-theme 'ef-duo-light t)
                (message "loaded theme ef-duo-light")
            )

            (when (equal psimacs/config/default-theme "ef-maris-light")
                (load-theme 'ef-maris-light t)
                (message "loaded theme ef-maris-light")
            )

            (when (equal psimacs/config/default-theme "ef-spring")
                (load-theme 'ef-spring t)
                (message "loaded theme ef-spring")
            )

            (when (equal psimacs/config/default-theme "ef-summer")
                (load-theme 'ef-summer t)
                (message "loaded theme ef-summer")
            )

            (when (equal psimacs/config/default-theme "ef-night")
                (load-theme 'ef-night t)
                (message "loaded theme ef-night")
            )

            (when (equal psimacs/config/default-theme "ef-dark")
                (load-theme 'ef-dark t)
                (message "loaded theme ef-dark")
            )

            (when (equal psimacs/config/default-theme "ef-duo-dark")
                (load-theme 'ef-duo-dark t)
                (message "loaded theme ef-duo-dark")
            )

            (when (equal psimacs/config/default-theme "ef-maris-dark")
                (load-theme 'ef-maris-dark t)
                (message "loaded theme ef-maris-dark")
            )

            (when (equal psimacs/config/default-theme "ef-autumn")
                (load-theme 'ef-autumn t)
                (message "loaded theme ef-autumn")
            )

            (when (equal psimacs/config/default-theme "ef-winter")
                (load-theme 'ef-winter t)
                (message "loaded theme ef-winter")
            )

            (when (equal psimacs/config/default-theme "ef-deuteranopia-dark")
                (load-theme 'ef-deuteranopia-dark t)
                (message "loaded theme ef-deuteranopia-dark")
            )

            (when (equal psimacs/config/default-theme "ef-symbiosis")
                (load-theme 'ef-symbiosis t)
                (message "loaded theme ef-symbiosis")
            )

        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package doom-themes
    :defines doom-themes-treemacs-theme
    :config
        (let ((use-doom-theme nil))
            ;; Global settings (defaults)
            (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
                  doom-themes-enable-italic t) ; if nil, italics is universally disabled

            (when (equal psimacs/config/default-theme "doom-one")
                (setq psimacs/config/theme-is-light-colored nil)
                (load-theme 'doom-one t)
                (message "loaded theme doom-one")

                (setq use-doom-theme t)
            )

            (when (equal psimacs/config/default-theme "doom-molokai")
                (setq psimacs/config/theme-is-light-colored nil)
                (load-theme 'doom-molokai t)
                (message "loaded theme doom-molokai")

                (setq use-doom-theme t)
            )

            (when (equal psimacs/config/default-theme "doom-vibrant")
                (setq psimacs/config/theme-is-light-colored nil)
                (load-theme 'doom-vibrant t)
                (message "loaded theme doom-vibrant")

                (setq use-doom-theme t)
            )

            (when (equal psimacs/config/default-theme "doom-oceanic-next")
                (setq psimacs/config/theme-is-light-colored nil)
                (load-theme 'doom-oceanic-next t)
                (message "loaded theme doom-oceanic-next")

                (setq use-doom-theme t)
            )

            (when use-doom-theme
                ;; Enable flashing mode-line on errors
                (doom-themes-visual-bell-config)

                ;; Enable custom neotree theme (all-the-icons must be installed!)
                (doom-themes-neotree-config)

                ;; or for treemacs users
                (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
                (doom-themes-treemacs-config)

                ;; Corrects (and improves) org-mode's native fontification.
                (doom-themes-org-config)
            )
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package kaolin-themes
    :config
        (when (equal psimacs/config/default-theme "kaolin-dark")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'kaolin-dark t)
            (kaolin-treemacs-theme)
            (message "loaded theme kaolin-dark")
        )

        (when (equal psimacs/config/default-theme "kaolin-aurora")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'kaolin-aurora t)
            (kaolin-treemacs-theme)
            (message "loaded theme kaolin-aurora")
        )

        (when (equal psimacs/config/default-theme "kaolin-blossom")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'kaolin-blossom t)
            (kaolin-treemacs-theme)
            (message "loaded theme kaolin-blossom")
        )

        (when (equal psimacs/config/default-theme "kaolin-breeze")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'kaolin-breeze t)
            (kaolin-treemacs-theme)
            (message "loaded theme kaolin-breeze")
        )

        (when (equal psimacs/config/default-theme "kaolin-bubblegum")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'kaolin-bubblegum t)
            (kaolin-treemacs-theme)
            (message "loaded theme kaolin-bubblegum")
        )

        (when (equal psimacs/config/default-theme "kaolin-light")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'kaolin-light t)
            (kaolin-treemacs-theme)
            (message "loaded theme kaolin-light")
        )

        (when (equal psimacs/config/default-theme "kaolin-eclipse")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'kaolin-eclipse t)
            (kaolin-treemacs-theme)
            (message "loaded theme kaolin-eclipse")
        )

        (when (equal psimacs/config/default-theme "kaolin-ocean")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'kaolin-ocean t)
            (kaolin-treemacs-theme)
            (message "loaded theme kaolin-ocean")
        )

        (when (equal psimacs/config/default-theme "kaolin-galaxy")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'kaolin-galaxy t)
            (kaolin-treemacs-theme)
            (message "loaded theme kaolin-galaxy")
        )

        (when (equal psimacs/config/default-theme "kaolin-valley-dark")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'kaolin-valley-dark t)
            (kaolin-treemacs-theme)
            (message "loaded theme kaolin-valley-dark")
        )

        (when (equal psimacs/config/default-theme "kaolin-valley-light")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'kaolin-valley-light t)
            (kaolin-treemacs-theme)
            (message "loaded theme kaolin-valley-light")
        )

        (when (equal psimacs/config/default-theme "kaolin-temple")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'kaolin-temple t)
            (kaolin-treemacs-theme)
            (message "loaded theme kaolin-temple")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package vscode-dark-plus-theme
    :config
        (when (equal psimacs/config/default-theme "vscode-dark-plus")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'vscode-dark-plus t)
            (message "loaded theme vscode-dark-plus")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package nimbus-theme
    :config
        (when (equal psimacs/config/default-theme "nimbus")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'nimbus t)
            (message "loaded theme nimbus")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package leuven-theme
    :config
        (when (equal psimacs/config/default-theme "leuven")
            (setq psimacs/config/theme-is-light-colored t)

            (setq leuven-scale-outline-headlines nil)
            ;; For dark theme:
            (setq leuven-dark-scale-outline-headlines nil)

            (setq leuven-scale-org-agenda-structure nil)
            (setq leuven-scale-org-document-title nil)
            (setq leuven-scale-volatile-highlight nil)

            ;; For dark theme:
            (setq leuven-dark-scale-org-agenda-structure nil)
            (setq leuven-dark-scale-org-document-title nil)
            (setq leuven-dark-scale-volatile-highlight nil)

            (load-theme 'leuven t)
            (message "loaded theme leuven")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package afternoon-theme
    :config
        (when (equal psimacs/config/default-theme "afternoon")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'afternoon t)
            (message "loaded theme afternoon")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package alect-themes
    :config
        (when (equal psimacs/config/default-theme "alect-light")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'alect-light t)
            (message "loaded theme alect-light")
        )

        (when (equal psimacs/config/default-theme "alect-light-alt")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'alect-light-alt t)
            (message "loaded theme alect-light-alt")
        )

        (when (equal psimacs/config/default-theme "alect-dark")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'alect-dark t)
            (message "loaded theme alect-dark")
        )

        (when (equal psimacs/config/default-theme "alect-dark-alt")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'alect-dark-alt t)
            (message "loaded theme alect-dark-alt")
        )

        (when (equal psimacs/config/default-theme "alect-black")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'alect-black t)
            (message "loaded theme alect-black")
        )

        (when (equal psimacs/config/default-theme "alect-black-alt")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'alect-black-alt t)
            (message "loaded theme alect-black-alt")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package ample-theme
    :config
        (when (equal psimacs/config/default-theme "ample")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'ample t)
            (message "loaded theme ample")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package ample-zen-theme
    :config
        (when (equal psimacs/config/default-theme "ample-zen")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'ample-zen t)
            (message "loaded theme ample-zen")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package color-theme-sanityinc-tomorrow
    :config
        (when (equal psimacs/config/default-theme "sanityinc-tomorrow-day")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'sanityinc-tomorrow-day t)
            (message "loaded theme sanityinc-tomorrow-day")
        )
        (when (equal psimacs/config/default-theme "sanityinc-tomorrow-night")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'sanityinc-tomorrow-night t)
            (message "loaded theme sanityinc-tomorrow-night")
        )

        (when (equal psimacs/config/default-theme "sanityinc-tomorrow-blue")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'sanityinc-tomorrow-blue t)
            (message "loaded theme sanityinc-tomorrow-blue")
        )

        (when (equal psimacs/config/default-theme "sanityinc-tomorrow-bright")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'sanityinc-tomorrow-bright t)
            (message "loaded theme sanityinc-tomorrow-bright")
        )

        (when (equal psimacs/config/default-theme "sanityinc-tomorrow-eighties")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'sanityinc-tomorrow-eighties t)
            (message "loaded theme sanityinc-tomorrow-eighties")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package dracula-theme
    :config
        (when (equal psimacs/config/default-theme "dracula")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'dracula t)
            (message "loaded theme dracula")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package flatland-theme
    :config
        (when (equal psimacs/config/default-theme "flatland")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'flatland t)
            (message "loaded theme flatland")
        )

        (custom-theme-set-faces 'flatland
            '(show-paren-match    ((t (:background "dark gray" :foreground "black"  :weight bold))))
            '(show-paren-mismatch ((t (:background "firebrick" :foreground "orange" :weight bold)))))
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package gandalf-theme
    :config
        (when (equal psimacs/config/default-theme "gandalf")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'gandalf t)
            (message "loaded theme gandalf")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package github-modern-theme
    :config
        (when (equal psimacs/config/default-theme "github-modern")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'github-modern t)
            (message "loaded theme github-modern")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package gruvbox-theme
    :config
        (when (equal psimacs/config/default-theme "gruvbox-dark-medium")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'gruvbox-dark-medium t)
            (message "loaded theme gruvbox-dark-medium")
        )

        (when (equal psimacs/config/default-theme "gruvbox-dark-soft")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'gruvbox-dark-soft t)
            (message "loaded theme gruvbox-dark-soft")
        )

        (when (equal psimacs/config/default-theme "gruvbox-dark-hard")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'gruvbox-dark-hard t)
            (message "loaded theme gruvbox-dark-hard")
        )

        (when (equal psimacs/config/default-theme "gruvbox-light-medium")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'gruvbox-light-medium t)
            (message "loaded theme gruvbox-light-medium")
        )

        (when (equal psimacs/config/default-theme "gruvbox-light-soft")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'gruvbox-light-soft t)
            (message "loaded theme gruvbox-light-soft")
        )

        (when (equal psimacs/config/default-theme "gruvbox-light-hard")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'gruvbox-light-hard t)
            (message "loaded theme gruvbox-light-hard")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package pastelmac-theme
    :config
        (when (equal psimacs/config/default-theme "pastelmac")
            (setq psimacs/config/theme-is-light-colored t)
            (load-theme 'pastelmac t)
            (message "loaded theme pastelmac")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package moe-theme
    :config
        (require 'moe-theme)

        (when (equal psimacs/config/default-theme "moe-dark")
            (setq psimacs/config/theme-is-light-colored nil)
            (moe-dark)
            (moe-theme-modeline-apply-color 'orange)
            (message "loaded theme moe-dark")
        )

        (when (equal psimacs/config/default-theme "moe-light")
            (setq psimacs/config/theme-is-light-colored t)
            (moe-light)
            (moe-theme-modeline-apply-color 'blue)
            (message "loaded theme moe-light")
        )
        ;(powerline-moe-theme)
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package monokai-theme
    :config
        (when (equal psimacs/config/default-theme "monokai")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'monokai t)
            (message "loaded theme monokai")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package monokai-pro-theme
    :config
        (when (equal psimacs/config/default-theme "monokai-pro")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'monokai-pro t)
            (message "loaded theme monokai-pro")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package toxi-theme
    :config
        (when (equal psimacs/config/default-theme "toxi")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'toxi t)
            (message "loaded theme toxi")
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-basic-themes.el
(use-package zenburn-theme
    :config
        (when (equal psimacs/config/default-theme "zenburn")
            (setq psimacs/config/theme-is-light-colored nil)
            (load-theme 'zenburn t)
            (message "loaded theme zenburn")
        )
)
#+end_src

** Prettify

*Emacs* ships with a minor mode called [[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/prog-mode.el][prettify-symbols-mode]]. Its purpose is to replace the standard text
representation of various identifiers/symbols with a (arguably) more aesthetically pleasing representation
(often a single unicode character would replace several ascii characters).

A classic example would be lambda from various Lisp dialects that many people prefer to replace with the
greek letter λ (small lambda).

Another package is [[https://github.com/pretty-mode/pretty-mode][pretty-mode]] which provides basically the same features. This package additionally provides
category groups for activation of different usage patterns.

Unfortunately problems arise when mixing  [[https://github.com/pretty-mode/pretty-mode][pretty-mode]] with [[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/prog-mode.el][prettify-symbols-mode]] so that it is not possible
to facilitate the  [[https://github.com/pretty-mode/pretty-mode][pretty-mode]] categories.

Therefore *Psimacs* defines all symbols from scratch with [[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/prog-mode.el][prettify-symbols-mode]].

*** Pretty-Mode :noexport:

[[https://github.com/pretty-mode/pretty-mode][Pretty-mode]] redisplays parts of the Emacs buffer as pretty Unicode symbols.

This section is only added for documentation purpose, but it should not be used.

#+begin_src emacs-lisp :tangle config/init-basic-prettify.el :var file-description="Basic prettification of Emacs"
;;
;; pretty mode is not used by Psimacs. Only to see how it is to be used.
;;
(use-package pretty-mode
    :config
        ;(global-pretty-mode t)
        (add-hook 'python-mode-hook 'turn-on-pretty-mode)
        (add-hook 'inferior-python-mode-hook 'turn-on-pretty-mode)

        (add-hook 'lisp-mode-hook 'turn-on-pretty-mode)
        (add-hook 'emacs-lisp-mode-hook 'turn-on-pretty-mode)
        (add-hook 'c-mode-hook 'turn-on-pretty-mode)
        (add-hook 'c++-mode-hook 'turn-on-pretty-mode)
        ;(add-hook 'haskell-mode-hook 'turn-on-pretty-mode)

        (pretty-activate-groups
            '(
                :greek
                :logic-nary
                :sets-operations-nary
                :arrows-tails
                :arrows-tails-double
                :arithmetic-triple
                :arithmetic-nary
                :sub-and-superscripts
                :parentheses
                :types
            )
        )
)
#+end_src

*** Prettify-Symbols-Mode

When [[https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/prog-mode.el][prettify-symbols-mode]] and  [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Font-Lock.html][font-locking]] are enabled, symbols are prettified. *Psimacs* defines list of symbols
for various programming modes.

Currently the greek characters are supported for all programming modes and additionally some extra symbols are
defined for the Python programming mode.

See also: [[http://ergoemacs.org/emacs/emacs_pretty_lambda.html][About prettify-symbols-mode]]

#+attr_html: :class styledtable1
| Key binding | Command                          | Description                            |
|-------------+----------------------------------+----------------------------------------|
| =H-m C-x C-p= | =M-x prettify-symbols-mode=        | Toggle =prettify-symbols-mode=.          |
| =<f8>=        | =M-x prettify-symbols-mode=        | Toggle =prettify-symbols-mode=.          |
| =M-<f8>=      | =M-x global-prettify-symbols-mode= | Toggle =prettify-symbols-mode= globally. |
|-------------+----------------------------------+----------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-prettify.el :var file-description="Basic prettification of Emacs"
;;
;; Prettify the greek letters in any programming mode and additionaly beautify the Pythons programming mode
;;
(use-package prog-mode ; Contains pretty-symbols-mode
    :straight nil
    :config
        (setq prettify-symbols-unprettify-at-point 'right-edge)

        (defun psimacs/config/prettify-symbols-compose-p (start end _match)
          "Return true iff the symbol MATCH should be composed.

The symbol starts at position START and ends at position END.
This is the default for `prettify-symbols-compose-predicate'
which is suitable for most programming languages such as C or Lisp.

Additional to `prettify-symbols-compose-p' function found in \\='prog-mode.el\\='
this variant recoginizes a valid symbol if it starts with and/or ends with
characters \\='_\\=' or \\='/\\='."
          ;; Check that the chars should really be composed into a symbol.
          (let* ((syntaxes-beg (if (memq (char-syntax (char-after start)) '(?w ?_))
                                   '(?w ?_) '(?. ?\\)))
                 (syntaxes-end (if (memq (char-syntax (char-before end)) '(?w ?_))
                                   '(?w ?_) '(?. ?\\))))
            (not (or (and
                       (null (memq (char-before start) '(?_ ?/)))
                       (memq (char-syntax (or (char-before start) ?\s)) syntaxes-beg))
                     (and
                       (null (memq (char-after end) '(?_ ?/)))
                       (memq (char-syntax (or (char-after end) ?\s)) syntaxes-end))
                     (nth 8 (syntax-ppss))))))

        (global-prettify-symbols-mode t)
    :hook (
            (prog-mode .
                (lambda ()
                    (setq prettify-symbols-compose-predicate #'psimacs/config/prettify-symbols-compose-p)
                    (mapc (lambda (pair) (push pair prettify-symbols-alist))
                       '(
                        ;; Psimacs
                            ("psimacs". ?𝝍)

                        ;; Greek Letters
                            ("ALPHA"  . ?𝜜)
                            ("Alpha"  . ?𝛢)
                            ("alpha"  . ?𝜶)
                            ("ALPHA1" . ?𝜜)
                            ("ALPHA2" . ?𝞐)
                            ("ALPHA3" . ?𝚨)
                            ("ALPHA4" . ?𝝖)
                            ("Alpha1" . ?𝛢)
                            ("Alpha2" . ?Α)
                            ("alpha1" . ?𝜶)
                            ("alpha2" . ?𝞪)
                            ("alpha3" . ?𝛂)
                            ("alpha4" . ?𝝰)
                            ("alpha5" . ?𝛼)
                            ("alpha6" . ?α)

                            ("BETA"  . ?𝜝)
                            ("Beta"  . ?𝛣)
                            ("beta"  . ?𝜷)
                            ("BETA1" . ?𝜝)
                            ("BETA2" . ?𝞑)
                            ("BETA3" . ?𝚩)
                            ("BETA4" . ?𝝗)
                            ("Beta1" . ?𝛣)
                            ("Beta2" . ?Β)
                            ("beta1" . ?𝜷)
                            ("beta2" . ?𝞫)
                            ("beta3" . ?𝛃)
                            ("beta4" . ?𝝱)
                            ("beta5" . ?𝛽)
                            ("beta6" . ?β)

                            ("GAMMA"  . ?𝜞)
                            ("Gamma"  . ?𝛤)
                            ("gamma"  . ?𝜸)
                            ("GAMMA1" . ?𝜞)
                            ("GAMMA2" . ?𝞒)
                            ("GAMMA3" . ?𝚪)
                            ("GAMMA4" . ?𝝘)
                            ("Gamma1" . ?𝛤)
                            ("Gamma2" . ?Γ)
                            ("gamma1" . ?𝜸)
                            ("gamma2" . ?𝞬)
                            ("gamma3" . ?𝛄)
                            ("gamma4" . ?𝝲)
                            ("gamma5" . ?𝛾)
                            ("gamma6" . ?γ)

                            ("DELTA"  . ?𝜟)
                            ("Delta"  . ?𝛥)
                            ("delta"  . ?𝜹)
                            ("DELTA1" . ?𝜟)
                            ("DELTA2" . ?𝞓)
                            ("DELTA3" . ?𝚫)
                            ("DELTA4" . ?𝝙)
                            ("Delta1" . ?𝛥)
                            ("Delta2" . ?Δ)
                            ("delta1" . ?𝜹)
                            ("delta2" . ?𝞭)
                            ("delta3" . ?𝛅)
                            ("delta4" . ?𝝳)
                            ("delta5" . ?𝛿)
                            ("delta6" . ?δ)

                            ("EPSILON"  . ?𝜠)
                            ("Epsilon"  . ?𝛦)
                            ("epsilon"  . ?𝜺)
                            ("EPSILON1" . ?𝜠)
                            ("EPSILON2" . ?𝞔)
                            ("EPSILON3" . ?𝚬)
                            ("EPSILON4" . ?𝝚)
                            ("Epsilon1" . ?𝛦)
                            ("Epsilon2" . ?Ε)
                            ("epsilon1" . ?𝜺)
                            ("epsilon2" . ?𝞮)
                            ("epsilon3" . ?𝛆)
                            ("epsilon4" . ?𝝴)
                            ("epsilon5" . ?𝜀)
                            ("epsilon6" . ?ε)

                            ("ZETA"  . ?𝜡)
                            ("Zeta"  . ?𝛧)
                            ("zeta"  . ?𝜻)
                            ("ZETA1" . ?𝜡)
                            ("ZETA2" . ?𝞕)
                            ("ZETA3" . ?𝚭)
                            ("ZETA4" . ?𝝛)
                            ("Zeta1" . ?𝛧)
                            ("Zeta2" . ?Ζ)
                            ("zeta1" . ?𝜻)
                            ("zeta2" . ?𝞯)
                            ("zeta3" . ?𝛇)
                            ("zeta4" . ?𝝵)
                            ("zeta5" . ?𝜁)
                            ("zeta6" . ?ζ)

                            ("ETA"  . ?𝜢)
                            ("Eta"  . ?𝛨)
                            ("eta"  . ?𝜼)
                            ("ETA1" . ?𝜢)
                            ("ETA2" . ?𝞖)
                            ("ETA3" . ?𝚮)
                            ("ETA4" . ?𝝜)
                            ("Eta1" . ?𝛨)
                            ("Eta2" . ?Η)
                            ("eta1" . ?𝜼)
                            ("eta2" . ?𝞰)
                            ("eta3" . ?𝛈)
                            ("eta4" . ?𝝶)
                            ("eta5" . ?𝜂)
                            ("eta6" . ?η)

                            ("THETA"  . ?𝜣)
                            ("Theta"  . ?𝛩)
                            ("theta"  . ?𝝑)
                            ("THETA1" . ?𝜣)
                            ("THETA2" . ?𝞗)
                            ("THETA3" . ?𝚯)
                            ("THETA4" . ?𝝝)
                            ("Theta1" . ?𝛩)
                            ("Theta2" . ?Θ)
                            ("theta1" . ?𝜽)
                            ("theta2" . ?𝟅)
                            ("theta3" . ?𝞱)
                            ("theta4" . ?𝛝)
                            ("theta5" . ?𝛉)
                            ("theta6" . ?𝞋)
                            ("theta7" . ?𝝷)
                            ("theta8" . ?𝜗)
                            ("theta9" . ?𝜃)
                            ("theta0" . ?θ)

                            ("IOTA"  . ?𝜤)
                            ("Iota"  . ?𝛪)
                            ("iota"  . ?𝜾)
                            ("IOTA1" . ?𝜤)
                            ("IOTA2" . ?𝞘)
                            ("IOTA3" . ?𝚰)
                            ("IOTA4" . ?𝝞)
                            ("Iota1" . ?𝛪)
                            ("Iota2" . ?Ι)
                            ("iota1" . ?𝜾)
                            ("iota2" . ?𝞲)
                            ("iota3" . ?𝛊)
                            ("iota4" . ?𝝸)
                            ("iota5" . ?𝜄)
                            ("iota6" . ?ι)

                            ("KAPPA"  . ?𝜥)
                            ("Kappa"  . ?𝛫)
                            ("kappa"  . ?𝜿)
                            ("KAPPA1" . ?𝜥)
                            ("KAPPA2" . ?𝞙)
                            ("KAPPA3" . ?𝚱)
                            ("KAPPA4" . ?𝝟)
                            ("Kappa1" . ?𝛫)
                            ("Kappa2" . ?Κ)
                            ("kappa1" . ?𝝒)
                            ("kappa2" . ?𝞳)
                            ("kappa3" . ?𝟆)
                            ("kappa4" . ?𝛋)
                            ("kappa5" . ?𝛞)
                            ("kappa6" . ?𝝹)
                            ("kappa7" . ?𝞌)
                            ("kappa8" . ?𝜅)
                            ("kappa9" . ?𝜘)
                            ("kappa0" . ?κ)

                            ("LAMBDA"  . ?𝜦)
                            ("Lambda"  . ?𝛬)
                            ("lambda"  . ?𝝀)
                            ("LAMBDA1" . ?𝜦)
                            ("LAMBDA2" . ?𝞚)
                            ("LAMBDA3" . ?𝚲)
                            ("LAMBDA4" . ?𝝠)
                            ("Lambda1" . ?𝛬)
                            ("Lambda2" . ?Λ)
                            ("lambda1" . ?𝝀)
                            ("lambda2" . ?𝞴)
                            ("lambda3" . ?𝛌)
                            ("lambda4" . ?𝝺)
                            ("lambda5" . ?𝜆)
                            ("lambda6" . ?λ)

                            ("MU"  . ?𝜧)
                            ("Mu"  . ?𝛭)
                            ("mu"  . ?𝝁)
                            ("MU1" . ?𝜧)
                            ("MU2" . ?𝞛)
                            ("MU3" . ?𝚳)
                            ("MU4" . ?𝝡)
                            ("Mu1" . ?𝛭)
                            ("Mu2" . ?Μ)
                            ("mu1" . ?𝝁)
                            ("mu2" . ?𝞵)
                            ("mu3" . ?𝛍)
                            ("mu4" . ?𝝻)
                            ("mu5" . ?𝜇)
                            ("mu6" . ?μ)

                            ("NU"  . ?𝜨)
                            ("Nu"  . ?𝛮)
                            ("nu"  . ?𝝂)
                            ("NU1" . ?𝜨)
                            ("NU2" . ?𝞜)
                            ("NU3" . ?𝚴)
                            ("NU4" . ?𝝢)
                            ("Nu1" . ?𝛮)
                            ("Nu2" . ?Ν)
                            ("nu1" . ?𝝂)
                            ("nu2" . ?𝞶)
                            ("nu3" . ?𝛎)
                            ("nu4" . ?𝝼)
                            ("nu5" . ?𝜈)
                            ("nu6" . ?ν)

                            ("XI"  . ?𝜩)
                            ("Xi"  . ?𝛯)
                            ("xi"  . ?𝝃)
                            ("XI1" . ?𝜩)
                            ("XI2" . ?𝞝)
                            ("XI3" . ?𝚵)
                            ("XI4" . ?𝝣)
                            ("Xi1" . ?𝛯)
                            ("Xi2" . ?Ξ)
                            ("xi1" . ?𝝃)
                            ("xi2" . ?𝞷)
                            ("xi3" . ?𝛏)
                            ("xi4" . ?𝝽)
                            ("xi5" . ?𝜉)
                            ("xi6" . ?ξ)

                            ("OMICRON"  . ?𝜪)
                            ("Omicron"  . ?𝛰)
                            ("omicron"  . ?𝝄)
                            ("OMICRON1" . ?𝜪)
                            ("OMICRON2" . ?𝞞)
                            ("OMICRON3" . ?𝚶)
                            ("OMICRON4" . ?𝝤)
                            ("Omicron1" . ?𝛰)
                            ("Omicron2" . ?Ο)
                            ("omicron1" . ?𝝄)
                            ("omicron2" . ?𝞸)
                            ("omicron3" . ?𝛐)
                            ("omicron4" . ?𝝾)
                            ("omicron5" . ?𝜊)
                            ("omicron6" . ?ο)

                            ("PI"  . ?𝜫)
                            ("Pi"  . ?𝛱)
                            ("pi"  . ?𝝅)
                            ("PI1" . ?𝜫)
                            ("PI2" . ?𝞟)
                            ("PI3" . ?𝚷)
                            ("PI4" . ?𝝥)
                            ("Pi1" . ?𝛱)
                            ("Pi2" . ?Π)
                            ("pi1" . ?𝝅)
                            ("pi2" . ?𝞹)
                            ("pi3" . ?𝛑)
                            ("pi4" . ?𝝿)
                            ("pi5" . ?𝜋)
                            ("pi6" . ?π)

                            ("RHO"  . ?𝜬)
                            ("Rho"  . ?𝛲)
                            ("rho"  . ?𝝔)
                            ("RHO1" . ?𝜬)
                            ("RHO2" . ?𝞠)
                            ("RHO3" . ?𝚸)
                            ("RHO4" . ?𝝦)
                            ("Rho1" . ?𝛲)
                            ("Rho2" . ?Ρ)
                            ("rho1" . ?𝝆)
                            ("rho2" . ?𝟈)
                            ("rho3" . ?𝞺)
                            ("rho4" . ?𝛠)
                            ("rho5" . ?𝛒)
                            ("rho6" . ?𝞎)
                            ("rho7" . ?𝞀)
                            ("rho8" . ?𝜚)
                            ("rho9" . ?𝜌)
                            ("rho0" . ?ρ)

                            ("SIGMA"  . ?𝜮)
                            ("Sigma"  . ?𝛴)
                            ("sigma"  . ?𝝈)
                            ("SIGMA1" . ?𝜮)
                            ("SIGMA2" . ?𝞢)
                            ("SIGMA3" . ?𝚺)
                            ("SIGMA4" . ?𝝨)
                            ("Sigma1" . ?𝛴)
                            ("Sigma2" . ?Σ)
                            ("sigma1" . ?𝝈)
                            ("sigma2" . ?𝞼)
                            ("sigma3" . ?𝛔)
                            ("sigma4" . ?𝞂)
                            ("sigma5" . ?𝜎)
                            ("sigma6" . ?σ)

                            ("TAU"  . ?𝜯)
                            ("Tau"  . ?𝛵)
                            ("tau"  . ?𝝉)
                            ("TAU1" . ?𝜯)
                            ("TAU2" . ?𝞣)
                            ("TAU3" . ?𝚻)
                            ("TAU4" . ?𝝩)
                            ("Tau1" . ?𝛵)
                            ("Tau2" . ?Τ)
                            ("tau1" . ?𝝉)
                            ("tau2" . ?𝞽)
                            ("tau3" . ?𝛕)
                            ("tau4" . ?𝞃)
                            ("tau5" . ?𝜏)
                            ("tau6" . ?τ)

                            ("UPSILON"  . ?𝜰)
                            ("Upsilon"  . ?𝛶)
                            ("upsilon"  . ?𝝊)
                            ("UPSILON1" . ?𝜰)
                            ("UPSILON2" . ?𝞤)
                            ("UPSILON3" . ?𝚼)
                            ("UPSILON4" . ?𝝪)
                            ("Upsilon1" . ?𝛶)
                            ("Upsilon2" . ?Υ)
                            ("upsilon1" . ?𝝊)
                            ("upsilon2" . ?𝞾)
                            ("upsilon3" . ?𝛖)
                            ("upsilon4" . ?𝞄)
                            ("upsilon5" . ?𝜐)
                            ("upsilon6" . ?υ)

                            ("PHI"  . ?𝜱)
                            ("Phi"  . ?𝛷)
                            ("phi"  . ?𝝋)
                            ("PHI1" . ?𝜱)
                            ("PHI2" . ?𝞥)
                            ("PHI3" . ?𝚽)
                            ("PHI4" . ?𝝫)
                            ("Phi1" . ?𝛷)
                            ("Phi2" . ?Φ)
                            ("phi1" . ?𝝋)
                            ("phi2" . ?𝞿)
                            ("phi3" . ?𝛗)
                            ("phi4" . ?𝞅)
                            ("phi5" . ?𝜑)
                            ("phi6" . ?φ)

                            ("CHI"  . ?𝜲)
                            ("Chi"  . ?𝛸)
                            ("chi"  . ?𝝌)
                            ("CHI1" . ?𝜲)
                            ("CHI2" . ?𝞦)
                            ("CHI3" . ?𝚾)
                            ("CHI4" . ?𝝬)
                            ("Chi1" . ?𝛸)
                            ("Chi2" . ?Χ)
                            ("chi1" . ?𝝌)
                            ("chi2" . ?𝟀)
                            ("chi3" . ?𝛘)
                            ("chi4" . ?𝞆)
                            ("chi5" . ?𝜒)
                            ("chi6" . ?χ)

                            ("PSI"  . ?𝜳)
                            ("Psi"  . ?𝛹)
                            ("psi"  . ?𝝍)
                            ("PSI1" . ?𝜳)
                            ("PSI2" . ?𝞧)
                            ("PSI3" . ?𝚿)
                            ("PSI4" . ?𝝭)
                            ("Psi1" . ?𝛹)
                            ("Psi2" . ?Ψ)
                            ("psi1" . ?𝝍)
                            ("psi2" . ?𝟁)
                            ("psi3" . ?𝛙)
                            ("psi4" . ?𝞇)
                            ("psi5" . ?𝜓)
                            ("psi6" . ?ψ)

                            ("OMEGA"  . ?𝜴)
                            ("Omega"  . ?𝛺)
                            ("omega"  . ?𝝎)
                            ("OMEGA1" . ?𝜴)
                            ("OMEGA2" . ?𝞨)
                            ("OMEGA3" . ?𝛀)
                            ("OMEGA4" . ?𝝮)
                            ("Omega1" . ?𝛺)
                            ("Omega2" . ?Ω)
                            ("omega1" . ?𝝎)
                            ("omega2" . ?𝟂)
                            ("omega3" . ?𝛚)
                            ("omega4" . ?𝞈)
                            ("omega5" . ?𝜔)
                            ("omega6" . ?ω)

                            ("NABLA"  . ?𝜵)
                            ("Nabla"  . ?𝛻)
                            ("nabla"  . ?𝝏)
                            ("NABLA1" . ?𝜵)
                            ("NABLA2" . ?𝞩)
                            ("NABLA3" . ?𝛁)
                            ("NABLA4" . ?𝝯)
                            ("Nabla1" . ?𝛻)
                            ("nabla1" . ?𝝏)
                            ("nabla2" . ?𝟃)
                            ("nabla3" . ?𝛛)
                            ("nabla4" . ?𝞉)
                            ("nabla5" . ?𝜕)
                        )
                    )
                )
            )

            (python-mode .
                (lambda ()
                    (mapc (lambda (pair) (push pair prettify-symbols-alist))
                       '(       ;; Syntax
                                ("self"      . ?⯀)
                                ("def"       . ?ƒ)
                                ("not"       . ?!)
                                ("in"        . ?∈)
                                ("not in"    . ?∉)
                                ("return"    . ?⮭)
                                ("continue"  . ?⭮)
                                ("yield"     . ?⮩)
                                ("for"       . ?∀)
                                ("while"     . ?⦿)
                                ("any"       . ?⍫)
                                ("all"       . ?⧝)
                                ;; Base Types
                                ("bool"      . ?𝔹)
                                ("int"       . ?ℤ)
                                ("byte"      . ?𝕭)
                                ("float"     . ?ℝ)
                                ("str"       . ?𝕊)
                                ("dict"      . ?𝔻)
                                ("list"      . ?𝕃)
                                ("tuple"     . ?𝕋)
                                ("set"       . ?𝕤)
                                ("frozenset" . ?𝔽)
                                ;; special values
                                ("True"      . ?𝕥)
                                ("False"     . ?𝕗)
                                ("None"      . ?⌀)
                                ;; Mypy
                                ("Enum"      . ?𝓔)
                                ("IntEnum"   . ?𝔗)
                                ("Bool"      . ?𝓑)
                                ("Int"       . ?𝓩)
                                ("Int"       . ?𝔅)
                                ("Float"     . ?𝓡)
                                ("String"    . ?𝓢)
                                ("Dict"      . ?𝓓)
                                ("List"      . ?𝓛)
                                ("Tuple"     . ?𝓣)
                                ("NamedTuple". ?𝓝)
                                ("Set"       . ?𝜮)
                                ("Frozenset" . ?𝓕)
                                ("Iterable"  . ?𝓘)
                                ("Any"       . ?𝓐)
                                ("Union"     . ?𝓤)

                                ("TypeVar"   . ?𝓥)
                                ("Sequence"  . ?𝔖)
                                ("Generic"   . ?𝓖)
                                ("Callable"  . ?𝓒)
                                ("Deque"     . ?𝓠)
                                ("Optional"  . ?𝓞)

                                ;;operators
                                ("and"   . ?∧)
                                ("or"    . ?∨)
                                ("="     . ?≝)
                                ("<="    . ?≤)
                                (">="    . ?≥)
                                ("<<"    . ?≪)
                                (">>"    . ?≫)
                                ("=="    . ?⩵)
                                ("!="    . ?≠)
                                ("sqrt"  . ?√)
                                ("print" . ?𝓟)
                                ("pass"  . ?⯎)
                                ("raise" . ?↯)
                                ("->"    . ?🡲)

                                ("__eq__"            . ?⩵)
                                ("__ne__"            . ?≠)
                                ("__lt__"            . ?<)
                                ("__le__"            . ?≤)
                                ("__gt__"            . ?>)
                                ("__ge__"            . ?≥)
                                ("__new__"           . ?𝓝)
                                ("__del__"           . ?↯)
                                ("__init__"          . ?⨻)
                                ("__repr__"          . ?⁋)
                                ("__str__"           . ?𝕊)
                                ("__bytes__"         . ?𝔹)
                                ("__hash__"          . ?𝓗)
                                ("__bool__"          . ?𝕋)
                                ;;("__getattr__"       . ?x)
                                ;;("__getattribute__"  . ?x)
                                ;;("__setattr__"       . ?x)
                                ;;("__delattr__"       . ?x)
                                ;;("__dir__"           . ?x)
                                ("__get__"           . ?🠄)
                                ("__set__"           . ?🠆)
                                ("__delete__"        . ?🠇)
                                ;;("__slots__"         . ?x)
                                ;;("__init_subclass__" . ?x)
                                ("__call__"          . ?⨕)
                                ("__getitem__"       . ?🡄)
                                ("__setitem"         . ?🡆)
                                ("__delitem__"       . ?🡇)
                                ("__iter__"          . ?⏩)
                                ;;("__missing__"       . ?x)
                                ;;("__reserved__"      . ?x)
                                ("__contains__"      . ?∈)
                                ("__add__"           . ?+)
                                ("__sub__"           . ?-)
                                ("__mul__"           . ?*)
                                ("__matmul__"        . ?•)
                                ("__truediv__"       . ?/)
                                ("__floordiv__"      . ?⫽)
                                ("__mod__"           . ?%)
                                ("__divmod__"        . ?:)
                                ("__pow__"           . ?^)
                                ("__lshift__"        . ?≪)
                                ("__rshift__"        . ?≫)
                                ("__and__"           . ?∧)
                                ("__or__"            . ?∨)
                                ("__xor__"           . ?⩒)
                                ("__neg__"           . ?¬)
                                ("__pos__"           . ?⌐)
                                ("__abs__"           . ?∥)
                                ("__invert__"        . ?∹)
                                ("__complex__"       . ?ℂ)
                                ("__int__"           . ?ℤ)
                                ("__float__"         . ?ℝ)
                                ("__index__"         . ?ⅈ)
                                ("__round__"         . ?≈)
                                ("__trunc__"         . ?⟛)
                                ("__floor__"         . ?⎿)
                                ("__ceil__"          . ?⎾)
                                ("__enter__"         . ?⏬)
                                ("__exit__"          . ?⏫)
                                ("__await__"         . ?⌛)
                        )
                    )
                )
            )
        )
    :bind (
            ("<f8>"   . prettify-symbols-mode)
            ("M-<f8>" . global-prettify-symbols-mode)

            :map psimacs/config/global-key-map/special
            ("C-x C-p" . prettify-symbols-mode)
          )
)
#+end_src

*** Emojis in Buffers

[[https://github.com/iqbalansari/emacs-emojify][Emojify]] is an Emacs extension to display emojis.
It can display github style emojis like =:smile:= or plain ascii ones like =:)=. It tries to be
as efficient as possible, while also providing a lot of flexibility.

#+begin_src emacs-lisp :tangle config/init-basic-prettify.el
(use-package emojify
    :init
        (setq emojify-emojis-dir psimacs/config/emojify-emojis-dir)
    :hook (after-init . global-emojify-mode)
)
#+end_src

*** Rainbow delimiters

The package [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] highlights delimiters such as parentheses, brackets or braces according to their depth.
Each successive level is highlighted in a different color. This makes it easy to spot
matching delimiters, orient yourself in the code, and tell which statements are at a given depth.

See also:
- [[https://www.emacswiki.org/emacs/RainbowDelimiters][EmacsWiki: Rainbow Delimiters]]
- [[http://ergoemacs.org/misc/emacs_rainbow-delimiters-mode.html][Color Nested Brackets]]

#+attr_html: :class styledtable
| Key binding       | Command                                                | Description                                                                |
|-------------------+--------------------------------------------------------+----------------------------------------------------------------------------|
| =H-m C-p C-r C-p=   | =M-x psimacs/pair/rainbow-toggle-sized-delimiters=       | Toggle the size of the rainbow-delimiters.                                 |
| =H-m C-p C-r M-C-p= | =M-x psimacs/pair/rainbow-sized-delimiters=              | All rainbow delimiters have various heights.                               |
| =H-m C-p C-r S-C-p= | =M-x psimacs/pair/rainbow-non-sized-delimiters=          | All rainbow delimiters have the same height. This is the default.          |
|                   | =M-x psimacs/pair/rainbow-toggle-theme-is-light-colored= | Toggle the rainbow delimiters colors with respect to light or dark themes. |
|-------------------+--------------------------------------------------------+----------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-rainbow-delimiters.el :var file-description="Basic rainbow delimiters setup"
;;
;; Rainbow delimiter handling
;;
(defvar psimacs/config/rainbow-toggle-sized-delimiters-flag nil
    "The current rainbow sized delimiters toggle state")

(defun psimacs/pair/rainbow-non-sized-delimiters ()
    "All rainbow delimiters have the same height."
    (interactive "")

    ;;(message "from psimacs/pair/rainbow-non-sized-delimiters")

    (if psimacs/config/theme-is-light-colored
        (progn
            ;(message "theme-is-light-colored")
            (custom-set-faces
                '(rainbow-delimiters-depth-1-face   ((t (:foreground "red"        :height 1.0))))
                '(rainbow-delimiters-depth-2-face   ((t (:foreground "orange"     :height 1.0))))
                '(rainbow-delimiters-depth-3-face   ((t (:foreground "darkblue"   :height 1.0))))
                '(rainbow-delimiters-depth-4-face   ((t (:foreground "green"      :height 1.0))))
                '(rainbow-delimiters-depth-5-face   ((t (:foreground "blue"       :height 1.0))))
                '(rainbow-delimiters-depth-6-face   ((t (:foreground "violet"     :height 1.0))))
                '(rainbow-delimiters-depth-7-face   ((t (:foreground "purple"     :height 1.0))))
                '(rainbow-delimiters-depth-8-face   ((t (:foreground "black"      :height 1.0))))
                '(rainbow-delimiters-unmatched-face ((t (:background "cyan"       :height 1.0)))))
        )
        (progn
            ;(message "theme-is-dark-colored")
            (custom-set-faces
                '(rainbow-delimiters-depth-1-face   ((t (:foreground "red"        :height 1.0))))
                '(rainbow-delimiters-depth-2-face   ((t (:foreground "orange"     :height 1.0))))
                '(rainbow-delimiters-depth-3-face   ((t (:foreground "yellow"     :height 1.0))))
                '(rainbow-delimiters-depth-4-face   ((t (:foreground "green"      :height 1.0))))
                '(rainbow-delimiters-depth-5-face   ((t (:foreground "lightblue"  :height 1.0))))
                '(rainbow-delimiters-depth-6-face   ((t (:foreground "violet"     :height 1.0))))
                '(rainbow-delimiters-depth-7-face   ((t (:foreground "purple"     :height 1.0))))
                '(rainbow-delimiters-depth-8-face   ((t (:foreground "white"      :height 1.0))))
                '(rainbow-delimiters-unmatched-face ((t (:background "cyan"       :height 1.0)))))
        )
    )

    (setq psimacs/config/rainbow-toggle-sized-delimiters-flag t)
)

(defun psimacs/pair/rainbow-sized-delimiters ()
    "All rainbow delimiters have various heights."
    (interactive "")
    (if psimacs/config/theme-is-light-colored
        (custom-set-faces
            '(rainbow-delimiters-depth-1-face   ((t (:foreground "red"        :height 2.0))))
            '(rainbow-delimiters-depth-2-face   ((t (:foreground "orange"     :height 1.8))))
            '(rainbow-delimiters-depth-3-face   ((t (:foreground "darkblue"   :height 1.6))))
            '(rainbow-delimiters-depth-4-face   ((t (:foreground "green"      :height 1.4))))
            '(rainbow-delimiters-depth-5-face   ((t (:foreground "blue"       :height 1.2))))
            '(rainbow-delimiters-depth-6-face   ((t (:foreground "violet"     :height 1.1))))
            '(rainbow-delimiters-depth-7-face   ((t (:foreground "purple"     :height 1.0))))
            '(rainbow-delimiters-depth-8-face   ((t (:foreground "black"      :height 0.9))))
            '(rainbow-delimiters-unmatched-face ((t (:background "cyan"       :height 0.8)))))
        (custom-set-faces
            '(rainbow-delimiters-depth-1-face   ((t (:foreground "red"        :height 2.0))))
            '(rainbow-delimiters-depth-2-face   ((t (:foreground "orange"     :height 1.8))))
            '(rainbow-delimiters-depth-3-face   ((t (:foreground "yellow"     :height 1.6))))
            '(rainbow-delimiters-depth-4-face   ((t (:foreground "green"      :height 1.4))))
            '(rainbow-delimiters-depth-5-face   ((t (:foreground "lightblue"  :height 1.2))))
            '(rainbow-delimiters-depth-6-face   ((t (:foreground "violet"     :height 1.1))))
            '(rainbow-delimiters-depth-7-face   ((t (:foreground "purple"     :height 1.0))))
            '(rainbow-delimiters-depth-8-face   ((t (:foreground "white"      :height 0.9))))
            '(rainbow-delimiters-unmatched-face ((t (:background "cyan"       :height 0.8)))))
    )

    (setq psimacs/config/rainbow-toggle-sized-delimiters-flag nil)
)

(defun psimacs/pair/rainbow-toggle-sized-delimiters ()
    "Toggle the size of the rainbow-delimiters."
    (interactive "")
    (if psimacs/config/rainbow-toggle-sized-delimiters-flag
        (psimacs/pair/rainbow-sized-delimiters)
      (psimacs/pair/rainbow-non-sized-delimiters)
    )
)

(defun psimacs/pair/rainbow-refresh-delimiters-colors ()
    "Refresh the rainbow-delimiters settings."
    (let ((flag psimacs/config/rainbow-toggle-sized-delimiters-flag))
        (if flag
            (psimacs/pair/rainbow-sized-delimiters)
           (psimacs/pair/rainbow-non-sized-delimiters)
        )
        (setq psimacs/config/rainbow-toggle-sized-delimiters-flag flag)
    )
)

(defun psimacs/pair/rainbow-toggle-theme-is-light-colored ()
    "Toggle the rainbow delimiters colors with respect to light or dark themes."
    (interactive "")
    (setq psimacs/config/theme-is-light-colored (not psimacs/config/theme-is-light-colored))
    (psimacs/pair/rainbow-refresh-delimiters-colors)
)

;;
;; The actual package
;;
(use-package rainbow-delimiters
    :diminish
    :demand t
    :hook (
           (prog-mode . rainbow-delimiters-mode)
           (psimacs/config/after-load-theme . psimacs/pair/rainbow-non-sized-delimiters)
           )
    :config
          (psimacs/pair/rainbow-non-sized-delimiters)
    :bind (
            :map psimacs/config/global-key-map/special
                ("C-p C-r   C-p" . psimacs/pair/rainbow-toggle-sized-delimiters)
                ("C-p C-r M-C-p" . psimacs/pair/rainbow-sized-delimiters)
                ("C-p C-r S-C-p" . psimacs/pair/rainbow-non-sized-delimiters)
          )
)
#+end_src

** Mode Line

*** Powerline :noexport:

[[https://github.com/milkypostman/powerline][Powerline]] provides a nice mode-line.

Sorry, switched to Doom-Modeline instead.

See also: [[https://www.emacswiki.org/emacs/PowerLine][EmacsWiki: PowerLine]]

#+begin_src emacs-lisp :tangle config/init-basic-mode-line.el :var file-description="Basic Mode-Line setup"
;;
;; Prettify the mode-line
;;
(use-package powerline
    :config
        (powerline-default-theme)
        ;(powerline-center-theme)
        ;(powerline-center-evil-theme)
        ;(powerline-vim-theme)
        ;(powerline-nano-theme)
)
#+end_src

*** Doom Modeline

[[https://github.com/seagle0128/doom-modeline][Doom-modeline]] is a fancy and fast mode-line inspired by minimalism design.

#+begin_src emacs-lisp :tangle config/init-basic-mode-line.el :var file-description="Basic Mode-Line setup"
;;
;; Prettify the mode-line
;;
(use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :config
        ;; How tall the mode-line should be. It's only respected in GUI.
        ;; If the actual char height is larger, it respects the actual height.
        (setq doom-modeline-height 24)
        ;(setq doom-modeline-height 20)
        ;(setq doom-modeline-height 20)

        ;; How wide the mode-line bar should be. It's only respected in GUI.
        (setq doom-modeline-bar-width 3)

        ;; The limit of the window width.
        ;; If `window-width' is smaller than the limit, some information won't be displayed.
        (setq doom-modeline-window-width-limit fill-column)

        ;; How to detect the project root.
        ;; The default priority of detection is `ffip' > `projectile' > `project'.
        ;; nil means to use `default-directory'.
        ;; The project management packages have some issues on detecting project root.
        ;; e.g. `projectile' doesn't handle symlink folders well, while `project' is unable
        ;; to hanle sub-projects.
        ;; You can specify one if you encounter the issue.
        (setq doom-modeline-project-detection 'project)

        ;; Determines the style used by `doom-modeline-buffer-file-name'.
        ;;
        ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
        ;;   auto => emacs/lisp/comint.el (in a project) or comint.el
        ;;   truncate-upto-project => ~/P/F/emacs/lisp/comint.el
        ;;   truncate-from-project => ~/Projects/FOSS/emacs/l/comint.el
        ;;   truncate-with-project => emacs/l/comint.el
        ;;   truncate-except-project => ~/P/F/emacs/l/comint.el
        ;;   truncate-upto-root => ~/P/F/e/lisp/comint.el
        ;;   truncate-all => ~/P/F/e/l/comint.el
        ;;   truncate-nil => ~/Projects/FOSS/emacs/lisp/comint.el
        ;;   relative-from-project => emacs/lisp/comint.el
        ;;   relative-to-project => lisp/comint.el
        ;;   file-name => comint.el
        ;;   buffer-name => comint.el<2> (uniquify buffer name)
        ;;
        ;; If you are experiencing the laggy issue, especially while editing remote files
        ;; with tramp, please try `file-name' style.
        ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
        (setq doom-modeline-buffer-file-name-style 'auto)

        ;; Whether display icons in the mode-line.
        ;; While using the server mode in GUI, should set the value explicitly.
        (setq doom-modeline-icon (display-graphic-p))

        ;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.
        (setq doom-modeline-major-mode-icon t)

        ;; Whether display the colorful icon for `major-mode'.
        ;; It respects `all-the-icons-color-icons'.
        (setq doom-modeline-major-mode-color-icon t)

        ;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
        (setq doom-modeline-buffer-state-icon t)

        ;; Whether display the modification icon for the buffer.
        ;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
        (setq doom-modeline-buffer-modification-icon t)

        ;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
        (setq doom-modeline-unicode-fallback nil)

        ;; Whether display the minor modes in the mode-line.
        (setq doom-modeline-minor-modes t)

        ;; If non-nil, a word count will be added to the selection-info modeline segment.
        (setq doom-modeline-enable-word-count nil)

        ;; Major modes in which to display word count continuously.
        ;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
        ;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
        ;; remove the modes from `doom-modeline-continuous-word-count-modes'.
        (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))

        ;; Whether display the buffer encoding.
        (setq doom-modeline-buffer-encoding t)

        ;; Whether display the indentation information.
        (setq doom-modeline-indent-info nil)

        ;; If non-nil, only display one number for checker information if applicable.
        (setq doom-modeline-check-simple-format t)

        ;; The maximum number displayed for notifications.
        (setq doom-modeline-number-limit 99)

        ;; The maximum displayed length of the branch name of version control.
        (setq doom-modeline-vcs-max-length 12)

        ;; Whether display the workspace name. Non-nil to display in the mode-line.
        (setq doom-modeline-workspace-name t)

        ;; Whether display the perspective name. Non-nil to display in the mode-line.
        (setq doom-modeline-persp-name t)

        ;; If non nil the default perspective name is displayed in the mode-line.
        (setq doom-modeline-display-default-persp-name nil)

        ;; If non nil the perspective name is displayed alongside a folder icon.
        (setq doom-modeline-persp-icon t)

        ;; Whether display the `lsp' state. Non-nil to display in the mode-line.
        (setq doom-modeline-lsp t)

        ;; Whether display the GitHub notifications. It requires `ghub' package.
        (setq doom-modeline-github nil)

        ;; The interval of checking GitHub.
        (setq doom-modeline-github-interval (* 30 60))

        ;; Whether display the modal state icon.
        ;; Including `evil', `overwrite', `god', `ryo' and `xah-fly-keys', etc.
        (setq doom-modeline-modal-icon t)

        ;; Whether display the mu4e notifications. It requires `mu4e-alert' package.
        (setq doom-modeline-mu4e nil)

        ;; Whether display the gnus notifications.
        (setq doom-modeline-gnus t)

        ;; Wheter gnus should automatically be updated and how often (set to 0 or smaller than 0 to disable)
        (setq doom-modeline-gnus-timer 2)

        ;; Wheter groups should be excludede when gnus automatically being updated.
        (setq doom-modeline-gnus-excluded-groups '("dummy.group"))

        ;; Whether display the IRC notifications. It requires `circe' or `erc' package.
        (setq doom-modeline-irc t)

        ;; Function to stylize the irc buffer names.
        (setq doom-modeline-irc-stylize 'identity)

        ;; Whether display the environment version.
        (setq doom-modeline-env-version t)
        ;; Or for individual languages
        (setq doom-modeline-env-enable-python t)
        (setq doom-modeline-env-enable-ruby t)
        (setq doom-modeline-env-enable-perl t)
        (setq doom-modeline-env-enable-go t)
        (setq doom-modeline-env-enable-elixir t)
        (setq doom-modeline-env-enable-rust t)

        ;; Change the executables to use for the language version string
        (setq doom-modeline-env-python-executable "python") ; or `python-shell-interpreter'
        (setq doom-modeline-env-ruby-executable "ruby")
        (setq doom-modeline-env-perl-executable "perl")
        (setq doom-modeline-env-go-executable "go")
        (setq doom-modeline-env-elixir-executable "iex")
        (setq doom-modeline-env-rust-executable "rustc")

        ;; What to dispaly as the version while a new one is being loaded
        (setq doom-modeline-env-load-string "...")

        ;; Hooks that run before/after the modeline version string is updated
        (setq doom-modeline-before-update-env-hook nil)
        (setq doom-modeline-after-update-env-hook nil)

        ;; Avoid mode line face size change on zooming
        (set-face-attribute 'mode-line nil :height 100)
        (set-face-attribute 'mode-line-inactive nil :height 100)
)
#+end_src

*** A minor-mode menu for the mode line

The package [[https://github.com/tarsius/minions][Minion]] implements a menu that lists enabled minor-modes,
as well as commonly but not currently enabled minor-modes. It can be used to toggle local and global
minor-modes, to access mode-specific menus, and to get help about modes.

#+begin_src emacs-lisp :tangle config/init-basic-mode-line.el
(use-package minions
  :config
    (minions-mode 1)
)
#+end_src

** Backups

*Psimacs* does make backups, uses auto saving and provides minibuffer histories.

*** Backups

*Psimacs* uses a central [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup.html#Backup][backup]] directory. I like to have a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup.html#Backup][backup]] on each save and with the correct relative
path below of my central backup directory. Each new backup file is created by appending a '~' character to
the orginal file name. If this file already exists in the backup location then this file is itself renamed
etc. until we can rename our original file. All backup files that are older than one week will be removed
at startup.

#+begin_src emacs-lisp :tangle config/init-basic-backups.el :var file-description="Basic backup system setup"
;;
;; Provide the backup directory
;;
(unless (file-directory-p psimacs/config/backup-dir)
    (make-directory psimacs/config/backup-dir t)
)

;;
;; Handle backup files
;;
(defun psimacs/config/track-backup-files (bckFile &optional counter)
    "Rename or delete backup files.

Backup files are files appended by \\='~\\=' charactes to the original file name.

If the bckFile already exists, then a new backup file name is generated and
the BCKFILE is accordingly renamed. If the counter argunment, however, exceeds
the value of the `psimacs/config/backup-max-number-files' configuration constants,
then the bckFile is removed instead.

This function calls itself recursively on the generated new backup file name
before taken any action. This way all existing backup files for the original
file are properly renamed of deleted."
    (if (file-exists-p bckFile)
        (let (
                (newbckFile (concat bckFile "~"))
            )

            (if (not counter)
                (setq counter 0)
                (setq counter (1+ counter))
            )

            (psimacs/config/track-backup-files newbckFile counter)

            (if (< counter psimacs/config/backup-max-number-files)
                (rename-file bckFile newbckFile)
                (delete-file bckFile)
            )
        )
    )
)

;;
;; Backup files are stored with path information
;;
(defun psimacs/config/backup-file-name (fpath)
    "Return a new file path of a given file path FPATH.

If the new path's directories does not exist, create them."
    (let* (
            (backupRootDir psimacs/config/backup-dir)
            (filePath (replace-regexp-in-string "\\(:\\|/cygdrive/\\)" "/" fpath ))
            (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~")))
        )

        (unless (or
                (string-equal (expand-file-name fpath) (expand-file-name psimacs/config/recent-file))
                (string-equal (expand-file-name fpath) (expand-file-name psimacs/config/history-file))
                (string-equal (expand-file-name fpath) (expand-file-name psimacs/config/save-places-file))
                (string-equal (expand-file-name fpath) (expand-file-name psimacs/config/custom-file))
                (string-equal (expand-file-name fpath) (expand-file-name psimacs/config/amx-file))
            )

            (psimacs/config/track-backup-files backupFilePath)
        )

        (mkdir (file-name-directory backupFilePath) t)

        backupFilePath
    )
)

;;
;; Before safe the backup save marker is removed, leading to a new backup.
;;
(defun psimacs/config/force-backup-of-buffer ()
  "Clear backup save marker."
  (setq buffer-backed-up nil))

;;
;; Backup on each save
;;
(add-hook 'before-save-hook
          'psimacs/config/force-backup-of-buffer)

;;
;; Define how to make a backup
;;
(setq make-backup-file-name-function 'psimacs/config/backup-file-name)

;;
;; Backup files can be made by copying the old file or by renaming it
;;
(setq backup-by-copying t)

;;
;; Remove backup files older than one week
;;
(defun psimacs/backup/clear-backups ()
  "Remove all backup files that are older than one week."
  (interactive)
  (let ( (week (* 60 60 24 7))
         (current (float-time (current-time))) )
    (dolist (f (f-files psimacs/config/backup-dir nil t))
      (when (and (backup-file-name-p f)
                 (> (- current (float-time (nth 5 (file-attributes f)))) week))
        (message "Removed backup file %s" f)
        (delete-file f)))
    (dolist (f (reverse (f-directories psimacs/config/backup-dir nil t)))
      ;(message "Found directory %s" f)
      (when (f-empty? f)
        (message "Removed directory %s" f)
        (f-delete f)))
  )
)

(add-hook 'emacs-startup-hook 'psimacs/backup/clear-backups)
#+end_src

*** Auto-Save

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Save.html#Auto-Save][Autosave]] automatically saves each visited file in a separate file, without altering the file you actually use.
It uses a central [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Auto-Save.html#Auto-Save][auto-save]] directory for that.

#+begin_src emacs-lisp :tangle config/init-basic-auto-save.el :var file-description="Basic auto saving system setup"
;;
;; Setup Psimacs auto-save strategy
;;
(let ((auto-save-dir psimacs/config/auto-save-dir))
    (unless (file-directory-p auto-save-dir)
        (make-directory auto-save-dir t)
    )

    (setq auto-save-default    t) ;; each time you visit a file, auto-saving is turned on
    (setq auto-save-interval 300) ;; specifies how many characters there are between auto-saves
    (setq auto-save-timeout   30) ;; also auto-save after 30 seconds of idleness

    (setq auto-save-list-file-prefix (concat auto-save-dir ".auto-saves-"))
    (setq auto-save-file-name-transforms `((".*" ,auto-save-dir t)))

    (setq auto-save-list-file-prefix nil)

    (setq-default tramp-auto-save-directory auto-save-dir)
)
#+end_src

*** Super-Save

[[https://github.com/bbatsov/super-save][Super-save]] additionally auto-saves your buffers, when certain events happen - e.g. you switch between buffers,
an Emacs frame loses focus, etc. You can think of it as both something that augments and replaces the standard
auto-save-mode.

#+begin_src emacs-lisp :tangle config/init-basic-auto-save.el
;;
;; And more automatic file saving :-
;;
(use-package super-save
    :diminish super-save-mode
    :config
        (super-save-mode +1)
        (setq super-save-auto-save-when-idle t)
)
#+end_src

*** History

Package [[https://www.emacswiki.org/emacs/SaveHist][savehist]] automatically save minibuffer, kill-ring, search-ring and regexp-search-ring histories to a file.
It also deletes duplicates entries.

Package [[https://github.com/emacs-mirror/emacs/blob/master/lisp/savehist.el][savehist.el]] is available on [[https://github.com/emacs-mirror/emacs][emacs-mirror]].

| Key binding | Command                            | Description                              |
|-------------+------------------------------------+------------------------------------------|
| =H-m C-c C-h= | (find-file-read-only history-file) | Open the history file in read-only mode. |
|-------------+------------------------------------+------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-auto-save.el
;;
;; Automatically save minibuffer, kill-ring, search-ring and regexp-search-ring histories
;;
(defun psimacs/history/visit-history-file ()
  "Open the save history file in buffer in read-only mode."
  (interactive)
  (when (file-exists-p psimacs/config/history-file)
    (find-file-read-only psimacs/config/history-file)))

(use-package savehist
    :straight nil
    :config
        (setq savehist-file psimacs/config/history-file)
        (savehist-mode 1)
        (setq history-length t)
        (setq history-delete-duplicates t)
        (setq savehist-save-minibuffer-history 1)
        (setq savehist-additional-variables
              '(kill-ring
                search-ring
                regexp-search-ring))
    :bind (
           :map psimacs/config/global-key-map/special
              ("C-c C-h" . psimacs/history/visit-history-file)
          )
)
#+end_src

*** Recent files

[[https://www.emacswiki.org/emacs/RecentFiles][Recentf-mode]] is a minor mode that builds a list of recently opened files. This list is automatically saved
across sessions on exiting *Emacs* - you can then access this list
through the command =C-x C-r=.

#+attr_html: :class styledtable1
| Key binding | Command                                            | Description                                                  |
|-------------+----------------------------------------------------+--------------------------------------------------------------|
| =H-x r=       | =M-x recentf-open-files=                             | Show a dialog to open a recent file.                         |
| =H-x C-r=     | =M-x recentf-open-more-files=                        | Show a dialog to open a recent file that is not in the menu. |
|-------------+----------------------------------------------------+--------------------------------------------------------------|
| =H-x f=       | =M-x counsel-recentf=                                | Find a file on recent file list.                             |
| =H-x C-f=     | =M-x counsel-buffer-or-recentf=                      | Find a buffer visiting a file or file on recent file list.   |
|-------------+----------------------------------------------------+--------------------------------------------------------------|
| =H-x C c=     | =M-x recentf-cleanup=                                | Cleanup the recent file list.                                |
| =H-x C C-c=   | =M-x psimacs/config/recentf-cleanup-directory-files= | Remove all files of DIR from recent file list.               |
|-------------+----------------------------------------------------+--------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-auto-save.el
;;
;; Track recently visited files
;;
(use-package recentf
    :diminish recentf-mode
    :init
        (setq recentf-max-menu-items   20
              recentf-max-saved-items 500
              recentf-save-file       psimacs/config/recent-file
              recentf-exclude
                  `(
                    ,(concat "^" (regexp-quote (expand-file-name psimacs/config/session-dir)) ".*$")
                    ,(concat "^" (regexp-quote (expand-file-name psimacs/config/straight-dir)) ".*$")
                    ,(concat "^" (regexp-quote (expand-file-name psimacs/config/native-comp-dir)) ".*$")
                    ,(regexp-quote (expand-file-name psimacs/config/custom-file))
                    "^.*/\\.dir-locals.el$"
                    "^.*/\\.projectile$"
                    "^.*\\.elc$"
                    ,(concat "^" (regexp-quote (expand-file-name psimacs/config/agenda-dir)) ".*$")
                    ,(concat "^" (regexp-quote (expand-file-name psimacs/config/roam-notes-dir)) ".*$")
                    ,(concat "^" (regexp-quote (expand-file-name (concat invocation-directory "../"))) ".*$")
                    "^.*\\.?cache" "^.*\\.cask" "url" "COMMIT_EDITMSG\\'" "bookmarks"
                    "^.*\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
                   )
              )

        (recentf-mode t)

        (run-with-idle-timer 60 t
                (lambda ()
                    (let ((save-silently t))
                        (recentf-save-list))))

    :config
        (defun psimacs/config/recentf-cleanup-directory-files (dir)
          "Remove from recentf all files that belong to DIR directory."
          (interactive (list (read-directory-name "Exclude all paths")))
          (let ( recentf-exclude )
            (setq recentf-exclude (list (concat "^" (regexp-quote (expand-file-name dir)))))
            (recentf-cleanup) ))
    :bind (
           :map psimacs/config/global-key-map/execute
              ("r"     . recentf-open-files)
              ("C-r"   . recentf-open-more-files)
              ("f"     . counsel-recentf)
              ("C-f"   . counsel-buffer-or-recentf)
              ("C c"   . recentf-cleanup)
              ("C C-c" . psimacs/config/recentf-cleanup-directory-files)
        )
)
#+end_src

** Tramp

This is the *Psimacs* configuration of tramp.

To avoid the tramp history file to appear in the configuration root directory,
we set the =tramp-persistency-file-name= variable.

#+begin_src emacs-lisp :tangle config/init-basic-tramp.el
;;
;; Tramp setup
;;
(use-package tramp
    :straight nil
    :config
        (setq tramp-persistency-file-name psimacs/config/tramp-persistency-file-name
              remote-file-name-inhibit-cache            60
              remote-file-name-inhibit-locks            t
              tramp-completion-reread-directory-timeout 60
              ;tramp-verbose   1
              ;tramp-verbose  3             ;; default
              tramp-verbose  6              ;; useful
              ;tramp-verbose 10              ;; lots of detail
              tramp-default-method "ssh"    ;; or "sshx"
              tramp-copy-size-limit                     512KB
              tramp-inline-compress-start-size            1KB
              vc-handled-backends '(Git)    ;; had a profound effect on latency.
                                            ;; trim vc-handled-backends to just those you care about...

              ;; ... or even disable version control completely to avoid delays.
              vc-ignore-dir-regexp (format "%s\\|%s\\|%s"
                                             vc-ignore-dir-regexp
                                             tramp-file-name-regexp
                                             "[/\\\\]node_modules") ;; Disable version control to avoid delays:
        )

        ;;
        ;; reuse the path settings of your remote account when you log in.
        ;; Usually, these settings are overwritten, because they might not be useful for tramp.
        ;; The place holder tramp-own-remote-path preserves these settings.
        ;;
        (add-to-list 'tramp-remote-path 'tramp-own-remote-path)

        (when psimacs/system/is-win32-p
          (setq tramp-use-ssh-controlmaster-options nil)    ;; any changes to ssh can be suppressed with nil
          ;; Get the tramp-methods variable populated
          ;; Add the '-tt' flag to the login arguments for "ssh" ONLY
          ;; In order to force the allocation of a pseudo-terminal, we have to supply -tt as additional argument.
          (push '("-tt")
                (cadr (assoc 'tramp-login-args
                             (assoc "ssh" tramp-methods)))))
)
#+end_src

** Handling

This section provides setting and packages that enhance the user experience with *Emacs* considerably.

*** Undo-Redo

The package [[https://gitlab.com/ideasman42/emacs-undo-fu][undo-fu]] provides a simple, stable linear undo with redo for *Emacs*.

#+begin_quote
This is a light weight wrapper for Emacs built-in undo system,
adding convenient undo/redo without losing access to the full undo history,
allowing you to visit all previous states of the document if you need.
The changes compared Emacs undo are as follows:
- Redo will not pass the initial undo action.
- Redo will not undo (unlike Emacs redo which traverses previous undo/redo steps).
- These constraints can be temporarily disabled by pressing =C-g= before undo or redo.

Note that this doesn't interfere with Emacs internal undo data, which can be error prone.
#+end_quote


#+begin_quote
The default Emacs undo has two limitations this package aims to resolve,
- Two actions are required to initiate redo.
- It's easy to accidentally redo past the point where undo started
  making it inconvenient to restore the document to the point when undo began.
#+end_quote

| Key binding | Command                   | Description                                   |
|-------------+---------------------------+-----------------------------------------------|
| =C-z=         | =M-x undo-fu-only-undo=     | Undo the last action.                         |
| =C-S-z=       | =M-x undo-fu-only-redo=     | Redo an action until the initial undo action. |
| =H-m C-z=     | =M-x undo-fu-only-redo-all= | Redo all actions until the initial undo step. |
|-------------+---------------------------+-----------------------------------------------|

References to undo/redo packages:

| Package         | Remark                                                                                                                            |
|-----------------+-----------------------------------------------------------------------------------------------------------------------------------|
| [[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][CUA mode]]        | Provides undo/redo binding. Disabled for *Psimacs*.                                                                                 |
| [[https://github.com/emacsmirror/undo-tree][undo-tree]]       | Instead of treating undo/redo as a linear sequence of changes, undo-tree-mode treats undo history as a branching tree of changes. |
| [[https://gitlab.com/ideasman42/emacs-undo-fu-session][undo-fu-session]] | Save & recover undo steps between Emacs sessions.                                                                                 |
|-----------------+-----------------------------------------------------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-handling.el :var file-description="Basic handling setup"
;;
;; Better undo/redo support
;;
(use-package undo-fu
  ;:init
  ;    (global-unset-key (kbd "C-z"))
  :bind (
         ("C-z"   . undo-fu-only-undo)
         ("C-S-z" . undo-fu-only-redo)
         :map psimacs/config/global-key-map/special
            ("C-z" . undo-fu-only-redo-all)
        )
)
#+end_src

*** Undo-Tree :noexport:

Instead of treating undo/redo as a linear sequence of changes, [[https://github.com/emacsmirror/undo-tree][undo-tree-mode]] treats undo history
as a branching tree of changes.

- [[https://github.com/emacsmirror/undo-tree][undo-tree]]
- [[https://www.emacswiki.org/emacs/UndoTree][EmacsWiki: Undo Tree]]
- [[http://ergoemacs.org/emacs/emacs_best_redo_mode.html][Best Undo/Redo Mode]]

| Key binding | Command             | Description                                   |
|-------------+---------------------+-----------------------------------------------|
| =C-z=         | =undo-tree-undo=      | Undo the last action.                         |
| =C-S z=       | =undo-tree-redo=      | Redo an action until the initial undo action. |
| =C-x u=       | =undo-tree-visualize= | Show buffer showing the undo/redo-tree.       |
|-------------+---------------------+-----------------------------------------------|

Currently, *Psimacs* uses the undo_

#+begin_src emacs-lisp :tangle config/init-basic-handling.el :var file-description="Basic handling setup"
(use-package undo-tree
    :diminish undo-tree-mode                            ;; Don't show an icon in the modeline
    :config
        (global-undo-tree-mode)                         ;; Always have it on
        (setq undo-tree-visualizer-timestamps t)        ;; Each node in the undo tree should have a timestamp.
        (setq undo-tree-visualizer-diff t)              ;; Show a diff window displaying changes between undo nodes.
    :bind* (
        ("C-z"   . undo-tree-undo)
        ("C-S-z" . undo-tree-redo)
        ("C-c C-z" . undo-tree-visualize)
    )
)
#+end_src

*** Helpful

The package [[https://github.com/Wilfred/helpful][helpful]] is an alternative to the built-in Emacs help that provides much more contextual information.

*Psimacs* do not change the default bindings for the =describe-= commands. Instead the [[https://github.com/Wilfred/helpful][helpful]] commands are
provided in the additional =H-h= key map for help topics.

References:
- [[http://www.wilfred.me.uk/blog/2017/08/30/helpful-adding-contextual-help-to-emacs/][Helpful: Adding Contextual Help to Emacs]]
- [[http://www.wilfred.me.uk/blog/2018/06/22/helpful-one-year-on/][Helpful: One Year On]]

It provides the following commands:

| Key binding | Command              | Description                                                 |
|-------------+----------------------+-------------------------------------------------------------|
| =H-h f=       | =M-x helpful-callable= | Show help for function, macro or special form named SYMBOL. |
| =H-h F=       | =M-x helpful-function= | Show help for function named SYMBOL.                        |
| =H-h M=       | =M-x helpful-macro=    | Show help for macro named SYMBOL.                           |
| =H-h c=       | =M-x helpful-command=  | Show help for interactive function named SYMBOL.            |
| =H-h k=       | =M-x helpful-key=      | Show help for interactive command bound to KEY-SEQUENCE.    |
| =H-h v=       | =M-x helpful-variable= | Show help for variable named SYMBOL.                        |
| =H-h p=       | =M-x helpful-at-point= | Show help for the symbol at point.                          |
|             |                      |                                                             |
|-------------+----------------------+-------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-handling.el :var file-description="Basic handling setup"
;;
;; Helpful, an alternative to the build-in Emacs help.
;;
(use-package helpful
    :bind (
           :map psimacs/config/global-key-map/help
                ("f" . helpful-callable) ; remapped by counsel to 'counsel-describe-function' which targets helpful-callable
                ("F" . helpful-function)
                ("M" . helpful-macro)
                ("c" . helpful-command)
                ("k" . helpful-key)
                ("v" . helpful-variable) ; remapped by counsel to 'counsel-describe-variable' which targets helpful-variable
                ("p" . helpful-at-point)
          )
)
#+end_src

*** Edit region indirectly in another buffer

The package [[https://github.com/Fanael/edit-indirect][edit-indirect]] is a useful enhancement for editing. It provides a command =edit-indirect-region= that
allows the editing of a region in a separate buffer.

The region is copied, without text properties, to a separate buffer, called *edit-indirect buffer*. The major
is guessed.

After finishing the editing the command =edit-indirect-commit= replaces the original region with the content of
the *edit-indirect buffer*. Alternatively, the command =edit-indirect-abort= drops the modification and leaves the
region unchanged. Very useful!

#+attr_html: :class styledtable1
| Key binding | Command                  | Description                                                                                     |
|-------------+--------------------------+-------------------------------------------------------------------------------------------------|
| =H-c C-e=     | =M-x edit-indirect-region= | Edit region in separate buffer *edit-indirect buffer*                                             |
| =C-c C-c=     | =M-x edit-indirect-commit= | Commit the modification done in *edit-indirect buffer*                                            |
| =C-c C-k=     | =M-x edit-indirect-abort== | Abort indirect editing; kill buffer *edit-indirect buffer*                                        |
| =C-x C-s=     | =M-x edit-indirect-save=   | Replace the original region in the parent buffer with the contents of the *edit-indirect buffer*. |
|-------------+--------------------------+-------------------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-handling.el :var file-description="Basic handling setup"
;;
;; Edit regions in a separate buffer
;;
(use-package edit-indirect
  :bind (
         :map psimacs/config/global-key-map/common
              ("C-e" . edit-indirect-region)
        )
)
#+end_src

*** First errors in compilation buffer

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation.html][Running Compilations under Emacs]] describes a useful variable that allows that scrolling of the compilation output
automatically stops when the first error appears, leaving point at that error.

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Stop at first error, no further scrolling
;;
(setq compilation-scroll-output 'first-error)
#+end_src

*** Apropos

Each of the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Apropos.html][apropos]] commands reads an apropos pattern in the minibuffer, searches for items that match the pattern,
and displays the results in a different window. Some of them use prefix arguments to widen the scope of the search.
The follwoing statement let most of the apropos commands behaves as if they had been given a prefix argument.

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Always prefix apropos commands
;;
(setq apropos-do-all t)
#+end_src

*** Unique buffer names

Change [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Uniquify.html][uniquify]] to put the disambiguate part of the buffer file name at the front. The library  [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Uniquify.html][uniquify]]
overrides *Emacs*'s default mechanism for making buffer names unique (using suffixes like <2>, <3> etc.)
with a more sensible behavior which use parts of the file names to make the buffer names distinguishable.

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Unique buffer names: includes part of the file's directory name at the beginning of the buffer name
;;
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+end_src

*** Imortal buffers

Some buffers should never be deleted. Even if you type =C-x k= in them.

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Make some buffers immortal
;;
(defun psimacs/config/immortal-buffers ()
    (if (or (eq (current-buffer) (get-buffer "*scratch*"))
            (eq (current-buffer) (get-buffer "*Messages*")))
                (progn (bury-buffer)
                    nil)
        t
    )
)

(add-hook 'kill-buffer-query-functions 'psimacs/config/immortal-buffers)
#+end_src

*** Improved Info-Mode

Library [[https://www.emacswiki.org/emacs/InfoPlus][Info Plus]] extends the standard Emacs library /info/ in several ways.

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
(use-package info+)
#+end_src

*** Parenthesis

**** Automatically insert matching bracket :noexport:

When on, typing any left bracket automatically insert the right matching bracket. This is accomplished by *Emacs*'s
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html][electric-pair-mode]].

At the moment I have disabled it, because I would like to try [[http://ergoemacs.org/emacs/emacs.html][Xah Lee]] alternative to the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html][electric-pair-mode]].
Actually, I always had some problems with the  [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html][electric-pair-mode]].

See also:
- [[https://github.com/Fuco1/smartparens][smartparens]]

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; electric-pair-mode: automatically insert matching bracket.
;;
(setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
(electric-pair-mode 1)
#+end_src

**** Insert brackets by pair

The following code [[http://ergoemacs.org/emacs/elisp_insert_brackets_by_pair.html][Emacs: Insert Brackets by Pair]] is taken from [[http://ergoemacs.org/emacs/emacs.html][Xah Lee]]. It tries to solve some of the
problems that arise with [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html][electric-pair-mode]].

See also:
- [[https://github.com/Fuco1/smartparens][smartparens]]

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Wonderful bracket inserter taken from Xah Lee at
;; http://ergoemacs.org/emacs/elisp_insert_brackets_by_pair.html
;;
(defun psimacs/pair/insert-bracket-pair (@left-bracket @right-bracket &optional @wrap-method)
  "Insert brackets around selection, word, at point, and maybe move cursor in between.

 ,*LEFT-BRACKET and *RIGHT-BRACKET are strings.
 ,*WRAP-METHOD must be either \\=`line or \\=`block. \\=`block means between empty lines.

• if there's a region, add brackets around region.
• if *WRAP-METHOD is \\=`line, wrap around line.
• if *wrap-method is \\=`block, wrap around block.
• if cursor is at beginning of line and its not empty line and contain at least 1 space, wrap around the line.
• if cursor is at end of a word or buffer, one of the following will happen:
        xyz▮ → xyz(▮)
        xyz▮ → (xyz▮) if in one of the lisp modes.
• wrap brackets around word if any. e.g. xy▮z → (xyz▮). Or just (▮)

URL `http://ergoemacs.org/emacs/elisp_insert_brackets_by_pair.html'
Version 2017-01-17"
  (if (use-region-p)
      (progn ; there's active region
        (let (
              ($p1 (region-beginning))
              ($p2 (region-end)))
          (goto-char $p2)
          (insert @right-bracket)
          (goto-char $p1)
          (insert @left-bracket)
          (goto-char (+ $p2 2))))
    (progn ; no text selection
      (let ($p1 $p2)
        (cond
         ((eq @wrap-method 'line)
          (setq $p1 (line-beginning-position) $p2 (line-end-position))
          (goto-char $p2)
          (insert @right-bracket)
          (goto-char $p1)
          (insert @left-bracket)
          (goto-char (+ $p2 (length @left-bracket))))
         ((eq @wrap-method 'block)
          (save-excursion
            (progn
              (if (re-search-backward "\n[ \t]*\n" nil 'move)
                  (progn (re-search-forward "\n[ \t]*\n")
                         (setq $p1 (point)))
                (setq $p1 (point)))
              (if (re-search-forward "\n[ \t]*\n" nil 'move)
                  (progn (re-search-backward "\n[ \t]*\n")
                         (setq $p2 (point)))
                (setq $p2 (point))))
            (goto-char $p2)
            (insert @right-bracket)
            (goto-char $p1)
            (insert @left-bracket)
            (goto-char (+ $p2 (length @left-bracket)))))
         ( ;  do line. line must contain space
          (and
           (eq (point) (line-beginning-position))
           ;; (string-match " " (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
           (not (eq (line-beginning-position) (line-end-position))))
          (insert @left-bracket )
          (end-of-line)
          (insert  @right-bracket))
         ((and
           (or ; cursor is at end of word or buffer. i.e. xyz?
            (looking-at "[^-_[:alnum:]]")
            (eq (point) (point-max)))
           (not (or
                 (string-equal major-mode "emacs-lisp-mode")
                 (string-equal major-mode "lisp-mode")
                 (string-equal major-mode "lisp-interaction-mode")
                 (string-equal major-mode "common-lisp-mode")
                 (string-equal major-mode "clojure-mode")
                 (string-equal major-mode "scheme-mode"))))
          (progn
            (setq $p1 (point) $p2 (point))
            (insert @left-bracket @right-bracket)
            (search-backward @right-bracket )))
         (t (progn
              ;; wrap around 'word'. basically, want all alphanumeric, plus hyphen and underscore, but don't want space or punctuations.
              (skip-chars-backward "-_[:alnum:]")
              (setq $p1 (point))
              (skip-chars-forward "-_[:alnum:]")
              (setq $p2 (point))
              (goto-char $p2)
              (insert @right-bracket)
              (goto-char $p1)
              (insert @left-bracket)
              (goto-char (+ $p2 (length @left-bracket))))))))))
#+end_src

And some convenience functions that use the =psimacs/pair/insert-bracket-pair= function.

Additionally, *Psimacs* provides the following key bindings:

| Key binding | Command                                    | Description                     |
|-------------+--------------------------------------------+---------------------------------|
| =H-m (=       | =M-x psimacs/pair/insert-paren=              | Insert paranthesis =(▮)=.         |
| =H-m [=       | =M-x psimacs/pair/insert-bracket=            | Insert brackets =[▮]=.            |
| =H-m {=       | =M-x psimacs/pair/insert-brace=              | Insert braces ={▮}=.              |
| =H-m "=       | =M-x psimacs/pair/insert-ascii-double-quote= | Insert ascii double quotes ="▮"=. |
| =H-m '=       | =M-x psimacs/pair/insert-ascii-single-quote= | Insert ascii single quotes ='▮'=. |
| =H-m e=       | =M-x psimacs/pair/insert-emacs-quote=        | Insert emacs quotes =`▮'=.        |
| =H-m ==       | =M-x psimacs/pair/insert-equal=              | Insert equality signs ==▮==.      |
| =H-m *=       | =M-x psimacs/pair/insert-star=               | Insert stars =*▮*=.               |
| =H-m /=       | =M-x psimacs/pair/insert-slash=              | Insert slashes =/▮/=.             |
|-------------+--------------------------------------------+---------------------------------|

Remark: The HTML rendering on GitHub is not correct. With normal HTML export of *Emacs*\\='s Org-Mode, however, the
rendering is perfectly fine. I couldn\\='t resolve the issue.

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Convenience functions using psimacs/pair/insert-bracket-pair
;;
(defun psimacs/pair/insert-paren                    () "Insert paranthesis (▮)."                (interactive) (psimacs/pair/insert-bracket-pair "("  ")"))
(defun psimacs/pair/insert-bracket                  () "Insert brackets [▮]."                   (interactive) (psimacs/pair/insert-bracket-pair "["  "]"))
(defun psimacs/pair/insert-brace                    () "Insert braces {▮}."                     (interactive) (psimacs/pair/insert-bracket-pair "{"  "}"))
(defun psimacs/pair/insert-double-curly-quote       () "Insert double curly quotes “▮“."        (interactive) (psimacs/pair/insert-bracket-pair "“"  "”"))
(defun psimacs/pair/insert-curly-single-quote       () "Insert curly single quotes ‘▮‘."        (interactive) (psimacs/pair/insert-bracket-pair "‘"  "’"))
(defun psimacs/pair/insert-single-angle-quote       () "Insert single angle quotes ‹▮›."        (interactive) (psimacs/pair/insert-bracket-pair "‹"  "›"))
(defun psimacs/pair/insert-double-angle-quote       () "Insert double angle quotes «▮»."        (interactive) (psimacs/pair/insert-bracket-pair "«"  "»"))
(defun psimacs/pair/insert-ascii-double-quote       () "Insert ascii double quotes \"▮\"."      (interactive) (psimacs/pair/insert-bracket-pair "\"" "\""))
(defun psimacs/pair/insert-ascii-single-quote       () "Insert ascii single quotes '▮'."        (interactive) (psimacs/pair/insert-bracket-pair "'"  "'"))
(defun psimacs/pair/insert-emacs-quote              () "Insert emacs quotes `▮'."               (interactive) (psimacs/pair/insert-bracket-pair "`"  "'"))
(defun psimacs/pair/insert-corner-bracket           () "Insert corner brackets 「▮」."           (interactive) (psimacs/pair/insert-bracket-pair "「"  "」"))
(defun psimacs/pair/insert-white-corner-bracket     () "Insert white corner brackets 『▮』."     (interactive) (psimacs/pair/insert-bracket-pair "『"  "』"))
(defun psimacs/pair/insert-angle-bracket            () "Insert angle brackets 〈▮〉."            (interactive) (psimacs/pair/insert-bracket-pair "〈"  "〉"))
(defun psimacs/pair/insert-double-angle-bracket     () "Insert double angle brackets 《▮》."     (interactive) (psimacs/pair/insert-bracket-pair "《"  "》"))
(defun psimacs/pair/insert-white-lenticular-bracket () "Insert white lenticular brackets 〖▮〗." (interactive) (psimacs/pair/insert-bracket-pair "〖" "〗"))
(defun psimacs/pair/insert-black-lenticular-bracket () "Insert black lenticular brackets 【▮】." (interactive) (psimacs/pair/insert-bracket-pair "【"  "】"))
(defun psimacs/pair/insert-tortoise-shell-bracket   () "Insert tortoise shell brackets 〔▮〕."   (interactive) (psimacs/pair/insert-bracket-pair "〔"  "〕"))
(defun psimacs/pair/insert-equal                    () "Insert equality sign =▮=."              (interactive) (psimacs/pair/insert-bracket-pair "="  "="))
(defun psimacs/pair/insert-star                     () "Insert star characters *▮*."            (interactive) (psimacs/pair/insert-bracket-pair "*"  "*"))
(defun psimacs/pair/insert-slash                    () "Insert slash characters /▮/."           (interactive) (psimacs/pair/insert-bracket-pair "/"  "/"))
#+end_src

Define key bindings for the most important =psimacs/pair/insert-*= commands only.

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Add the missing key bindings for the frame creation strategy promised above.
;;
(define-key psimacs/config/global-key-map/special (kbd "(")  'psimacs/pair/insert-paren)
(define-key psimacs/config/global-key-map/special (kbd "[")  'psimacs/pair/insert-bracket)
(define-key psimacs/config/global-key-map/special (kbd "{")  'psimacs/pair/insert-brace)
(define-key psimacs/config/global-key-map/special (kbd "\"") 'psimacs/pair/insert-ascii-double-quote)
(define-key psimacs/config/global-key-map/special (kbd "'")  'psimacs/pair/insert-ascii-single-quote)
(define-key psimacs/config/global-key-map/special (kbd "e")  'psimacs/pair/insert-emacs-quote)
(define-key psimacs/config/global-key-map/special (kbd "=")  'psimacs/pair/insert-equal)
(define-key psimacs/config/global-key-map/special (kbd "*")  'psimacs/pair/insert-star)
(define-key psimacs/config/global-key-map/special (kbd "/")  'psimacs/pair/insert-slash)
#+end_src

**** Highlighting of pairs

See matching pairs of parenthesis and other characters. When point is on one of the
paired characters, the other is highlighted.

See also:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html#Matching][show-paren-mode]]
- [[https://github.com/Fuco1/smartparens][smartparens]]

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Highlight matching pairs
;;
(use-package paren
    :diminish show-paren-mode
    :hook (after-init . show-paren-mode)
    :config
        (setq show-paren-delay 0)
        (setq show-paren-style 'mixed)
        ;(setq show-paren-style 'parenthesis)
        ;(setq show-paren-style 'expression)

        (setq show-paren-when-point-inside-paren t)
        (setq show-paren-when-point-in-periphery t)
)
#+end_src

**** Smart parenthesis

The package [[https://github.com/Fuco1/smartparens][smartparens]] is minor mode for *Emacs* that deals with /parens pairs/ and tries to be smart about them.

*Psimacs* does have the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html#Matching][show-paren-mode]] active on default. With the command =M-x psimacs/activate/toggle-smartparens-paren-mode=
which is bound to =H-m C-p C-s t= you can easily toggle between global [[https://github.com/Fuco1/smartparens][smartparens-mode]] and [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html#Matching][show-paren-mode]].

Documentation: [[https://smartparens.readthedocs.io/en/latest/][Welcome to Smartparens’s documentation!]]

See also:
- [[https://ebzzry.io/en/emacs-pairs/][Emacs and Pairs]]
- [[https://github.com/Fuco1/smartparens/wiki][Smartparens wiki]]
- [[https://www.youtube.com/watch?v=ykjRUr7FgoI&list=PLP6Xwp2WTft7rAMgVPOTI2OE_PQlKGPy7&feature=plpp_play_all][Smartparens 1 - smart editing of paired expressions in Emacs - part 1 of 2]]
- [[https://www.youtube.com/watch?v=efSvfqf3Ykw&list=PLP6Xwp2WTft7rAMgVPOTI2OE_PQlKGPy7&index=2][Smartparens 1 - smart editing of paired expressions in Emacs - part 2 of 2]]
- [[https://www.youtube.com/watch?v=5pRxm0zXgas&list=PLP6Xwp2WTft7rAMgVPOTI2OE_PQlKGPy7&index=3][Smartparens 2 - On the navigation functions]]
- [[https://gist.github.com/pvik/8eb5755cc34da0226e3fc23a320a3c95][smartparens-cheatsheet]]

*Psimacs* provides the following key bindings for active [[https://github.com/Fuco1/smartparens][smartparens-mode]]:

#+attr_html: :class styledtable1
| Key binding   | Command                                            | Description                                                                   |
|---------------+----------------------------------------------------+-------------------------------------------------------------------------------|
| =H-m C-p C-s t= | =M-x psimacs/activate/toggle-smartparens-paren-mode= | Toggle between  [[https://github.com/Fuco1/smartparens][smartparens-mode]] and [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Matching.html#Matching][show-paren-mode]].                         |
|---------------+----------------------------------------------------+-------------------------------------------------------------------------------|
| =H-p C-f=       | =M-x sp-forward-sexp=                                | Move forward across one balanced expression.                                  |
| =H-p C-b=       | =M-x sp-backward-sexp=                               | Move backward across one balanced expression.                                 |
| =H-p M-F=       | =M-x sp-forward-symbol=                              | Move point to the next position that is the end of a symbol.                  |
| =H-p M-B=       | =M-x sp-backward-symbol=                             | Move point to the next position that is the beginning of a symbol.            |
| =H-p C-n=       | =M-x sp-next-sexp=                                   | Move forward to the beginning of next balanced expression.                    |
| =H-p C-p=       | =M-x sp-previous-sexp=                               | Move backward to the end of previous balanced expression.                     |
| =H-p C-u=       | =M-x sp-up-sexp=                                     | Move forward out of one level of parentheses.                                 |
| =H-p C-d=       | =M-x sp-down-sexp=                                   | Move forward down one level of sexp.                                          |
| =H-p M-u=       | =M-x sp-backward-up-sexp=                            | Move backward out of one level of parentheses.                                |
| =H-p M-d=       | =M-x sp-backward-down-sexp=                          | Move backward down one level of sexp.                                         |
| =H-p C-a=       | =M-x sp-beginning-of-sexp=                           | Jump to beginning of the sexp the point is in.                                |
| =H-p C-e=       | =M-x sp-end-of-sexp=                                 | Jump to end of the sexp the point is in.                                      |
| =H-p M-a=       | =M-x sp-beginning-of-next-sexp=                      | Jump to beginning of the next sexp on the same depth.                         |
| =H-p M-e=       | =M-x sp-beginning-of-previous-sexp=                  | Jump to beginning of the previous sexp on the same depth.                     |
| =H-p C-t=       | =M-x sp-transpose-sexp=                              | Transpose the expressions around point.                                       |
| =H-p M-t=       | =M-x sp-transpose-hybrid-sexp=                       | Transpose the hybrid sexps around point.                                      |
| =H-p C-j=       | =M-x sp-join-sexp=                                   | Join the sexp before and after point if they are of the same depth.           |
| =H-p C-v=       | =M-x sp-convolute-sexp=                              | Convolute balanced expressions.                                               |
| =H-p C-i=       | =M-x sp-indent-defun=                                | Reindent the current defun.                                                   |
| =H-p C-m=       | =M-x sp-mark-sexp=                                   | Set mark /ARG/ balanced expressions from point.                                 |
| =H-p C-k=       | =M-x sp-kill-sexp=                                   | Kill the balanced expression following point.                                 |
| =H-p M-w=       | =M-x sp-copy-sexp=                                   | Copy the following ARG expressions to the kill-ring.                          |
| =H-p M-DEL=     | =M-x sp-unwrap-sexp=                                 | Unwrap the following expression.                                              |
| =H-p M-BCK=     | =M-x sp-backward-unwrap-sexp=                        | Unwrap the previous expression.                                               |
| =H-p C-<right>= | =M-x sp-forward-slurp-sexp=                          | Add sexp following the current list in it by moving the closing delimiter.    |
| =H-p C-<left>=  | =M-x sp-backward-slurp-sexp=                         | Add the sexp preceding the current list in it by moving the opening delimiter |
| =H-p M-<right>= | =M-x sp-forward-barf-sexp=                           | Remove the last sexp in the current list by moving the closing delimiter.     |
| =H-p M-<left>=  | =M-x sp-backward-barf-sexp=                          | This is exactly like calling ‘sp-forward-barf-sexp’ with minus ARG.           |
| =H-p M-D=       | =M-x sp-splice-sexp=                                 | Unwrap the current list.                                                      |
| =H-p C-M-DEL=   | =M-x sp-splice-sexp-killing-forward=                 | Unwrap the current list and kill all the expressions between.                 |
| =H-p C-M-BCK=   | =M-x sp-splice-sexp-killing-backward=                | Unwrap the current list and kill all the expressions.                         |
| =H-p C-S-BCK=   | =M-x sp-splice-sexp-killing-around=                  | Unwrap the current list and kill everything inside except next expression.    |
| =H-p C-s N=     | =M-x sp-select-next-thing-exchange=                  | Just like =sp-select-next-thing= but run =exchange-point-and-mark= afterwards.    |
| =H-p C-s n=     | =M-x sp-select-next-thing=                           | Set active region over next thing as recognized by 'sp-get-thing'.            |
| =H-p C-s p=     | =M-x sp-select-previous-thing=                       | Set active region over ARG previous things as recognized by 'sp-get-thing'.   |
| =H-p C-c i=     | =M-x sp-change-inner=                                | Change the inside of the next expression.                                     |
| =H-p M-c e=     | =M-x sp-change-enclosing=                            | Change the inside of the enclosing expression.                                |
|---------------+----------------------------------------------------+-------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Smart parenthesis handling inclusive pair highlighting
;;
(use-package smartparens-config
    :straight smartparens
    :diminish smartparens-global-mode
    :demand
    :config
        (defun psimacs/activate/toggle-smartparens-paren-mode ()
          "Toggle between `smartparens' and `show-paren' modes.
Either global `smartparens-mode' and `show-smartparens-mode' are active or the build-in `show-paren-mode'.
"
          (interactive)
          (if show-smartparens-mode
              (progn
                (show-smartparens-mode -1)
                (smartparens-mode -1)
                (setq show-paren-mode t)
                (message "Disabled smartparens-mode")
                )
            ;; else
            (progn
              (setq show-paren-mode nil)
              (smartparens-mode)
              (show-smartparens-mode)
              (message "Enabled smartparens-mode")
              )))
        :bind (
                :map psimacs/config/global-key-map/special
                    ("C-p C-s t" . psimacs/activate/toggle-smartparens-paren-mode)
                :map smartparens-mode-map
                    ("H-p C-f"             . sp-forward-sexp)
                    ("H-p C-b"             . sp-backward-sexp)

                    ("H-p M-F"             . sp-forward-symbol)
                    ("H-p M-B"             . sp-backward-symbol)

                    ("H-p C-n"             . sp-next-sexp)
                    ("H-p C-p"             . sp-previous-sexp)

                    ("H-p C-u"             . sp-up-sexp)
                    ("H-p C-d"             . sp-down-sexp)

                    ("H-p M-u"             . sp-backward-up-sexp)
                    ("H-p M-d"             . sp-backward-down-sexp)

                    ("H-p C-a"             . sp-beginning-of-sexp)
                    ("H-p C-e"             . sp-end-of-sexp)

                    ("H-p M-a"             . sp-beginning-of-next-sexp)
                    ("H-p M-e"             . sp-beginning-of-previous-sexp)

                    ("H-p C-t"             . sp-transpose-sexp)
                    ("H-p M-t"             . sp-transpose-hybrid-sexp)

                    ("H-p C-j"             . sp-join-sexp)
                    ("H-p C-v"             . sp-convolute-sexp)
                    ("H-p C-i"             . sp-indent-defun)

                    ("H-p C-m"             . sp-mark-sexp)
                    ("H-p C-k"             . sp-kill-sexp)
                    ("H-p M-w"             . sp-copy-sexp)

                    ("H-p M-<delete>"      . sp-unwrap-sexp)
                    ("H-p M-<backspace>"   . sp-backward-unwrap-sexp)

                    ("H-p C-<right>"       . sp-forward-slurp-sexp)
                    ("H-p C-<left>"        . sp-backward-slurp-sexp)

                    ("H-p M-<right>"       . sp-forward-barf-sexp)
                    ("H-p M-<left>"        . sp-backward-barf-sexp)

                    ("H-p M-D"             . sp-splice-sexp)
                    ("H-p C-M-<delete>"    . sp-splice-sexp-killing-forward)
                    ("H-p C-M-<backspace>" . sp-splice-sexp-killing-backward)
                    ("H-p C-S-<backspace>" . sp-splice-sexp-killing-around)

                    ("H-p C-s N"           . sp-select-next-thing-exchange)
                    ("H-p C-s p"           . sp-select-previous-thing)
                    ("H-p C-s n"           . sp-select-next-thing)

                    ("H-p C-c i"           . sp-change-inner)
                    ("H-p M-c e"           . sp-change-enclosing)
              )
)
#+end_src

Some additional configurations for working with org mode.

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
(use-package smartparens-org
  :straight smartparens
  :after org-plus-contrib)
#+end_src

*** Buffer List

Use command =ibuffer= instead of the default =list-buffers= for =C-x C-b=. The command =ibuffer= is an improved
version of =list-buffers=. *IBuffer* colors the files by type and [[http://ergoemacs.org/emacs/emacs.html][Xah Lee]] introduces it in [[http://ergoemacs.org/emacs/emacs_buffer_management.html][Emacs: List Buffers]].

| Key binding | Command              | Description                                    |
|-------------+----------------------+------------------------------------------------|
| =C-x C-b=     | =M-x ibuffer=          | Begin using IBuffer to edit a list of buffers. |
| =C-x b=       | =M-x switch-to-buffer= | Switch to buffer, selected from list.          |
| =C-x k=       | =M-x kill-buffer=      | Close the current buffer.                      |
|-------------+----------------------+------------------------------------------------|


#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Completely replace list-buffers by ibuffer. Implies automatically ibuffer on C-x C-b
;;
(defalias 'list-buffers 'ibuffer)
;;(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

*** Cua Mode

When [[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][CUA mode]] is enabled, the keys =C-x=, =C-c=, =C-v=, and =C-z= invoke commands that cut (kill),
copy, paste (yank), and undo respectively.

To enter an *Emacs* command like =C-x C-f= while the mark is active, use one of the following
methods:
- either hold Shift together with the prefix key, e.g., =S-C-x C-f=,
- or quickly type the prefix key twice, e.g., =C-x C-x C-f=
- or disable [[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][CUA mode]] by pressing =<f12>= or =H-m c=.

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][CUA mode]] provides enhanced rectangle support with visible rectangle highlighting.
Use =H-x C-RET= to start a rectangle, extend it using the movement commands, and cut or copy
it using =C-x= or =C-c=. =RET= moves the cursor to the next (clockwise) corner of the rectangle,
so you can easily expand it in any direction. Normal text you type is inserted to the left
or right of each line in the rectangle (on the same side as the cursor).

With CUA you can easily copy text and rectangles into and out of registers by providing a
one-digit numeric prefix to the kill, copy, and yank commands, e.g., =C-1 C-c= copies the
region into register 1, and =C-2 C-v= yanks the contents of register 2.

CUA mode also has a global mark feature which allows easy moving and copying of text
between buffers. Use =C-S-SPC= to toggle the global mark on and off. When the global
mark is on, all text that you kill or copy is automatically inserted at the global
mark, and text you type is inserted at the global mark rather than at the current
position.

By default *Psimacs* does not activate [[https://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][CUA mode]] on start-up, because it is to intrusive with
respect to /normal/ *Emacs* operation.

See also:
- [[http://www.gnu.org/software/emacs/manual/html_node/emacs/CUA-Bindings.html][Manual: Cua-Bindings]],
- [[https://www.emacswiki.org/emacs/CuaMode][EmacsWiki: Cua Mode]],
- [[https://emacs.stackexchange.com/questions/26874/what-am-i-giving-up-by-activating-cua-mode][What am I giving up by activating CUA mode?]]
- [[http://ergoemacs.org/misc/emacs_keybinding_and_cua-mode_keys.html][Emacs cua-mode Key Binding Problems]]

| Key binding | Command                    | Description                                  |
|-------------+----------------------------+----------------------------------------------|
| =<f12>=       | =M-x cua-mode=               | Toggle CUA mode.                             |
| =H-m c=       | =M-x cua-mode=               | Toggle CUA mode.                             |
|-------------+----------------------------+----------------------------------------------|
| =C-x=         |                            | Windows conform cut if CUA-mode is active.   |
| =C-c=         |                            | Windows conform copy if CUA-mode is active.  |
| =C-v=         |                            | Windows conform paste if CUA-mode is active. |
|-------------+----------------------------+----------------------------------------------|
| =H-x C-RET=   | =M-x cua-set-rectangle-mark= | Start a rectangle.                           |
| =<Ret>=       | =M-x cua-rotate-rectangle=   | Move to next corner.                         |
| =C-1 C-c=     |                            | Copy rectangle to register 1                 |
| =...=         |                            | ...                                          |
| =C-9 C-c=     |                            | Copy rectangle to register 9                 |
| =C-1 C-x=     |                            | Cut rectangle to register 1                  |
| =...=         |                            | ...                                          |
| =C-9 C-x=     |                            | Cut rectangle to register 9                  |
| =C-1 C-v=     |                            | Yank rectangle from register 1               |
| =...=         |                            | ...                                          |
| =C-9 C-v=     |                            | Yank  rectangle from register 9              |
|             |                            |                                              |
|-------------+----------------------------+----------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; CUA-Mode: Enabled on default
;;
(use-package cua-base
    :straight nil
    :config
        (setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
        (setq cua-keep-region-after-copy t)   ;; Standard Windows behaviour
        (setq cua-delete-selection t)
        (setq cua-remap-control-z nil)        ;; We use undo-fu instead

        ;;(cua-mode t)

    :bind (
            ("<f12>" . cua-mode)
            :map psimacs/config/global-key-map/special
            ("c" . cua-mode)
            :map cua-global-keymap
            ("C-<return>"     . nil)
            ("H-x C-<return>" . cua-set-rectangle-mark)
          )
)
#+end_src

*** Dired

Some settings for build-in /Dired/.

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Avoid creation of new buffers for each visited directory
;;
(use-package dired
    :straight nil
    :commands (dired dired-jump)
    ;:custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
        (setq dired-kill-when-opening-new-dired-buffer t)
        (setq dired-recursive-copies                   'always)
        (setq dired-recursive-deletes                  'always)
        (setq delete-by-moving-to-trash                t)
        (setq dired-dwim-target                        t)

    :hook (
        (dired-mode . dired-hide-details-mode)
        (dired-mode . hl-line-mode)
    )
)

(use-package dired-subtree
    :after dired
    :bind (
        :map dired-mode-map
        ("<tab>"     . dired-subtree-toggle)
        ("TAB"       . dired-subtree-toggle)
        ("<backtab>" . dired-subtree-remove)
        ("S-TAB"     . dired-subtree-remove)
    )
    :config
        (setq dired-subtree-use-backgrounds nil)
)

(use-package trashed
    :commands (trashed)
    :config
        (setq trashed-action-confirmer 'y-or-n-p)
        (setq trashed-use-header-line  t)
        (setq trashed-sort-key         '("Date deleted" . t))
        (setq trashed-date-format       "%Y-%m-%d %H:%M:%S")
)
#+end_src

*** Dired+

Package [[https://www.emacswiki.org/emacs/DiredPlus][Dired+]] extends functionalities provided by standard *Emacs* library [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]]. The standard functions are all
available, plus many more.

See also:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][Dired, the Directory Editor]]
- [[https://www.emacswiki.org/emacs/DiredPlus][Dired+]]
- [[http://ergoemacs.org/emacs/emacs_diredplus_mode.html][Dired Plus Mode = dired with Extra Features]]

Important bindings in a [[https://www.emacswiki.org/emacs/DiredPlus][Dired+]] buffer:

| Key bindings | Description                                                      |
|--------------+------------------------------------------------------------------|
| =(=            | Hide/show details.                                               |
| =q=            | Quit [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]].                                                      |
| =g=            | Refresh and synch all.                                           |
| =m=            | Mark this file or directory.                                     |
| =u=            | Unmark this file or directory.                                   |
| =U=            | Unmark all marked files and directories.                         |
| =*= . =<ext>=    | Mark/unmark all files with given extension.                      |
| =RET=          | Open file.                                                       |
| =b=            | Byte compile.                                                    |
| =B=            | Byte compile marked files or directories.                        |
| =z=            | Compress/uncompress file or directory.                           |
| =Z=            | Compress/uncompress marked file or directory.                    |
| =C-k=          | Delete with confirmation.                                        |
| =r=            | Rename file or directory.                                        |
| =M-c==         | Capitalize name.                                                 |
| =M-u=          | Upper case name.                                                 |
| =M-l=          | Lower case name.                                                 |
| ===            | Ediff.                                                           |
| =C-S-b=        | Bookmark.                                                        |
| =M-b=          | Bookmark marked files and directories.                           |
| =F=            | Visit marked files.                                              |
| =C=            | Copy marked files and directories.                               |
| =R=            | Rename of move marked files and directories.                     |
| =C-M-S-t=      | Touch marked files and directories.                              |
| =M=            | Change mode of marked files or directories.                      |
| =C-M-g=        | Run =grep= on marked files.                                        |
| =L=            | Load *Emacs* lisp of marked files.                                 |
| =&=            | Run shell command asynchronously on marked files or directories. |
| =!=            | Run shell command synchronously on marked files or directories.  |
|--------------+------------------------------------------------------------------|

Some usefule key bindings and commands:

#+attr_html: :class styledtable1
| Key binding | Command                                    | Description                                                                              |
|-------------+--------------------------------------------+------------------------------------------------------------------------------------------|
|             | =M-x diredp-dired-plus-help=                 | Describe [[https://www.emacswiki.org/emacs/DiredPlus][dired+]].                                                                         |
|-------------+--------------------------------------------+------------------------------------------------------------------------------------------|
| =C-x d=       | =M-x dired=                                  | Open [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] in current window.                                                            |
| =C-x 4 d=     | =M-x dired-other-window=                     | Open [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] in another window.                                                            |
| =C-x 5 d=     | =M-x dired-other-frame=                      | Open [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] in another frame.                                                             |
| =C-x t d=     | =M-x dired-other-tab=                        | Open [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] on an new tab.                                                                |
| =C-c p D=     | =M-x projectile-dired=                       | Open [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] in current window at the root of the project.                                 |
| =C-c p 4 D=   | =M-x projectile-dired-other-window=          | Open [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] in another window at the root of the project.                                 |
| =C-c p 5 D=   | =M-x projectile-dired-other-frame=           | Open [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] in another frame at the root of the project.                                  |
|-------------+--------------------------------------------+------------------------------------------------------------------------------------------|
| =C-x C-j=     | =M-x dired-jump=                             | Jump to [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] in current window corresponding to the current buffer.                     |
| =C-x 4 C-j=   | =M-x dired-jump-other-window=                | Jump to [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] in another window corresponding to the current buffer.                     |
| =C-c d=       | =M-x counsel-dired-jump=                     | Jump to directory below of current directory.                                            |
|-------------+--------------------------------------------+------------------------------------------------------------------------------------------|
| =C-x D r=     | =M-x diredp-dired-recent-dirs=               | Open [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] in current window showing recently visited directories.                       |
| =C-x 4 D r=   | =M-x diredp-dired-recent-dirs-other-window=  | Open [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] in another window showing recently visited directories.                       |
| =C-x D R=     | =M-x diredp-dired-recent-files=              | Open [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] in current window showing recently visited files and directories.             |
| =C-x 4 D R=   | =M-x diredp-dired-recent-files-other-window= | Open [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] in another window showing recently visited files and directories.             |
|-------------+--------------------------------------------+------------------------------------------------------------------------------------------|
| =C-x D F=     | =M-x diredp-dired-for-files=                 | [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][Dired]] in current window the file names that you entered in a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] buffer that you name. |
| =C-x 4 D F=   | =M-x diredp-dired-for-files-other-window=    | [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][Dired]] in another window the file names that you entered in a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html][dired]] buffer that you name. |
|-------------+--------------------------------------------+------------------------------------------------------------------------------------------|
|             | =M-x dired-do-find-marked-files=             | Open marked files, each in separate window, by splitting window vertically.              |
|             | =C-u M-x dired-do-find-marked-files==        | Open marked files, without splitting window.                                             |
|-------------+--------------------------------------------+------------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Enhance dired a little
;;
(use-package dired+
    :bind (
           ("C-x D h" . diredp-dired-plus-help)
           )
)
#+end_src


*** Dired-Sidebar

[[https://github.com/jojojames/dired-sidebar][Dired-sidebar]] is a sidebar enhancement for dired.

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; A fancy sidebar for dired
;;
(use-package dired-sidebar
    :commands (dired-sidebar-toggle-sidebar)
    ;:init
    ;    (add-hook 'dired-sidebar-mode-hook
    ;      (lambda ()
    ;        (unless (file-remote-p default-directory)
    ;           (auto-revert-mode))))
    ;:config
    ;  (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
    ;  (push 'rotate-windows dired-sidebar-toggle-hidden-commands)
    ;  (setq dired-sidebar-subtree-line-prefix "__")
    ;  (setq dired-sidebar-theme 'vscode)
    ;  (setq dired-sidebar-use-term-integration t)
    ;  (setq dired-sidebar-use-custom-font t)
    :bind
        ("C-c C-s" . dired-sidebar-toggle-sidebar)
)
#+end_src

*** CANCELED Testing Dirvish

#+begin_src emacs-lisp :tangle no config/init-basic-handling.el
(use-package dired
    :straight nil
    :config
        (setq dired-listing-switches
            "-l --almost-all --human-readable --time-style=long-iso --group-directories-first --no-group")
  :bind
      ;; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
      (
        :map dired-mode-map
        ("/" . dired-goto-file)
        ("," . dired-create-directory)
        ("." . dired-create-empty-file)
        ("I" . dired-insert-subdir)
        ("K" . dired-kill-subdir)
        ("O" . dired-find-file-other-window)
        ("[" . dired-prev-dirline)
        ("]" . dired-next-dirline)
        ("o" . dired-up-directory)
        ("^" . mode-line-other-buffer)
        ("x" . dired-do-delete)
        ("X" . dired-do-flagged-delete)
        ("y" . dired-do-copy)
      )
)

(use-package dired-x
    :straight nil
    :init
        (with-eval-after-load 'dired-x
            (setq dired-omit-files (concat dired-omit-files "\\|^\\..*$")))
)

(use-package dired-aux
    :straight nil
)

(use-package diredfl
    :hook (
            (dired-mode . diredfl-mode)
            (dirvish-directory-view-mode . diredfl-mode)
            (enable-theme-functions . (lambda (_theme)
              (set-face-attribute 'diredfl-dir-name nil :bold t)))
          )
    :config
        (set-face-attribute 'diredfl-dir-name nil :bold t)
)

(use-package dirvish
    :init
        (dirvish-override-dired-mode)
    :custom
        (dirvish-quick-access-entries
            '(("h" "~/"                          "Home")
            ))
        (dirvish-mode-line-format
            '(:left (sort file-time " " file-size symlink) :right (omit yank index)))

        ;; Don't worry, Dirvish is still performant even you enable all these attributes
        (dirvish-attributes '(all-the-icons collapse subtree-state vc-state git-msg))

    :config
        (setq dirvish-cache-dir psimacs/config/dirvish-dir)

        ;; Enable mouse drag-and-drop files to other applications
        (setq dired-listing-switches
            "-l --almost-all --human-readable --time-style=long-iso --group-directories-first --no-group")

        (setq mouse-1-click-follows-link nil)
        (setq dired-mouse-drag-files t)                   ; added in Emacs 29
        (setq mouse-drag-and-drop-region-cross-program t) ; added in Emacs 29
        (setq dired-kill-when-opening-new-dired-buffer t) ; added in Emacs 28
        (setq dired-recursive-copies 'always)
        (setq dired-recursive-deletes 'always)
        (setq delete-by-moving-to-trash t)
        (setq dired-dwim-target t)
        (setq dired-bind-info nil)
        (setq dired-bind-man nil)
        (setq dired-clean-confirm-killing-deleted-buffers nil)
        (setq dired-do-revert-buffer t)
        (setq dired-auto-revert-buffer #'dired-directory-changed-p)
  :bind
      ;; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
      (("C-c f" . dirvish-fd)
       ;; Dirvish has all the keybindings in `dired-mode-map' already
       :map dirvish-mode-map
       ("a"   . dirvish-quick-access)
       ("f"   . dirvish-file-info-menu)
       ("y"   . dirvish-yank-menu)
       ("N"   . dirvish-narrow)
       ("^"   . dirvish-history-last)
       ("h"   . dirvish-history-jump) ; remapped `describe-mode'
       ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
       ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
       ("TAB" . dirvish-subtree-toggle)
       ("M-f" . dirvish-history-go-forward)
       ("M-b" . dirvish-history-go-backward)
       ("M-l" . dirvish-ls-switches-menu)
       ("M-m" . dirvish-mark-menu)
       ("M-t" . dirvish-layout-toggle)
       ("M-s" . dirvish-setup-menu)
       ("M-e" . dirvish-emerge-menu)
       ("M-j" . dirvish-fd-jump))
)

(use-package dirvish
  :init
  (dirvish-override-dired-mode)
  :custom
  (dirvish-quick-access-entries ; It's a custom option, `setq' won't work
   '(("h" "~/"                          "Home")
     ("d" "~/Downloads/"                "Downloads")
     ("m" "/mnt/"                       "Drives")
     ("t" "~/.local/share/Trash/files/" "TrashCan")))
  :config
  (setq dirvish-cache-dir psimacs/config/dirvish-dir)
  ;; (dirvish-peek-mode) ; Preview files in minibuffer
  ;; (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
  (setq dirvish-mode-line-format
        '(:left (sort symlink) :right (omit yank index)))
  (setq dirvish-attributes
        '(all-the-icons file-time file-size collapse subtree-state vc-state git-msg))
  (setq delete-by-moving-to-trash t)
  (setq dired-listing-switches
        "-l --almost-all --human-readable --group-directories-first --no-group")
  :bind ; Bind `dirvish|dirvish-side|dirvish-dwim' as you see fit
  (("C-c f" . dirvish-fd)
   :map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
   ("a"   . dirvish-quick-access)
   ("f"   . dirvish-file-info-menu)
   ("y"   . dirvish-yank-menu)
   ("N"   . dirvish-narrow)
   ("^"   . dirvish-history-last)
   ("h"   . dirvish-history-jump) ; remapped `describe-mode'
   ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
   ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
   ("TAB" . dirvish-subtree-toggle)
   ("M-f" . dirvish-history-go-forward)
   ("M-b" . dirvish-history-go-backward)
   ("M-l" . dirvish-ls-switches-menu)
   ("M-m" . dirvish-mark-menu)
   ("M-t" . dirvish-layout-toggle)
   ("M-s" . dirvish-setup-menu)
   ("M-e" . dirvish-emerge-menu)
   ("M-j" . dirvish-fd-jump))
)
#+end_src

*** Long Buffer Lines

The package [[https://www.emacswiki.org/emacs/SoLong][so-long]] provides a workaround for the problem of really long buffer lines. *Emacs* can't work with
these so good.

When the lines in a buffer are so long that performance could suffer to an unacceptable degree, we say /so long/
to the buffer’s major mode, and invoke something much more basic in its place (including disabling minor modes
which are considered to affect performance noticeably).

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
(use-package so-long
    :straight nil
    :hook (after-init . global-so-long-mode)
    :config (setq so-long-threshold 400)
)
#+end_src

*** Perspective

The [[https://github.com/nex3/perspective-el][perspective]] package provides multiple named workspaces
(or "perspectives") in *Emacs*, similar to multiple desktops in window managers.

Each [[https://github.com/nex3/perspective-el][perspective]] has its own buffer list and its own window
layout. This makes it easy to work on many separate projects without getting lost in all the buffers.
Switching to a [[https://github.com/nex3/perspective-el][perspective]] activates its window configuration,
and when in a [[https://github.com/nex3/perspective-el][perspective]], only its buffers
are available (by default).

Each *Emacs* frame has a distinct list of [[https://github.com/nex3/perspective-el][perspectives]].

Commands are all prefixed by =C-x M-p= by default. To change the prefix key, customize =persp-mode-prefix-key=.
Additionally, creating a key binding for =persp-mode-map= will also activate the prefix.

#+attr_html: :class styledtable1
| Key binding     | Command                    | Description                                                                                         |
|-----------------+----------------------------+-----------------------------------------------------------------------------------------------------|
| =C-x M-p=         |                            | Prefix key for all perspective commands.                                                            |
| =C-x M-p s=       | =M-x persp-switch=           | Query a perspective to switch to, or create                                                         |
| =C-x M-p k=       | =M-x persp-remove-buffer=    | Query a buffer to remove from current perspective                                                   |
| =C-x M-p c=       | =M-x persp-kill=             | Query a perspective to kill                                                                         |
| =C-x M-p r=       | =M-x persp-rename=           | Rename current perspective                                                                          |
| =C-x M-p a=       | =M-x persp-add-buffer=       | Query an open buffer to add to current perspective                                                  |
| =C-x M-p A=       | =M-x persp-set-buffer=       | Add buffer to current perspective and remove it from all others                                     |
| =C-x M-p b=       | =M-x persp-switch-to-buffer= | Like switch-to-buffer; includes all buffers from all perspectives; changes perspective if necessary |
| =C-x M-p i=       | =M-x persp-import=           | Import a given perspective from another frame.                                                      |
| =C-x M-p n=       | =M-x persp-next=             | Switch to next perspective                                                                          |
| =C-x M-p p=       | =M-x persp-prev=             | Switch to previous perspective                                                                      |
| =C-x M-p <right>= | =M-x persp-next=             | Switch to next perspective                                                                          |
| =C-x M-p <left>=  | =M-x persp-prev=             | Switch to previous perspective                                                                      |
| =C-x M-p C-s=     | =M-x persp-state-save=       | Save all perspectives in all frames to a file                                                       |
| =C-x M-p C-l=     | =M-x persp-state-load=       | Load all perspectives from a file                                                                   |
|-----------------+----------------------------+-----------------------------------------------------------------------------------------------------|

Since [[https://github.com/nex3/perspective-el][perspective]]  maintains distinct buffer lists for each [[https://github.com/nex3/perspective-el][perspective]], it helps to use a
Perspective-aware buffer switcher.

| Buffer switcher | Support                                                                                                                                                                                                                                                                                                                    |
|-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Ido             | Interactive Do (Ido, ido-mode), in particular its ido-switch-buffer command, is automatically Perspective-aware when =persp-mode= is enabled.                                                                                                                                                                                |
| bs.el           | Perspective provides a wrapper for bs-show: =persp-bs-show=. When this function is called normally, it shows a list of buffers filtered by the current perspective. With a prefix argument, it shows a list of buffers in all perspectives.                                                                                  |
| IBuffer         | Perspective provides a wrapper for ibuffer: =persp-ibuffer=. When this function is called normally, it shows a list of buffers filtered by the current perspective. With a prefix argument, it shows a list of buffers in all perspectives.                                                                                  |
| Helm            | Perspective ships with buffer-listing advice for Helm, so Helm's buffer listing code should be automatically Perspective-aware when =persp-mode= is enabled.                                                                                                                                                                 |
| Ivy / Counsel   | Perspective provides two commands for listing buffers using Ivy and Counsel: =persp-ivy-switch-buffer= and =persp-counsel-switch-buffer=. When these functions are called normally, they show a list of buffers filtered by the current perspective. With a prefix argument, they shows a list of buffers in all perspectives. |
|-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
(use-package perspective
  :bind (
         ("C-x b" . persp-switch-to-buffer*)
         ("C-x k" . persp-kill-buffer*)
        )
  :custom (persp-mode-prefix-key (kbd "C-x M-p"))
  ;:init
  ;    (persp-mode)
  :config
      (setq persp-save-dir psimacs/config/persp-save-dir)
      (setq persp-auto-save-fname psimacs/config/persp-auto-save-file)
)
#+end_src

*** Abbreviations

*Emacs's* [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html][Abbrevs]] feature lets you type a short word and expand into a full word or code template.

Emacs has a nice feature to expand abbreviations. If for example, you wanted
an abbreviation for 'Your Name' to be 'yn', just type 'yn' and with your point
after the 'n' do =C-x a i g= (mnemonic add inverse global) and enter the expansion,
in this case 'Your Name'. In the future, whenever you type 'yn' your name will be
inserted. The abbrevs are automatically saved between sessions in a file.

If you don't like an abbrev that you have set up, then do =M-x edit-abbrevs=.
You can have different abbrevs for each mode (cperl, c++, Message);
the g in =C-x a i g= is for global, meaning every mode.

Suppose you want to define "bg" for "background": Type =M-x add-global-abbrev=, i.e. =C-x a g= and
then type "bg" in the prompt. Now, when you type "bg" followed by a space or return, it will expand
to "background".

If you want the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html][abbrev]] only
for the current major mode: Type =M-x add-mode-abbrev=, i.e. =C-x a l= ...

If the expanded text is more than one word, for example, suppose you want to define "faq" for
"frequently asked questions". Type "frequently asked questions", then select the text and do
=C-u C-x a g= rspl. =C-u C-x a l=.

Remove an abbreviation by =C-u -1 C-x a g= rspl. =C-u -1 C-x a l= followed by the memnomic, e.g. "bg".

Other commands: =M-x list-abbrevs= =M-x edit-abbrevs=, =M-x edit-abbrevs-redefine=, =M-x abbrev-edit-save-buffe=
and =M-x abbrev-edit-save-to-file=.

Additionally, =M-x read-abbrev-file= and =M-x write-abbrev-file=.

#+attr_html: :class styledtable1
| Key binding    | Command                       | Description                                                         |
|----------------+-------------------------------+---------------------------------------------------------------------|
| =H-m C-x C-a=    | =M-x abbrev-mode=               | Enable/Disable abbreviation mode.                                   |
|----------------+-------------------------------+---------------------------------------------------------------------|
| =C-x a i g=      | =M-x inverse-add-global-abbrev= | add inverse global abbreviation, i.e. 'yn'→ =C-x a i g= → 'Your Name' |
| =C-x a g=        | =M-x add-global-abbrev=         | add global abbreviation, i.e. 'Name' → =C-x a g= → 'n'                |
| =C-u C-x a g=    | =M-x add-global-abbrev=         | add region global abbreviation, i.e. 'Your Name' → =C-x a g= → 'yn'   |
| =C-u -1 C-x a g= |                               | remove global abbreviation, i.e. 'yn'                               |
|----------------+-------------------------------+---------------------------------------------------------------------|
| =C-x a i l=      | =M-x inverse-add-mode-abbrev=   | add inverse mode abbreviation, i.e. 'yn'→ =C-x a i l= → 'Your Name'   |
| =C-x a l=        | =M-x add-mode-abbrev=           | add mode abbreviation, i.e. 'Name' → =C-x a l= → 'n'                  |
| =C-u C-x a l=    | =M-x add-mode-abbrev=           | add mode abbreviation, i.e. 'Your Name' → =C-x a l= → 'yn'            |
| =C-u -1 C-x a l= |                               | remove mode abbreviation, i.e. 'yn'                                 |
|----------------+-------------------------------+---------------------------------------------------------------------|
|                | =M-x edit-abbrevs=              |                                                                     |
|                | =M-x edit-abbrevs-redefine=     |                                                                     |
|                | =M-x list-abbrevs=              |                                                                     |
|                | =M-x abbrev-edit-save-buffer=   |                                                                     |
|                | =M-x abbrev-edit-save-to-file=  |                                                                     |
|----------------+-------------------------------+---------------------------------------------------------------------|

See also:
- [[https://www.emacswiki.org/emacs/AbbrevMode][Abbrev-Mode]]
- [[http://ergoemacs.org/emacs/emacs_abbrev_mode.html][Abbrev Mode]]
- [[http://ergoemacs.org/emacs/emacs_abbrev_mode_tutorial.html][Abbrev Mode Tutorial]]

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Setup the abbreviation facility.
;;
(use-package abbrev
  :straight nil
  :bind (
         :map psimacs/config/global-key-map/special
              ("C-x C-a" . abbrev-mode)
         )
  :init
      (dim-minor-name 'abbrev-mode "?𝓐")

      (setq save-abbrevs 'silently)
      (setq abbrev-file-name psimacs/config/abbrev-file)
      (if (file-exists-p psimacs/config/abbrev-file)
          (quietly-read-abbrev-file psimacs/config/abbrev-file))
)
#+end_src

*** Save cursor places

We save the current cursor position for use in the next session on a per file/buffer basis.

See also:
- [[https://www.emacswiki.org/emacs/SavePlace][EmacsWiki: SavePlace]]
- [[http://ergoemacs.org/emacs/emacs_save_cursor_position.html][Emacs: Save Cursor Position]]
- [[https://github.com/emacs-mirror/emacs/blob/master/lisp/saveplace.el][Emacs mirror: saveplace.el]]

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
(use-package saveplace
    :straight nil
    :diminish save-place-mode
    :config
        (progn
            (setq save-place-file psimacs/config/save-places-file)
            (setq save-place-forget-unreadable-files nil)
            (save-place-mode 1)
        )
)
#+end_src

*** Hex file modes

Associate certain binary files to hexl-mode.

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
(setq auto-mode-alist
    (append '(("\\.\\(obj\\|exe\\|dll\\|com\\)$" . hexl-mode)) auto-mode-alist)
)
#+end_src

*** Centaur tabs

Package [[https://github.com/ema2159/centaur-tabs][Centaur tabs]] provides aesthetic, functional and efficient tabs for Emacs.

| Key binding | Command                   | Description                        |
|-------------+---------------------------+------------------------------------|
| =H-<prior>= | =M-x centaur-tabs-backward= | Select the previous available tab. |
| =H-<next>=  | =M-x centaur-tabs-forward=  | Select the next available tab.     |
|-------------+---------------------------+------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Provide tabs for Emacs
;;
(use-package centaur-tabs
    :demand
    :config
        (defun centaur-tabs-hide-tab (x)
          "Do no to show buffer X in tabs."
          (let ((name (format "%s" x)))
            (or
             ;; Current window is not dedicated window.
             (window-dedicated-p (selected-window))

             ;; Buffer name not match below blacklist.
             (string-prefix-p "*epc" name)
             (string-prefix-p "*helm" name)
             (string-prefix-p "*Helm" name)
             (string-prefix-p "*Compile-Log*" name)
             (string-prefix-p "*lsp" name)
             (string-prefix-p "*company" name)
             (string-prefix-p "*Flycheck" name)
             (string-prefix-p "*tramp" name)
             (string-prefix-p " *Mini" name)
             (string-prefix-p "*help" name)
             (string-prefix-p "*straight" name)
             (string-prefix-p " *temp" name)
             (string-prefix-p "*Help" name)
             (string-prefix-p "20" name)
             ;;(string-match "^[:digit:]\\{4\\}-[:digit:]\\{2\\}-[:digit:]\\{2\\}.*" name)

             ;; Is not magit buffer.
             (and (string-prefix-p "magit" name)
                  (not (file-name-extension name)))
             )))



        ;(centaur-tabs-mode t)
    :custom
        (centaur-tabs-gray-out-icons 'buffer)
        (centaur-tabs-style "rounded")
        ;(centaur-tabs-height 36)
        (centaur-tabs-set-icons t)
        (centaur-tabs-set-modified-marker t)
        (centaur-tabs-modified-marker "●")
        (centaur-tabs-buffer-groups-function #'centaur-tabs-projectile-buffer-groups)
  :bind
    (
        ("H-<prior>" . #'centaur-tabs-backward)
        ("H-<next>"  . #'centaur-tabs-forward)
    )
)
#+end_src

*** Expand-Region

The package [[https://github.com/magnars/expand-region.el][expand-region]] allows you to
expand a selected region by /semantic units/.
Just keep pressing the key until it selects what you want.

See also:
- [[http://emacsrocks.com/e09.html][EmacsRocks: expand-region]]

| Key binding | Command              | Description                  |
|-------------+----------------------+------------------------------|
| =H-x e=       | =M-x er/expand-region= | Expand region intelligently. |
|-------------+----------------------+------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Expand a region intelligently
;;
(use-package expand-region
    :bind (
         :map psimacs/config/global-key-map/execute
              ("e" . er/expand-region)
        )
)
#+end_src

*** Large File Support

[[https://github.com/m00natic/vlfi][VLF]] is a *Emacs* minor mode that allows viewing, editing, searching and comparing large files
in batches, trading memory for processor time. Batch size can be adjusted on the fly
and bounds the memory that is to be used for operations on the file. This way multiple
large files (like terabytes or whatever) can be instantly and simultaneously accessed
without swapping and degraded performance.

See also:
- [[https://github.com/m00natic/vlfi][View Large Files]],
- [[https://www.reddit.com/r/emacs/comments/8t36dw/handling_large_files_with_emacs/][Handling large files with emacs]]

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Configure Emacs for large file support.
;;
(use-package vlf
    :demand t
    :config
        (require 'vlf-setup)
        (setq vlf-application 'dont-ask)
    :bind (
            :map psimacs/config/global-key-map/hydra ("C-l" . psimacs/hydra/vlf-large-files/body)
          )
    :hydra (psimacs/hydra/vlf-large-files
        (:color pink :hint nil)
"
^^VLF Large File Support
^^----------------------
_s_: search forward
_r_: search backward
_o_: occur
_g_: goto line
_q_: quit
"
        ("s" vlf-re-search-forward)
        ("r" vlf-re-search-backward)
        ("o" vlf-occur)
        ("g" vlf-goto-line)
        ("q" nil :color blue)
    )
)
#+end_src

Do not warn for large files.

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Do not warn for large files
;;
(setq large-file-warning-threshold nil)
#+end_src

*** Folding

The package [[https://github.com/zenozeng/yafolding.el][yafolding]] provides a minor mode that allows you to fold code blocks based on its indentation.

See also:
- [[https://github.com/zenozeng/yafolding.el][Yet another folding extension for Emacs]]
- [[http://wikemacs.org/wiki/Folding][WikEmac]]
- [[https://www.emacswiki.org/emacs/FoldingMode][EmacsWiki: Foloding Mode]]

| Key binding | Command                           | Description            |
|-------------+-----------------------------------+------------------------|
| =H-x H-f h=   | =M-x yafolding-hide-element=        | Hide element.          |
| =H-x H-f s=   | =M-x yafolding-show-element=        | Show element.          |
| =H-x H-f t=   | =M-x yafolding-toggle-element=      | Toggle element.        |
| =H-x H-f H=   | =M-x yafolding-hide-all=            | Hide all elements.     |
| =H-x H-f S=   | =M-x yafolding-show-all=            | Show all elements.     |
| =H-x H-f T=   | =M-x yafolding-toggle-all=          | Toggle all elements.   |
| =H-x H-f p=   | =M-x yafolding-go-parent-element=   | Go to parent element.  |
| =H-x H-f P=   | =M-x yafolding-hide-parent-element= | Hide parent element.   |
| =H-x H-f m=   | =M-x yafolding-mode=                | Toggle [[https://github.com/zenozeng/yafolding.el][yafolding-mode]]. |
|-------------+-----------------------------------+------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Folding in programming modes
;;
(use-package yafolding
    :diminish yafolding-mode
    :config
        (add-hook 'prog-mode-hook (lambda()  (yafolding-mode)))

    :bind (
           :map yafolding-mode-map
                ("C-S-<return>" . nil)
                ("C-M-<return>" . nil)
                ("C-<return>"   . nil)
                ("H-x H-f h" . yafolding-hide-element)
		("H-x H-f s" . yafolding-show-element)
		("H-x H-f t" . yafolding-toggle-element)
		("H-x H-f H" . yafolding-hide-all)
		("H-x H-f S" . yafolding-show-all)
		("H-x H-f T" . yafolding-toggle-all)
		("H-x H-f p" . yafolding-go-parent-element)
		("H-x H-f P" . yafolding-hide-parent-element)
           :map psimacs/config/global-key-map/execute
		("H-f m" . yafolding-mode)
                ;;("H-f d" . yafolding-discover)
          )
)
#+end_src

*** Whitespace Mode

*Emacs's* [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Useless-Whitespace.html][whitespace-mode]]
is a minor mode to visualize blanks, i.e. /TAB, SPACE and NEWLINE/.

See also:
- [[https://www.emacswiki.org/emacs/WhiteSpace][EmacsWiki: Whitespace Mode]]
- [[http://ergoemacs.org/emacs/whitespace-mode.html][Make Whitespaces Visible]]

| Key binding   | Command             | Description              |
|---------------+---------------------+--------------------------|
| =H-m C-m C-v w= | =M-x whitespace-mode= | Toggle  [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Useless-Whitespace.html][whitespace-mode]]. |
|---------------+---------------------+--------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Visualize whitespace characters
;;
(use-package whitespace
    :diminish whitespace-mode
    :init
        (setq whitespace-line-column nil
            whitespace-display-mappings '(
                (space-mark   32 [183] [46])
                (newline-mark 10 [9166 10])
                (tab-mark      9 [9654 9] [92 9]))
        )
;        (add-hook 'prog-mode-hook 'whitespace-mode)
    :config
        (set-face-attribute 'whitespace-space       nil :foreground "#666666" :background 'unspecified)
        (set-face-attribute 'whitespace-newline     nil :foreground "#666666" :background 'unspecified)
        (set-face-attribute 'whitespace-indentation nil :foreground "#666666" :background 'unspecified)

    :bind (
         :map psimacs/config/global-key-map/special
              ("C-m C-v w" . whitespace-mode)
        )
)
#+end_src

**** Trailing white spaces

You can make trailing whitespace at the end of a line visible by setting the buffer-local variable
=show-trailing-whitespace= to =t=.  Then Emacs displays trailing whitespace, using the face
=trailing-whitespace=. *Psimacs* disables this feature on default.

#+attr_html: :class styledtable1
| Key binding | Command                                                               | Description                                          |
|-------------+-----------------------------------------------------------------------+------------------------------------------------------|
| =H-x C-w d=   | =M-x psimacs/whitespace/delete-trailing-whitespace=                     | Delete trailing white spaces.                        |
| =H-x C-w t=   | =M-x psimacs/whitespace/toggle-auto-delete-trailing-whitespace-on-save= | Toggle auto deletion of white spaces on buffer save. |
|-------------+-----------------------------------------------------------------------+------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Do not show trailing white spaces
;;
(setq show-trailing-whitespace nil)

;;
;; Handle auto deletion of white spaces.
;;
(defvar psimacs/whitespace/auto-delete-trailing-whitespace-on-save t
  "Automatically delete trailing white spaces on buffer save."
)

(defun psimacs/whitespace/toggle-auto-delete-trailing-whitespace-on-save ()
  "Toggle automatically deletion of white spaces on buffer save."
  (interactive)
  (if psimacs/whitespace/auto-delete-trailing-whitespace-on-save
      (progn
        (setq psimacs/whitespace/auto-delete-trailing-whitespace-on-save nil)
        (message "Auto deletion of white spaces on buffer save disabled.")
        )
    (progn
      (setq psimacs/whitespace/auto-delete-trailing-whitespace-on-save t)
      (message "Auto deletion of white spaces on buffer save enabled.")
      ))
)

(defun psimacs/whitespace/delete-trailing-whitespace ()
  "Delete any trailing whitespaces and takeing care of code folding.
Package yafolding (URL `https://github.com/zenozeng/yafolding.el') does have a known issue with
command `delete-trailing-whitespace'. The only known solution is to let yafolding unfold folded code."
  (interactive)
    (yafolding-show-all)
    (delete-trailing-whitespace))

;;
;; Before save we always respect psimacs/whitespace/auto-delete-trailing-whitespace-on-save
;;
(add-hook 'before-save-hook `(lambda ()
                               (when psimacs/whitespace/auto-delete-trailing-whitespace-on-save
                                 (yafolding-show-all)
                                 (delete-trailing-whitespace))
                               ))
;;
;; Provide a key binding for trailing white space removable
;;
(define-key psimacs/config/global-key-map/execute (kbd "C-w d") 'psimacs/whitespace/delete-trailing-whitespace)
(define-key psimacs/config/global-key-map/execute (kbd "C-w t") 'psimacs/whitespace/toggle-auto-delete-trailing-whitespace-on-save)
#+end_src

*** Aggressive Indentation

The package [[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent-mode]] is a minor mode that keeps your code always indented.
It reindents after every change. When you edit your code it will adjust the indentation automatically.

Refefences:
- [[https://emacsredux.com/blog/2016/02/07/auto-indent-your-code-with-aggressive-indent-mode/][Auto-indent your code with aggressive-indent-mode]]

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Better indentation
;;
(use-package aggressive-indent
    :diminish
    :config
        ;; Disable in some commands
        (add-to-list 'aggressive-indent-protected-commands #'delete-trailing-whitespace t)

        ;; Be slightly less aggressive in C/C++/C#/Java/Go/Swift
        (add-to-list 'aggressive-indent-dont-indent-if
               '(and (derived-mode-p 'c-mode 'c++-mode 'csharp-mode 'java-mode 'go-mode 'swift-mode)
                     (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
                                         (thing-at-point 'line)))))
)
#+end_src

*** Hungry delete mode

The package [[https://github.com/nflath/hungry-delete][hungry-delete-mode]] implements hungry deletion, meaning that deleting a whitespace character will delete
all whitespace until the next non-whitespace character.

Refefences:
- [[https://endlessparentheses.com/hungry-delete-mode.html][Hungry Delete Mode]]

| Key binding | Command                    | Description                                                 |
|-------------+----------------------------+-------------------------------------------------------------|
| =H-d=         | =M-x hungry-delete-forward=  | Delete the following character or all following whitespace. |
| =H-<DEL>=     | =M-x hungry-delete-backward= | Delete the preceding character or all preceding whitespace. |
|-------------+----------------------------+-------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-handling.el
;;
;; Hungry whitespace removal
;;
(use-package hungry-delete
    :diminish
    :bind (
            ("H-d"           . hungry-delete-forward)
            ("H-<backspace>" . hungry-delete-forward)
        )
)
#+end_src

** Windows and frame layout

*** Frame size and position

Add key bindings for the frame creation strategy commands, as promised in the [[Startup frame size and position][Startup frame size and position]] section.

#+begin_src emacs-lisp :tangle config/init-basic-layout.el :var file-description="Basic layout setup"
;;
;; Add the missing key bindings for the frame creation strategy promised above.
;;
(define-key psimacs/config/global-key-map/special (kbd "C-w C-x 5 l") 'psimacs/window/set-frame-creation-strategy-layout)
(define-key psimacs/config/global-key-map/special (kbd "C-w C-x 5 m") 'psimacs/window/set-frame-creation-strategy-main)
(define-key psimacs/config/global-key-map/special (kbd "C-w C-x 5 s") 'psimacs/window/set-frame-creation-strategy-system)
#+end_src

*** Font Size

*** Zoom Frame

The package [[https://www.emacswiki.org/emacs/SetFonts#ZoomFrame][zoom-frm]] allows the font resize of the current buffer, the current frame or of all frames.
It is an enhancement of the build-in =M-x text-adjust-scale= command.

| Key binding | Command             | Description           |
|-------------+---------------------+-----------------------|
| =H-m C-x C-0= | =M-x zoom-frm-unzoom= | Cancel zoom of frame. |
|-------------+---------------------+-----------------------|

#+begin_src emacs-lisp :tangle config/init-basic-layout.el :var file-description="Basic layout setup"
;;
;; Provide frame oriented scaling option
;;
(use-package frame-fns)
(use-package frame-cmds)
(use-package zoom-frm
    :config
        ;;(setq zoom-frame/buffer 'frame)

        (defun psimacs/config/initalize-zoom-frm ()
            (define-key ctl-x-map [(control ?+)] 'zoom-in/out)
            (define-key ctl-x-map [(control ?-)] 'zoom-in/out)
            (define-key ctl-x-map [(control ?=)] 'zoom-in/out)
            (define-key ctl-x-map [(control ?0)] 'zoom-in/out)

            (global-set-key (vector (list 'control mouse-wheel-down-event)) 'zoom-in)
            (global-set-key (vector (list 'control mouse-wheel-up-event))   'zoom-out)

            (global-set-key (vector (list 'control 'meta mouse-wheel-down-event)) 'zoom-all-frames-in)
            (global-set-key (vector (list 'control 'meta mouse-wheel-up-event))   'zoom-all-frames-out)

            (when psimacs/system/is-win32-p
              (global-set-key [S-mouse-1]    'zoom-in)
              (global-set-key [C-S-mouse-1]  'zoom-in)
            )

            (when psimacs/system/is-linux-p
              (global-set-key [S-mouse-1]    nil)
              (global-set-key [C-S-mouse-1]  nil)

              (global-set-key [C-wheel-up]    'zoom-in)
              (global-set-key [C-wheel-down]  'zoom-out)
            )

            ;;;; Get rid of `mouse-set-font' or `mouse-appearance-menu':
            (global-set-key [S-down-mouse-1] nil)
        )

    :hook (after-init . psimacs/config/initalize-zoom-frm)
    :bind (
            :map psimacs/config/global-key-map/special
            ("C-x C-0" . zoom-frm-unzoom)
        )
)
#+end_src

*** CANCELED Golden-Ratio for new buffers

The package [[https://github.com/roman/golden-ratio.el][Golden-Ratio]] provides the /golden-ratio-mode/ that will automatically adjust buffers sizes to keep
the golden ration.

| Key binding | Command               | Description                                         |
|-------------+-----------------------+-----------------------------------------------------|
| =H-m C-w C-r= | =M-x golden-ratio-mode= | Toggle automatic window resizing with golden ratio. |
|-------------+-----------------------+-----------------------------------------------------|


#+begin_src emacs-lisp :tangle config/init-basic-layout.el
;;
;; Always keep buffer sizes in golden ratios
;;
(use-package golden-ratio
    :diminish golden-ratio-mode
    :config
	(setq golden-ratio-auto-scale nil)

        (setq golden-ratio-adjust-factor 1.0)
        (setq golden-ratio-wide-adjust-factor .8)
    :bind (
         :map psimacs/config/global-key-map/special
              ("C-w C-r" . golden-ratio-mode)
        )
)
#+end_src

*** Zoom

Package [[https://github.com/cyrus-and/zoom][zoom]] provides a minor mode that takes care of managing the window sizes by enforcing
a fixed and automatic balanced layout where the currently selected window is resized according to zoom-size which can be an absolute
value in lines/columns, a ratio between the selected window and frame size or even a custom callback.

[[https://github.com/cyrus-and/zoom][Zoom]] is an alternative to package [[https://github.com/roman/golden-ratio.el][Golden-Ratio]]
which does have some problems to be convenient.

| Key binding | Command       | Description                                                            |
|-------------+---------------+------------------------------------------------------------------------|
| =H-m C-w +=   | =M-x zoom=      | Zoom the current window and balance the others according to =zoom-size=. |
| =H-m C-w C-z= | =M-x zoom-mode= | Toggle automatic window resizing with zoom.                            |
|-------------+---------------+------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-layout.el
;;
;; Manage sizes of focues windows
;;
(use-package zoom
    :diminish
    :config
        ;;(zoom-mode t)

        (setq zoom-size '(0.618 . 0.618)
              zoom-ignored-major-modes '(which-key-mode
                                         hydra-mode))
    :bind (
         :map psimacs/config/global-key-map/special
              ("C-w +" . zoom)
              ("C-w C-r" . zoom-mode)
        )
)
#+end_src

*** Dimming of buffers not in use

Visually highlight the selected buffer with the package [[https://github.com/gonewest818/dimmer.el][dimmer]].

#+begin_src emacs-lisp :tangle config/init-basic-layout.el
;;
;; Visually highlight the selected buffer.
;;
(use-package dimmer
    :config
        (setq dimmer-fraction 0.3
              dimmer-adjustment-mode :foreground ;:background or :both
             )
        (dimmer-mode)
)
#+end_src

*** Easy window switching

The package [[https://github.com/abo-abo/ace-window][ace-window]] allows easy window switching.

#+begin_quote
When there are two windows, [[https://github.com/abo-abo/ace-window][ace-window]] will call
=other-window=. If there are more, each window will have the first character of its window
label highlighted at the upper left of the window. Pressing that character will either switch
to that window or filter to the next character needed to select a specific window.
Note that, unlike [[https://github.com/winterTTr/ace-jump-mode][ace-jump-mode]], the position
of point will not be changed, i.e. the same   behavior as that of =other-window=.
#+end_quote

#+attr_html: :class styledtable1
| Key binding   | Command                             | Description                                                                                                                                                  |
|---------------+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-x o=         | =M-x ace-window=                      | Either =other-window= or easy switching by first character of window label. Swap window with prefix =C-u= and delete selected window with double prefix =C-u C-u=. |
| =C-x O=         | =M-x other-frame=                     | Switch to the next frame in ring.                                                                                                                            |
| =H-m C-w C-x s= | =M-x psimacs/config/toggle-ace-scope= | Toggle scope of [[https://github.com/abo-abo/ace-window][ace-window]] between 'global' and 'frame' scope.                                                                                               |
|---------------+-------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------|

If =ace-window= is active the following key bindings are available:

| Key binding | Command                         | Description                   |
|-------------+---------------------------------+-------------------------------|
| =z=           | =aw-make-frame=                   | Create a new frame.           |
| =x=           | =aw-delete-window=                | Delete Window.                |
| =m=           | =aw-swap-window=                  | Swap Windows.                 |
| =M=           | =aw-move-window=                  | Move Window.                  |
| =c=           | =aw-copy-window=                  | Copy Window.                  |
| =j=           | =aw-switch-buffer-in-window=      | Select Buffer.                |
| =n=           | =aw-flip-window=                  | Select the previous window.   |
| =u=           | =aw-switch-buffer-other-window=   | Switch Buffer Other Window.   |
| =e=           | =aw-execute-command-other-window= | Execute Command Other Window. |
| =F=           | =aw-split-window-fair=            | Split Fair Window.            |
| =v=           | =aw-split-window-vert=            | Split Vert Window.            |
| =b=           | =aw-split-window-horz=            | Split Horz Window.            |
| =o=           | =delete-other-windows=            | Delete Other Windows.         |
| =T=           | =aw-transpose-frame=              | Transpose Frame.              |
| =?=           | =aw-show-dispatch-help=           | Show this table for help.     |
|-------------+---------------------------------+-------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-layout.el
;;
;; Ease the work with windows and frames
;;
(use-package ace-window
    :config
        (setq aw-scope 'frame)  ; 'gobal
        (custom-set-faces '(aw-leading-char-face ((t (:inherit ace-jump-face-foreground :height 3.0)))))

        (defun psimacs/config/toggle-ace-scope ()
          "Toggle `ace-window' scope between `frame' and `global'."
          (interactive)
          (if (eq aw-scope 'frame)
              (progn
                (setq aw-scope 'global)
                (message "Switched acw-window scope to `global' scope")
                )
            (progn
                (setq aw-scope 'frame)
                (message "Switched acw-window scope to `frame' scope")
                )
          ))

    :bind (
            ("C-x o" . ace-window)
            ("C-x O" . other-frame)
            :map psimacs/config/global-key-map/special
                ("C-w C-x s" . psimacs/config/toggle-ace-scope)
          )
)
#+end_src

*** Winner Mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Convenience.html][winner-mode]] lets you use
=C-c <left>= and =C-c <right>= to switch between window configurations. This is handy when something has popped
up a buffer that you want to look at briefly before returning to whatever you were working on.
When you're done, press =C-c <left>=.

See also:
- [[https://www.emacswiki.org/emacs/WinnerMode][EmacsWiki: Winner Mode]]
- [[https://www.youtube.com/watch?v=T_voB16QxW0][Youtube: Emacs Winner-Mode]]

| Key binding | Command         | Description                                                          |
|-------------+-----------------+----------------------------------------------------------------------|
| =C-c <left>=  | =M-x winner-undo= | Switch back to an earlier window configuration saved by Winner mode. |
| =C-c <right>= | =M-x winner-redo= | Restore a more recent window configuration saved by Winner mode.     |
|-------------+-----------------+----------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-layout.el
;;
;; Undo/Redo for windows configurations
;;
(use-package winner
    :diminish winner-mode
    :init
        (winner-mode)
)
#+end_src

** Basic Tools

*** Ediff

The [[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][Ediff]] package provides a
comprehensive visual interface to Unix diff and patch utilities.

From the [[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][Ediff Introduction]]
#+begin_quote
Ediff provides a convenient way for simultaneous browsing through the differences between a pair
(or a triple) of files or buffers. The files being compared, file-A, file-B, and file-C are shown
in separate windows (side by side, one above the another, or in separate frames), and the
differences are highlighted as you step through them.
You can also copy difference regions from one buffer to another (and recover old differences
if you change your mind).

Another powerful feature is the ability to merge a pair of files into a third buffer.
Merging with an ancestor file, (a.k.a. 3way merges) is also supported. Furthermore,
Ediff is equipped with directory-level capabilities that allow the user to conveniently
launch browsing or merging sessions on groups of files in two (or three) different directories.

In addition, Ediff can apply a patch to a file and then let you step through both files, the
patched and the original one, simultaneously, difference-by-difference.
#+end_quote

| Command                                           | Description                                                                                                                                                                                                                                                                                                                       |
|---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =M-x ediff-files=                                   | Compare two files.                                                                                                                                                                                                                                                                                                                |
| =M-x ediff=                                         | /dito/                                                                                                                                                                                                                                                                                                                              |
| =M-x ediff-backup=                                  | Compare a file with its backup. If there are several numerical backups, use the latest. If the file is itself a backup, then compare it with its original.                                                                                                                                                                        |
| =M-x ediff-current-file=                            | Compare the buffer with its file on disk. This function can be used as a safe version of revert-buffer.                                                                                                                                                                                                                           |
| =M-x ediff-buffers=                                 | Compare two buffers.                                                                                                                                                                                                                                                                                                              |
| =M-x ediff-files3=                                  | Compare three files.                                                                                                                                                                                                                                                                                                              |
| =M-x ediff3=                                        | /dito/                                                                                                                                                                                                                                                                                                                              |
| =M-x ediff-buffers3=                                | Compare three buffers.                                                                                                                                                                                                                                                                                                            |
| =M-x edirs=                                         | Compare files common to two directories.                                                                                                                                                                                                                                                                                          |
| =M-x ediff-directories=                             | /dito/                                                                                                                                                                                                                                                                                                                              |
| =M-x edirs3=                                        | Compare files common to three directories.                                                                                                                                                                                                                                                                                        |
| =M-x ediff-directories3=                            | /dito/                                                                                                                                                                                                                                                                                                                              |
| =M-x edir-revisions=                                | Compare versions of files in a given directory. Ediff selects only the files that are under version control.                                                                                                                                                                                                                      |
| =M-x ediff-directory-revisions=                     | /dito/                                                                                                                                                                                                                                                                                                                              |
| =M-x edir-merge-revisions=                          | Merge versions of files in a given directory. Ediff selects only the files that are under version control.                                                                                                                                                                                                                        |
| =M-x ediff-merge-directory-revisions=               | /dito/                                                                                                                                                                                                                                                                                                                              |
| =M-x edir-merge-revisions-with-ancestor=            | Merge versions of files in a given directory using other versions as ancestors. Ediff selects only the files that are under version control.                                                                                                                                                                                      |
| =M-x ediff-merge-directory-revisions-with-ancestor= | /dito/                                                                                                                                                                                                                                                                                                                              |
| =M-x ediff-windows-wordwise=                        | Compare text visible in 2 windows word-by-word.                                                                                                                                                                                                                                                                                   |
| =M-x ediff-windows-linewise=                        | Compare text visible in 2 windows line-by-line.                                                                                                                                                                                                                                                                                   |
| =M-x ediff-regions-wordwise=                        | Compare regions word-by-word. The regions can come from the same buffer and they can even overlap. You will be asked to specify the buffers that contain the regions, which you want to compare. For each buffer, you will also be asked to mark the regions to be compared.                                                      |
| =M-x ediff-regions-linewise=                        | Similar to ediff-windows-linewise, but compares the regions line-by-line. See ediff-windows-linewise for more details.                                                                                                                                                                                                            |
| =M-x ediff-revision=                                | Compare versions of the current buffer, if the buffer is visiting a file under version control.                                                                                                                                                                                                                                   |
| =M-x ediff-patch-file=                              | Patch a file or multiple files, then compare. Since the patch might be in a buffer or a file, you will be asked which is the case. To avoid this extra prompt, you can invoke this command with a prefix argument. With an odd prefix argument, Ediff assumes the patch is in a file; with an even argument, a buffer is assumed. |
| =M-x epatch=                                        | /dito/                                                                                                                                                                                                                                                                                                                              |
| =M-x ediff-patch-buffer=                            | Patch a buffer, then compare. The buffer being patched and the file visited by that buffer (if any) is not modified. The result of the patch appears in some other buffer that has the name ending with _patched.                                                                                                                 |
| =M-x epatch-buffer=                                 | /dito/                                                                                                                                                                                                                                                                                                                              |
| =M-x ediff-merge-files=                             | Merge two files.                                                                                                                                                                                                                                                                                                                  |
| =M-x ediff-merge=                                   | /dito/                                                                                                                                                                                                                                                                                                                              |
| =M-x ediff-merge-files-with-ancestor=               | Like ediff-merge, but with a third ancestor file.                                                                                                                                                                                                                                                                                 |
| =M-x ediff-merge-with-ancestor=                     | /dito/                                                                                                                                                                                                                                                                                                                              |
| =M-x ediff-merge-buffers=                           | Merge two buffers.                                                                                                                                                                                                                                                                                                                |
| =M-x ediff-merge-buffers-with-ancestor=             | Same but with ancestor.                                                                                                                                                                                                                                                                                                           |
| =M-x edirs-merge=                                   | Merge files common to two directories.                                                                                                                                                                                                                                                                                            |
| =M-x ediff-merge-directories=                       | /dito/                                                                                                                                                                                                                                                                                                                              |
| =M-x edirs-merge-with-ancestor=                     | Same but using files in a third directory as ancestors.                                                                                                                                                                                                                                                                           |
| =M-x ediff-merge-directories-with-ancestor=         | /dito/                                                                                                                                                                                                                                                                                                                              |
| =M-x ediff-merge-revisions=                         | Merge two versions of the file visited by the current buffer.                                                                                                                                                                                                                                                                     |
| =M-x ediff-merge-revisions-with-ancestor=           | Same but with ancestor.                                                                                                                                                                                                                                                                                                           |
| =M-x ediff-documentation=                           | Brings up the [[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][Ediff]] manual.                                                                                                                                                                                                                                                                                                       |
| =M-x ediff-show-registry=                           | Brings up Ediff session registry. This feature enables you to quickly find and restart active Ediff sessions.                                                                                                                                                                                                                     |
| =M-x eregistry=                                     | /dito/                                                                                                                                                                                                                                                                                                                              |
|---------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|


Remarks:
- All Ediff commands are displayed in a Quick Help window, unless you type =?= to shrink the window to just one line. You can redisplay the help window by typing =?= again.
- Many Ediff commands take numeric prefix arguments.
- Some commands take negative prefix arguments as well.
- Without the prefix argument, all commands operate on the currently selected difference region.

| Command   | Description                                                                                                                                                                                                                          |
|-----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =?=         | Toggles the Ediff Quick Help window ON and OFF.                                                                                                                                                                                      |
| =E=         | Brings up the top node of the [[https://www.gnu.org/software/emacs/manual/html_mono/ediff.html][Ediff]] manual.                                                                                                                                                                                          |
| =v=         | Scrolls up buffers A and B (and buffer C where appropriate) in a coordinated fashion.                                                                                                                                                |
| =V=         | Scrolls the buffers down.                                                                                                                                                                                                            |
| =<=         | Scrolls the buffers to the left simultaneously.                                                                                                                                                                                      |
| =>=         | Scrolls buffers to the right.                                                                                                                                                                                                        |
| =wd=        | Saves the output from the diff utility, for further reference.                                                                                                                                                                       |
| =wa=        | Saves buffer A, if it was modified.                                                                                                                                                                                                  |
| =wb=        | Saves buffer B, if it was modified.                                                                                                                                                                                                  |
| =wc=        | Saves buffer C, if it was modified                                                                                                                                                                                                   |
| =a=         | In comparison sessions: Copies the current difference region from buffer A to buffer B (see rb).                                                                                                                                     |
| =a=         | In merge sessions: Copies the current difference region from buffer A to the merge buffer (r).                                                                                                                                       |
| =ab=        | Copies the current difference region from buffer A to buffer B.                                                                                                                                                                      |
| =ac=        | Copies the difference region from buffer A to buffer C.                                                                                                                                                                              |
| =ba=        | Copies the difference region from buffer B to buffer A.                                                                                                                                                                              |
| =bc=        | Copies the difference region from buffer B to buffer C.                                                                                                                                                                              |
| =ca=        | Copies the difference region from buffer C to buffer A.                                                                                                                                                                              |
| =cb=        | Copies the difference region from buffer C to buffer B.                                                                                                                                                                              |
| =p=, =DEL=    | Makes the previous difference region current.                                                                                                                                                                                        |
| =n=, =SPC=    | Makes the next difference region current.                                                                                                                                                                                            |
| =j=, =-j=, =Nj= | Makes the very first difference region current. Makes the very first difference region current. Typing a number, N, and then j makes the difference region N current.                                                                |
| =ga=        | Makes current the difference region closest to the position of the point in buffer A.                                                                                                                                                |
| =gb=        | Makes current the difference region closest to the position of the point in buffer B.                                                                                                                                                |
| =gc=        | Makes current the difference region closest to the position of the point in buffer C.                                                                                                                                                |
| =!=         | Recomputes the difference regions, bringing them up to date.                                                                                                                                                                         |
| =*=         | Forces refinement of the current difference region, which highlights the exact words of disagreement among the buffers                                                                                                               |
| =m=         | Displays the current Ediff session in a frame as wide as the physical display.                                                                                                                                                       |
| =┃=         | Toggles the horizontal/vertical split of the Ediff display.                                                                                                                                                                          |
| =@=         | Toggles auto-refinement of difference regions.                                                                                                                                                                                       |
| =h=         | Cycles between full highlighting, the mode where fine differences are not highlighted (but computed), and the mode where highlighting is done with ASCII strings.                                                                    |
| =r=         | Restores the old contents of the region in the merge buffer.                                                                                                                                                                         |
| =ra=        | Restores the old contents of the current difference region in buffer A.                                                                                                                                                              |
| =rb=        | Restores the old contents of the current difference region in buffer B.                                                                                                                                                              |
| =rc=        | Restores the old contents of the current difference region in buffer C.                                                                                                                                                              |
| =##=       | Tell Ediff to skip over regions that disagree among themselves only in the amount of white space and line breaks.                                                                                                                    |
| =#c=        | Toggle case sensitivity in the diff program.                                                                                                                                                                                         |
| =#h=        | Ediff prompts you to specify regular expressions for each variant. Difference regions where each variant’s region matches the corresponding regular expression will be skipped from then on.                                         |
| =#f=        | Does dual job: it focuses on regions that match the corresponding regular expressions. All other regions will be skipped over.                                                                                                       |
| =A=         | Toggles the read-only property in buffer A.                                                                                                                                                                                          |
| =B=         | Toggles the read-only property in buffer B.                                                                                                                                                                                          |
| =C=         | Toggles the read-only property in buffer C.                                                                                                                                                                                          |
| =~=         | Swaps the windows where buffers A and B are displayed.                                                                                                                                                                               |
| =i=         | Displays all kinds of useful data about the current Ediff session.                                                                                                                                                                   |
| =D=         | Runs =ediff-custom-diff-program= on the variants and displays the buffer containing the output.                                                                                                                                        |
| =R=         | Displays a list of currently active Ediff sessions—the Ediff Registry.                                                                                                                                                               |
| =M=         | Shows the session group buffer that invoked the current Ediff session.                                                                                                                                                               |
| =z=         | Suspends the current Ediff session. The easiest way to resume a suspended Ediff session is through the registry of active sessions.                                                                                                  |
| =q=         | Terminates this Ediff session.                                                                                                                                                                                                       |
| =%=         | Toggles narrowing in Ediff buffers.                                                                                                                                                                                                  |
| =C-l=       | Restores the usual Ediff window setup. This is the quickest way to resume an Ediff session, but it works only if the control panel of that session is visible.                                                                       |
| =$$=        | Skipping the regions where only one of the variants clashes with the ancestor but the other variant agrees with it. Typing $$ again undoes this setting.                                                                             |
| =$*=        | When merging files with large number of differences, it is sometimes convenient to be able to skip the difference regions for which you already decided which variant is most appropriate. Typing $* will accomplish precisely this. |
| =/=         | Toggle to display the ancestor file in 3way merges.                                                                                                                                                                                  |
| =&=         | On merge the right course of action is not always clear, and Ediff would use a default action. The above command changes the default action.                                                                                         |
| =s=         | Causes the merge window shrink to its minimum size, thereby exposing as much of the variant buffers as possible. Typing s again restores the original size of that window.                                                           |
| =+=         | Combines the difference regions from buffers A and B and copies the result into the merge buffer.                                                                                                                                    |
| ===         | Creates a child Ediff session for comparing regions in buffers A, B or C.                                                                                                                                                            |
|-----------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

See also:
- [[https://www.emacswiki.org/emacs/EdiffMode][EmacsWiki: Ediff Mode]]
- [[https://www.gnu.org/software/emacs/manual/html_node/ediff/][Ediff Manual]]
- [[https://oremacs.com/2015/01/17/setting-up-ediff/][Setting up Ediff]]
- [[http://www.sentia.com.au/blog/ediff-for-the-brainically-challenged][Ediff For The Brainically Challenged]]

#+begin_src emacs-lisp :tangle config/init-basic-tools.el :var file-description="Basic tools setup"
;;
;; A comprehensive visual interface to Unix diff and patch utilities.
;;
(use-package ediff
    :straight nil
    :init
        ;; only highlight the current diff (cam be toggled with key 'h')
        ;; (setq-default ediff-highlight-all-diffs 'nil)
    :config
        ;; The default is t, meaning that the buffers being compared or merged will be preserved when Ediff quits.
        ;; Setting this to nil causes Ediff to offer the user a chance to delete these buffers
        ;; However, Ediff temporarily resets this variable to t if it is invoked via one of the "buffer" jobs, such
        ;; as ediff-buffers.
        (setq ediff-keep-variants nil)

        (setq ediff-make-buffers-readonly-at-startup nil)
        (setq ediff-merge-revisions-with-ancestor t)

        ;; Ediff lets you automatically ignore the regions where only one of the buffers A and B disagrees
        ;; with the ancestor (Merging and diff3)
        (setq ediff-show-clashes-only t)

        ;; Ignore white space.
        ;;(setq ediff-diff-options "-w")


        ;; Split the windows horizontally instead of vertically.
        ;; This way, it's much easier to follow the changes.
        (setq ediff-split-window-function
            (lambda (&optional arg)
                (if (> (frame-width) 150)
                    (split-window-horizontally arg)
                    (split-window-vertically arg)
                )
            )
        )

        ;; Don't use the weird setup with the control panel in a separate frame.
        (setq ediff-windows-setup-function 'ediff-setup-windows-plain)
)
#+end_src

*** Visible Bookmarks

The package [[https://github.com/joodland/bm][Visible bookmarks]] provides visible, buffer local, bookmarks and the
ability to jump forward and backward to the next bookmark. They are quite similar to the /MS Visual Studio/ bookmarks
I am used to.

See also:
- [[https://www.emacswiki.org/emacs/VisibleBookmarks][EmacsWiki: Visible Bookmarks]]

| Key binding | Command                          | Description                                 |
|-------------+----------------------------------+---------------------------------------------|
| =<f2>=        | =M-x bm-next=                      | Jump to the next bookmark.                  |
| =S-<f2>=      | =M-x bm-previous=                  | Jump to the previous bookmark.              |
| =C-<f2>=      | =M-x bm-toggle=                    | Set or unset bookmark.                      |
| =C-S-<f2>=    | =M-x bm-remove-all-current-buffer= | Remove all bookmarks of the current buffer. |
|-------------+----------------------------------+---------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-tools.el
;;
;; Visual Studio like bookmarks
;;
(unless (file-directory-p psimacs/config/bookmarks-dir)
    (make-directory psimacs/config/bookmarks-dir t)
)

(use-package bm
    :init
        (setq bm-restore-repository-on-load t)
    :config
        (setq bm-cycle-all-buffers nil)
        (setq bm-repository-file psimacs/config/bm-bookmarks-file)

        (setq-default bm-buffer-persistence t)

        (setq bm-highlight-style 'bm-highlight-only-fringe)     ; bm-highlight-only-line
                                                                ; bm-highlight-line-and-fringe

        ;(add-hook 'after-init-hook   #'bm-repository-load)
        ;(add-hook 'kill-buffer-hook  #'bm-buffer-save)
        ;(add-hook 'kill-emacs-hook   (lambda nil
        ;                                 (bm-buffer-save-all)
        ;                                 (bm-repository-save)))
        ;
        ;(add-hook 'find-file-hook    #'bm-buffer-restore)
        ;(add-hook 'after-revert-hook #'bm-buffer-restore)

        ;(add-hook 'vc-before-checkin-hook #'bm-buffer-save)

    :hook ( (after-init        . bm-repository-load)
            (kill-buffer       . bm-buffer-save)
            (kill-emacs        . (lambda nil
                                     (bm-buffer-save-all)
                                     (bm-repository-save)))
            (find-file         . bm-buffer-restore)
            (after-revert      . bm-buffer-restore)
            (vc-before-checkin . bm-buffer-save)
        )

    :bind (
        ("<f2>"     . bm-next)
        ("S-<f2>"   . bm-previous)
        ("C-<f2>"   . bm-toggle)
        ("C-S-<f2>" . bm-remove-all-current-buffer)
    )
)
#+end_src

*** Vanilla Bookmarks

Just define the bookmark file in the =psimacs/config/bookmarks-dir=.

#+begin_src emacs-lisp :tangle config/init-basic-tools.el
;;
;; Define the bookmark file
;;
(use-package bookmark
    :straight nil
    :config
        (setq bookmark-default-file psimacs/config/bookmarks-file)
)
#+end_src

*** goto-chg - go to the point where the last edit was made

Package [[https://github.com/emacs-evil/goto-chg/blob/master/goto-chg.el][goto-chg]] allows you to jump back to the last edited places.

#+attr_html: :class styledtable1
| Key binding | Command                      | Description                                                           |
|-------------+------------------------------+-----------------------------------------------------------------------|
| =H-x H-,=     | =M-x goto-last-change=         | Go to the point where the last edit was made in the current buffer.   |
| =H-x H-.=     | =M-x goto-last-change-reverse= | Go back to more recent changes after =goto-last-change= have been used. |
|-------------+------------------------------+-----------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-tools.el
;;
;; go to the point where the last edit was made
;;
(use-package goto-chg
  :bind (
        :map psimacs/config/global-key-map/execute
        ("H-." . goto-last-change-reverse)
        ("H-," . goto-last-change)
      )
)
#+end_src

*** Avy - jumping to visible text

[[https://github.com/abo-abo/avy][Avy]] is a GNU Emacs package for jumping to visible text using
a char-based decision tree.

#+attr_html: :class styledtable1
| Key binding   | Command                        | Description                                                                                                                           |
|---------------+--------------------------------+---------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-s C-a c= | =M-x avy-goto-char=              | Input one char, jump to it with a tree.                                                                                               |
| =H-m C-s C-a C= | =M-x avy-goto-char-2=            | Input two consecutive chars, jump to the first one with a tree.                                                                       |
| =H-m C-s C-a t= | =M-x avy-goto-char-timer=        | Input an arbitrary amount of consecutive chars, jump to the first one with a tree.                                                    |
| =H-m C-s C-a T= | =M-x avy-org-goto-heading-timer= | Type part of an Org heading. When you stop typing it will be jumped to; if more than one matches, you can jump to a heading with Avy. |
| =H-m C-s C-a l= | =M-x avy-goto-line=              | Input zero chars, jump to a line start with a tree.                                                                                   |
| =H-m C-s C-a w= | =M-x avy-goto-word-1=            | Input one char at word start, jump to a word start with a tree.                                                                       |
| =H-m C-s C-a W= | =M-x avy-goto-word-0=            | Input zero chars, jump to a word start with a tree.                                                                                   |
|---------------+--------------------------------+---------------------------------------------------------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-tools.el
;;
;; Jumping to visible text
;;
(use-package avy
    :bind (
        :map psimacs/config/global-key-map/special
            ("C-s C-a c" . avy-goto-char)
            ("C-s C-a C" . avy-goto-char-2)
            ("C-s C-a t" . avy-goto-char-timer)
            ("C-s C-a T" . avy-org-goto-heading-timer)
            ("C-s C-a l" . avy-goto-line)
            ("C-s C-a w" . avy-goto-word-1)
            ("C-s C-a W" . avy-goto-word-0)
        :map psimacs/config/global-key-map/hydra ("t" . psimacs/hydra/avy/body)
        )
    :custom
        (avy-timeout-seconds 0.5)
        (avy-style 'pre)
    :custom-face
        (avy-lead-face ((t (:background "#51afef" :foreground "#870000" :weight bold))))
    :hydra (psimacs/hydra/avy (:color blue :hint nil)
"
^^Avy Text Navigation: Input ...
^^---------------------------------------------------------
_c_: ... one char, jump ...
_C_: ... two consecutive chars, jump ...
_t_: ... an arbitrary amount of consecutive chars, jump ...
_T_: ... an arbitrary amount of consecutive chars, jump to matching Org headings ...
_l_: ... zero chars, jump ...
_w_: ... one char at word start, jump ...
_W_: ... zero chars, jump ...
"
        ("c" avy-goto-char)
        ("C" avy-goto-char-2)
        ("t" avy-goto-char-timer)
        ("T" avy-org-goto-heading-timer)
        ("l" avy-goto-line)
        ("w" avy-goto-word-1)
        ("W" avy-goto-word-0)
    )
)
#+end_src

*** Mosey

[[https://github.com/alphapapa/mosey.el][Mosey]] is a GNU Emacs package that makes it easy to mosey back and forth
in your buffers.

#+attr_html: :class styledtable1
| Key binding     | Command                   | Description                                        |
|-----------------+---------------------------+----------------------------------------------------|
| =H-m C-s C-m f=   | =M-x mosey-forward=         | Mosey on forward.                                  |
| =H-m C-s C-m b=   | =M-x mosey-backward=        | Mosey on back.                                     |
| =H-m C-s C-m F=   | =M-x mosey-forward-bounce=  | Bounce forward a notch when it hits the beginning. |
| =H-m C-s C-m B=   | =M-x mosey-backward-bounce= | Bounce back a notch when it hits the end.          |
| =H-m C-s C-m C-f= | =M-x mosey-forward-cycle=   | Loop around when it gets to one end or the other.  |
| =H-m C-s C-m C-b= | =M-x mosey-backward-cycle=  | Loop around when it gets to one end or the other.  |
|-----------------+---------------------------+----------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-tools.el
;;
;; Easily mosey back and forth
;;
(use-package mosey
    :config
      (defmosey '(beginning-of-line
                  back-to-indentation
                  sp-forward-sexp                        ; Forward across one sexp
                  sp-backward-sexp                       ; Backward across one sexp
                  mosey-goto-end-of-code
                  mosey-goto-beginning-of-comment-text
                  end-of-line
                 )
             :prefix "psimacs"
      )
    :bind (
        :map psimacs/config/global-key-map/special
            ("C-s C-m f"   . mosey-psimacs-forward)
            ("C-s C-m b"   . mosey-psimacs-backward)
            ("C-s C-m F"   . mosey-psimacs-forward-bounce)
            ("C-s C-m B"   . mosey-psimacs-backward-bounce)
            ("C-s C-m C-f" . mosey-psimacs-forward-cycle)
            ("C-s C-m C-b" . mosey-psimacs-backward-cycle)
        )
)
#+end_src

*** HTMLize

The [[https://github.com/hniksic/emacs-htmlize][htmlize]] package converts the buffer text and the associated decorations to HTML.

To use it, just switch to the buffer you want HTML-ized and type =M-x htmlize-buffer=.
You will be switched to a new buffer that contains the resulting HTML code. You can
edit and inspect this buffer, or you can just save it with =C-x C-w=.
=M-x htmlize-file= will find a file, fontify it, and save the HTML version in FILE.html,
without any additional intervention. =M-x htmlize-many-files= allows you to htmlize any
number of files in the same manner. =M-x htmlize-many-files-dired= does the same for files
marked in a dired buffer.

This support package is used by [[https://orgmode.org][org-mode]] to produce colored htmls.

#+begin_src emacs-lisp :tangle config/init-basic-tools.el
;;
;; Convert buffer text to HTML
;;
(use-package htmlize)
#+end_src

*** Multiple Cursors

[[https://github.com/magnars/multiple-cursors.el][Multiple-cursors]] is a very nice package that lets you create several cursors that all
do the same thing as you type.

See also:
- [[http://emacsrocks.com/e13.html][Emacs Rocks: Multiple cursors]]
- [[http://pragmaticemacs.com/emacs/multiple-cursors/][Multiple cursors]],

Remarks:
- Notice that the number of cursors active can be seen in the modeline.
- If you get out of multiple-cursors-mode and =yank= - it will =yank= only from the kill-ring of main cursor. To =yank= from the kill-rings of every cursor use =yank-rectangle=, normally found at =C-x r y=.

#+attr_html: :class styledtable1
| Key binding   | Command                                    | Description                                                                    |
|---------------+--------------------------------------------+--------------------------------------------------------------------------------|
| =H-m H-c m n=   | =M-x mc/mark-next-like-this=                 | Adds a cursor and region at the next part of the buffer forwards that matches the current region. If no region is selected, it will just add a cursor on the next line. |
| =H-m H-c m p=   | =M-x mc/mark-previous-like-this=             | Adds a cursor and region at the next part of the buffer backwards that matches the current region. |
| =H-m H-c m a=   | =M-x mc/mark-all-like-this=                  | Marks all parts of the buffer that matches the current region. |
|---------------+--------------------------------------------+--------------------------------------------------------------------------------|
| =H-m H-c m w n=   | =M-x mc/mark-next-like-this-word= | Adds a cursor and region at the next part of the buffer forwards that matches the current region, if no region is selected it selects the word at the point. If no region is selected, it will mark the word and add a cursor at the next occurrence. |
| =H-m H-c m w p=   | =M-x mc/mark-previous-like-this-word= | Adds a cursor and region at the next part of the buffer backwards that matches the current region, if no region is selected it selects the word at the point. |
| =H-m H-c m W n=   | =M-x mc/mark-next-word-like-this= | Like mc/mark-next-like-this but only for whole words. |
| =H-m H-c m W p=   | =M-x mc/mark-previous-word-like-this= | Like mc/mark-previous-like-this but only for whole words. |
| =H-m H-c m w a=   | =M-x mc/mark-all-words-like-this= | Like mc/mark-all-like-this but only for whole words. |
|---------------+--------------------------------------------+--------------------------------------------------------------------------------|
| =H-m H-c m s n=   | =M-x mc/mark-next-like-this-symbol= | Adds a cursor and region at the next part of the buffer forwards that matches the current region, if no region is selected it selects the symbol at the point. If no region is selected, it will mark the symbol and add a cursor at the next occurrence. |
| =H-m H-c m s p=   | =M-x mc/mark-previous-like-this-symbol= | Adds a cursor and region at the next part of the buffer backwards that matches the current region, if no region is selected it selects the symbol at the point. |
| =H-m H-c m S n=   | =M-x mc/mark-next-symbol-like-this= | Like mc/mark-next-like-this but only for whole symbols. |
| =H-m H-c m S p=   | =M-x mc/mark-previous-symbol-like-this= | Like mc/mark-previous-like-this but only for whole symbols. |
| =H-m H-c m s a=   | =M-x mc/mark-all-symbols-like-this= | Like mc/mark-all-like-this but only for whole symbols. |
|---------------+--------------------------------------------+--------------------------------------------------------------------------------|
| =H-m H-c m f a=   | =M-x mc/mark-all-like-this-in-defun= | Marks all parts of the current defun that matches the current region.
| =H-m H-c m f w a=   | =M-x mc/mark-all-words-like-this-in-defun= | Like mc/mark-all-like-this-in-defun but only for whole words.
| =H-m H-c m f s a=   | =M-x mc/mark-all-symbols-like-this-in-defun= | Like mc/mark-all-like-this-in-defun but only for whole symbols. |
|---------------+--------------------------------------------+--------------------------------------------------------------------------------|
| =H-m H-c m d a=   | =M-x mc/mark-all-dwim= | Tries to be smart about marking everything you want. Can be pressed multiple times.
| =H-m H-c m m e=   | =M-x mc/mark-more-like-this-extended= | Use arrow keys to quickly mark/skip next/previous occurrences.
| =C-S-<mouse-1>= | =M-x mc/add-cursor-on-click= | Add a new cursor at click position.  |
| =H-m H-c m m=   | =M-x mc/mark-pop= | Set a cursor at the current point and move to the next (different) position on the mark stack. This allows for fine grained control over the placement of cursors.
| =H-m H-c m r a=  | =M-x mc/mark-all-in-region= | Prompts for a string to match in the region, adding cursors to all of them.
| =H-m H-c m t =   | =M-x mc/mark-sgml-tag-pair= | Mark the current opening and closing tag.
|---------------+--------------------------------------------+--------------------------------------------------------------------------------|
| =H-m H-c u n=   | =M-x mc/unmark-next-like-this=               | Remove the next cursor furthest down in the buffer. |
| =H-m H-c u p=   | =M-x mc/unmark-previous-like-this=           | Remove the previous cursor furthest up in the buffer. |
| =H-m H-c s n=   | =M-x mc/skip-to-next-like-this= | Remove the cursor furthest down, marking the next occurrence down.
| =H-m H-c s p=   | =M-x mc/skip-to-previous-like-this= | Remove the cursor furthest up, marking the next occurrence up.
|---------------+--------------------------------------------+--------------------------------------------------------------------------------|
| =H-m H-c e l=   | =M-x mc/edit-lines=                          | Adds one cursor to each line in the current region. You can give it a positive or negative prefix to change how it behaves on too short lines. |
| =H-m H-c e C-a= | =M-x mc/edit-beginnings-of-lines=            | Add one cursor to the beginning of each line in the active region.             |
| =H-m H-c e C-e= | =M-x mc/edit-ends-of-lines=                  | Add one cursor to the end of each line in the active region.                   |
| =H-m H-c i n=   | =M-x mc/insert-numbers=                      | Insert increasing numbers for each cursor, top to bottom. |
| =H-m H-c i l=   | =M-x mc/insert-letters= | Insert increasing letters for each cursor, top to bottom.
| =H-m H-c r s=   | =M-x mc/sort-regions=                        | Sort the marked regions alphabetically. |
| =H-m H-c r r=   | =M-x mc/reverse-regions=                     | Reverse the order of the marked regions. If nothing is selected with just one cursor, it will flip the sexp at point and the one below it. |
| =H-m H-c a r r =   | =M-x set-rectangular-region-anchor= | Think of this one as set-mark except you're marking a rectangular region.
| =H-m H-c v a=   | =M-x mc/vertical-align= | Aligns all cursors vertically with a given CHARACTER to the one with the highest column number (the rightest). (Might not behave as intended if more than one cursors are on the same line.)
| =H-m H-c v A=   | =M-x mc/vertical-align-with-space= | Aligns all cursors with whitespace like mc/vertical-align does.
|---------------+--------------------------------------------+--------------------------------------------------------------------------------|
| =<return>= | | Will make <return> insert a newline. |
| =C-j= | |  Insert a newline in multiple-cursors-mode. |
| =C-g= | |  To get out of multiple-cursors-mode. This will first disable multiple regions before disabling multiple cursors. |
| =C-v= | =M-x mc/cycle-forward= |  Scroll the screen down to center on each cursor. |
| =M-v= | =M-x mc/cycle-backward= |  Scroll the screen up to center on each cursor. |
| =C-;= | =M-x mc-hide-unmatched-lines-mode= | Toggle hiding all lines without a cursor. |
|---------------+--------------------------------------------+--------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-tools.el
;;
;; Multiple cursors for Emacs
;;
(use-package multiple-cursors
    :init
        (setq mc/list-file psimacs/config/multiple-cursor-file)
        ;(setq mc/always-run-for-all t)

    :bind (
            ("C-S-<mouse-1>"   . mc/add-cursor-on-click)

            :map psimacs/config/global-key-map/special
            ("H-c m n"       . mc/mark-next-like-this)
            ("H-c m p"       . mc/mark-previous-like-this)
            ("H-c m a"       . mc/mark-all-like-this)

            ("H-c m w n"     . mc/mark-next-like-this-word)
            ("H-c m w p"     . mc/mark-previous-like-this-word)
            ("H-c m W n"     . mc/mark-next-word-like-this)
            ("H-c m W p"     . mc/mark-previous-word-like-this)
            ("H-c m w a"     . mc/mark-all-words-like-this)

            ("H-c m s n"     . mc/mark-next-like-this-symbol)
            ("H-c m s p"     . mc/mark-previous-like-this-symbol)
            ("H-c m S n"     . mc/mark-next-symbol-like-this)
            ("H-c m S p"     . mc/mark-previous-symbol-like-this)
            ("H-c m s a"     . mc/mark-all-symbols-like-this)

            ("H-c m f a"     . mc/mark-all-like-this-in-defun)
            ("H-c m f w a"   . mc/mark-all-words-like-this-in-defun)
            ("H-c m f s a"   . mc/mark-all-symbols-like-this-in-defun)

            ("H-c m d a"     . mc/mark-all-dwim)
            ("H-c m m e"     . mc/mark-more-like-this-extended)

            ("H-c m m"       . mc/mark-pop)
            ("H-c m r a"     . mc/mark-all-in-region)
            ("H-c m t "      . mc/mark-sgml-tag-pair)

            ("H-c u n"       . mc/unmark-next-like-this)
            ("H-c u p"       . mc/unmark-previous-like-this)
            ("H-c s n"       . mc/skip-to-next-like-this)
            ("H-c s p"       . mc/skip-to-previous-like-this)

            ("H-c e l"       . mc/edit-lines)
            ("H-c e C-a"     . mc/edit-beginnings-of-lines)
            ("H-c e C-e"     . mc/edit-ends-of-lines)
            ("H-c i n"       . mc/insert-numbers)
            ("H-c i l"       . mc/insert-letters)
            ("H-c r s"       . mc/sort-regions)
            ("H-c r r"       . mc/reverse-regions)
            ("H-c a r r "    . set-rectangular-region-anchor)
            ("H-c v a"       . mc/vertical-align)
            ("H-c v A"       . mc/vertical-align-with-space)

            :map mc/keymap
            ("C-v"   . mc/cycle-forward)
            ("M-v"   . mc/cycle-backward)
            ("C-;"   . mc-hide-unmatched-lines-mode)

            :map psimacs/config/global-key-map/hydra ("C-c" . psimacs/hydra/multiple-cursors/body)
          )
    :hydra (psimacs/hydra/multiple-cursors
        (:color pink :hint nil)
"
Multiple Cursors:
   ^^Up           ^^Down    ^^Miscellaneous
^^^^^^---------------------------------------
  _p_: next      _n_: next    _l_: edit lines
  _P_: skip      _N_: skip    _a_: mark all
_M-p_: unmark  _M-n_: unmark  _q_: quit
"
        ("l"   mc/edit-lines :exit t)
        ("a"   mc/mark-all-like-this :exit t)
        ("n"   mc/mark-next-like-this)
        ("N"   mc/skip-to-next-like-this)
        ("M-n" mc/unmark-next-like-this)
        ("p"   mc/mark-previous-like-this)
        ("P"   mc/skip-to-previous-like-this)
        ("M-p" mc/unmark-previous-like-this)
        ("q"   nil :color blue)
    )
)
#+end_src

*** Regular Expressions

Packages the make it easier to work with the arcane *Emacs* regexps.

**** PCRE to Elips Regexp converter

The package [[https://github.com/joddie/pcre2el][pcre2el]] converts between
[[https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions][PCRE]], Emacs and rx regexp syntaxes.

See also:
- [[https://en.wikipedia.org/wiki/Regular_expression][Wikipedia: Regular expression]]
- [[https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions][Wikipedia: PCRE]]
- [[https://www.pcre.org/][Official PCRE - Perl Compatible Regular Expressions]]
- [[https://www.emacswiki.org/emacs/RegularExpression][EmacsWiki: RegularExpression]]
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Regular-Expressions.html][Emacs Manual: Regular Expressions]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Regexps.html][Emacs Manual: Syntax of Regular Expressions]]
- [[http://ergoemacs.org/emacs/emacs_regex.html][Xah Lee's Emacs: Regex Tutorial]]
- [[https://github.com/joddie/pcre2el][pcre2el: convert between PCRE, Emacs and rx regexp syntax]],
- [[http://emacsfodder.github.io/blog/easy-regexp-generation-with-emacs/][Easy Regexp Generation With Emacs]],

Do-what-I-mean" commands:
#+attr_html: :class styledtable1
| Key binding | Command                    | Description                                                                      |
|-------------+----------------------------+----------------------------------------------------------------------------------|
| =C-c / /=     | =M-x rxt-explain=            | Pop up a buffer with pretty-printed `rx' syntax for the regex at point.          |
| =C-c / c=     | =M-x rxt-convert-syntax=     | Convert regex at point to other kind of syntax, depending on major mode.         |
| =C-c / x=     | =M-x rxt-convert-to-rx=      | Convert regex at point to RX syntax. Chooses Emacs or PCRE syntax by major mode. |
| =C-c / '=     | =M-x rxt-convert-to-strings= | Convert regex at point to RX syntax. Chooses Emacs or PCRE syntax by major mode. |
|-------------+----------------------------+----------------------------------------------------------------------------------|

Commands that work on a PCRE regexp:
#+attr_html: :class styledtable1
| Key binding | Command                       | Description                                                             |
|-------------+-------------------------------+-------------------------------------------------------------------------|
| =C-c / p e=   | =M-x rxt-pcre-to-elisp=         | Translate PCRE, a regexp in Perl-compatible syntax, to Emacs Lisp.      |
| =C-c / %=     | =M-x pcre-query-replace-regexp= | Perform =query-replace-regexp= using PCRE syntax.                         |
| =C-c / p x=   | =M-x rxt-pcre-to-rx=            | Translate PCRE, a regexp in Perl-compatible syntax, to `rx' syntax.     |
| =C-c / p '=   | =M-x rxt-pcre-to-strings=       | Return a list of all strings matched by PCRE, a Perl-compatible regexp. |
| =C-c / p /=   | =M-x rxt-explain-pcre=          | Insert the pretty-printed `rx' syntax for REGEXP in a new buffer.       |
|-------------+-------------------------------+-------------------------------------------------------------------------|

Commands that work on an Emacs regexp:
#+attr_html: :class styledtable1
| Key binding | Command                  | Description                                                                 |
|-------------+--------------------------+-----------------------------------------------------------------------------|
| =C-c / e /=   | =M-x rxt-explain-elisp=    | Insert the pretty-printed `rx' syntax for REGEXP in a new buffer.           |
| =C-c / e p=   | =M-x rxt-elisp-to-pcre=    | Translate REGEXP, a regexp in Emacs Lisp syntax, to Perl-compatible syntax. |
| =C-c / e x=   | =M-x rxt-elisp-to-rx=      | Translate REGEXP, a regexp in Emacs Lisp syntax, to `rx' syntax.            |
| =C-c / e '=   | =M-x rxt-elisp-to-strings= | Return a list of all strings matched by REGEXP, an Emacs Lisp regexp.       |
| =C-c / e t=   | =M-x rxt-toggle-elisp-rx=  | Toggle the regexp near point between Elisp string and rx syntax.            |
| =C-c / t=     | =M-x rxt-toggle-elisp-rx=  | Toggle the regexp near point between Elisp string and rx syntax.            |
|-------------+--------------------------+-----------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-tools.el
(use-package pcre2el
    :config
        ;(pcre-mode) ; try it by hand, do not know side effects
    :hook (prog-mode . rxt-mode)
)
#+end_src

**** Visualize Regexp

The package [[https://github.com/benma/visual-regexp.el][visual-regexp]] provides the same functionality
like *Emacs*'s command =replace-regexp=, but with live visual feedback directly in the buffer

See also:
- [[https://www.emacswiki.org/emacs/VisualRegexp][EmacsWiki: Visual Regexp]]
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Regexp-Replace.html][replace-regexp]]

| Key binding | Command              | Description                                     |
|-------------+----------------------+-------------------------------------------------|
| =H-c r=       | =M-x vr/replace=       | #ERROR                                          |
| =H-c q=       | =M-x vr/query-replace= | =query-replace-regexp= with live visual feedback. |
| =H-c m=       | =M-x vr/mc-mark=       | Convert regexp selection to multiple cursors.   |
|-------------+----------------------+-------------------------------------------------|
#+TBLFM: $3=replace-reg-exp= with live visual feedback.

#+begin_src emacs-lisp :tangle config/init-basic-tools.el
(use-package visual-regexp
    :bind (
           :map psimacs/config/global-key-map/execute
                ("H-c r" . vr/replace)
                ("H-c q" . vr/query-replace)
                ("H-c m" . vr/mc-mark)
          )
)
#+end_src

**** Visualize Regexp Steroids

The package [[https://github.com/benma/visual-regexp-steroids.el][visual-regexp-steroids]]
is an extension to package [[https://github.com/benma/visual-regexp.el][visual-regexp]]
which enables the use of modern regexp engines (no more escaped group parentheses, and other goodies!).

In addition to that, you can optionally use the better regexp syntax to power
=isearch-forward-regexp= and =isearch-backward-regexp=.

For now, [[https://docs.python.org/3/library/re.html][Python]] and [[https://github.com/joddie/pcre2el][pcre2el]]
are supported out of the box.

See also:
- [[https://www.emacswiki.org/emacs/VisualRegexp][EmacsWiki: Visual Regexp]]
- [[https://github.com/benma/visual-regexp-steroids.el][Visual-regexp-steroids]]

| Key binding | Command                 | Description                                               |
|-------------+-------------------------+-----------------------------------------------------------|
| =H-c s=       | =M-x vr/isearch-forward=  | Like =isearch-forward= but with a [[https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions][PCRE]] regular expression.  |
| =H-c p=       | =M-x vr/isearch-backward= | Like =isearch-backward= but with a [[https://en.wikipedia.org/wiki/Perl_Compatible_Regular_Expressions][PCRE]] regular expression. |
|-------------+-------------------------+-----------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-tools.el
(use-package visual-regexp-steroids
    :config
        (setq vr/engine 'pcre2el)

    :bind (
           :map psimacs/config/global-key-map/execute
                ("H-c s" . vr/isearch-forward)
                ("H-c p" . vr/isearch-backward)
          )
)
#+end_src

*** Ripgrep

The package [[https://github.com/dajva/rg.el][rg]] brings support for [[https://github.com/BurntSushi/ripgrep][ripgrep]] to *Psimacs*.

[[https://github.com/BurntSushi/ripgrep][ripgrep]] is a line-oriented search tool that recursively searches the current directory for a regex pattern.
It is expected to be installed on the system and availbale through the search path of the os. Personally,
I have it installed with MSYS2. By default, /ripgrep/ will respect gitignore rules and automatically skip
hidden files/directories and binary files. (To disable all automatic filtering by default, use rg -uuu.)

Emacs package [[https://github.com/dajva/rg.el][rg]] allows you to interactively create searches, doing automatic searches based on the
editing context, refining and modifying search results and much more. It is also highly configurable
to be able to fit different users’ needs.

See also:
- [[https://github.com/BurntSushi/ripgrep][ripgrep]]
- [[https://github.com/dajva/rg.el][rg]]
- [[https://rgel.readthedocs.io/][rg on readthedocs]]

| Key binding               | Command                  | Description                              |
|---------------------------+--------------------------+------------------------------------------|
| =C-c s=                     | =M-x rg-menu=              | Show the rg menu.                        |
|---------------------------+--------------------------+------------------------------------------|
| =C-c s r (rg)=              |                          | Interactive search with regex.           |
| =C-c s t=                   |                          | Interactive search with literate string. |
| =C-c s p (rg-project)=      |                          | Project search                           |
| =C-c s d (rg-dwim)=         |                          | DWIM in current project.                 |
| =C-u C-c s d (rg-dwim)=     |                          | DWIM in current dir.                     |
| =C-u C-u C-c s d (rg-dwim)= |                          | DWIM in current file.                    |
|---------------------------+--------------------------+------------------------------------------|
|                           | =M-x rg-dwim-project-dir=  | DWIM search in the current directory.    |
|                           | =M-x rg-dwim-current-file= | DWIM search in the current file.         |
|                           | =M-x rg-dwim-project-dir=  | DWIM search in the current project.      |
|---------------------------+--------------------------+------------------------------------------|


#+begin_src emacs-lisp :tangle config/init-basic-ripgrep.el :var file-description="Emacs ripgrep setup"
;;
;; Setup usage of ripgrep
;;
(use-package rg
    :init
        (rg-enable-default-bindings)
)
#+end_src

** Language support

This section treat some tools for written language spell and grammar checking. Additionally, access is gained
to some translation facilities on the web.

*** Spell checking with Flyspell and Aspell or Hunspell

[[http://www-sop.inria.fr/members/Manuel.Serrano/flyspell/flyspell.html][Flyspell]] enables on-the-fly spell checking in Emacs by the means of a minor mode. [[http://www-sop.inria.fr/members/Manuel.Serrano/flyspell/flyspell.html][Flyspell]] highlights incorrect words
as soon as they are completed or as soon as the cursor hits a new word.

Basically two spell checker programs are usable. At first there is [[http://aspell.net/][Aspell]] and secondly there is [[https://github.com/hunspell/hunspell][hunspell]]. *Psimacs*
supports both backends. You can configure which one to use with the flag variable =psimacs/internal/spell-checker-use-aspell=.
If this is set to =t= the [[http://aspell.net/][Aspell]] program will be used.

The following key bindings are defined for the spell checking mode.
#+attr_html: :class styledtable1
| Key binding | Command                                      | Description                                                                                                                                                                                                                                                                                |
|-------------+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-f m=   | =M-x flyspell-mode=                            | Minor mode performing on-the-fly spelling checking.                                                                                                                                                                                                                                        |
| =H-m C-f M=   | =M-x flyspell-prog-mode=                       | Turn on  [[http://www-sop.inria.fr/members/Manuel.Serrano/flyspell/flyspell.html][flyspell-mode]] for comments and strings.                                                                                                                                                                                                                                           |
|-------------+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-f r=   | =M-x flyspell-region=                          | Checks all words inside a region.                                                                                                                                                                                                                                                          |
| =H-m C-f b=   | =M-x flyspell-buffer=                          | Checks the whole buffer.                                                                                                                                                                                                                                                                   |
| =H-m C-f w=   | =M-x flyspell-word=                            | Spell check a word.                                                                                                                                                                                                                                                                        |
|-------------+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-,=         | =M-x flyspell-goto-next-error=                 | Go to the next detected error.                                                                                                                                                                                                                                                             |
| =C-.=         | =M-x flyspell-auto-correct-word=               | Automatically Correct the current word. This command proposes various successive corrections for the current word.                                                                                                                                                                         |
| =C-:=         | =M-x flyspell-auto-correct-previous-word=      | Auto correct the first mispelled word that occurs before point.                                                                                                                                                                                                                            |
| =C-;=         | =M-x flyspell-correct-wrapper=                 | By default jumps to the first misspelled word before the point and prompts for correction and gets you back. Calling it with =C-u= gives ability to correct multiple misspelled words in one run. =C-u C-u= changes direction. =C-u C-u C-u= changes direction and enables multiple corrections. |
| =H-m C-f a=   | =M-x flyspell-correct-at-point=                | To correct word at point.                                                                                                                                                                                                                                                                  |
| =H-m C-f p=   | =M-x flyspell-correct-previous=                | To correct any visible word before the point.                                                                                                                                                                                                                                              |
| =H-m C-f n=   | =M-x flyspell-correct-next=                    | To correct any visible word after the point.                                                                                                                                                                                                                                               |
| =H-m C-f c=   | =M-x flyspell-check-previous-highlighted-word= | Correct the closer misspelled word.                                                                                                                                                                                                                                                        |
|             | =M-x flyspell-correct-word=                    | Pop up a menu of possible corrections for a misspelled word. The word checked is the word at the mouse position.                                                                                                                                                                           |
|             | =M-x flyspell-correct-word-before-point=       | Pop up a menu of possible corrections for misspelled word before point.                                                                                                                                                                                                                    |
|-------------+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-f d=   | =M-x psimac/spell/add-word-to-dict=            | Add the word at the current location to the private dictionary without question.                                                                                                                                                                                                           |
|-------------+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-f g=   | =M-x psimac/spell/switch-to-german=            | Change to german language dictionary.                                                                                                                                                                                                                                                      |
| =H-m C-f e=   | =M-x psimac/spell/switch-to-english=           | Change to english language dictionary.                                                                                                                                                                                                                                                     |
| =H-m C-f t=   | =M-x psimac/spell/toggle-language=             | Toggle german and english language dictionaries.                                                                                                                                                                                                                                           |
|-------------+----------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

Some more information about spell checking can be found in the following references:
- [[http://aspell.net/][Aspell]]
- [[https://github.com/hunspell/hunspell][hunspell]]
- [[https://www.emacswiki.org/emacs/InteractiveSpell][EmacsWiki: Interactive Spell]]
- [[https://addons.mozilla.org/en-US/thunderbird/language-tools/][Mozlla Dictionaries & Language Packs]]
- [[https://extensions.openoffice.org/][OpenOffice Spell Checker Extensions]]
- [[http://wikemacs.org/wiki/Flyspell-mode][flyspell]]
- [[https://emacs.stackexchange.com/questions/20206/run-flyspell-buffer-automatically-after-emacs-loads-a-tex-file][Run flyspell-buffer automatically after emacs loads a (tex)-file]]

#+begin_src emacs-lisp :tangle config/init-basic-spell-checking.el :var file-description="Basic spell checking setup"
;;
;; Setup the spell checking framework
;;
(use-package flyspell
  :diminish flyspell-mode
  :commands (
          flyspell-accept-buffer-local-defs
          flyspell-get-word
          flyspell-do-correct
          flyspell-goto-next-error
          psimacs/spell/setup-german-dic
          psimacs/spell/setup-english-dic
    )
  :config
    (setq flyspell-issue-welcome-flag nil
          flyspell-issue-message-flag nil
          flyspell-default-dictionary psimacs/config/spell-checker-english-dict
          ;flyspell-default-dictionary psimacs/config/spell-checker-german-dict
          flyspell-sort-corrections nil
          flyspell-doublon-as-error-flag t
          flyspell-highlight-flag t
          flyspell-mark-duplications-flag t
          flyspell-persistent-highlight t
          flyspell-highlight-properties t
          flyspell-use-meta-tab nil)

    (unless psimacs/internal/spell-checker-use-aspell ;; i.e. is hunspell
      (setq-default
                ispell-local-dictionary-alist
                  '(
                    ("en_US"     "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US"         ) nil utf-8)
                    ("en_GB"     "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_GB"         ) nil utf-8)
                    ("de_DE"     "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "de_DE_frami"   ) nil utf-8)
                    ("de_DE_old" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "de_DE_OLDSPELL") nil utf-8)
                   )
                ispell-hunspell-dictionary-alist ispell-local-dictionary-alist))

  (setq-default ispell-program-name      psimacs/config/spell-checker-runtime
                ispell-extra-args        psimacs/config/spell-checker-extra-args
                ispell-list-command      psimacs/config/spell-checker-list-command
                ispell-really-aspell     psimacs/internal/spell-checker-use-aspell
                ispell-really-hunspell   (not psimacs/internal/spell-checker-use-aspell)
                ispell-check-comments    t
                ispell-silently-savep    t
                ispell-dictionary        flyspell-default-dictionary
                ispell-local-dictionary  flyspell-default-dictionary
                ispell-library-directory psimacs/config/spell-checker-dir
                )

  (defun psimacs/spell/internal/flyspell-local-vars ()
    ;; Emacs calls this hook immediately after it finishes applying
    ;; file-local variables stored in file-local-variables-alist.
    (add-hook 'hack-local-variables-hook #'flyspell-buffer))

  (defun psimacs/spell/setup-german-dic()
    "Setup german personal dictionary."
    (let ((de_dict (concat psimacs/config/spell-checker-personal-dict-file "de_DE")))
      (unless (file-exists-p de_dict)
        (if psimacs/internal/spell-checker-use-aspell
            (write-region "personal_ws-1.1 de 0" nil de_dict nil 0)
          (write-region "" nil de_dict nil 0)))

      (when (file-exists-p de_dict)
        (setq-default ispell-personal-dictionary de_dict)
        (setq         ispell-complete-word-dict  de_dict))
      ))

  (defun psimacs/spell/setup-english-dic()
    "Setup english personal dictionary."
    (let ((en_dict (concat psimacs/config/spell-checker-personal-dict-file "en_US")))
      (unless (file-exists-p en_dict)
        (if psimacs/internal/spell-checker-use-aspell
            (write-region "personal_ws-1.1 en 0" nil en_dict nil 0)
          (write-region "" nil en_dict nil 0)))

      (when (file-exists-p en_dict)
        (setq-default ispell-personal-dictionary en_dict)
        (setq         ispell-complete-word-dict  en_dict))
      ))

  (defun psimac/spell/switch-to-german ()
    "Switch ispell language to german."
    (interactive)
    (psimacs/spell/setup-german-dic)
    (ispell-change-dictionary psimacs/config/spell-checker-german-dict)
    (message "Dictionary switched to german"))

  (defun psimac/spell/switch-to-english ()
    "Switch ispell language to english."
    (interactive )
    (psimacs/spell/setup-english-dic)
    (ispell-change-dictionary psimacs/config/spell-checker-english-dict)
    (message "Dictionary switched to english"))

  (defun psimac/spell/toggle-language ()
    "Toggle ispell-language between english and deutsch8."
    (interactive)
    (let ((dic ispell-current-dictionary))
       (if (string= dic psimacs/config/spell-checker-german-dict)
           (psimac/spell/switch-to-english)
         (psimac/spell/switch-to-german))))

  (defun psimac/spell/add-word-to-dict ()
    "Add the word at the current location to the private dictionary without question."
    (interactive)
    ;; use the correct dictionary
    (flyspell-accept-buffer-local-defs)
    (let ((opoint (point-marker))
          (cursor-location (point))
          (word (flyspell-get-word nil)))
      (if (consp word)
          (let ((start (car (cdr word)))
                (end (car (cdr (cdr word))))
                (word (car word)))
            ;; The word is incorrect, we have to propose a replacement.
            (flyspell-do-correct 'save nil word cursor-location start end opoint)))
      (ispell-pdict-save t)))


    (defun psimacs/spell/check-next-highlighted-word ()
        "Custom function to spell check next highlighted word."
        (interactive)
        (flyspell-goto-next-error)
        (ispell-word)
    )

  ;;
  ;; MSYS2 hunspell does not contain german dictionaries at the time of setting this up.
  ;; Therefore I copy asset provided german dictionaries into the appropriate hunspell folder
  ;; if MSYS2.
  ;;
  (unless psimacs/internal/spell-checker-use-aspell
    (when (and psimacs/system/is-win32-p
               (file-directory-p psimacs/config/spell-checker-hunspell-personal-dir)
               (file-directory-p psimacs/config/spell-checker-hunspell-dir))
      (dolist (f (directory-files psimacs/config/spell-checker-hunspell-personal-dir nil "^.*\\.\\(aff\\|dic\\)$"))
        (let ((src-file (concat psimacs/config/spell-checker-hunspell-personal-dir f))
              (dst-file (concat psimacs/config/spell-checker-hunspell-dir f)))
          (when (not (file-exists-p dst-file))
            (copy-file src-file dst-file t t))))))

  (psimacs/spell/setup-english-dic)

  :hook (
         (tex-mode . (lambda () (setq ispell-parser 'tex)))
            ;;
            ;; Do not enable on default, but explicit
            ;;
;;;         ((text-mode message-mode markdown-mode org-mode TeX-mode LaTeX-mode) . flyspell-mode)
;;;         (prog--mode . flyspell-prog-mode)
         (ispell-change-dictionary . flyspell-buffer)

         ;;
         ;; Run flyspell-buffer automatically after emacs loads a file
         ;;
         ;; flyspell-mode-hook: executed after flyspell minor-mode is loaded, however before
         ;; local variables have been processed, hence the flyspell-local-vars trick.
         ;;
         (flyspell-mode . psimacs/spell/internal/flyspell-local-vars)
        )

  :bind (
         :map psimacs/config/global-key-map/special
              ("C-f m" . flyspell-mode)
              ("C-f M" . flyspell-prog-mode)

         :map flyspell-mode-map
              ("C-:" . flyspell-auto-correct-previous-word)
              ("\M-\t" . nil)
              ([down-mouse-2] . nil)
              ([mouse-2]      . nil)
              ([down-mouse-3] . nil)
              ([mouse-3]      . nil)
              ("H-m C-f b" . flyspell-buffer)
              ("H-m C-f r" . flyspell-region)
              ("H-m C-f w" . flyspell-word)

              ("H-m C-f c" . flyspell-check-previous-highlighted-word)
              ("H-m C-f d" . psimac/spell/add-word-to-dict)
              ("H-m C-f g" . psimac/spell/switch-to-german)
              ("H-m C-f e" . psimac/spell/switch-to-english)
              ("H-m C-f t" . psimac/spell/toggle-language)

        )
  )
#+end_src

Package [[https://github.com/xuchunyang/flyspell-popup][flyspell-popup]] brings nice Popup Menu into play.

#+begin_src emacs-lisp :tangle config/init-basic-spell-checking.el
;;
;; Nice Popup Menu
;;
(use-package flyspell-popup
  :after flyspell
  :bind (
         :map flyspell-mode-map
              ("H-m C-;" . #'flyspell-popup-correct)
        )
)
#+end_src

Correcting misspelled words with flyspell using favourite interface. That is what package [[https://github.com/d12frosted/flyspell-correct#flyspell-correct-popup-interface][flyspell-correct]] gives us.
*Psimacs* uses the [[https://github.com/abo-abo/swiper][Ivy]] interface of [[https://github.com/d12frosted/flyspell-correct#flyspell-correct-popup-interface][flyspell-correct]].

#+begin_src emacs-lisp :tangle config/init-basic-spell-checking.el
(use-package flyspell-correct
  :after flyspell
  :bind (
         :map flyspell-mode-map
              ("C-;"       . flyspell-correct-wrapper)
              ("H-m C-f a" . flyspell-correct-at-point)
              ("H-m C-f p" . flyspell-correct-previous)
              ("H-m C-f n" . flyspell-correct-next)
        )
)

(use-package flyspell-correct-ivy
  :after flyspell-correct
)
#+end_src

*** Spell and grammar checking with LanguageTool

[[https://languagetool.org][LanguageTool]] provides a [[https://www.java.com][Java]] based spell and grammar checking tool. The [[https://github.com/mhayashi1120/Emacs-langtool][langtool.el]] package gives access to that
tool.

#+attr_html: :class styledtable1
| Key binding | Command                                  | Description                                                                                                    |
|-------------+------------------------------------------+----------------------------------------------------------------------------------------------------------------|
| =H-m C-l b=   | =M-x langtool-check-buffer=                | To check current buffer and show warnings. With prefix =C-u= check with different language.                      |
| =H-m C-l p=   | =M-x langtool-goto-previous-error=         | Goto previous error. Obsoleted function. Should use =langtool-correct-buffer=.                                   |
| =H-m C-l n=   | =M-x langtool-goto-next-error=             | Goto next error. Obsoleted function. Should use =langtool-correct-buffer=.                                       |
| =H-m C-l ;=   | =M-x langtool-correct-buffer=              | Execute interactive correction after =langtool-check-buffer=. To correct marker follow LanguageTool suggestions. |
| =H-m C-l t=   | =M-x langtool-switch-default-language=     | Switch ‘langtool-default-language’ to LANG                                                                     |
| =H-m C-l m=   | =M-x langtool-show-brief-message-at-point= | Show error brief message at point.                                                                             |
| =H-m C-l M=   | =M-x langtool-show-message-at-point=       | Show error details at point..                                                                                  |
| =H-m C-l B=   | =M-x langtool-check-done=                  | Finish LanguageTool process and cleanup existing colorized texts.                                              |
|-------------+------------------------------------------+----------------------------------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-spell-checking.el
;;
;; LanguageTool configuration
;;
(use-package langtool
    :commands langtool-details-error-message
    :config
        (setq langtool-java-bin psimacs/config/java-runtime-exe
              langtool-language-tool-jar (concat psimacs/config/language-tool-dir "languagetool-commandline.jar")
              langtool-java-user-arguments '("-Dfile.encoding=UTF-8")
              langtool-default-language "en-US"
              langtool-mother-tongue "en-US"
              langtool-disabled-rules '(
                                        "WHITESPACE_RULE"
                                        "EN_UNPAIRED_BRACKETS"
                                        "COMMA_PARENTHESIS_WHITESPACE"
                                        "EN_QUOTES"
                                       ))

        (defun psimacs/spell/langtool-autoshow-detail-popup (overlays)
          (when (require 'popup nil t)
            ;; Do not interrupt current popup
            (unless (or popup-instances
                        ;; suppress popup after type `C-g` .
                        (memq last-command '(keyboard-quit)))
              (let ((msg (langtool-details-error-message overlays)))
                (popup-tip msg)))))

        (setq langtool-autoshow-message-function 'psimacs/spell/langtool-autoshow-detail-popup)

    :bind (
           :map psimacs/config/global-key-map/special
                ("C-l b" . langtool-check-buffer)
                ("C-l B" . langtool-check-done)
                ("C-l p" . langtool-goto-previous-error)
                ("C-l n" . langtool-goto-next-error)
                ("C-l ;" . langtool-correct-buffer)
                ("C-l t" . langtool-switch-default-language)
                ("C-l m" . langtool-show-brief-message-at-point)
                ("C-l M" . langtool-show-message-at-point)
          )
)
#+end_src

*** Google translate

The package [[https://github.com/atykhonov/google-translate][google-translate]] allows to translate the strings using [[https://translate.google.com/?hl=de][Google Translate Service]] directly from *Emacs*.
*Psimacs* pre defines the query language to /German/ and the target laguage to /English/ in variable
=google-translate-translation-directions-alist=. If you do not like that setting, change it as it pleases you.

*Psimacs* binds the =M-x google-translate-smooth-translate= command that allows easy translation between the
language pairs provided in the =google-translate-translation-directions-alist= variable. You can toggle between
these pairs with =C-n= and =C-p=.

On default, *Psimacs* outputs the result of the translation process to a separate 'translation buffer'. It then
puts the input focus into that buffer. That can easily be changed to output directly into the current buffer
by calling function =psimacs/spell/google-tanslate/toggle-output-destination=.

#+attr_html: :class styledtable
| Key binding | Command                                                     | Description                                                                                                                        |
|-------------+-------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-t ;=   | =M-x google-translate-smooth-translate=                       | Translate a text using translation directions. Make a prompt in minibuffer for a text to translate. Default text is word at point. |
| =H-m C-t o=   | =M-x psimacs/spell/google-tanslate/toggle-output-destination= | Toggle output desination between 'current buffer' and 'translation buffer'.                                                        |
|             | =M-x google-translate-at-point=                               | Translates the word at point or the active region.                                                                                 |
|             | =M-x google-translate-query-translate=                        | Translate, and shows a buffer with available translations of the text.                                                             |
|-------------+-------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-spell-checking.el
;;
;; Configure google-translate package
;;
(use-package google-translate
    :demand t
    :custom
        (google-translate-backend-method 'curl)
    :config
        (defun google-translate--search-tkk () "Search TKK." (list 430675 2721866130))

        (setq ;google-translate-default-source-language "de"
              ;google-translate-default-target-language "en"
              google-translate-pop-up-buffer-set-focus t
              google-translate-output-destination nil ;'current-buffer
              ;google-translate-show-phonetic t
              google-translate-translation-directions-alist '(("de" . "en") ("en" . "de")))

        (defun psimacs/spell/google-tanslate/toggle-output-destination ()
          "Toggle output desination between `current-buffer' and `translation-buffer'."
          (interactive)
         (if (not google-translate-output-destination)
             (prog2
                 (setq google-translate-output-destination 'current-buffer)
                 (message "Switched google-translate output destination to `current-buffer'"))
           (prog2
               (setq google-translate-output-destination nil)
               (message "Switched google-translate output destination to separate `tranlation-buffer'"))))

    :bind (
           :map psimacs/config/global-key-map/special
                ("C-t ;" . google-translate-smooth-translate)
                ("C-t o" . psimacs/spell/google-tanslate/toggle-output-destination)
          )
)
#+end_src

** Web searching

Tools that are useful for searching the Web.

*** Google search

The package [[https://github.com/Malabarba/emacs-google-this][google-this]] provides a set of functions and keybindings for launching google searches from within *Emacs*.

#+attr_html: :class styledtable1
| Key binding   | Command                                   | Description                                                                                                                                                                                                                                                       |
|---------------+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-x G RET= | =M-x google-this-search=                    | Write and do a google search. Quote argument with PREFIX =C-u=.                                                                                                                                                                                                     |
| =H-m C-x G t=   | =M-x google-this=                           | Decide what the user wants to google (always something under point). Quote argument with PREFIX =C-u=. Unlike =google-this-search= (which presents an empty prompt with "this" as the default value), this function inserts the query in the minibuffer to be edited. |
| =H-m C-x G n=   | =M-x google-this-noconfirm=                 | Decide what the user wants to google and go without confirmation. Quote argument with PREFIX =C-u=. Exactly like =google-this= or =google-this-search=, but don’t ask for confirmation.                                                                                 |
| =H-m C-x G g=   | =M-x google-this-lucky-search=              | Exactly like =google-this-search=, but use the "I’m feeling lucky" option. Quote argument with PREFIX =C-u=.                                                                                                                                                          |
| =H-m C-x G SPC= | =M-x google-this-region=                    | Google the current region. Quote argument with PREFIX =C-u=.                                                                                                                                                                                                        |
| =H-m C-x G a=   | =M-x google-this-ray=                       | Google text between the point and end of the line. If there is a selected region, googles the region.                                                                                                                                                             |
| =H-m C-x G l=   | =M-x google-this-line=                      | Google the current line. Quote argument with PREFIX =C-u=.                                                                                                                                                                                                          |
| =H-m C-x G s=   | =M-x google-this-symbol=                    | Google the current symbol. Quote argument with PREFIX =C-u=.                                                                                                                                                                                                        |
| =H-m C-x G w=   | =M-x google-this-word=                      | Google the current word. Quote argument with PREFIX =C-u=.                                                                                                                                                                                                          |
|---------------+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-x G i=   | =M-x google-this-lucky-and-insert-url=      | Fetch the url that would be visited by ‘google-this-lucky’.                                                                                                                                                                                                       |
| =H-m C-x G r=   | =M-x google-this-cpp-reference=             | Visit the most probable cppreference.com page for this word.                                                                                                                                                                                                      |
| =H-m C-x G f=   | =M-x google-this-forecast=                  | Search google for "weather". With PREFIX =C-u=, ask for location.                                                                                                                                                                                                   |
| =H-m C-x G e=   | =M-x google-this-error=                     | Google the current error in the compilation buffer. Quote argument with PREFIX =C-u=.                                                                                                                                                                               |
|---------------+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-x G c=   | =M-x google-this-translate-query-or-region= | If region is active =google-translate-at-point=, otherwise =google-translate-query-translate=.                                                                                                                                                                        |
|---------------+-------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-web-searching.el :var file-description="Basic Web searching setup"
;;
;; Searching with Google
;;
(use-package google-this
    :init
        (setq google-this-keybind (kbd "H-m C-x G"))
        (setq google-wrap-in-quotes nil)
    :config
        (google-this-mode 1)
)
#+end_src

*** Counsel-search

The [[https://github.com/abo-abo/swiper][Swiper]] package provides with counsel-search a command
that allows you to interactively search the Web. This command is available through the following
binding:

#+attr_html: :class styledtable1
| Key binding   | Command                                      | Description                                                                 |
|---------------+----------------------------------------------+-----------------------------------------------------------------------------|
| =H-m C-s w RET= | =M-x counsel-search=                           | Interactively search the web with counsel.                                  |
| =H-m C-s w t=   | =M-x psimacs/web/counsel/toggle-search-engine= | Toggle the search engine of 'counsel-search' between duckduckgo and google. |
|---------------+----------------------------------------------+-----------------------------------------------------------------------------|

*** Counsel-Web :noexport:

The package [[https://github.com/mnewt/counsel-web][counsel-web]] is an alternative to [[https://github.com/Malabarba/emacs-google-this][google-this]] for searching the Web.

#+begin_quote
Search the web with dynamic suggestions and browse the results – all from the comfort of Emacs and ivy.

The main idea in [[https://github.com/mnewt/counsel-web][counsel-web]] is to not have to browse search results in a browser–instead go directly
to the page you were searching for.
#+end_quote

#+attr_html: :class styledtable1
| Key binding   | Command                              | Description                                                                                                 |
|---------------+--------------------------------------+-------------------------------------------------------------------------------------------------------------|
| =H-m C-x C RET= | =M-x counsel-search=                   | Shows search suggestions as you type and visit page in your default browser on =RET=.                         |
| =H-m C-x C s=   | =M-x counsel-web-suggest=              | Shows search suggestions as you type. Press =RET= to accept the suggestion and send it to =counsel-web-search=. |
| =H-m C-x C w=   | =M-x counsel-web-search=               | Searches and presents the results in the ivy minibuffer.                                                    |
| =H-m C-x C p=   | =M-x counsel-web-thing-at-point=       | Interactively search the web for the THING at point.                                                        |
| =H-m C-x C t=   | =M-x psimacs/web/toggle-search-engine= | Toggle the search engine of [[https://github.com/abo-abo/swiper][counsel]] and  [[https://github.com/mnewt/counsel-web][counsel-web]] between 'duckduckgo' and 'google'.                     |
|---------------+--------------------------------------+-------------------------------------------------------------------------------------------------------------|

| counsel-web-search key bindings | Description                              |
|---------------------------------+------------------------------------------|
| =RET=                             | Browse to the selected result.           |
| =C-j=                             | Update the search.                       |
| =C-M-j=                           | Choose a secondary action.               |
| =M-o=                             | Choose from a menu of alternate actions. |
|---------------------------------+------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-web-searching.el
;;
;; Alternative Web searching facility
;;
(use-package counsel-web
    :config
         (setq counsel-web-engine 'google)
         (setq counsel-search-engine 'google)
;        (setq counsel-web-search-action #'browse-url-default-browser)
;        (setq counsel-web-search-alternate-action #'eww)
;        (setq counsel-web-search-dynamic-update nil)

         (defun psimacs/web/toggle-search-engine ()
           "Toggle the search engine of `counsel-search' and `counsel-web' between duckduckgo and google."
           (interactive)
           (if (eq counsel-search-engine 'google)
               (progn
                 (setq counsel-search-engine 'ddg)
                 (setq counsel-web-engine 'duckduckgo)
                 (message "Switched search engines to `duckduckgo'")
               )
             (progn
               (setq counsel-search-engine 'google)
               (setq counsel-web-engine 'google)
               (message "Switched search engines to `google'")
               )
             )
           )


    :bind (
           :map psimacs/config/global-key-map/special
                ("C-x C <return>" . counsel-search)
                ("C-x C s"        . counsel-web-suggest)
                ("C-x C w"        . counsel-web-search)
                ("C-x C p"        . counsel-web-thing-at-point)
                ("C-x C t"        . psimacs/web/toggle-search-engine)
          )
)
#+end_src

*** Stack Exchange

The package [[https://github.com/vermiculus/sx.el][sx]] provides a full-featured Stack Exchange mode for *Emacs*.

#+begin_quote
If you are going to be doing any asking/answering/commenting/upvoting/downvoting/ etc., you must use
sx-authenticate to provide SX with an authentication token to act on your behalf.
#+end_quote

References:
- [[https://stackexchange.com/][StackExchange]]
- [[https://stackexchange.com/sites#][StackExchange Sites]]

*Psimacs* currently only provides minimal key bindings for [[https://github.com/vermiculus/sx.el][sx]], since its author does not actively participate
in the StackExchange community.

#+attr_html: :class styledtable
| Key binding   | Command                      | Description                                                  |
|---------------+------------------------------+--------------------------------------------------------------|
| =H-m C-x S RET= | =M-x sx-tab-all-questions=     | Display a list of All-Questions questions for SITE.          |
| =H-m C-x S s=   | =M-x sx-search=                | Display search on SITE for question titles containing QUERY. |
| =H-m C-x S r=   | =M-x sx-question-list-refresh= | Update the list of questions.                                |
|---------------+------------------------------+--------------------------------------------------------------|

The following table shows only the key bindings important for the author. The [[https://github.com/vermiculus/sx.el][sx]] site provides many more
bindings and commands that comes into play when you actively participate in the StackExchange world.

| Key bindings | Description                                                                 |
|--------------+-----------------------------------------------------------------------------|
| =RET=          | Open question buffer.                                                       |
| =p=            | Navigate to previous entry in list.                                         |
| =n=            | Navigate to next entry in list.                                             |
| =j=            | Navigate to previous entry while viewing the question in a separate buffer. |
| =k=            | Navigate to next entry while viewing the question in a separate buffer.     |
| =s s=          | Switch site.                                                                |
| =v=            | Visit the thing-at-point in your browser.                                   |
| =w=            | Copy the thing-at-point (usually a link).                                   |
|--------------+-----------------------------------------------------------------------------|


#+begin_src emacs-lisp :tangle config/init-basic-web-searching.el
;;
;; Get access to the StackExchange sites
;;
(use-package sx
    :config
        (require 'sx-question-list)
        (setq sx-cache-directory  psimacs/config/sx-cache-dir)
        (bind-keys :prefix "H-m C-x S"
                   :prefix-map psimacs/web/sx-map
                   :prefix-docstring "Global keymap for SX."
                   ("<return>" . sx-tab-all-questions)
;                   ("i" . sx-inbox)
;                   ("o" . sx-open-link)
;                   ("u" . sx-tab-unanswered-my-tags)
;                   ("a" . sx-ask)
                   ("r" . sx-question-list-refresh)
                   ("s" . sx-search)))
#+end_src

** Crux

The package [[https://github.com/bbatsov/crux][crux]] is a collection of useful extensions for *Emacs*.
[[https://github.com/bbatsov/crux][Crux]] bundles many useful interactive commands to enhance your
overall *Emacs* experience.

See also:
- [[https://github.com/bbatsov/crux][crux]]
- [[http://emacsredux.com/blog/2016/01/30/crux/][Emacs Redux: Crux]]

#+attr_html: :class styledtable1
| Key binding     | Command                                               | Description                                                               |
|-----------------+-------------------------------------------------------+---------------------------------------------------------------------------|
| =H-x H-x C-c o=   | =M-x crux-open-with=                                    | Open the currently visited file with an external program.                 |
| =H-x H-x C-k=     | =M-x crux-smart-kill-line=                              | First kill to end of line, then kill the whole line.                      |
| =H-x H-x C-S-RET= | =M-x crux-smart-open-line-above=                        | Insert an empty line above the current line and indent it properly.       |
| =H-x H-x S-RET=   | =M-x crux-smart-open-line=                              | Insert an empty line and indent it properly (as in most IDEs).            |
| =H-x H-x C-c n=   | =M-x crux-cleanup-buffer-or-region=                     | Fix indentation in buffer and strip whitespace.                           |
| =H-x H-x C-c f=   | =M-x crux-recentf-find-file=                            | Open recently visited file.                                               |
| =H-x H-x C-c u=   | =M-x crux-view-url=                                     | Open a new buffer containing the contents of URL.                         |
| =H-x H-x C-c e=   | =M-x crux-eval-and-replace=                             | Eval a bit of Emacs Lisp code and replace it with its result.             |
| =H-x H-x C-x 4 t= | =M-x crux-transpose-windows=                            | Transpose the buffers between two windows.                                |
| =H-x H-x C-c D=   | =M-x crux-delete-file-and-buffer=                       | Delete current file and buffer.                                           |
| =H-x H-x C-c c=   | =M-x crux-copy-file-preserve-attributes=                | Copy current file with file attributes preserved                          |
| =H-x H-x C-c d=   | =M-x crux-duplicate-current-line-or-region=             | Duplicate the current line (or region).                                   |
| =H-x H-x C-c M-d= | =M-x crux-duplicate-and-comment-current-line-or-region= | Duplicate and comment the current line (or region).                       |
| =H-x H-x C-c r=   | =M-x crux-rename-file-and-buffer=                       | Rename the current buffer and its visiting file if any.                   |
| =H-x H-x C-c t=   | =M-x crux-visit-term-buffer=                            | Open a terminal emulator (ansi-term).                                     |
| =H-x H-x C-c k=   | =M-x crux-kill-other-buffers=                           | Kill all open buffers except the one you're currently in.                 |
| =H-x H-x C-M z=   | =M-x crux-indent-defun=                                 | Indent the definition at point.                                           |
| =H-x H-x C-c TAB= | =M-x crux-indent-rigidly-and-copy-to-clipboard=         | Indent and copy region to clipboard                                       |
| =H-x H-x C-c I=   | =M-x crux-find-user-init-file=                          | Open user's init file.                                                    |
| =H-x H-x C-c ,=   | =M-x crux-find-user-custom-file=                        | Open user's custom file.                                                  |
| =H-x H-x C-c S=   | =M-x crux-find-shell-init-file=                         | Open shell's init file.                                                   |
| =H-x H-x C-j=     | =M-x crux-top-join-line=                                | Join lines                                                                |
| =H-x H-x C-K=     | =M-x crux-kill-whole-line=                              | Kill whole line                                                           |
| =H-x H-x C-BCK=   | =M-x crux-kill-line-backwards=                          | Kill line backwards                                                       |
| =H-x H-x C-S-BCK= | =M-x crux-kill-and-join-forward=                        | If at end of line, join with following; otherwise kill line.              |
| =H-x H-x C-c P=   | =M-x crux-kill-buffer-truename=                         | Kill absolute path of file visited in current buffer.                     |
| =H-x H-x C-c i=   | =M-x crux-ispell-word-then-abbrev=                      | Fix word using ispell and then save to abbrev.                            |
| =H-x H-x C-x C-u= | =M-x crux-upcase-region=                                | Upcase-region when transient-mark-mode is on and region is active.        |
| =H-x H-x C-x C-l= | =M-x crux-downcase-region=                              | Downcase-region when transient-mark-mode is on and region is active.      |
| =H-x H-x C-x M-c= | =M-x crux-capitalize-region=                            | Capitalize-region when transient-mark-mode is on and region is active.    |
| =H-x H-x M-o=     | =M-x crux-other-window-or-switch-buffer=                | Select other window, or switch to most recent buffer if only one windows. |
|-----------------+-------------------------------------------------------+---------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-crux.el :var file-description="Basic crux setup"
(use-package crux
    :bind (
        :map psimacs/config/global-key-map/execute
            ("H-x C-c o"           . crux-open-with)
            ("H-x C-k"             . crux-smart-kill-line)
            ("H-x C-S-<ret>"       . crux-smart-open-line-above)
            ("H-x S-<ret>"         . crux-smart-open-line)
            ("H-x C-c n"           . crux-cleanup-buffer-or-region)
            ("H-x C-c f"           . crux-recentf-find-file)
            ("H-x C-c u"           . crux-view-url)
            ("H-x C-c e"           . crux-eval-and-replace)
            ("H-x C-x 4 t"         . crux-transpose-windows)
            ("H-x C-c D"           . crux-delete-file-and-buffer)
            ("H-x C-c c"           . crux-copy-file-preserve-attributes)
            ("H-x C-c d"           . crux-duplicate-current-line-or-region)
            ("H-x C-c M-d"         . crux-duplicate-and-comment-current-line-or-region)
            ("H-x C-c r"           . crux-rename-file-and-buffer)
            ("H-x C-c t"           . crux-visit-term-buffer)
            ("H-x C-c k"           . crux-kill-other-buffers)
            ("H-x C-M z"           . crux-indent-defun)
            ("H-x C-c <tab>"       . crux-indent-rigidly-and-copy-to-clipboard)
            ("H-x C-c I"           . crux-find-user-init-file)
            ("H-x C-c ,"           . crux-find-user-custom-file)
            ("H-x C-c S"           . crux-find-shell-init-file)
            ("H-x C-j"             . crux-top-join-line)
            ("H-x C-K"             . crux-kill-whole-line)
            ("H-x C-<backspace>"   . crux-kill-line-backwards)
            ("H-x C-S-<backspace>" . crux-kill-and-join-forward)
            ("H-x C-c P"           . crux-kill-buffer-truename)
            ("H-x C-c i"           . crux-ispell-word-then-abbrev)
            ("H-x C-x C-u"         . crux-upcase-region)
            ("H-x C-x C-l"         . crux-downcase-region)
            ("H-x C-x M-c"         . crux-capitalize-region)
            ("H-x M-o"             . crux-other-window-or-switch-buffer)
    )
)
#+end_src

** Edit multiple regions

The package [[https://github.com/victorhge/iedit][iedit]] provides two *Emacs* minor modes
=iedit-mode= and =iedit-rectangle-mode= and allows you to edit one occurrence of some text
in a buffer (possibly narrowed) or region, and simultaneously have other occurrences edited
in the same way, with visual feedback as you type.

See also:
- [[https://github.com/victorhge/iedit][Iedit - Edit multiple regions in the same way simultaneously]]
- [[https://www.emacswiki.org/emacs/DuplicateStartOfLineOrRegion][WikiEmacs: Duplicate Start Of Line Or Region]]

| Key binding | Command        | Description        |
|-------------+----------------+--------------------|
| =H-;=         | =M-x iedit-mode= | Toggle [[https://github.com/victorhge/iedit][iedit-mode]]. |
|-------------+----------------+--------------------|

#+begin_src emacs-lisp :tangle config/init-basic-tools.el
;;
;; Multiple places text editing
;;
(use-package iedit
    :init
        (setq iedit-toggle-key-default nil)
    :bind (
              ("H-;" . iedit-mode)
           )
)
#+end_src

** Easy duplicate

The package [[https://github.com/ongaeshi/duplicate-thing][duplicate-thing]] provides functionality
that allows you to /duplicate whatever's marked/, i.e. easy duplication of line or region, with comment out.

Duplicate line or region N times.
- If it has active mark, it will expand the selection and duplicate it.
- If it doesn't have active mark, it will select current line and duplicate it.

| Key binding | Command                            | Description                                                                             |
|-------------+------------------------------------+-----------------------------------------------------------------------------------------|
| =M-c=         | =M-x psimacs/string/duplicate-thing= | Duplicate whatever's marked, i.e. easy duplication of line or region, with comment out. |
|-------------+------------------------------------+-----------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-tools.el
;;
;; Provide region duplication functionality
;;
(use-package duplicate-thing
    :init
        (defun psimacs/string/duplicate-thing ()
            "Duplicate thing at point without changing the mark."
            (interactive)
            (save-mark-and-excursion (duplicate-thing 1)))
    :bind (
            ("M-c"     . psimacs/string/duplicate-thing)
        )
)
#+end_src

** Help on Psimacs

Provide access to the HTML documentation of *Psimacs*.

| Key binding | Command                                  | Description                                                      |
|-------------+------------------------------------------+------------------------------------------------------------------|
| =H-h H-p c=   | =M-x psimacs/help/browse-psimacs-config=   | Open default browser and shows the Psimacs configuration export. |
| =H-h H-p k=   | =M-x psimacs/help/browse-psimacs-keys=     | Open default browser and shows the Psimacs keys.                 |
| =H-h H-p b=   | =M-x psimacs/help/browse-psimacs-key-list= | Open default browser and shows the Psimacs listed keys.          |
|-------------+------------------------------------------+------------------------------------------------------------------|
| =H-h H-p C=   | =M-x psimacs/help/org-psimacs-config=      | Open org buffer with Psimacs configuration.                      |
| =H-h H-p K=   | =M-x psimacs/help/org-psimacs-keys=        | Open org buffer and shows the Psimacs keys.                      |
| =H-h H-p B=   | =M-x psimacs/help/org-psimacs-key-list=    | Open org buffer and shows the psimacs listed keys.               |
|-------------+------------------------------------------+------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-basic-tools.el
(defun psimacs/help/browse-psimacs-config ()
  "Open default browser and shows the psimacs HTML configuration export."
  (interactive)
  (browse-url (psimacs/file-system/concat-file user-emacs-directory "init.html"))
)

(defun psimacs/help/browse-psimacs-keys ()
  "Open default browser and shows the psimacs HTML keys."
  (interactive)
  (browse-url (psimacs/file-system/concat-file user-emacs-directory "sortedKeyBindings.html"))
)

(defun psimacs/help/browse-psimacs-key-list ()
  "Open default browser and shows the psimacs HTML listed keys."
  (interactive)
  (browse-url (psimacs/file-system/concat-file user-emacs-directory "keybindings.html"))
)

(defun psimacs/help/open-psimacs-config ()
  "Open org buffer with Psimacs configuration."
  (interactive)
  (find-file-read-only (psimacs/file-system/concat-file user-emacs-directory "init.org"))
)

(defun psimacs/help/open-psimacs-keys ()
  "Open org buffer and shows the Psimacs keys."
  (interactive)
  (find-file-read-only (psimacs/file-system/concat-file user-emacs-directory "sortedKeyBindings.org"))
)

(defun psimacs/help/open-psimacs-key-list ()
  "Open org buffer and shows the psimacs listed keys."
  (interactive)
  (find-file-read-only (psimacs/file-system/concat-file user-emacs-directory "keybindings.org"))
)

(define-key psimacs/config/global-key-map/help (kbd "H-p c") 'psimacs/help/browse-psimacs-config)
(define-key psimacs/config/global-key-map/help (kbd "H-p k") 'psimacs/help/browse-psimacs-keys)
(define-key psimacs/config/global-key-map/help (kbd "H-p b") 'psimacs/help/browse-psimacs-key-list)
(define-key psimacs/config/global-key-map/help (kbd "H-p C") 'psimacs/help/open-psimacs-config)
(define-key psimacs/config/global-key-map/help (kbd "H-p K") 'psimacs/help/open-psimacs-keys)
(define-key psimacs/config/global-key-map/help (kbd "H-p B") 'psimacs/help/open-psimacs-key-list)
#+end_src

** EditorConfig Emacs Plugin

[[https://github.com/editorconfig/editorconfig-emacs][EditorConfig Emacs Plugin]] brings support for [[https://editorconfig.org/][EditorConfig]] to *Emacs*.

Remark: This mode might be conflicting with =lsp-mode's= setting of
        =lsp-enable-indentation=. Set this variable to =nil= if you
        see problems with identation.

#+begin_src emacs-lisp :tangle config/init-basic-tools.el
;;
;; Support for EditorConfig files
;;
(use-package editorconfig
  :config
      (editorconfig-mode 1)
)
#+end_src

* Utility Lisp functions

All functions defined in *Psimacs* are prefixed by =psimacs/category=. For example
the /string/ related function /starts-with/ is defined as =psimacs/string/starts-with=.

** String processing

Utiltiy functions that help with handling of strings.

The following simple string functions are part of the configuration for historical reason. Today, the build-in *Emacs*
functions for string processing should be used instead.

References of string functionality:
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Strings-and-Characters.html#Strings-and-Characters][*Emacs* Manual: String and Characters]]
- [[http://ergoemacs.org/emacs/elisp_string_functions.html][Elips: String Functions by Xah Lee]]
- [[http://ergoemacs.org/emacs/elisp_trim_string.html][Elisp: Trim String Functions by Xah Lee]]
- [[https://github.com/magnars/s.el][*s.el*: The long lost Emacs string manipulation library.]]

#+begin_src emacs-lisp :tangle config/init-basic-functions.el :var file-description="Basic elisp functions"
;;
;; String processing functions
;;
(defun psimacs/string/starts-with (s begins)
    "Return non-nil if string S starts with BEGINS."
    (cond (
            (>= (length s) (length begins))
            (string-equal (substring s 0 (length begins)) begins)
        )
        (t nil)
    ))

(defun psimacs/string/ends-with (string suffix)
    "Return t if STRING ends with SUFFIX."
    (and (string-match (rx-to-string `(: ,suffix eos) t) string) t))

(defun psimacs/string/reverse (str)
    "Reverse the string, where STR is a string."
    (apply #'string (reverse  (string-to-list str))))

(defun psimacs/string/chomp-end (str)
    "Chomp tailing whitespace from STR."
    (replace-regexp-in-string (rx (* (any " \t\n")) eos) "" str))

(defun psimacs/string/chomp (str)
    "Chomp leading and tailing whitespace from STR."
    (replace-regexp-in-string (rx (or (: bos (* (any " \t\n")))
                                      (: (* (any " \t\n")) eos)))
                                ""
                                str))
#+end_src

** User Interface

Some useful user interface functions.

*** Select Item from list

Helper function =psimacs/ui/internal/select-from-item-list= that allows the selection of one item
from a given list of items.

#+begin_src emacs-lisp :tangle config/init-basic-functions.el
;;
;; User interface functions
;;
(defun psimacs/ui/internal/select-from-item-list (prompt given-list &optional index require-match)
    "Select item from list GIVEN-LIST.

This function simply delegates to ivy-read.

PROMPT - the command prompt."
    (if (= 1 (length given-list))
        (car given-list)
        (ivy-read prompt given-list :require-match require-match :preselect index)
    )
)
#+end_src

A test function =psimacs/ui/test/select-from-item-list= for function =psimacs/ui/internal/select-from-item-list=.

#+begin_src emacs-lisp :tangle config/init-basic-functions.el
(defun psimacs/ui/test/1/select-from-item-list ()
  "Test function `psimacs/ui/internal/select-from-item-list'. Select from 3 element list."
    (interactive)
    (let* (( result (psimacs/ui/internal/select-from-item-list "Hi joe: " '("a" "b" "c"))))
        (message result)
    )
)

(defun psimacs/ui/test/2/select-from-item-list ()
  "Test function `psimacs/ui/internal/select-from-item-list'. Select from 1 element list."
    (interactive)

    (let* (( result (psimacs/ui/internal/select-from-item-list "Hi joe: " '("a"))))
        (message result)
    )
)

#+end_src

** File system

Some useful file system functions.

*** Choose directory

Select a directory with ivy.

#+begin_src emacs-lisp :tangle config/init-basic-functions.el
;;
;; File-system functions
;;
(defun psimacs/file-system/choose-directory (directory-to-start-in)
    "Return a directory chosen by the user.

The user will be prompted to choose a directory starting with DIRECTORY-TO-START-IN."
    (let* ((ivy-read-prompt "Choose directory: ")
         (counsel--find-file-predicate #'file-directory-p)
         (default-directory directory-to-start-in)
         (selected-directory
            (ivy-read ivy-read-prompt #'read-file-name-internal :matcher #'counsel--find-file-matcher)
          ))
        selected-directory)
)

(defun psimacs/file-system/find-file (directory-to-start-in)
    "Return a file chosen by the user.

The user will be prompted to choose a directory starting with DIRECTORY-TO-START-IN."
    (let* ((ivy-read-prompt "Find file: ")
         (default-directory directory-to-start-in)
         (selected-file
          (ivy-read ivy-read-prompt #'read-file-name-internal :matcher #'counsel--find-file-matcher)
          ))
        selected-file)
)
#+end_src

*** Rename file and buffer

#+begin_src emacs-lisp :tangle config/init-basic-functions.el
(defun psimacs/file-system/rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))
#+end_src

** Directory local settings

Functionality related to directory local settings.

#+begin_src emacs-lisp :tangle config/init-basic-functions.el
;;
;; dir-locals functions
;;
(defun psimacs/dir-locals/reload-for-current-buffer ()
    "Reload dir locals for the current buffer."
    (interactive)
    (let ((enable-local-variables :all))
        (hack-dir-local-variables-non-file-buffer)
    )
)

(defun psimacs/dir-locals/reload-for-all-buffer-in-this-directory ()
    "For every buffer with the same `default-directory` as the current buffer's, reload dir-locals."
    (interactive)
    (let ((dir default-directory))
        (dolist (buffer (buffer-list))
            (with-current-buffer buffer
                (when (equal default-directory dir))
                    (psimacs/dir-locals/reload-for-current-buffer)
            )
        )
    )
)
#+end_src

* Advanced Setup

Now that the basic setup is finished we can take credit of the enormous amount of useful *Emacs* packages out
there. It is one of *Psimacs* goals to be a /modern/ editor. Let's see...

** Helm

*Psimacs* uses the [[https://github.com/emacs-helm/helm][Helm]] as well as the [[https://oremacs.com/swiper/][Ivy]] / [[https://oremacs.com/swiper/][Counsel]] framework. It is more focused towards the [[https://oremacs.com/swiper/][Ivy]] / [[https://oremacs.com/swiper/][Counsel]]
tools none the less. They both can be used side by side. In *Psimacs*, however [[https://oremacs.com/swiper/][Ivy]] / [[https://oremacs.com/swiper/][Counsel]] takes preference.

#+begin_quote
[[https://github.com/emacs-helm/helm][Helm]] is an *Emacs* framework for incremental completions and narrowing selections. It provides an easy-to-use
API for developers wishing to build their own Helm applications in Emacs, powerful search tools and dozens of
already built-in commands providing completion to almost everything. It is a must-have for anyone using *Emacs*
as a main work environment.
#+end_quote

References:
- [[https://emacs-helm.github.io/helm/][Helm Documentation]]

See also:
- [[https://www.reddit.com/r/emacs/comments/7vcrwo/helm_vs_ivy_what_are_the_differences_what_are_the/][Helm vs Ivy: What are the differences, what are the advantages?]]
- [[https://www.reddit.com/r/emacs/comments/axzpu2/why_do_you_use_helm_over_ivy/][Why do you use Helm over Ivy?]]
- [[https://www.reddit.com/r/emacs/comments/c0gt96/ido_vs_helm_vs_ivy_which_is_ones_are_the_best/][Ido vs helm vs ivy? Which is ones are the best?]]
- [[https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/][From helm, to ivy]]

Key bindings that related to [[https://github.com/emacs-helm/helm][Helm]]:

#+attr_html: :class styledtable1
| Key binding   | Command                             | Description                                                                  |
|---------------+-------------------------------------+------------------------------------------------------------------------------|
| =C-x c=         | =M-x helm-command-prefix=             | Prefix key for  [[https://github.com/emacs-helm/helm][Helm]] commands.                                               |
| =C-x c /=       | =M-x helm-find=                       | Helm for =find= shell command.                                                 |
| =C-x c 8=       | =M-x helm-ucs=                        | Helm for 'usc-names'.                                                        |
| =C-x c @=       | =M-x helm-list-elisp-packages=        | Helm for listing and handling packages.                                      |
| =C-x c F=       | =M-x helm-select-xfont=               | Helm to select Xfont.                                                        |
| =C-x c I=       | =M-x helm-imenu-in-all-buffers=       | Helm for fetching imenu entries in all buffers with similar mode as current. |
| =C-x c a=       | =M-x helm-apropos=                    | Helm to describe commands, functions, variables and faces.                   |
| =C-x c b=       | =M-x helm-resume=                     | Resume a previous Helm session.                                              |
| =C-x c c=       | =M-x helm-colors=                     | Helm for colors.                                                             |
| =C-x c e=       | =M-x helm-etags-select=               | Helm for etags.                                                              |
| =C-x c f=       | =M-x helm-multi-files=                | Like =helm-for-files= but running =locate= only on demand.                       |
| =C-x c i=       | =M-x helm-imenu=                      | Helm for =imenu=.                                                              |
| =C-x c l=       | =M-x helm-locate=                     | Helm for 'Locate'.                                                           |
| =C-x c m=       | =M-x helm-man-woman=                  | Helm for Man and Woman pages.                                                |
| =C-x c p=       | =M-x helm-list-emacs-process=         | Helm for *Emacs* process.                                                      |
| =C-x c r=       | =M-x helm-regexp=                     | Helm for building regexps.                                                   |
| =C-x c s=       | =M-x helm-surfraw=                    | Helm to search PATTERN with search ENGINE.                                   |
| =C-x c t=       | =M-x helm-top=                        | Helm for =top= command.                                                        |
| =C-x c C-,=     | =M-x helm-calcul-expression=          | Helm for =helm-source-calculation-result=.                                     |
| =C-x c C-:=     | =M-x helm-eval-expression-with-eldoc= | Helm for =helm-source-evaluation-result= with 'eldoc' support.                 |
| =C-x c <tab>=   | =M-x helm-lisp-completion-at-point=   | Helm for Lisp symbol completion at point.                                    |
| =C-x c h g=     | =M-x helm-info-gnus=                  | Helm for gnus info.                                                          |
| =C-x c h h=     | =M-x helm-documentation=              | Helm  for [[https://github.com/emacs-helm/helm][Helm]] documentation.                                                |
| =C-x c h i=     | =M-x helm-info-at-point=              | Helm for searching info at point.                                            |
| =C-x c h r=     | =M-x helm-info-emacs=                 | Helm for *Emacs* info.                                                         |
| =C-x c C-c C-x= | =M-x helm-run-external-command=       | Helm to run external program asynchronously from *Emacs*.                      |
| =C-x c C-c SPC= | =M-x helm-all-mark-rings=             | Helm for =helm-source-global-mark-ring= and =helm-source-mark-ring=.             |
| =C-x c C-c f=   | =M-x helm-recentf=                    | Helm for recently used files.                                                |
| =C-x c M-x=     | =M-x helm-M-x=                        | Helm for *Emacs* commands                                                      |
| =C-x c C-c g=   | =M-x helm-google-suggest=             | Helm for Google search with Google suggest.                                  |
| =C-x c M-y=     | =M-x helm-show-kill-ring=             | Helm for =kill-ring=.                                                          |
| =C-x c M-s o=   | =M-x helm-occur=                      | Helm for searching lines matching pattern in 'current-buffer'.               |
| =C-x c M-g a=   | =M-x helm-do-grep-ag=                 | Helm for grepping with AG in default directory.                              |
| =C-x c M-g i=   | =M-x helm-gid=                        | Helm for =gid= command line of =ID-Utils=.                                       |
| =C-x c C-x C-b= | =M-x helm-buffers-list=               | Helm to list buffers.                                                        |
| =C-x c C-x C-f= | =M-x helm-find-files=                 | Helm implementatio of =find-file=.                                             |
| =C-x c C-x r b= | =M-x helm-filtered-bookmarks=         | Helm for bookmarks filtered by category.                                     |
| =C-x c C-x r i= | =M-x helm-register=                   | Helm for *Emacs* registers.                                                    |
| =H-h H-h b=     | =M-x helm-descbinds=                  | Helm for =describe-bindings=.                                                  |
| =H-h H-h m=     | =M-x helm-describe-modes=             | Helm for =describe-mode=.                                                      |
|               | =M-x helm-help=                       | Generate Helm's help                                                         |
|               | =M-x helm-info=                       | Helm for searching Info files.                                               |
|               | =M-x helm-mode=                       | Toggle generic helm completion.                                              |
|---------------+-------------------------------------+------------------------------------------------------------------------------|

The following [[https://github.com/emacs-helm/helm][Helm]] configuration is taken from [[https://github.com/thierryvolpiatto/emacs-config/blob/main/init-helm.el][init-helm.el]].

#+begin_src emacs-lisp :tangle config/init-advanced-helm.el :var file-description="Advanced helm setup"
;;
;; Plain configuration of helm taken from https://github.com/thierryvolpiatto/emacs-config/blob/main/init-helm.el
;;
(use-package helm
  :config
      ;;(require 'helm-config)
      (setq helm-input-idle-delay                     0.01
            helm-reuse-last-window-split-state        t
            helm-always-two-windows                   t
            helm-split-window-inside-p                nil
            helm-commands-using-frame                 '(
                                                        ;;completion-at-point
                                                        helm-apropos
                                                        helm-eshell-prompts helm-imenu
                                                        helm-imenu-in-all-buffers
                                                       )
            helm-actions-inherit-frame-settings       t
            helm-use-frame-when-more-than-two-windows t
            helm-use-frame-when-no-suitable-window    t
            ;;helm-frame-background-color               "DarkSlateGray"
            helm-show-action-window-other-window      'left
            helm-allow-mouse                          t
            ;;helm-move-to-line-cycle-in-source         t
            helm-autoresize-max-height                80 ; it is %.
            helm-autoresize-min-height                20 ; it is %.
            helm-debug-root-directory                 psimacs/config/session-dir
            helm-follow-mode-persistent               t
            helm-candidate-number-limit               500)

      ;;(add-to-list 'helm-sources-using-default-as-input 'helm-source-info-bash)
      ;;(helm-define-key-with-subkeys global-map (kbd "C-c n") ?n 'helm-cycle-resume)
)
#+end_src

** Discoverability

*Emacs* is quite a complicated beast that is not easy to get acquainted with. Fortunately, few packages are available
that mitigate the learning curve. The following packages let you /discover/ key bindings, modes etc.

*** Discover Major Mode

Package [[https://framagit.org/steckerhalter/discover-my-major][discover-my-major]] allows to discover key bindings and descriptions for commands defined by a buffer's
major and minor modes.

| Key binding | Command               | Description                                                     |
|-------------+-----------------------+-----------------------------------------------------------------|
| =H-h C-d m=   | =M-x discover-my-major= | Create a listing of all major-mode keys with their description. |
| =H-h C-d M=   | =M-x discover-my-mode=  | Create a listing of all MODE keys with their description.       |
|-------------+-----------------------+-----------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-discoverability.el :var file-description="Advanced discoverability setup"
;;
;; Discover key bindings and descriptions for commands defined by a buffer
;;
(use-package discover-my-major
    :bind (
        :map psimacs/config/global-key-map/help
            ("C-d m" . discover-my-major)
            ("C-d M" . discover-my-mode)
        )
)
#+end_src

*** Helm-Descbinds

*The package [[https://github.com/emacs-helm/helm-descbinds][helm-descbinds]] provides an interface to *Emacs's* =describe-bindings= making the currently active key
bindings interactively searchable with helm.

| Key binding | Command            | Description                                                 |
|-------------+--------------------+-------------------------------------------------------------|
| =H-h H-h b=   | =M-x helm-descbinds= | Create a listing of all key bindings of current major mode. |
|-------------+--------------------+-------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-discoverability.el
;;
;; Provide a searchable list of bindings in current major-mode
;;
(use-package helm-descbinds
  :bind (
         :map psimacs/config/global-key-map/help
         ("H-h b" . helm-descbinds)
         )
  :config
        ;;(helm-descbinds-mode)
  )
#+end_src

*** Helm-Describe-Modes

The package [[https://github.com/emacs-helm/helm-describe-modes][helm-describe-modes]] provides a Helm interface to *Emacs's* =describe-mode=. It lists the major mode,
active minor modes, and inactive minor modes using Helm, and provides actions for each mode.

| Key binding | Command                 | Description                                          |
|-------------+-------------------------+------------------------------------------------------|
| =H-h H-h m=   | =M-x helm-describe-modes= | Create a listing of all modes of current major mode. |
|-------------+-------------------------+------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-discoverability.el
;;
;; Provide a searchable list of bindings in current major-mode
;;
(use-package helm-describe-modes
  :bind (
         :map psimacs/config/global-key-map/help
         ("H-h m" . helm-describe-modes)
         )
;  :config
;  (helm-descbinds-mode)
  )
#+end_src

*** Which Key

[[https://github.com/justbur/emacs-which-key][Which-key]] is a minor mode for *Emacs* that
displays the key bindings following your currently entered incomplete command (a prefix)
in a popup. IMHO, this package is one of the most useful packages for *Emacs*.

#+attr_html: :class styledtable1
| Key binding   | Command                                 | Description                                   |
|---------------+-----------------------------------------+-----------------------------------------------|
| =H-m C-u C-w t= | =M-x psimacs/which-key/toggle-sort-order= | Toggle the which-key-mode sort order.         |
| =H-m C-u C-w c= | =M-x psimacs/which-key/cycle-sort-order=  | Cycle through the which-key-mode sort orders. |
|---------------+-----------------------------------------+-----------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-which-key.el :var file-description="Advanced which-key setup"
;;
;; Configuration of the which-key package
;;
(defvar psimacs/config/which-key-sort-order 'which-key-key-order-alpha
    "The psimacs default which key sort order.

Lexicographically, single characters are sorted alphabetically.")

(defun psimacs/which-key/toggle-sort-order ()
    "Toggle the which-key-mode sort order.

If which key sort order is `which-key-key-order-alpha' then the
sort order is set to `which-key-description-order'. Else it is
set to `which-key-key-order-alpha'."
    (interactive "")

    (let ((sort-order psimacs/config/which-key-sort-order))
        (if (eq which-key-sort-order 'which-key-description-order)
            (setq sort-order psimacs/config/which-key-sort-order)
            (setq sort-order 'which-key-description-order)
        )

        (setq which-key-sort-order sort-order)
        (message "which-key sort order is %s" sort-order)
    )
)

(defun psimacs/which-key/cycle-sort-order ()
    "Cycle the which-key-mode sort order.

`which-key-key-order':
The default order is to sort lexicographically within
each class of key, where the classes and their order are:
- Special (SPC, TAB, ...).
- Single Character (ASCII) (a, ...).
- Modifier (C-, M-, ...).
- Other.

`which-key-key-order-alpha':
Same as default, except single characters are sorted alphabetically.

`which-key-prefix-then-key-order':
Same as default, except all prefix keys are grouped together at the end.

`which-key-local-then-key-order':
Same as default, except all keys from local maps shown first.

`which-key-description-order':
Sort based on the key description ignoring case.

`which-key-description-order':
Sort based on the key description ignoring case."

    (interactive "")

    (let ((sort-order psimacs/config/which-key-sort-order))

        (if (eq which-key-sort-order 'which-key-key-order)
            (setq sort-order 'which-key-key-order-alpha)

            (if (eq which-key-sort-order 'which-key-key-order-alpha)
                (setq sort-order 'which-key-prefix-then-key-order)

                (if (eq which-key-sort-order 'which-key-prefix-then-key-order)
                    (setq sort-order 'which-key-local-then-key-order)

                    (if (eq which-key-sort-order 'which-key-local-then-key-order)
                        (setq sort-order 'which-key-description-order)

                        (if (eq which-key-sort-order 'which-key-description-order)
                            (setq sort-order 'which-key-key-order)
                        )
                    )
                )
            )
        )

        (setq which-key-sort-order sort-order)
        (message "which-key sort order is %s" sort-order)

        (if (not (eq which-key-sort-order 'which-key-description-order))
            (setq psimacs/config/which-key-sort-order sort-order)
        )
    )
)

(use-package which-key
    :demand t
    :diminish which-key-mode
    :bind (
           :map psimacs/config/global-key-map/special
              ("C-u C-w t" . psimacs/which-key/toggle-sort-order)
              ("C-u C-w c" . psimacs/which-key/cycle-sort-order)
           )
    :init
        (setq which-key-sort-order psimacs/config/which-key-sort-order)
        (setq which-key-idle-delay 0.5)
    :config
        ;(setq which-key-replacement-alist '(
        ;    ("<\\([[:alnum:]-]+\\)>" . "\\1")
        ;    ("left"                  . "◄")
        ;    ("right"                 . "►")
        ;    ("up"                    . "▲")
        ;    ("down"                  . "▼")
        ;    ("delete"                . "DEL") ; delete key
        ;    ("\\`DEL\\'"             . "BS")  ; backspace key
        ;    ("next"                  . "PgDn")
        ;    ("prior"                 . "PgUp"))
        ;)

        (setq which-key-max-description-length 60)

        (which-key-setup-side-window-bottom)
        (setq which-key-show-docstrings nil)

        (setq which-key-separator " → " )
        (setq which-key-unicode-correction 3)

        (set-face-attribute 'which-key-command-description-face nil :weight 'bold)
        (set-face-attribute 'which-key-key-face nil :foreground "Yellow")

        (which-key-add-key-based-replacements "C-h 4"         "info")

        (which-key-add-key-based-replacements "C-c &"         "yasnippet")
        (which-key-add-key-based-replacements "C-c /"         "regexp")
        (which-key-add-key-based-replacements "C-c / e "      "rxt")
        (which-key-add-key-based-replacements "C-c / p "      "pcre")
        (which-key-add-key-based-replacements "C-c i"         "search")
        (which-key-add-key-based-replacements "C-c n"         "org-roam")
        (which-key-add-key-based-replacements "C-c n a"       "add")
        (which-key-add-key-based-replacements "C-c n b"       "buffer")
        (which-key-add-key-based-replacements "C-c n g"       "graph")
        (which-key-add-key-based-replacements "C-c n i"       "insert")
        (which-key-add-key-based-replacements "C-c n p"       "project")
        (which-key-add-key-based-replacements "C-c n r"       "ref")
        (which-key-add-key-based-replacements "C-c n x"       "capture")

        (which-key-add-key-based-replacements "C-x RET"       "unicode")
        (which-key-add-key-based-replacements "C-x 4"         "window")
        (which-key-add-key-based-replacements "C-x 5"         "frame")
        (which-key-add-key-based-replacements "C-x 8"         "insert char")
        (which-key-add-key-based-replacements "C-x 8 e"       "emoji")
        (which-key-add-key-based-replacements "C-x a"         "abbrev")
        (which-key-add-key-based-replacements "C-x a i"       "insert")
        (which-key-add-key-based-replacements "C-x D"         "dired+")
        (which-key-add-key-based-replacements "C-x n"         "narrow")
        (which-key-add-key-based-replacements "C-x p"         "project")
        (which-key-add-key-based-replacements "C-x r"         "register")
        (which-key-add-key-based-replacements "C-x t"         "tab")
        (which-key-add-key-based-replacements "C-x v"         "vc")
        (which-key-add-key-based-replacements "C-x w"         "window")
        (which-key-add-key-based-replacements "C-x w ^"       "window tear")
        (which-key-add-key-based-replacements "C-x X"         "edebug")
        (which-key-add-key-based-replacements "C-x x"         "buffer")
        (which-key-add-key-based-replacements "C-x C-a"       "gud")
        (which-key-add-key-based-replacements "C-x C-k"       "kmacro")

        (which-key-add-key-based-replacements "H-m RET"       "ui")
        (which-key-add-key-based-replacements "H-m RET C-v"   "mode")
        (which-key-add-key-based-replacements "H-m i"         "org/image")
        (which-key-add-key-based-replacements "H-m C-c"       "else")
        (which-key-add-key-based-replacements "H-m C-e"       "ui")
        (which-key-add-key-based-replacements "H-m C-e RET"   "visual")
        (which-key-add-key-based-replacements "H-m C-f"       "flyspell")
        (which-key-add-key-based-replacements "H-m C-f C-a"   "function")
        (which-key-add-key-based-replacements "H-m C-l"       "langtool")
        (which-key-add-key-based-replacements "H-m C-p"       "pair")
        (which-key-add-key-based-replacements "H-m C-p C-r"   "rainbow")
        (which-key-add-key-based-replacements "H-m C-p C-s"   "mode")
        (which-key-add-key-based-replacements "H-m C-s"       "search")
        (which-key-add-key-based-replacements "H-m C-s RET"   "mosey")
        (which-key-add-key-based-replacements "H-m C-s w"     "web")
        (which-key-add-key-based-replacements "H-m C-s C-a"   "avy")
        (which-key-add-key-based-replacements "H-m C-t"       "spelling")
        (which-key-add-key-based-replacements "H-m C-u"       "which-key")
        (which-key-add-key-based-replacements "H-m C-u C-w"   "sort-order")
        (which-key-add-key-based-replacements "H-m C-v"       "shell")
        (which-key-add-key-based-replacements "H-m C-w"       "ui/zoom")
        (which-key-add-key-based-replacements "H-m C-w C-s"   "scroll")
        (which-key-add-key-based-replacements "H-m C-w C-x"   "ace")
        (which-key-add-key-based-replacements "H-m C-x"       "ui/modes/search")
        (which-key-add-key-based-replacements "H-m C-x G"     "google")
        (which-key-add-key-based-replacements "H-m C-x S"     "sx")
        (which-key-add-key-based-replacements "H-m C-x s"     "last-command")
        (which-key-add-key-based-replacements "H-m C-x t"     "treemacs")
        (which-key-add-key-based-replacements "H-m C-y"       "yasnippets")
        (which-key-add-key-based-replacements "H-m H-c"       "cursor")
        (which-key-add-key-based-replacements "H-m H-c a"     "anchor")
        (which-key-add-key-based-replacements "H-m H-c a r"   "rectangular")
        (which-key-add-key-based-replacements "H-m H-c e"     "mc/edit")
        (which-key-add-key-based-replacements "H-m H-c i"     "mc/insert")
        (which-key-add-key-based-replacements "H-m H-c m"     "mc/mark")
        (which-key-add-key-based-replacements "H-m H-c m d"   "mc/mark/dwim")
        (which-key-add-key-based-replacements "H-m H-c m f"   "mc/mark/all")
        (which-key-add-key-based-replacements "H-m H-c m f s" "mc/mark/symbols")
        (which-key-add-key-based-replacements "H-m H-c m f w" "mc/mark/words")
        (which-key-add-key-based-replacements "H-m H-c m r"   "mc/mark/region")
        (which-key-add-key-based-replacements "H-m H-c m S"   "mc/mark/symbols/np")
        (which-key-add-key-based-replacements "H-m H-c m s"   "mc/mark/symbols")
        (which-key-add-key-based-replacements "H-m H-c m W"   "mc/mark/words/np")
        (which-key-add-key-based-replacements "H-m H-c m w"   "mc/mark/works")
        (which-key-add-key-based-replacements "H-m H-c r"     "mc/regions")
        (which-key-add-key-based-replacements "H-m H-c s"     "mc/skip")
        (which-key-add-key-based-replacements "H-m H-c u"     "mc/unmark")
        (which-key-add-key-based-replacements "H-m H-c v"     "mc/align")
        (which-key-add-key-based-replacements "H-m H-x"       "amx")

        (which-key-add-key-based-replacements "H-c C-t"       "greetings")

        (which-key-add-key-based-replacements "H-h C-d"       "discover")
        (which-key-add-key-based-replacements "H-h H-h"       "helm/desc...")
        (which-key-add-key-based-replacements "H-h H-p"       "help")

        (which-key-add-key-based-replacements "H-x C"         "recentf")
        (which-key-add-key-based-replacements "H-x C-c"       "command")
        (which-key-add-key-based-replacements "H-x C-c C-e"   "execute")
        (which-key-add-key-based-replacements "H-x C-c C-e s" "sphinx")
        (which-key-add-key-based-replacements "H-x C-w"       "whitespace")
        (which-key-add-key-based-replacements "H-x H-c"       "vr")
        (which-key-add-key-based-replacements "H-x H-f"       "yafolding")
        (which-key-add-key-based-replacements "H-x H-s"       "symbol-overlay")
        (which-key-add-key-based-replacements "H-x C"         "recentf")
        (which-key-add-key-based-replacements "H-x H-x RET"   "crux")
        (which-key-add-key-based-replacements "H-x H-x C-c"   "crux/commnads")
        (which-key-add-key-based-replacements "H-x H-x C-x"   "crux/case")
        (which-key-add-key-based-replacements "H-x H-x C-x 4" "crux/transpose")

        (which-key-add-major-mode-key-based-replacements 'org-mode        "C-c \"" "org-plot")
        (which-key-add-major-mode-key-based-replacements 'org-mode        "C-c C-v" "org-babel")
        (which-key-add-major-mode-key-based-replacements 'org-mode        "C-c C-x" "org-misc")
        (which-key-add-major-mode-key-based-replacements 'emacs-lisp-mode "C-c ," "overseer")
        (which-key-add-major-mode-key-based-replacements 'python-mode     "C-c C-t" "python-skeleton")
        (which-key-add-major-mode-key-based-replacements 'markdown-mode   "C-c C-a" "markdown-link")
        (which-key-add-major-mode-key-based-replacements 'markdown-mode   "C-c C-c" "markdown-command")
        (which-key-add-major-mode-key-based-replacements 'markdown-mode   "C-c C-s" "markdown-style")
        (which-key-add-major-mode-key-based-replacements 'markdown-mode   "C-c C-t" "markdown-header")
        (which-key-add-major-mode-key-based-replacements 'markdown-mode   "C-c C-x" "markdown-toggle")
        (which-key-add-major-mode-key-based-replacements 'gfm-mode        "C-c C-a" "markdown-link")
        (which-key-add-major-mode-key-based-replacements 'gfm-mode        "C-c C-c" "markdown-command")
        (which-key-add-major-mode-key-based-replacements 'gfm-mode        "C-c C-s" "markdown-style")
        (which-key-add-major-mode-key-based-replacements 'gfm-mode        "C-c C-t" "markdown-header")
        (which-key-add-major-mode-key-based-replacements 'gfm-mode        "C-c C-x" "markdown-toggle")

        (which-key-mode t)
)
#+end_src

#+RESULTS:
: psimacs/which-key/cycle-sort-order

*** Selectrum

The package [[https://github.com/raxod502/selectrum][selectrum]] aims to provide a better completion UI using standard Emacs APIs.
It is an alternative to *Psimacs* default [[https://github.com/abo-abo/swiper][Ivy/Counsel/Swiper]] completion.

The package is installed by *Psimacs* but not activated.

#+begin_src emacs-lisp :tangle config/init-advanced-swiper-key.el :var file-description="Advanced Selectrum setup"
;;
;; Configure the selectrum completion package.
;;
(use-package selectrum)
#+end_src

*** Swiper / Ivy / Counsel

[[https://github.com/abo-abo/swiper][Swiper]] gives us a really efficient incremental search
with regular expressions and [[https://oremacs.com/swiper/][Ivy]] / [[https://oremacs.com/swiper/][Counsel]]
replace a lot of ido or helms completion functionality

See also:
- [[https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html][Ivy, Counsel and Swiper]],
- [[https://oremacs.com/2015/04/09/counsel-completion/][Counsel]]

#+attr_html: :class styledtable1
| Key binding   | Command                                      | Description                                                                           |
|---------------+----------------------------------------------+---------------------------------------------------------------------------------------|
| =C-s=           | =M-x swiper-iseach=                            | A =swiper= that’s not line-based. Incrementally search with an overview.                |
| =C-r=           | =M-x swiper=                                   | Incrementally search with an overview.                                                |
| =C-c v=         | =M-x ivy-push-view=                            | Push the current window tree on =ivy-views=                                             |
| =C-c V=         | =M-x ivy-pop-view=                             | Delete a view to delete from =ivy-views=.                                               |
| =H-m C-s a=     | =M-x swiper-all=                               | Incrementally search in all open buffers.                                             |
| =H-m C-s s=     | =M-x isearch-forward=                          | Incrementally search forward.                                                         |
| =H-m C-s r=     | =M-x isearch-backward=                         | Incrementally search backward.                                                        |
| =H-s=           | =M-x psimacs/config/isearch-menu=              | In isearch mode, opens an isearch menu, allowing to easily utilize the functionality. |
|---------------+----------------------------------------------+---------------------------------------------------------------------------------------|
| =H-m C-s w RET= | =M-x counsel-search=                           | Interactively search the web with counsel.                                            |
| =H-m C-s w t=   | =M-x psimacs/web/counsel/toggle-search-engine= | Toggle the search engine of 'counsel-search' between duckduckgo and google.           |
|---------------+----------------------------------------------+---------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-swiper-key.el :var file-description="Advanced Ivy, Counsel and Swiper setup"
;;
;; Configure isearch...
;;
(use-package transient
  :straight nil
  :init
    (transient-define-prefix psimacs/config/isearch-menu ()
      "isearch Menu"
      [["Edit Search String"
        ("e"
         "Edit the search string (recursive)"
         isearch-edit-string
         :transient nil)
        ("w"
         "Pull next word or character word text buffer"
         isearch-yank-word-or-char
         :transient nil)
        ("s"
         "Pull next symbol or character text buffer"
         isearch-yank-symbol-or-char
         :transient nil)
        ("l"
         "Pull rest of line text buffer"
         isearch-yank-line
         :transient nil)
        ("y"
         "Pull string text kill ring"
         isearch-yank-kill
         :transient nil)
        ("t"
         "Pull thing text buffer"
         isearch-forward-thing-at-point
         :transient nil)]

       ["Replace"
        ("q"
         "Start ‘query-replace’"
         isearch-query-replace
         :if-nil buffer-read-only
         :transient nil)
        ("x"
         "Start ‘query-replace-regexp’"
         isearch-query-replace-regexp
         :if-nil buffer-read-only
         :transient nil)]]

      [["Toggle"
        ("X"
         "Toggle regexp searching"
         isearch-toggle-regexp
         :transient nil)
        ("S"
         "Toggle symbol searching"
         isearch-toggle-symbol
         :transient nil)
        ("W"
         "Toggle word searching"
         isearch-toggle-word
         :transient nil)
        ("F"
         "Toggle case fold"
         isearch-toggle-case-fold
         :transient nil)
        ("L"
         "Toggle lax whitespace"
         isearch-toggle-lax-whitespace
         :transient nil)]

       ["Misc"
        ("o"
         "occur"
         isearch-occur
         :transient nil)]])

  :bind (
         :map isearch-mode-map
         ("H-s"   . psimacs/config/isearch-menu)
        )

)
#+end_src

*** Ivy

[[https://github.com/abo-abo/swiper][Ivy]] is for quick and easy selection from a list. When *Emacs* prompts for a string
from a list of several possible choices, Ivy springs into action to assist in
narrowing and picking the right string from a vast number of choices.

| Key binding | Command               | Description                                                             |
|-------------+-----------------------+-------------------------------------------------------------------------|
| =C-x b=       | =M-x ivy-switch-buffer= | Switch to another buffer.                                               |
| =C-c C-S-r=   | =M-x ivy-resume=        | Resumes the last Ivy-based completion.                                  |
| =M-y=         | =M-x ivy-next-line=     | In minibuffer, Move cursor vertically down.                             |
| =H-w= =C-'=     | =M-x ivy-avy=           | Uses avy to select one of the candidates on the current candidate page. |
|-------------+-----------------------+-------------------------------------------------------------------------|

See also [[https://oremacs.com/swiper/][Ivy User Manual]]

#+begin_src emacs-lisp :tangle config/init-advanced-swiper-key.el :var file-description="Advanced Ivy, Counsel and Swiper setup"
;;
;; Configure counsel...
;;
(use-package counsel
    :demand t
    :diminish
    :bind (
        ("C-s"       . swiper-isearch)
        ("C-r"       . swiper)
        ("C-x b"     . ivy-switch-buffer)
        ("C-c C-S-r" . ivy-resume)
        ("C-c v"     . ivy-push-view)
        ("C-c V"     . ivy-pop-view)
        :map ivy-minibuffer-map
            ("M-y"   . ivy-next-line)
        :map ivy-mode-map
            ("C-'"   . ivy-avy)
            ("H-w"   . ivy-avy)
        :map psimacs/config/global-key-map/special
            ("C-s a"          . swiper-all)
            ("C-s s"          . isearch-forward)
            ("C-s r"          . isearch-backward)
            ("C-s w <return>" . counsel-search)
            ("C-s w t"        . psimacs/web/counsel/toggle-search-engine)
       )
    :config
        (setq ivy-magic-slash-non-match-action 'ivy-magic-slash-non-match-create)

        (setq ivy-use-virtual-buffers t)        ; ﻿add recent files and/or bookmarks to ‘ivy-switch-buffer’
        (setq enable-recursive-minibuffers t)   ; if this variable is non-nil, you can invoke commands (such as find-file)
                                                ; that use minibuffers even while the minibuffer is active. Such invocation
                                                ; produces a recursive editing level for a new minibuffer. The outer-level
                                                ; minibuffer is invisible while you are editing the inner one.
        ;;(setq ivy-height 10)                    ; number of result lines to display

        (setq ivy-height-alist
                '((t
                    lambda (_caller)
                    (/ (frame-height) 2)))
        )

        (setq ivy-count-format "%d/%d ")        ; displays the current and total number in the collection in the prompt
        (setq ivy-initial-inputs-alist nil)     ; no regexp by default
        (setq ivy-re-builders-alist             ; configure regexp engine.
            '((t . ivy--regex-ignore-order)))   ; allow input not in order

        (setq ivy-re-builders-alist
            '(
                (ivy-switch-buffer . ivy--regex-plus )
                (swiper            . ivy--regex-plus )
                (counsel-M-x       . ivy--regex-plus )
                (t                 . ivy--regex-plus )
             )
        )

        (setq ivy-initial-inputs-alist nil)
        (define-key ivy-minibuffer-map (kbd "<return>") 'ivy-alt-done)

        (setq magit-completing-read-function 'ivy-completing-read)
        (setq projectile-completion-system 'ivy)

        (use-package request)
        (setq counsel-search-engine 'google)

        (defun psimacs/web/counsel/toggle-search-engine ()
            "Toggle the search engine of `counsel-search' between duckduckgo and google."
            (interactive)
            (if (eq counsel-search-engine 'google)
                (progn
                    (setq counsel-search-engine 'ddg)
                    (message "Switched search engine to `duckduckgo'")
                )
                ;; else
                (progn
                    (setq counsel-search-engine 'google)
                    (message "Switched search engine to `google'")
                )
            )
        )

    :hook (
            (after-init . ivy-mode)
            (ivy-mode . counsel-mode)
        )
)

(use-package ivy-avy)
#+end_src

Display icons for all buffers in ivy with the help of package [[https://github.com/asok/all-the-icons-ivy][all-the-icons-ivy]].

#+begin_src emacs-lisp :tangle config/init-advanced-swiper-key.el
(use-package all-the-icons-ivy
    :after ivy
)
#+end_src

Display icons for all buffers in ivy with the help of package [[https://github.com/seagle0128/all-the-icons-ivy-rich][all-the-icons-ivy-rich]].

#+begin_src emacs-lisp :tangle config/init-advanced-swiper-key.el
;;
;; ... with ivy rich icons ...
;;
(use-package all-the-icons-ivy-rich
    :after ivy-rich
    :config
        (setq all-the-icons-ivy-rich-icon-size 1.0)
        ;(setq inhibit-compacting-font-caches t)

        (plist-put all-the-icons-ivy-rich-display-transformers-list
             'counsel-M-x
             '(:columns
                 (
                    (all-the-icons-ivy-rich-function-icon)
                    (counsel-M-x-transformer (:width 75))
                  (ivy-rich-counsel-function-docstring (:face font-lock-doc-face)))
               )
        )

)
#+end_src

The package [[https://github.com/Yevgnen/ivy-rich][ivy-rich]] provides a more friendly interface for [[https://github.com/abo-abo/swiper][ivy]].

#+begin_src emacs-lisp :tangle config/init-advanced-swiper-key.el
;;
;; ... for enhancing interface for ivy ...
;;
(use-package ivy-rich
    :after (ivy counsel)
    :init
        (setq ivy-rich-path-style 'abbrev)
        (setq ivy-virtual-abbreviate 'full)
    :config
        (all-the-icons-ivy-rich-mode 1)
        (ivy-rich-mode 1)
)
#+end_src

The package [[https://github.com/abo-abo/swiper/blob/master/ivy-hydra.el][ivy-hydra]] provides a [[https://github.com/abo-abo/hydra][hydra]] for [[https://github.com/abo-abo/swiper][ivy]].

| Key binding | Command            | Description |
|-------------+--------------------+-------------|
| =H-SPC i=     | =M-x hydra-ivy/body= | Ivy...      |
|-------------+--------------------+-------------|

#+begin_src emacs-lisp :tangle config/init-advanced-swiper-key.el
;;
;; ... and finally provide a hydra for ivy
;;
(use-package ivy-hydra
    :bind (
           :map psimacs/config/global-key-map/hydra ("i" . hydra-ivy/body)
           )
)
#+end_src

*** Counsel

To keep concerns separated, Ivy doesn't have a lot of other functionality. That's where  [[https://github.com/abo-abo/swiper][Counsel]] comes in.

[[https://github.com/abo-abo/swiper][Ivy mode]] ensures that any Emacs command using =completing-read-function=
uses [[https://github.com/abo-abo/swiper][ivy]] for completion.
Counsel takes this further, providing versions of common *Emacs* commands that are customised to make
the best use of [[https://github.com/abo-abo/swiper][ivy]].

#+attr_html: :class styledtable1
| Key binding | Command                        | Description                                                          |
|-------------+--------------------------------+----------------------------------------------------------------------|
| =M-x=         | =M-x counsel-M-x=                | Ivy version of =execute-extended-command=.                             |
| =C-M-i=       | =M-x counsel-imenu=              | Jump to a buffer position indexed by =imenu=.                          |
| =C-x C-f=     | =M-x counsel-find-file=          | Counsel, forward to =find-file=.                                       |
| =C-c b=       | =M-x counsel-bookmark=           | Forward to =bookmark-jump= or =bookmark-set= if bookmark does not exist. |
| =C-c c=       | =M-x counsel-compile=            | Call =compile= completing with smart suggestions, optionally for DIR.  |
| =C-c d=       | =M-x counsel-dired-jump=         | Jump to a directory below the current directory.                     |
| =C-c F=       | =M-x counsel-org-file=           | Browse all attachments for current Org file.                         |
| =C-c g=       | =M-x counsel-git=                | Find file in the current git repository.                             |
| =C-c j=       | =M-x counsel-git-grep=           | Grep for a string in the current Git repository.                     |
| =C-c L=       | =M-x counsel-git-log=            | Call the =git log --grep= shell command.                               |
| =C-c J=       | =M-x counsel-file-jump=          | Jump to a file below the current directory..                         |
| =C-c k=       | =M-x counsel-ag=                 | Grep for a string in a root directory using =ag=.                      |
| =C-c l=       | =M-x counsel-locate=             | Call a "locate" style shell command.                                 |
| =M-y=         | =M-x counsel-yank-pop=           | Ivy replacement for =yank-pop=.                                        |
| =C-h f=       | =M-x counsel-describe-function=  | Forward to =describe-function=.                                        |
| =C-h i=       | =M-x counsel-info-lookup-symbol= | Forward SYMBOL to =info-lookup-symbol= with ivy completion.            |
| =C-h j=       | =M-x counsel-set-variable=       | Set a variable SYM with completion.                                  |
| =C-h l=       | =M-x counsel-find-library=       | Find Emacs Lisp source. Forward to =find-library=.                     |
| =C-h u=       | =M-x counsel-unicode-char=       | Insert COUNT copies of a unicode char at point.                      |
| =C-h v=       | =M-x counsel-describe-variable=  | Forward to =describe-function=.                                        |
| =C-r=         | =M-x counsel-minibuffer-history= | Browse minibuffer history.                                           |
| =C-r=         | =M-x counsel-expression-history= | In =read-expression-map=                                               |
|-------------+--------------------------------+----------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-swiper-key.el
;;
;; ... then counsel
;;
(use-package counsel
    :straight nil
;;    :after ivy
    :diminish
    :commands counsel-find-files
    :bind (
        ("M-x"     . counsel-M-x)
        ("C-M-i"   . counsel-imenu)
        ("C-x C-f" . counsel-find-file)
        ("C-c b"   . counsel-bookmark)
        ("C-c c"   . counsel-compile)
        ("C-c d"   . counsel-dired-jump)
        ("C-c g"   . counsel-git)
        ("C-c j"   . counsel-git-grep)
        ("C-c L"   . counsel-git-log)
        ("C-c J"   . counsel-file-jump)
        ("C-c k"   . counsel-ag)
        ("C-c l"   . counsel-locate)
        ("M-y"     . counsel-yank-pop)
        :map help-map
            ("f"   . counsel-describe-function)
            ("v"   . counsel-describe-variable)
            ("l"   . counsel-find-library)
            ("u"   . counsel-unicode-char)
            ("j"   . counsel-set-variable)
            ("i"   . counsel-info-lookup-symbol)
        :map psimacs/config/global-key-map/help
            ("f"   . counsel-describe-function)
            ("v"   . counsel-describe-variable)
        :map read-expression-map
            ("C-r" . counsel-expression-history)
        :map ivy-minibuffer-map
            ("C-r" . counsel-minibuffer-history)
        )
    :config
        (setq counsel-find-file-at-point t)
        (setq counsel-describe-function-function #'helpful-callable)
        (setq counsel-describe-variable-function #'helpful-variable)
)
#+end_src

*** Amx

It provides several enhancements over the ordinary =execute-extended-command=, such as prioritizing
your most-used commands in the completion list and showing keyboard shortcuts.

#+attr_html: :class styledtable1
| Key binding | Command                       | Description                                                               |
|-------------+-------------------------------+---------------------------------------------------------------------------|
| =H-m H-x x=   | =M-x amx-major-mode-commands=   | Runs [[https://github.com/DarwinAwardWinner/amx][Amx]], limited to commands that are relevant to the active major mode. |
| =H-m H-x m=   | =M-x amx-mode=                  | Toggle [[https://github.com/DarwinAwardWinner/amx][amx-mode]].                                                          |
| =H-m H-x u=   | =M-x amx-show-unbound-commands= | Shows frequently used commands that have no key bindings.                 |
|-------------+-------------------------------+---------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-amx-key.el :var file-description="Advanced amx setup"
;;
;; Enhance the M-x i.e. execute-extended-command interface
;;
(use-package amx
    :after ivy
    :init
        (setq amx-save-file psimacs/config/amx-file)
    :config
        (amx-mode t)
    :bind (
        :map psimacs/config/global-key-map/special
            ("H-x x" . amx-major-mode-commands)
            ("H-x m" . amx-mode)
            ("H-x u" . amx-show-unbound-commands)
        )
)
#+end_src

*** Frog jumping

The package [[https://github.com/waymondo/frog-jump-buffer][frog-jump-buffer]] is the spiritual successor to
ace-jump-buffer and is powered by avy via frog-menu. Just like =ace-jump-buffer=, it allows you to hop to any
*Emacs* buffer in 2-3 key strokes.

| Key binding | Command                           | Description                                                         |
|-------------+-----------------------------------+---------------------------------------------------------------------|
| =H-b=         | =M-x frog-jump-buffer=              | Presents a /frog-menu/ for jumping to an open buffer.                 |
| =H-B=         | =M-x frog-jump-buffer-other-window= | Presents a /frog-menu/ for jumping to an open buffer in other window. |
|-------------+-----------------------------------+---------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-frog-jump.el :var file-description="Advanced frog jump buffer setup"
;;
;; Easily hopping between buffers
;;
(use-package frog-jump-buffer
    :after ivy-rich
    :config
        (setq frog-jump-buffer-max-buffers 24)
        (setq frog-jump-buffer-include-current-buffer nil)
        (dolist (regexp '("TAGS" "^\\*Compile-log" "-debug\\*$" "^\\:" "errors\\*$" "^\\*Backtrace" "-ls\\*$"
                  "stderr\\*$" "^\\*Flymake" "^\\*vc" "^\\*Warnings" "^\\*eldoc" "\\^*Shell Command"))
            (push regexp frog-jump-buffer-ignore-buffers))

        (set-face-attribute 'frog-menu-prompt-face nil
                            :foreground "#d0bf8f"
                            :background "#3f3f3f")

        (set-face-attribute 'frog-menu-candidates-face nil
                            :foreground (face-foreground 'default)
                            :background "#3f3f3f")

        (set-face-attribute 'frog-menu-actions-face nil
                            :foreground (face-foreground 'default)
                            :background "#3f3f3f")

        (set-face-attribute 'frog-menu-action-keybinding-face nil
                            :foreground (face-foreground 'default)
                            :background "#3f3f3f")

        (set-face-attribute 'frog-menu-posframe-background-face nil
                            :foreground "#10bf8f"
                            :background "#3f3f3f")

        (set-face-attribute 'frog-menu-border nil
                            :foreground (face-foreground 'default)
                            :background "#3f3f3f")

    :bind (
            ("H-b" . frog-jump-buffer)
            ("H-B" . frog-jump-buffer-other-window)
          )
)
#+end_src

** Completion

Text completion is an important tool for efficient editing and programming. *Psimacs* uses the [[http://company-mode.github.io/][company-mode]] instead
of the [[https://github.com/auto-complete/auto-complete][auto-complete]] package.

*** Auto-Complete :noexport:

[[https://github.com/auto-complete/auto-complete][Auto-Complete]] is an intelligent auto-completion
extension for *Emacs*. It extends the standard *Emacs* completion interface and provides an
environment that allows users to concentrate more on their own work.

| Key binding | Command         | Description          |
|-------------+-----------------+----------------------|
| =C-n=         | =M-x ac-next=     | Next completion.     |
| =C-p=         | =M-x ac-previous= | Previous completion. |
| =ESC=         | =M-x ac-stop=     | Abort completion.    |
|-------------+-----------------+----------------------|

Remark: *Psimacs* uses Company-mode for completion. The following code is used for reference only.

#+begin_src emacs-lisp :tangle config/init-advanced-company.el :var file-description="Advanced company setup"
(use-package auto-complete
    :diminish auto-complete-mode
    :init
        (progn
            (ac-config-default)
            (global-auto-complete-mode t)

            (setq ac-use-menu-map t)
        )

    :bind (
        :map ac-use-menu-map
            ("C-n"      . ac-next)
            ("C-p"      . ac-previous)
            ("<escape>" . ac-stop)
    )
)
#+end_src

*** Company

[[http://company-mode.github.io/][Company]] is a text completion framework for *Emacs*.
The name stands for "complete anything". It uses pluggable back-ends and front-ends to
retrieve and display completion candidates.

It comes with several back-ends such as /Elisp/, /Clang/, /Semantic/, /Eclim/, /Ropemacs/, /Ispell/,
/CMake/, /BBDB/, /YASnippet/, /dabbrev/, /etags/, /gtags/, /files/, /keywords/ and a few others.

See also:
- [[http://company-mode.github.io/][company-mode]]
- [[https://www.emacswiki.org/emacs/CompanyMode][EmacsWiki: Company Mode]]
- [[https://github.com/company-mode/company-mode/wiki/Third-Party-Packages][Third Party Packages]]
- [[https://github.com/company-mode/company-mode/issues/68][Company vs. AutoComplete]]
- [[https://cloudnine.github.io/science/2020-07-27-emacs-company-mode/][Emacs Company Mode]]

| Key binding | Command                        | Description          |
|-------------+--------------------------------+----------------------|
| =C-n=         | =M-x company-select-next=        | Next completion.     |
| =C-p=         | =M-x company-select-previous=    | Previous completion. |
| =ESC=         | =M-x company-abort=              | Abort completion.    |
| =TAB=         | =M-x company-complete-selection= | Complete Selection.  |
|-------------+--------------------------------+----------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-company.el :var file-description="Advanced company setup"
(use-package company
    :diminish company-mode
    :init
        (setq company-dabbrev-ignore-case      nil)
        (setq company-dabbrev-code-ignore-case nil)
        (setq company-dabbrev-downcase         nil)
        (setq company-dabbrev-minimum-length     2)
        (setq company-dabbrev-other-buffers      t)
        (setq company-begin-commands           '(self-insert-command))


        (setq company-idle-delay 0.5)
        (setq company-minimum-prefix-length 1)
        (setq company-require-match nil)
        (setq company-selection-wrap-around t)
        (setq company-tooltip-flip-when-above t)
        (setq company-tooltip-align-annotations t)
        (setq company-show-quick-access t)

    :config

    (setq company-transformers '(psimacs/company/remove-dabbrev-dups-keep-order)) ;; company-sort-by-occurrence

    (defun psimacs/company/remove-dabbrev-dups-keep-order (candidates)
        "Loop over CANDIDATES and remove duplicate candidates if they belong to
`company-dabbrev' or `company-dabbrev-code'."
        (let ( (hash (make-hash-table :test 'equal :size (length candidates)))
               (new-list nil) )
            (dolist (candidate candidates)
                (let ( (stripped-candidate (substring-no-properties candidate))
                       (candidate-backend ( get-text-property 0 'company-backend candidate))
                     )
                    (cond
                        ;; Candidate is `company-yasnippet', always push this.
                        ((eq (get-text-property 0 'company-backend candidate) 'company-yasnippet)
                            (push candidate new-list))
                        ;; Candidate has not been seen.
                        ((not (gethash stripped-candidate hash))
                            (puthash stripped-candidate candidate hash)
                            (push candidate new-list))
                        ;; Candidate has been seen.
                        ;; `company-dabbrev' or `company-dabbrev-code' is the candidate.
                        ((or candidate-backend
                            (eq candidate-backend 'company-dabbrev-code)
                            (eq candidate-backend 'company-dabbrev)
                         ) t)
                        ;; Candidate has been seen but is not `company-dabbrev'
                        ;; or `company-dabbrev-code'.
                        (:seen-but-candidate-not-dabbrev
                            ;; If the candidate in the hash table is dabbrev, replace it.
                            ;; Otherwise, we are fine with duplicates as long as the backends
                            ;; are meaningful.
                            (let* ( (hash-candidate (gethash stripped-candidate hash))
                                    (hash-backend (get-text-property 0 'company-backend hash-candidate))
                                  )
                                (if (or hash-backend
                                        (eq hash-backend 'company-dabbrev)
                                        (eq hash-backend 'company-dabbrev-code) )
                                    (progn
                                        (setcar
                                            (nthcdr
                                                (cl-position hash-candidate new-list :test 'eq)
                                                new-list)
                                            candidate)
                                        (puthash stripped-candidate candidate hash)
                                    t)
                                    ;; Only need one candidate in the hash table.
                                    (push candidate new-list)))))))
            (reverse new-list)
        ))

        (setq company-backends
            '(
                (
                    company-capf                ; completion-at-point-functions
                    company-keywords            ; keywords
                    company-abbrev
                    company-dabbrev-code
                    company-dabbrev
                    company-files               ; files & directory
                    company-ispell              ; ispell
                    company-yasnippet           ; yasnippet
                )
             )
        )

    :hook (after-init . global-company-mode)
    :bind (
        :map company-active-map
            ("C-n"      . company-select-next)
            ("C-p"      . company-select-previous)
            ("<escape>" . company-abort)
            ("<tab>"    . company-complete-selection)
    )
)
#+end_src

**** Company-Box

[[https://github.com/sebastiencs/company-box/][company-box]] provides a [[http://company-mode.github.io/][company]] front-end with icons.

Differences with the built-in front-end:
- Differents colors for differents backends.
- Icons associated to functions/variables/.. and their backends
- Display candidate's documentation (support quickhelp-string)
- Not limited by the current window size, buffer's text properties

#+begin_src emacs-lisp :tangle config/init-advanced-company.el
(use-package company-box
    :diminish company-box-mode
    :hook (company-mode . company-box-mode)
)
#+end_src

**** Company-Statistics

[[https://github.com/company-mode/company-statistics][Company-statistics]] is a global minor mode
built on top of the in-buffer completion system company-mode. The idea is to keep a log of a
certain number of completions you choose, along with some context information, and use that to
rank candidates the next time you have to choose — hopefully showing you likelier candidates at
the top of the list.

#+begin_src emacs-lisp :tangle config/init-advanced-company.el
(use-package company-statistics
    :config
        (setq company-statistics-file psimacs/config/company-statistics-file)
    :hook (after-init . company-statistics-mode)
)
#+end_src

**** Company-Web :noexport:

[[https://github.com/osv/company-web][Company-web]] is an alternative *Emacs* plugin for
auto completion in html-mode, web-mode, jade-mode, slim-mode and use data of ac-html.
It uses  [[http://company-mode.github.io/][company-mode]].

I do not use this package at the moment. Maybe in the future.

#+begin_src emacs-lisp :tangle config/init-advanced-company.el
(use-package company-web)
#+end_src

**** Company-try-hard

[[https://github.com/Wilfred/company-try-hard][company-try-hard]] is a package that enhances the [[http://company-mode.github.io/][company-mode]]. It provides a =company-complete= alternative
that tries much harder to find completions. If none of the current completions look good, call
the command again to try the next backend.

| Key binding | Command              | Description                                                                                                                  |
|-------------+----------------------+------------------------------------------------------------------------------------------------------------------------------|
| =H-m <tab>= | =M-x company-try-hard= | Try hard to find a completion. If none of the current completions look good, call the command again to try the next backend. |
|-------------+----------------------+------------------------------------------------------------------------------------------------------------------------------|


#+begin_src emacs-lisp :tangle config/init-advanced-company.el
(use-package company-try-hard
    :bind
        (
            ("H-m <tab>" . company-try-hard)
            :map company-active-map
                ("H-m <tab>" . company-try-hard)
        )
)
#+end_src

*** Snippets

The package [[https://github.com/joaotavora/yasnippet][Yasnippet]] provides a template
system for *Emacs*. It allows you to type an abbreviation and automatically expand it
into function templates.

Bundled language templates include:
- [[https://en.wikipedia.org/wiki/C_(programming_language)][C]]
- [[https://en.wikipedia.org/wiki/C%2B%2B][C++]]
- [[https://en.wikipedia.org/wiki/C_Sharp_(programming_language)][C#]]
- [[https://en.wikipedia.org/wiki/Perl][Perl]]
- [[https://en.wikipedia.org/wiki/Python_(programming_language)#Usage][Python]]
- [[https://en.wikipedia.org/wiki/Ruby_(programming_language)][Ruby]]
- [[https://en.wikipedia.org/wiki/SQL][SQL]]
- [[https://en.wikipedia.org/wiki/LaTeX][LaTeX]]
- [[https://en.wikipedia.org/wiki/HTML][HTML]]
- [[https://en.wikipedia.org/wiki/CSS][CSS]]

See also:
- [[https://www.emacswiki.org/emacs/Yasnippet][EmacsWiki: Yasnippet]]
- [[http://ergoemacs.org/emacs/emacs_templates.html][Using Templates with YASnippet]]
- [[https://joaotavora.github.io/yasnippet/][Yet another snippet extension]]
- [[http://www.howardism.org/Technical/Emacs/templates-tutorial.html][Having Emacs Type for You]]
- [[https://arjanvandergaag.nl/blog/using-yasnippet-in-emacs.html][Using YASnippet in Emacs]]

#+attr_html: :class styledtable1
| Key binding | Command                               | Description                                                                                                                                                                                                           |
|-------------+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-x x=       | =M-x yas-insert-snippet=                | Choose a snippet to expand, popup a list of choices according.                                                                                                                                                        |
|-------------+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-c & C-n=   | =M-x yas-new-snippet=                   | Creates a new buffer with a template for making a new snippet.                                                                                                                                                        |
| =C-c & C-v=   | =M-x yas-visit-snippet-file=            | Prompts you for possible snippet expansions and takes you directly to the snippet definition's file, if it exists.                                                                                                    |
|-------------+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-c C-l=     | =M-x yas-load-snippet-buffer=           | Prompts for a snippet table and loads the snippet currently being edited.                                                                                                                                             |
| =C-c C-c=     | =M-x yas-load-snippet-buffer-and-close= | Prompts for a snippet table and loads the snippet currently being edited. Also saves the snippet and calls quit-window. The destination is decided based on the chosen snippet table and snippet collection directly. |
| =C-c C-t=     | =M-x yas-tryout-snippet=                | When editing a snippet, this opens a new empty buffer, sets it to the appropriate major mode and inserts the snippet there, so you can see what it looks like.                                                        |
|-------------+---------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-yasnippet.el :var file-description="Advanced yasnippet setup"
;;
;; yasnipped is a template system for Emacs
;;
(use-package yasnippet
    :diminish yas-minor-mode
    :commands (
                yas-load-snippet-buffer-and-close
                yas-load-snippet-buffer
                yas-tryout-snippet
                yas-new-snippet
                yas-describe-tables
                yas-visit-snippet-file
                yas-load-directory
                yas-activate-extra-mode
                yas--templates-for-key-at-point
                yas-reload-all
               )
    :config
        (unless (file-directory-p psimacs/config/snippets-dir)
            (make-directory psimacs/config/snippets-dir t))

        (setq yas-snippet-dirs '(psimacs/config/snippets-dir))

        (yas-global-mode t)
        (yas-reload-all)

        (defun psimacs/config/internal/force-yasnippet-off ()
            (setq-local yas-dont-activate-functions t)
            (yas-minor-mode -1))

        (defvar psimacs/yasnippet/internal/cursor-color (face-attribute 'cursor :background))

        (defun psimacs/yasnippet/can-fire-p (&optional field)
          "Test whether it can expand, if yes, cursor color -> green.

Change the cursor color when at a point that can expand a macro (and back again when there is no macro)."
            (interactive)
            (setq yas--condition-cache-timestamp (current-time))
            (let (templates-and-pos)
                (unless (and yas-expand-only-for-last-commands
                             (not (member last-command yas-expand-only-for-last-commands)))
                    (setq templates-and-pos (if field
                                              (save-restriction
                                                  (narrow-to-region (yas--field-start field) (yas--field-end field))
                                                  (yas--templates-for-key-at-point))
                                             (yas--templates-for-key-at-point))))

                (set-cursor-color (if (and templates-and-pos (first templates-and-pos))
                                      "#d65d0e"
                                    psimacs/yasnippet/internal/cursor-color
                                    ))
            ))

    :hook (
           ((term-mode shell-mode) . psimacs/config/internal/force-yasnippet-off)
           (post-command . psimacs/yasnippet/can-fire-p)
           )

    :after hydra
    :bind (
            :map psimacs/config/global-key-map/execute
                 ("x" . yas-insert-snippet)
            :map psimacs/config/global-key-map/hydra ("y" . psimacs/hydra/yasnippet/body)
          )
    :hydra (psimacs/hydra/yasnippet (:color pink :hint nil)
          "
YASnippets:

 ^ ^Modes:     ^ ^Load/Visit:         ^ ^Actions:
-^-^-----------^-^--------------------^-^--------------------
 _g_: global   _d_: load directory    _n_: new
 _m_: minor    _v_: visit snippet     _i_: insert
 _e_: extra    _D_: describe tables   _t_: tryout
 ^ ^           _r_: reload all        _l_: load buffer
 _q_: quit     ^ ^                    _c_: load buffer & save
"
          ("g" yas-global-mode)
          ("m" yas-minor-mode)
          ("e" yas-activate-extra-mode)
          ("q" nil :color blue)

          ("d" yas-load-directory)
          ("v" yas-visit-snippet-file :color blue)
          ("D" yas-describe-tables)
          ("r" yas-reload-all)

          ("n" yas-new-snippet)
          ("i" yas-insert-snippet :color blue)
          ("t" yas-tryout-snippet :color blue)
          ("l" yas-load-snippet-buffer)
          ("c" yas-load-snippet-buffer-and-close)
        )
)

(use-package yasnippet-snippets
    :after yasnippet
    :config
        (yasnippet-snippets-initialize)
)


(use-package doom-snippets
    :after yasnippet
    :straight (doom-snippets :type git :host github :repo "hlissner/doom-snippets" :files ("*.el" "*"))
)
#+end_src

** Auto-YASnippet

[[https://github.com/abo-abo/auto-yasnippet][Auto-YASnippet]] is a hybrid of keyboard macros and YASnippet.
You create the snippet on the go and it'll be ready to use immediately. Because you're not leaving the
current buffer the workflow is very fast.

#+attr_html: :class styledtable1
| Key binding | Command                     | Description                                                                                                                                                     |
|-------------+-----------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =H-m C-y w=   | =M-x aya-create=              | Create a snippet from the text between BEG and END.                                                                                                             |
| =H-m C-y TAB= | =M-x aya-expand=              | Insert the last yasnippet created by =aya-create=.                                                                                                                |
| =H-m C-y SPC= | =M-x aya-expand-from-history= | Select and insert a yasnippet from the =aya-history=.                                                                                                             |
| =H-m C-y d=   | =M-x aya-delete-from-history= | Select and delete one or more snippets from =aya-history=.                                                                                                        |
| =H-m C-y c=   | =M-x aya-clear-history=       | Clear =aya-history=.                                                                                                                                              |
| =H-m C-y n=   | =M-x aya-next-in-history=     | Set =aya-current= to the next item in history. Wraps at the end of history.                                                                                       |
| =H-m C-y p=   | =M-x aya-previous-in-history= | Set =aya-current= to the previous item in history. Wraps around at start of history.                                                                              |
| =H-m C-y s=   | =M-x aya-persist-snippet=     | Save the current auto-snippet to a user snippets folder. The current =major-mode= name will be used to determine the snippets sub-directory to store the snippet. |
| =H-m C-y o=   | =M-x aya-open-line=           | Generic expansion function. It will either expand or move to the next field depending on the context.                                                           |
|-------------+-----------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-yasnippet.el :var file-description="Advanced yasnippet setup"
;;
;; yasnipped is a template system for Emacs
;;
(use-package auto-yasnippet
    :config

    :bind (
        :map psimacs/config/global-key-map/special
            ("C-y w"     . aya-create)
            ("C-y <tab>" . aya-expand)
            ("C-y SPC"   . aya-expand-from-history)
            ("C-y d"     . aya-delete-from-history)
            ("C-y c"     . aya-clear-history)
            ("C-y n"     . aya-next-in-history)
            ("C-y p"     . aya-previous-in-history)
            ("C-y s"     . aya-persist-snippet)
            ("C-y o"     . aya-open-line)
          )
)
#+end_src

** Treemacs

[[https://github.com/Alexander-Miller/treemacs][Treemacs]] is a tree layout file explorer for *Emacs*.

| Key bindings | Description                  |
|--------------+------------------------------|
| =?=            | Summon the helpful hydra.    |
| =n=            | Next item.                   |
| =p=            | Previous item.               |
| =M-n=          | Next item on same level.     |
| =M-p=          | Previous item on same level. |
| =u=            | Parent item.                 |
| =C-n=          | Next project.                |
| =C-p=          | Previous project.            |
| =o=            | Open...                      |
| =q=            | Quit [[https://github.com/Alexander-Miller/treemacs][treemacs]].               |
|--------------+------------------------------|

#+attr_html: :class styledtable1
| Key binding   | Command                           | Description                                                          |
|---------------+-----------------------------------+----------------------------------------------------------------------|
| =H-m C-x C-t=   | =M-x treemacs=                      | Open [[https://github.com/Alexander-Miller/treemacs][treemacs]].                                                       |
| =H-m C-x t t=   | =M-x treemacs-select-window=        | Select the [[https://github.com/Alexander-Miller/treemacs][treemacs]] window.                                          |
| =H-m C-x t 1=   | =M-x treemacs-delete-other-windows= | Same as =delete-other-window= but does not delete the [[https://github.com/Alexander-Miller/treemacs][treemacs]] window. |
| =H-m C-x t B=   | =M-x treemacs-bookmark=             | Find a bookmark in [[https://github.com/Alexander-Miller/treemacs][treemacs]].                                         |
| =H-m C-x t C-t= | =M-x treemacs-find-file=            | Find and focus the current file in the current [[https://github.com/Alexander-Miller/treemacs][treemacs]] window.      |
| =H-m C-x t M-t= | =M-x treemacs-find-tag=             | Find and move the point to the tag at point in the [[https://github.com/Alexander-Miller/treemacs][treemacs]] view.    |
|---------------+-----------------------------------+----------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-treemacs.el :var file-description="Advanced treemacs setup"
;;
;; Treemacs provided project centric tree browsing
;;
(use-package treemacs
    :config
        (setq treemacs-space-between-root-nodes nil
              treemacs-persist-file             psimacs/config/treemacs-persist-file
              treemacs-last-error-persist-file  psimacs/config/treemacs-last-error-persist-file)

    :bind (
        :map psimacs/config/global-key-map/special
            ("C-x C-t"   . treemacs)
            ("C-x t t"   . treemacs-select-window)
            ("C-x t 1"   . treemacs-delete-other-windows)
            ("C-x t B"   . treemacs-bookmark)
            ("C-x t C-t" . treemacs-find-file)
            ("C-x t M-t" . treemacs-find-tag)
        )
)
#+end_src

** Neotree

Package [[https://github.com/jaypei/emacs-neotree][Neotree]] provides a file tree browser for *Emacs*.
File tree browser.

Bindings in the [[https://github.com/jaypei/emacs-neotree][Neotree]] buffer:

| Key bindings | Description                                                                       |
|--------------+-----------------------------------------------------------------------------------|
| =n=            | Next item.                                                                        |
| =p=            | Previous item.                                                                    |
| =SPC=          | Open current item if it is a file. Fold/Unfold current item if it is a directory. |
| =RET=          | Same as =SPC=.                                                                      |
| =TAB=          | Same as =SPC= and =RET=.                                                              |
| =O=            | Recursively open a directory.                                                     |
| =U=            | Up diretory.                                                                      |
| =g=            | Refresh.                                                                          |
| =A=            | Maximize/Minimize [[https://github.com/jaypei/emacs-neotree][Neotree]] window.                                                 |
| =H=            | Toggle display of hidden files.                                                   |
| =C-c C-n=      | Create a file or create a directory if filename ends with a '/'.                  |
| =C-c C-d=      | Delete a file or directory.                                                       |
| =C-c C-r=      | Rename a file or directory.                                                       |
| =C-c C-c=      | Change the root directory.                                                        |
| =C-c C-p=      | Copy a file or directory.                                                         |
|--------------+-----------------------------------------------------------------------------------|

Global bindings:

| Key binding | Command            | Description   |
|-------------+--------------------+---------------|
| =H-m C-x C-n= | =M-x neotree-toggle= | Open [[https://github.com/jaypei/emacs-neotree][Neotree]]. |
|-------------+--------------------+---------------|

#+begin_src emacs-lisp :tangle config/init-advanced-neotree.el :var file-description="Advanced neotree setup"
;;
;; Neotree provides classis file and directory browsing
;;
(use-package neotree
    :config
        (setq neo-theme 'icons neo-smart-open t)
    :bind (
        :map psimacs/config/global-key-map/special
            ("C-x C-n" . neotree-toggle)
        )
)
#+end_src

** AI Tools

Setup of some AI tools for assisting work.

*** gtel : A simple LLM client for Emacs

[[https://github.com/karthink/gptel][gptel]] is a simple LLM client for Emacs.

#+begin_src emacs-lisp :tangle config/init-advanced-ai.el :var file-description="Advanced AI setup"
(use-package gptel
  :straight t
  :init
    (setq gptel-model "gpt-3.5-turbo"
          gptel-default-mode 'org-mode
          gptel-api-key #'(lambda () (psimacs/config/read-key-value-from-file "Psimacs GPT API KEY" psimacs/config/keys-file))
    )
)
#+end_src

** Project Management

Project management is important in order to be able to  work with projects that consist of many files and that
have special project related rules.

*** Projectile

One of the most important thing to install at first is [[https://github.com/bbatsov/projectile][projectile]],
for manage projects in *Emacs*.

[[https://github.com/bbatsov/projectile][Projectile]] is a project interaction library for Emacs.
Its goal is to provide a nice set of features operating on a project level without introducing
external dependencies. This library provides easy project management and navigation.

The concept of a project is pretty basic - just a folder containing special file.

See also:
- [[https://github.com/bbatsov/projectile][Projectile]]
- [[https://docs.projectile.mx/projectile][Docs]]

Only the basic commands:
#+attr_html: :class styledtable1
| Key binding | Command                       | Description                                   |
|-------------+-------------------------------+-----------------------------------------------|
| =C-c p f=     | =M-x projectile-find-file=      | Find file in current project                  |
| =C-c p p=     | =M-x projectile-switch-project= | Switch project                                |
| =C-c p s g=   | =M-x projectile-grep=           | Grep in project                               |
| =C-c p r=     | =M-x projectile-replace=        | Replace in project                            |
| =C-c p m=     | =M-x projectile-commander=      | Invoke a command via the Projectile Commander |
|-------------+-------------------------------+-----------------------------------------------|

All bound commands:
#+attr_html: :class styledtable1
| Key binding   | Command                                                    | Description                                                                                                                    |
|---------------+------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------|
| =C-c p f=       | =M-x projectile-find-file=                                   | Display a list of all files in the project. With a prefix argument it will clear the cache first.Find file in current project. |
| =C-c p F=       | =M-x projectile-find-file-in-known-projects=                 | Display a list of all files in all known projects.                                                                             |
| =C-c p g=       | =M-x projectile-find-file-dwim=                              | Display a list of all files at point in the project. With a prefix argument it will clear the cache first.                     |
| =C-c p 4 f=     | =M-x projectile-find-file-other-window=                      | Jump to a project's file using completion and show it in another window.                                                       |
| =C-c p 4 g=     | =M-x projectile-find-file-dwim-other-window=                 | Jump to a project's file based on context at point and show it in another window.                                              |
| =C-c p 5 f=     | =M-x projectile-find-file-other-frame=                       | Jump to a project's file using completion and show it in another frame.                                                        |
| =C-c p 5 g=     | =M-x projectile-find-file-dwim-other-frame=                  | Jump to a project's file based on context at point and show it in another frame.                                               |
| =C-c p a=       | =M-x projectile-find-other-file=                             | Switch between files with the same name but different extensions.                                                              |
| =C-c p 4 a=     | =M-x projectile-find-other-file-other-window=                | Switch between files with the same name but different extensions in other window.                                              |
| =C-c p 5 a=     | =M-x projectile-find-other-file-other-frame=                 | Switch between files with the same name but different extensions in other frame.                                               |
| =C-c p l=       | =M-x projectile-find-file-in-directory=                      | Display a list of all files in a directory (that's not necessarily a project).                                                 |
| =C-c p e=       | =M-x projectile-recentf=                                     | Shows a list of recently visited project files.                                                                                |
| =C-c p d=       | =M-x projectile-find-dir=                                    | Display a list of all directories in the project. With a prefix argument it will clear the cache first.                        |
| =C-c p 4 d=     | =M-x projectile-find-dir-other-window=                       | Switch to a project directory and show it in another window.                                                                   |
| =C-c p 5 d=     | =M-x projectile-find-dir-other-frame=                        | Switch to a project directory and show it in another frame.                                                                    |
| =C-c p D=       | =M-x projectile-dired=                                       | Opens the root of the project in dired.                                                                                        |
| =C-c p 4 D=     | =M-x projectile-dired-other-window=                          | Opens the root of the project in dired in another window.                                                                      |
| =C-c p 5 D=     | =M-x projectile-dired-other-frame=                           | Opens the root of the project in dired in another frame.                                                                       |
| =C-c p j=       | =M-x projectile-find-tag=                                    | Find tag in project.                                                                                                           |
| =C-c p T=       | =M-x projectile-find-test-file=                              | Display a list of all test files(specs, features, etc) in the project.                                                         |
|---------------+------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------|
| =C-c p s g=     | =M-x projectile-grep=                                        | Run grep on the files in the project.                                                                                          |
| =M-- C-c p s g= |                                                            | Run grep on projectile-grep-default-files in the project.                                                                      |
|---------------+------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------|
| =C-c p v=       | =M-x projectile-vc=                                          | Run vc-dir on the root directory of the project.                                                                               |
| =C-c p V=       | =M-x projectile-browse-dirty-projects=                       | Browse dirty version controlled projects.                                                                                      |
| =C-c p I=       | =M-x projectile-ibuffer=                                     | Open an IBuffer window showing all buffers in the current project.                                                             |
| =C-c p b=       | =M-x projectile-switch-to-buffer=                            | Display a list of all project buffers currently open.                                                                          |
| =C-c p 4 b=     | =M-x projectile-switch-to-buffer-other-window=               | Switch to a project buffer and show it in another window.                                                                      |
| =C-c p 5 b=     | =M-x projectile-switch-to-buffer-other-frame=                | Switch to a project buffer and show it in another frame.                                                                       |
| =C-c p 4 C-o=   | =M-x projectile-display-buffer=                              | Display a project buffer in another window without selecting it.                                                               |
| =C-c p k=       | =M-x projectile-kill-buffer=                                 | Kills all project buffers.                                                                                                     |
| =C-c p o=       | =M-x projectile-multi-occur=                                 | Runs multi-occur on all project buffers currently open.                                                                        |
| =C-c p r=       | =M-x projectile-replace=                                     | Runs interactive query-replace on all files in the projects.                                                                   |
| =C-c p R=       | =M-x projectile-regenerate-tags=                             | Regenerate the project's tags.                                                                                                 |
| =C-c p s r=     | =M-x projectile-ripgrep=                                     | Run a Ripgrep search with 'SEARCH-TERM' at current root.                                                                       |
| =C-c p i=       | =M-x projectile-invalidate-cache=                            | Invalidates the project cache (if existing).                                                                                   |
| =C-c p p=       | =M-x projectile-switch-project=                              | Display a list of known projects you can switch to.                                                                            |
| =C-c p S=       | =M-x projectile-save-project-buffers=                        | Save all project buffers.                                                                                                      |
| =C-c p <left>=  | =M-x projectile-previous-project-buffer=                     | Switch to the previous project buffer.                                                                                         |
| =C-c p <right>= | =M-x projectile-next-project-buffer=                         | Switch to the next project buffer.                                                                                             |
| =C-c p q=       | =M-x projectile-switch-open-project=                         | Switch to a project we have currently opened.                                                                                  |
| =C-c p ESC=     | =M-x projectile-project-buffers-other-buffer=                | Switch to the most recently selected Projectile buffer.                                                                        |
| =C-c p E=       | =M-x projectile-edit-dir-locals=                             | Opens the root dir-locals-file of the project.                                                                                 |
|---------------+------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------|
| =C-c p s s=     | =M-x projectile-ag=                                          | Runs ag on the project, performing a literal search.                                                                           |
| =C-c p !=       | =M-x projectile-run-shell-command-in-root=                   | Runs shell-command in the root directory of the project.                                                                       |
| =C-c p x s=     | =M-x projectile-run-shell=                                   | Invoke 'shell' in the project's root.                                                                                          |
| =C-c p x v=     | =M-x projectile-run-vterm=                                   | Invoke 'vterm' in the project's root.                                                                                          |
| =C-c p x e=     | =M-x projectile-run-eshell=                                  | Invoke 'eshell' in the project's root.                                                                                         |
| =C-c p u=       | =M-x projectile-run-project=                                 | Run project run command.                                                                                                       |
| =C-c p P=       | =M-x projectile-test-project=                                | Run project test command.                                                                                                      |
| =C-c p x g=     | =M-x projectile-run-gdb=                                     | Invoke 'gdb' in the project root.                                                                                              |
| =C-c p &=       | =M-x projectile-run-async-shell-command-in-root=             | Runs async-shell-command in the root directory of the project.                                                                 |
|---------------+------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------|
| =C-c p C=       | =M-x projectile-configure-project=                           | Runs a standard configure command for your type of project.                                                                    |
| =C-c p c=       | =M-x projectile-compile-project=                             | Runs a standard compilation command for your type of project.                                                                  |
| =C-c p L=       | =M-x projectile-install-project=                             | Run project install command.                                                                                                   |
| =C-c p K=       | =M-x projectile-package-project=                             | Run project package command.                                                                                                   |
|---------------+------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------|
| =C-c p t=       | =M-x projectile-toggle-between-implementation-and-test=      | Toggle between an implementation file and its test file.                                                                       |
| =C-c p 4 t=     | =M-x projectile-find-implementation-or-test-other-window=    | Jump to implementation or test file in other window.                                                                           |
| =C-c p 5 t=     | =M-x projectile-find-implementation-or-test-other-frame=     | Jump to implementation or test file in other frame.                                                                            |
| =C-c p z=       | =M-x projectile-cache-current-file=                          | Adds the currently visited file to the cache.                                                                                  |
| =C-c p m=       | =M-x projectile-commander=                                   | Execute a Projectile command with a single letter.                                                                             |
|---------------+------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------|
| =C-c p C-e e c= | =M-x psimacs/projectile/create-projectile-envrc-emscripten=  | Write a =.projectile-envrc= file for [[https://emscripten.org/][Emscripten]] support into the current projectile project root.                                |
| =C-c p C-e e d= | =M-x psimacs/projectile/destroy-projectile-envrc-emscripten= | Remove the .projectile-envrc file for [[https://emscripten.org/][Emscripten]] from the current projectile project root.                                     |
|---------------+------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------|

Special global commands:
#+attr_html: :class styledtable1
| Key binding | Command                                             | Description                                             |
|-------------+-----------------------------------------------------+---------------------------------------------------------|
| =C-c p C-n=   | =M-x psimacs/projectile/create-empty-projectile-file= | Choose diretory and create an empty '.projectile' file. |
|-------------+-----------------------------------------------------+---------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-projectile.el :var file-description="Advanced projectile setup"
;;
;; Create a marker file that is recognized by projectile
;;
(defun psimacs/projectile/create-empty-projectile-file ()
    "Choose diretory and create an empty `.projectile' file.

The file is only created if it does not already exist."
    (interactive)
    (let* ((file (concat (psimacs/file-system/choose-directory default-directory) ".projectile")))
        (unless (file-exists-p file)
            (with-temp-buffer (write-file file))
        )
    )
)
#+end_src


#+begin_src emacs-lisp :tangle config/init-advanced-projectile.el
;;
;; Configure the projectile package
;;
(use-package projectile
    ;:diminish projectile-mode
    :commands projectile-kill-buffer
    :hook ((text-mode cmake-mode prog-mode) . projectile-mode)
    :bind (
            :map projectile-mode-map
                ("C-c p"     . projectile-command-map)
                ("C-c p C-n" . psimacs/projectile/create-empty-projectile-file)
            :map projectile-command-map
                ("C-e e c"   . psimacs/projectile/create-projectile-envrc-emscripten)
                ("C-e e d"   . psimacs/projectile/destroy-projectile-envrc-emscripten)
          )
    :init
        (setq projectile-mode-line-prefix " ℘")
        ;(setq projectile-require-project-root nil)
        (setq projectile-indexing-method 'native)
        ;(setq projectile-indexing-method 'alien) ; Warning: The contents of .projectile are ignored when using the alien project indexing method.

        ;(setq projectile-sort-order 'default)
        ;(setq projectile-sort-order 'recentf)
        ;(setq projectile-sort-order 'recently-active)
        ;(setq projectile-sort-order 'modification-time)

        (setq projectile-known-projects-file psimacs/config/projectile-known-projects-file)
        (setq projectile-cache-file          psimacs/config/projectile-cache-file)

    :config
        (setq projectile-project-search-path psimacs/config/project-search-path)
        (setq projectile-globally-ignored-files '(
                "TAGS" "\#*\#" "*~" "*.la" "*.o" "*.pyc" "*.elc" "*.exe"
                "*.zip" "*.tar.*" "*.rar" "*.7z"
                "*.aux" "*.log" "*.out" "*.pdf"
            )
        )

        (defun psimacs/projectile/create-projectile-envrc-emscripten ()
            "Write a .projectile-envrc file in the current projectile project root."
            (interactive)
            (when (projectile-project-p)
                (projectile-with-default-dir
                    (if (projectile-project-p)
                        (projectile-project-root) default-directory)

                    (let* ((file (concat (projectile-project-root) ".projectile-envrc")))
                        (unless (file-exists-p file)
                            (with-temp-buffer
                                (insert "#\n")
                                (insert "# Emscripten support for this project.\n")
                                (insert "#\n")
                                (dolist (x psimacs/config/emscripten-env)
                                    (let* (
                                            (action   (symbol-name (car x)))
                                            (varname  (car (cdr x)))
                                            (varvalue (car (cdr (cdr x))))
                                          )
                                        (insert (format "%s %s = %s\n" action varname varvalue))
                                    )
                                )
                                (write-region (point-min)
                                    (point-max) file t)
                            )
                        )
                    )
                )
            )
        )

        (defun psimacs/projectile/destroy-projectile-envrc-emscripten ()
            "Remove the .projectile-envrc file in the current projectile project root."
            (interactive)
            (when (projectile-project-p)
                (projectile-with-default-dir
                    (if (projectile-project-p)
                        (projectile-project-root) default-directory)

                    (let* ((file (concat (projectile-project-root) ".projectile-envrc")))
                        (when (file-exists-p file)
                            (delete-file file)
                        )
                    )
                )
            )
        )

        ;(projectile-mode 1)
)
#+end_src

**** projectile-envrc

The package [[https://github.com/hatlafax/projectile-envrc][projectile-envrc]] allows setting, modifying and removing of
process environment variables from a simple '.projectile-envrc' description file that resides in the projectile project
root directory.

The file format for '.projectile-envrc' is quite simple:
Only lines that begin with '+', '-', '*:' or ':*' are
considered. Everything else is ignored.

| Specifier | Description                                   |
|-----------+-----------------------------------------------|
| =+=         | Add variable/value to the process environent. |
| =-=         | Remove variable from the process environent.  |
| ~*:~        | Prepend to the process environment variable.  |
| =:*=        | Append to the process environment variable.   |
|-----------+-----------------------------------------------|

Example '.projectile-envrc' file:

#+begin_example
    #
    # Hi there this is ignored
    #

    +TIK = Hallo World
    +TAK = "A small test"
    *:PATH = c:/utils/testA
    *:PATH = c:/utils/testB
    :*PATH = c:/utils/testC
    :*PATH = c:/utils/testD
    +TOK   = c:/utils/testE
    -OSG_LOG_FILE
    +TOE   = c:/utils/testF
#+end_example

#+begin_src emacs-lisp :tangle config/init-advanced-projectile.el
(use-package projectile-envrc
    :straight (projectile-envrc :host github :repo "hatlafax/projectile-envrc")
    ;:straight nil
    :after projectile
    :config
        (setq projectile-envrc-silenced nil)
)
#+end_src

**** projectile-cmake

The package [[https://github.com/hatlafax/projectile-cmake][projectile-cmake]] gives fine grained support of [[https://cmake.org/][CMake]] with Emacs projectile.

#+attr_html: :class styledtable1
| Key binding   | Command                                                      | Description                                                                               |
|---------------+--------------------------------------------------------------+-------------------------------------------------------------------------------------------|
| =C-c C-p s C=   | =M-x projectile-cmake-select-configuration=                    | Select the cmake configuration data. Convenience function calling other /select/ functions. |
|---------------+--------------------------------------------------------------+-------------------------------------------------------------------------------------------|
| =C-c C-p s d=   | =M-x projectile-cmake-select-build-dir=                        | Select the current project build dir.                                                     |
| =C-c C-p s t=   | =M-x projectile-cmake-select-build-type=                       | Select the current project build type.                                                    |
| =C-c C-p s g=   | =M-x projectile-cmake-select-generator=                        | Select the current project configuration generator.                                       |
| =C-c C-p s a=   | =M-x projectile-cmake-select-architecture=                     | Select the current project configuration architecture.                                    |
| =C-c C-p s s=   | =M-x projectile-cmake-select-toolset=                          | Select the current project configuration toolset.                                         |
| =C-c C-p s c=   | =M-x projectile-cmake-select-toolchain=                        | Select the current project configuration toolchain.                                       |
| =C-c C-p s r g= | =M-x projectile-cmake-select-run-file=                         | Select the file that should be run for the project.                                       |
| =C-c C-p s r d= | =M-x projectile-cmake-select-run-file-debug=                   | Select the file that should be run for the debug project.                                 |
| =C-c C-p s r r= | =M-x projectile-cmake-select-run-file-release=                 | Select the file that should be run for the release project.                               |
| =C-c C-p s r i= | =M-x projectile-cmake-select-run-file-release-with-debug-info= | Select the file that should be run for the release with debug info project.               |
| =C-c C-p s r m= | =M-x projectile-cmake-select-run-file-minimal-size-release=    | Select the file that should be run for the minimal size release project.                  |
| =C-c C-p t d=   | =M-x projectile-cmake-toggle-run-in-build-dir=                 | Toggle the run in build directory flag variable.                                          |
|---------------+--------------------------------------------------------------+-------------------------------------------------------------------------------------------|
| =C-c C-p h=     | =M-x hydra-projectile-cmake/body=                              | Hydra for projectile-cmake.                                                               |
|---------------+--------------------------------------------------------------+-------------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-projectile.el
;;
;; Configure the projectile-cmake package
;;
(use-package projectile-cmake
    :diminish projectile-cmake-mode
    :straight (projectile-cmake :host github :repo "hatlafax/projectile-cmake")
    ;:straight nil
    :bind (
            :map projectile-cmake-mode-map
                ("C-c C-p" . projectile-cmake-command-map)
            :map projectile-cmake-command-map
                ("h" . hydra-projectile-cmake/body)
            :map psimacs/config/global-key-map/hydra
                ("C-p" . hydra-projectile-cmake/body)
          )
    :hook (projectile-mode . projectile-cmake-global-mode)
    :init
        (setq projectile-cmake-executable           psimacs/config/cmake-runtime-exe)
        (setq projectile-emcmake-executable         psimacs/config/emscripten-emcmake-exe)
        (setq projectile-cmake-clang-c-executable   psimacs/config/clang-c-compiler-runtime-exe)
        (setq projectile-cmake-clang-c++-executable psimacs/config/clang-c++-compiler-runtime-exe)
    :config
        (defun psimacs/config/projectile-cmake--set-all-commands-lsp-clients-clangd-args(&optional evaluate)
          "Adds or updates to .dir-locals.el the variable \\='lsp-clients-clangd-args\\=' variable in \\='c++-mode\\='
           wrspt. to the \\='--compile-commands-dir\\=' argument."
          (interactive)
          (when (projectile-cmake-valid-p)
            (let* (
                   (build-dir   (projectile-cmake-project-build-dir))
                   (entry       (concat "--compile-commands-dir=" build-dir))
                   (clangd-args lsp-clients-clangd-args)
                  )

              (unless (seq-find (lambda (cand)
                                  (string-equal entry cand)) clangd-args)
                (if (seq-find (lambda (cand)
                                (message "=> %s" cand)
                                (string-prefix-p "--compile-commands-dir=" cand)) clangd-args)
                    (setq clangd-args (cl-subst entry "--compile-commands-dir=" clangd-args :test #'string-prefix-p))
                  ;;(add-to-list 'clangd-args entry))
                  (cl-pushnew entry clangd-args))

                (save-current-buffer
                  (add-dir-local-variable 'c++-mode 'lsp-clients-clangd-args clangd-args)

                  (unless evaluate
                    (save-buffer)
                    (kill-buffer)

                    (projectile-cmake-dir-locals-reload-for-all-buffer-in-this-directory)
                    )))))
          )

        (advice-add 'projectile-cmake--set-all-commands :after #'psimacs/config/projectile-cmake--set-all-commands-lsp-clients-clangd-args)
)
#+end_src

**** CANCELED projectile-b2

Attention: This is work in progress and currently not publicly available.

The package [[https://github.com/hatlafax/projectile-b2][projectile-b2]] gives fine grained support of [[https://www.bfgroup.xyz/b2/][B2]] with Emacs projectile.

#+begin_src emacs-lisp :tangle config/init-advanced-projectile.el
;;
;; Configure the projectile-cmake package
;;
(when (and (file-directory-p psimacs/config/work-lisp-dir)
           (file-exists-p (psimacs/file-system/concat-file psimacs/config/work-lisp-dir "projectile-b2.el")))

(use-package projectile-b2
    :diminish projectile-b2-mode
    ;:straight (projectile-b2 :host github :repo "hatlafax/projectile-b2")
    :straight nil
    :defines (
              projectile-b2-boost-build
              projectile-b2-place-site-config-into-home
              projectile-b2-executable
              projectile-b2-mode-map
              projectile-b2-command-map
             )
    :bind (
            :map projectile-b2-mode-map
                ("C-c C-p" . projectile-b2-command-map)
            :map projectile-b2-command-map
                ("h" . hydra-projectile-b2/body)
            :map psimacs/config/global-key-map/hydra
                ("C-P" . hydra-projectile-b2/body)
          )
    :hook (projectile-mode . projectile-b2-global-mode)
    :config
        (setq projectile-b2-boost-build (psimacs/file-system/concat-directory psimacs/config/b2-share-dir "boost-build/src/kernel"))
        (setq projectile-b2-place-site-config-into-home t)
        ;(setq projectile-b2-root-file "Jamroot.jam")
        ;(setq projectile-b2-jamfile "Jamfile.jam")
        (setq projectile-b2-executable psimacs/config/b2-runtime-exe)
)

)
#+end_src

**** Counsel-projectile

Projectile has native support for using ivy as its completion system.
[[https://github.com/ericdanan/counsel-projectile][Counsel-projectile]] provides further ivy integration into projectile by
taking advantage of ivy's support for selecting from a list of actions
and applying an action without leaving the completion session.
Concretely, counsel-projectile defines replacements for existing
projectile commands as well as new commands that have no projectile counterparts.

#+begin_src emacs-lisp :tangle config/init-advanced-projectile.el
;;
;; counsel support for projectile
;;
(use-package counsel-projectile
    :after (projectile)
    :config (counsel-projectile-mode)
)
#+end_src

**** Treemacs-projectile

The package [[https://github.com/Alexander-Miller/treemacs/blob/master/src/extra/treemacs-projectile.el][treemacs-projectile]] is a small package that contains some utility functions that simplify adding your
[[https://github.com/bbatsov/projectile][projectile]] projects to [[https://github.com/Alexander-Miller/treemacs][treemacs]].

| Key binding | Command                 | Description                                                     |
|-------------+-------------------------+-----------------------------------------------------------------|
| =H-m C-x t p= | =M-x treemacs-projectile= | Add one of =projectile-known-projects= to the [[https://github.com/Alexander-Miller/treemacs][treemacs]] workspace. |
|-------------+-------------------------+-----------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-projectile.el
(use-package treemacs-projectile
    :after treemacs projectile
    :bind (
        :map psimacs/config/global-key-map/special
            ("C-x t p"   . treemacs-projectile)
        )
)
#+end_src

** Dashboard

The [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]] is an extensible *Emacs* startup screen showing you what's most important.

| Key binding | Command                                        | Description                |
|-------------+------------------------------------------------+----------------------------|
| =C-<f8>=      | =M-x psimacs/dashboard/open-dashboard=           | Open the dashboard.        |
|-------------+------------------------------------------------+----------------------------|
| =H=           | =M-x psimacs/dashboard/homepage=                 | Open the *Psimacs* homepage. |
| =R=           | =M-x psimacs/dashboard/restore-previous-session= | Restore previous session.  |
| =L=           | =M-x psimacs/dashboard/restore-session=          | Restore session.           |
| =S=           | =M-x psimacs/dashboard/open-custom-file=         | Open the =Custom.el= file.   |
| =q= =Q=         | =M-x psimacs/dashboard/quit-dashboard=           | Quit the dashboard.        |
| =h=           | =M-x psimacs/hydra/dashboard/body=               | Open dashboard hydra.      |
| =?=           | =M-x psimacs/hydra/dashboard/body=               | Open dashboard hydra.      |
|-------------+------------------------------------------------+----------------------------|
| =r=           | =M-x psimacs/dashboard/goto-recent-files=        | Goto recent file section.  |
| =m=           | =M-x psimacs/dashboard/goto-bookmarks=           | Goto bookmarks section.    |
| =p=           | =M-x psimacs/dashboard/goto-projects=            | Goto projects section.     |
| =a=           | =M-x psimacs/dashboard/goto-agendas=             | Goto agenda section.       |
| =e=           | =M-x psimacs/dashboard/goto-registers=           | Goto register section.     |
|-------------+------------------------------------------------+----------------------------|
| =<ret>=       | =M-x dashboard-return=                           | Open item.                 |
| =<tab>= =C-i=   | =M-x widget-forward=                             | Next item.                 |
| =S-<tab>=     | =M-x widget-backward=                            | Previous item.             |
|-------------+------------------------------------------------+----------------------------|
| =j= =C-n=       | =M-x dashboard-next-line=                        | Next line.                 |
| =k= =C-p=       | =M-x dashboard-previous-line=                    | Previous line.             |
|-------------+------------------------------------------------+----------------------------|

Dashboard hyda bindings:

| Key binding | Command                                        | Description                 |
|-------------+------------------------------------------------+-----------------------------|
| =H=           | =M-x psimacs/dashboard/homepage=                 | Open the *Psimacs* homepage.  |
| =R=           | =M-x psimacs/dashboard/restore-previous-session= | Restore previous session.   |
| =L=           | =M-x psimacs/dashboard/restore-session=          | Restore session.            |
| =S=           | =M-x psimacs/dashboard/open-custom-file=         | Open the =Custom.el= file.    |
| =q=           |                                                | Quit hydra                  |
|-------------+------------------------------------------------+-----------------------------|
| =r=           | =M-x psimacs/dashboard/goto-recent-files=        | Goto recent file section.   |
| =m=           | =M-x psimacs/dashboard/goto-bookmarks=           | Goto bookmarks section.     |
| =p=           | =M-x psimacs/dashboard/goto-projects=            | Goto projects section.      |
| =a=           | =M-x psimacs/dashboard/goto-agendas=             | Goto agenda section.        |
| =e=           | =M-x psimacs/dashboard/goto-registers=           | Goto register section.      |
|-------------+------------------------------------------------+-----------------------------|
| =<ret>=       | =M-x dashboard-return=                           | Open item.                  |
| =<tab>= =C-i=   | =M-x widget-forward=                             | Next item.                  |
| =S-<tab>=     | =M-x widget-backward=                            | Previous item.              |
|-------------+------------------------------------------------+-----------------------------|
| =j= =C-n=       | =M-x dashboard-next-line=                        | Next line.                  |
| =k= =C-p=       | =M-x dashboard-previous-line=                    | Previous line.              |
|-------------+------------------------------------------------+-----------------------------|
| =C-<f8>=      | =M-x psimacs/dashboard/open-dashboard=           | Open the dashboard.         |
| =g=           | =M-x dashboard-refresh-buffer=                   | Refresh dashboard contents. |
| =Q=           | =M-x psimacs/dashboard/quit-dashboard=           | Quit dashboard.             |
|-------------+------------------------------------------------+-----------------------------|

*** Page-break lines

The [[https://github.com/purcell/page-break-lines][page-break-lines]] package provides a global mode which displays ugly form feed characters
as tidy horizontal rules.

| Key binding | Command           | Description                     |
|-------------+-------------------+---------------------------------|
| =C-x ]=       | =M-x forward-page=  | Move forward to page boundary.  |
| =C-x [=       | =M-x backward-page= | Move backward to page boundary. |
|-------------+-------------------+---------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-dashboard.el :var file-description="Advanced dashboard setup"
;;
;; Don't display ugly from feed characters
;;
(use-package page-break-lines
    :diminish page-break-lines-mode
;    :config
;        (global-page-break-lines-mode)
)
#+end_src

*** Dashboard Setup

And the final [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]] configuration.

#+begin_src emacs-lisp :tangle config/init-advanced-dashboard.el :var file-description="Advanced dashboard setup"
;;
;; The dashboard configuration
;;
(use-package dashboard
    :demand t
    :after page-break-lines
    :diminish dashboard-mode
    :functions (all-the-icons-faicon
                all-the-icons-material
                winner-undo
                widget-forward
                persp-load-state-from-file
               )
    :defines (  persp-save-dir
                persp-auto-save-fname
              )
    :custom-face (dashboard-heading ((t (:inherit (font-lock-string-face bold)))))
    :hook (dashboard-mode . (lambda () (setq-local frame-title-format "")))
    :config
        (setq dashboard-page-separator "\n\f\n")

        (setq dashboard-projects-backend 'projectile)
        (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))

        (setq dashboard-banner-logo-title "PSIMACS - Don't Panic!")
        (setq dashboard-startup-banner (or psimacs/config/logo-file 'official))

        (setq dashboard-center-content t)
        (setq dashboard-show-shortcuts nil)

        (setq dashboard-set-heading-icons t)
        (setq dashboard-set-file-icons t)

        (setq dashboard-heading-icons '(
                                            (recents   . "file-text")
                                            (bookmarks . "bookmark")
                                            (projects  . "briefcase")
                                            (agenda    . "calendar")
                                            (registers . "database")
                                       ))

        (setq dashboard-items '(
                                (recents   . 10)
                                (bookmarks .  5)
                                (projects  . 10)
                                (agenda    .  5)
                                (registers .  5)
                               ))

        (setq dashboard-startupify-list
                              '(dashboard-insert-banner
                                ;dashboard-insert-newline
                                ;dashboard-insert-banner-title
                                dashboard-insert-newline
                                dashboard-insert-navigator
                                dashboard-insert-newline
                                dashboard-insert-init-info
                                dashboard-insert-items
                                dashboard-insert-newline
                                dashboard-insert-footer))




        ;; Format: "(icon title help action face prefix suffix)"
        (setq dashboard-navigator-buttons
              `(
                (
                   (,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
                    "Homepage"
                    "Browse homepage"
                    (lambda (&rest _) (browse-url psimacs/config/homepage)))
                   (,(all-the-icons-material "restore" :height 1.35 :v-adjust -0.24)
                    "Restore"
                    "Restore previous session"
                    (lambda (&rest _) (psimacs/dashboard/restore-previous-session)))
                   (,(all-the-icons-octicon "tools" :height 1.0 :v-adjust 0.0)
                    "Settings"
                    "Open custom file"
                    (lambda (&rest _) (find-file psimacs/config/custom-file)))
                   (,(all-the-icons-faicon "question" :height 1.2 :v-adjust -0.1)
                    ""
                    "Help (?/h)"
                    (lambda (&rest _) (psimacs/hydra/dashboard/body))
                    font-lock-string-face)
                )
              ))

        (setq dashboard-init-info "Don't panic!")
        (setq dashboard-footer-messages '("Psimacs is pretty cool!"))
        (setq dashboard-footer-icon (all-the-icons-octicon "dashboard"
                                        :height 1.1
                                        :v-adjust -0.05
                                        :face 'font-lock-keyword-face))

        (setq dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)

        (setq dashboard-week-agenda t)
        (setq dashboard-org-agenda-categories '("Tasks" "Appointments"))
        ;(setq dashboard-filter-agenda-entry dashboard-no-filter-agenda)

        (dashboard-setup-startup-hook)

        (defvar psimacs/config/dashboard-recover-layout-p nil
          "Whether recovers the layout.")

        (defun psimacs/dashboard/browse-homepage ()
          "Browse the Github page of Psimacs."
          (interactive)
          (browse-url psimacs/config/homepage)
        )

        (defun psimacs/dashboard/restore-session (fname)
          "Restore the specified session FNAME."
          (interactive (list (read-file-name "Load perspectives from a file: " persp-save-dir)))
          (when (bound-and-true-p persp-mode)
            (message "Restoring session...")
            (quit-window t)
            (condition-case-unless-debug err
                (persp-load-state-from-file fname)
              (error "Error: Unable to restore session -- %s" err))
            (message "Restoring session...done"))
        )

        (defun psimacs/dashboard/restore-previous-session ()
          "Restore the previous session."
          (interactive)
          (when (bound-and-true-p persp-mode)
            (psimacs/dashboard/restore-session persp-auto-save-fname))
        )

        (defun psimacs/dashboard/open-custom-file ()
          "Open or create `psimacs/config/custom-file'."
          (interactive)
          (when (file-exists-p psimacs/config/custom-file)
            (find-file psimacs/config/custom-file)
           )
        )

        (defun psimacs/dashboard/goto-recent-files ()
          "Go to recent files."
          (interactive)
          (let ((func (local-key-binding "r")))
            (and func (funcall func))))

        (defun psimacs/dashboard/goto-projects ()
          "Go to projects."
          (interactive)
          (let ((func (local-key-binding "p")))
            (and func (funcall func))))

        (defun psimacs/dashboard/goto-bookmarks ()
          "Go to bookmarks."
          (interactive)
          (let ((func (local-key-binding "m")))
            (and func (funcall func))))

        (defun psimacs/dashboard/goto-registers ()
          "Go to registers."
          (interactive)
          (let ((func (local-key-binding "e")))
            (and func (funcall func))))

        (defun psimacs/dashboard/goto-agendas ()
          "Go to agendas."
          (interactive)
          (let ((func (local-key-binding "a")))
            (and func (funcall func))))


        (declare-function dashboard-insert-startupify-lists "dashboard" (&optional ARG))

        (defun psimacs/dashboard/open-dashboard ()
          "Open the *dashboard* buffer and jump to the first widget."
          (interactive)
          ;; Check if need to recover layout
          (if (> (length (window-list-1))
                 ;; exclude `treemacs' window
                 (if (and (fboundp 'treemacs-current-visibility)
                          (eq (treemacs-current-visibility) 'visible))
                     2
                   1))
              (setq psimacs/config/dashboard-recover-layout-p t))

          (delete-other-windows)

          (switch-to-buffer dashboard-buffer-name)
          (dashboard-mode)
          (dashboard-insert-startupify-lists)
          (dashboard-refresh-buffer)

          ;; Jump to the first section
          (psimacs/dashboard/goto-recent-files)

          ;; Refresh dashboard buffer
          ;(when (get-buffer dashboard-buffer-name)
          ;  (kill-buffer dashboard-buffer-name))

          ;(dashboard-insert-startupify-lists)
          ;(switch-to-buffer dashboard-buffer-name)

          ;; Jump to the first section
          ;(psimacs/dashboard/goto-recent-files)
        )

        (defun psimacs/dashboard/quit-dashboard ()
          "Quit dashboard window."
          (interactive)
          (quit-window t)
          (when (and psimacs/config/dashboard-recover-layout-p
                     (bound-and-true-p winner-mode))
            (winner-undo)
            (setq psimacs/config/dashboard-recover-layout-p nil)))

    :pretty-hydra
        (
         psimacs/hydra/dashboard
         (
          :title (psimacs/config/pretty-hydra-title "Dashboard" 'material "dashboard"
          :height 1.2
          :v-adjust -0.2)
          :color pink
          :quit-key "q"
         )
         ( "Navigator"
           (
             ("H" psimacs/dashboard/browse-homepage          "homepage"           :exit t)
             ("R" psimacs/dashboard/restore-previous-session "restore session"    :exit t)
             ("L" psimacs/dashboard/restore-session          "list sessions"      :exit t)
             ("S" psimacs/dashboard/open-custom-file         "customization file" :exit t)
           )
           "Section"
           (
             ("r" psimacs/dashboard/goto-recent-files "recent files")
             ("m" psimacs/dashboard/goto-bookmarks    "bookmarks")
             ("p" psimacs/dashboard/goto-projects     "projects")
             ("a" psimacs/dashboard/goto-agendas      "agendas")
             ("e" psimacs/dashboard/goto-registers    "registers")
           )
           "Item"
           (
             ("RET"     widget-button-press "open item" :exit t)
             ("<tab>"   widget-forward      "next item")
             ("S-<tab>" widget-backward     "prev item")
           )
           "Line"
           (
             ("j"     dashboard-next-line           "next line")
             ("k"     dashboard-previous-line       "prev line")
           )
           "Misc"
           (
             ("C-<f8>" psimacs/dashboard/open-dashboard "open dashboard"    :exit t)
             ("g"      dashboard-refresh-buffer         "refresh dashboard" :exit t)
             ("Q"      psimacs/dashboard/quit-dashboard "quit dashboard"    :exit t)
             ("q"      nil                              "quit hydra"        :exit t)
           )
         )
        )
    :bind (
           ("C-<f8>" . psimacs/dashboard/open-dashboard)
           :map dashboard-mode-map
           ("H" . psimacs/dashboard/browse-homepage)
           ("R" . psimacs/dashboard/restore-previous-session)
           ("L" . psimacs/dashboard/restore-session)
           ("S" . psimacs/dashboard/open-custom-file)
           ("q" . psimacs/dashboard/quit-dashboard)
           ("Q" . psimacs/dashboard/quit-dashboard)
           ("h" . psimacs/hydra/dashboard/body)
           ("?" . psimacs/hydra/dashboard/body)
          )
)
#+end_src

** Magit

[[https://magit.vc/][Magit]] is an interface to the version control system  [[https://git-scm.com/][Git]] , implemented
as an *Emacs* package.

#+begin_quote
Magit is a complete text-based user interface to Git. It fills the glaring gap between the Git
command-line interface and various GUIs, letting you perform trivial as well as elaborate version
control tasks with just a couple of mnemonic key presses. Magit looks like a prettified version of
what you get after running a few Git commands but in Magit every bit of visible information is also
actionable to an extent that goes far beyond what any Git GUI provides and it takes care of
automatically refreshing this output when it becomes outdated. In the background Magit just runs
Git commands and if you wish you can see what exactly is being run, making it possible for you to
learn the git command-line by using Magit.

Using Magit for a while will make you a more effective version control user.
Magit supports and streamlines the use of Git features that most users and developers of other
Git clients apparently thought could not be reasonably mapped to a non-command-line interface.
Magit is both faster and more intuitive than either the command line or any GUI and these holds
for both Git beginners and experts alike.
#+end_quote

See also:
- [[https://magit.vc/][Magit - A Git Porcelain inside Emacs]]
- [[https://magit.vc/manual/magit/#Top][Manual]]
- [[https://magit.vc/manual/magit-refcard.pdf][Reference Card]]
- [[https://git-scm.com/][Git]]

| Key binding | Command          | Description             |
|-------------+------------------+-------------------------|
| =C-x g=       | =M-x magit-status= | Run git status command. |
|-------------+------------------+-------------------------|

*** Git timemachine

The following utility allows us to =M-x git-timemachine= on a file and use =p=/=n=/=g=/=q= to look
at previous, next, goto arbitrary historic versions, or quit.

See also:
    - [[https://github.com/emacsmirror/git-timemachine][emacsmirror/git-timemachine]]
    - [[https://codeberg.org/pidu/git-timemachine][pidu/git-timemachine]]

#+begin_src emacs-lisp :tangle config/init-advanced-magit.el :var file-description="Advanced magit setup"
(use-package git-timemachine
;    :after magit
;    :straight (git-timemachine :host https://codeberg.org :repo "pidu/git-timemachine")
    :straight nil
    :load-path "./site-lisp/git-timemachine"
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-advanced-magit.el :var file-description="Advanced magit setup"
;;
;; User interface for Git
;;
(use-package magit
    :after transient
    :bind (
             ("C-x g" . magit-status)
         )
    :config

        ;;
        ;; ToDo - setup S&B gitlab repo and torii for convenience
        ;;
        ;;      magit-clone-name-alist

        (add-hook 'git-commit-setup-hook 'flyspell-mode)

)
#+end_src

** Else Mode

Peter Milliken has created a minor mode for *Emacs* called the [[https://github.com/peter-milliken/ELSE][Emacs Language Sensitive Editor (ELSE)]].

#+begin_quote
[[https://github.com/peter-milliken/ELSE][ELSE]] is a minor mode for *Emacs*, designed to work with any major mode. The aim is to provide a seamless mechanism to
generate language constructs easily and intuitively with a minimum of keystrokes and interference with the user.
It's primary application is a minor mode for any programming language (major mode) but it can be used for any editing
task that involves generation of repetitive text/blocks of text e.g. there is a template file for Texinfo mode.
#+end_quote

See also:
- [[https://github.com/hatlafax/ELSE][ELSE fork by me]]
- [[https://github.com/peter-milliken/ELSE][ELSE]]
- [[https://github.com/jschaf/else.el][Emacs Language Sensitive Editor (ELSE)]]
- [[https://www.emacswiki.org/emacs/ElseMode][EmacsWiki: Else Mode]]
- [[http://www.winpaw.com/Else/][Additional Emacs Language Sensitive Editor (ELSE) templates]]
- [[https://github.com/peter-milliken/ELSE/blob/master/else.pdf][Else Documentation]]

#+attr_html: :class styledtable1
| Key binding | Command                            | Description                                                            |
|-------------+------------------------------------+------------------------------------------------------------------------|
| =H-e=         | =M-x else-expand=                    | Expand the placeholder or any preceeding abbreviation at point.        |
| =H-E=         | =M-x else-expand-or-next-expand=     | Expand if possible else move to next and expand this one.              |
| =H-n=         | =M-x else-next=                      | Move 'point' to the 'next' placeholder.                                |
| =H-p=         | =M-x else-previous=                  | Move `point' to the (nth) previous placeholder.                        |
| =H-N=         | =M-x else-expand-or-next-expand=     | Expand if possible else move to next and expand this one.              |
| =H-P=         | =M-x else-expand-or-previous-expand= | Expand if possible else move to previous and expand this one.          |
| =H-C-n=       | =M-x else-kill-or-next-kill=         | Kill if possible else move to next and kill this one.                  |
| =H-C-p=       | =M-x else-kill-or-previous-kill=     | Kill if possible else move to previous and kill this one.              |
| =H-k=         | =M-x else-kill=                      | Kill the placeholder at point.                                         |
| =H-K=         | =M-x psimacs/else/kill-always=       | Like =else-kill= but kills required placeholders without prompting.      |
|-------------+------------------------------------+------------------------------------------------------------------------|
| =H-m C-c m=   | =M-x else-mode=                      | Enable/disable =else-mode=.                                              |
| =H-m C-c e=   | =M-x else-expand=                    | Expand the placeholder or any preceeding abbreviation at point.        |
| =H-m C-c E=   | =M-x else-expand-or-next-expand=     | Expand if possible else move to next and expand this one.              |
| =H-m C-c n=   | =M-x else-next=                      | Move 'point' to the 'next' placeholder.                                |
| =H-m C-c p=   | =M-x else-previous=                  | Move `point' to the (nth) previous placeholder.                        |
| =H-m C-c N=   | =M-x else-expand-or-next-expand=     | Expand if possible else move to next and expand this one.              |
| =H-m C-c P=   | =M-x else-expand-or-previous-expand= | Expand if possible else move to previous and expand this one.          |
| =H-m C-c C-n= | =M-x else-kill-or-next-kill=         | Kill if possible else move to next and kill this one.                  |
| =H-m C-c C-p= | =M-x else-kill-or-previous-kill=     | Kill if possible else move to previous and kill this one.              |
| =H-m C-c k=   | =M-x else-kill=                      | Kill the placeholder at point.                                         |
| =H-m C-c K=   | =M-x psimacs/else/kill-always=       | Like =else-kill= but kills required placeholders without prompting.      |
| =H-m C-c C-c= | =M-x else-template-compile-buffer=   | Compile the whole current buffer.                                      |
|             | =M-x else-compile-buffer=            | Compile the language template definitions.                             |
|             | =M-x else-extract-placeholder=       | Place the definition of an placeholder into the buffer at point.       |
|             | =M-x else-extract-all=               | Extract the full language definition at point.                         |
|             | =M-x else-show-placeholder-names=    | Display info on all Placeholders in the current language template set. |
|-------------+------------------------------------+------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-else-mode.el :var file-description="Advanced else-mode setup"
;;
;; Emacs Language Sensitive Editor
;;
(use-package else-mode
    :diminish (else-mode else-template-mode)
    ;:straight nil
    ;:load-path "./work-lisp/ELSE"
    ;:straight (else :host github :repo "hatlafax/ELSE" :branch "feature/fix-menu-redirection" :build (:not compile))
    :straight (else :host github :repo "hatlafax/ELSE" :build (:not compile))
    ;:straight (else :host github :repo "peter-milliken/ELSE" :branch "beforeafter" :build (:not compile))
    :defines (else-fast-load-directory
              else-kill-proceed-to-next-placeholder
              else-only-proceed-within-window
              else-menu-linking-default
              else-menu-mode-map
             )
    :commands (else-mode
               else-compile-buffer
               else-template-mode
               else-template-compile-buffer
               else-extract-placeholder
               else-extract-all
               else-show-placeholder-names
               else-expand-or-next-expand
               else-expand-or-previous-expand
               else-kill-or-next-kill
               else-kill-or-previous-kill
              )
    :init
        ;; avoid messing up key bindings C-c /...
        (setq else-mode-key-map nil)

        (let ((else-src (psimacs/file-system/concat-directory psimacs/config/straight-dir "repos/ELSE")))
          (psimacs/config/add-to-info-system
                (psimacs/file-system/concat-file else-src "else.info")
                "* ELSE: (else.info).            Emacs Language Sensitive Editor.\n"
                psimacs/config/emacs-info-dir
                psimacs/config/emacs-info-file)

          ;;
          ;; Copy *.lse files into load path directory.
          ;;
          (psimacs/file-system/copy-files else-src "^.*\\.lse$" psimacs/config/else-lse-pkg-dir t nil)
        )

        (when (file-directory-p psimacs/config/else-lse-dir)
          (add-to-list 'load-path psimacs/config/else-lse-dir))

        (when (file-directory-p psimacs/config/else-lse-pkg-dir)
          (add-to-list 'load-path psimacs/config/else-lse-pkg-dir))

        (when (file-directory-p psimacs/config/else-extension-dir)
          (add-to-list 'load-path psimacs/config/else-extension-dir))

    :config
        (unless (file-directory-p psimacs/config/else-esl-dir)
          (make-directory psimacs/config/else-esl-dir t))

        (setq else-fast-load-directory psimacs/config/else-esl-dir)
        (setq else-kill-proceed-to-next-placeholder t)
        (setq else-only-proceed-within-window t)
        (setq else-menu-linking-default nil)

        (defun psimacs/else/kill-always ()
          "Like `else-kill' but kills required placeholders without prompting."
          (interactive)
          (else-kill 'force))

        (defun psimacs/else/compile-buffer ()
            "Compile the language template definitions from `point' to the end.

This derivation of the `else-compile-buffer' function additionally saves the point.
"
            (interactive)
            (else-compile-buffer t)
        )

        (define-key else-menu-mode-map (kbd "C-n") 'popup-next)
        (define-key else-menu-mode-map (kbd "C-p") 'popup-previous)

        (require 'else-template-mode)

        (when (and (file-directory-p psimacs/config/else-extension-dir)
                   (file-exists-p (psimacs/file-system/concat-file psimacs/config/else-extension-dir "else-placeholder-extensions.el"))
              )
            (require 'else-placeholder-extensions)
        )

        (when (and (file-directory-p psimacs/config/work-lisp-dir)
                   (file-exists-p (psimacs/file-system/concat-file psimacs/config/work-lisp-dir "else-test-functions.el"))
              )
            (require 'else-test-functions)
        )

        (defun psimacs/else/transform-insert-year (_str)
            (format-time-string "%Y")
        )

        (defun psimacs/else/transform-insert-date (_str)
            (format-time-string "%d.%m.%Y")
        )

        (defun psimacs/else/transform-insert-buffer-name (_str)
            (buffer-name)
        )

        (defun psimacs/else/transform-insert-buffer-basename (_str)
            (file-name-sans-extension (buffer-name))
        )

        (defun psimacs/else/transform-insert-author (_str)
            psimacs/config/copyright/author
        )

    :after hydra

    ;; Disable automatic else-mode activation. If active, there are problems with org-mode building
    ;;:hook ((emacs-lisp-mode sh-mode c-mode c++-mode python-mode perl-mode LaTeX-mode Java-mode) . else-mode)
    :hook ((c-mode c++-mode python-mode perl-mode LaTeX-mode Java-mode) . else-mode)
    :bind (
             :map else-mode-key-map
             ("H-n"   . else-next)
             ("H-p"   . else-previous)
             ("H-N"   . else-expand-or-next-expand)
             ("H-P"   . else-expand-or-previous-expand)
             ("H-C-n" . else-kill-or-next-kill)
             ("H-C-p" . else-kill-or-previous-kill)
             ("H-e"   . else-expand)
             ("H-E"   . else-expand-or-next-expand)
             ("H-k"   . else-kill)
             ("H-K"   . psimacs/else/kill-always)

             :map psimacs/config/global-key-map/hydra ("e" . psimacs/hydra/else/body)
             :map psimacs/config/global-key-map/special
                  ("C-c m"   . else-mode)
                  ("C-c e"   . else-expand)
                  ("C-c E"   . else-expand-or-next-expand)
                  ("C-c n"   . else-next)
                  ("C-c p"   . else-previous)
                  ("C-c N"   . else-expand-or-next-expand)
                  ("C-c P"   . else-expand-or-previous-expand)
                  ("C-c C-n" . else-kill-or-next-kill)
                  ("C-c C-p" . else-kill-or-previous-kill)
                  ("C-c k"   . else-kill)
                  ("C-c K"   . psimacs/else/kill-always)
                  ("C-c C-c" . else-template-compile-buffer)
         )

    :hydra (psimacs/hydra/else (:color pink :hint nil)
          "
Emacs Language Sensitive Editor:
-^-^------------------^-^-----^-^-------------------------^-^---------------------
 _m_: ELSE mode       _p_ ◄ ►   _n_: prev/next          _x_: extract placeholder
 _T_: Template mode   _P_ ◄ ►   _N_: prev-/next-expand  _X_: extract all
 _C_: compile buffer  ^ ^       _e_: expand             _s_: show placeholders
 ^ ^                  ^ ^       _E_: next-expand
 _q_: quit            ^ ^       _k_: kill
 ^ ^                  ^ ^       _K_: kill always
 ^ ^                _C-p_ ◄ ► _C-n_: prev-/next-kill
"
          ("m"    else-mode)
          ("T"    else-template-mode)
          ("n"    else-next :color blue)
          ("p"    else-previous :color blue)
          ("N"    else-expand-or-next-expand :color blue)
          ("P"    else-expand-or-previous-expand :color blue)
          ("C-n"  else-kill-or-next-kill :color blue)
          ("C-p"  else-kill-or-previous-kill :color blue)
          ("e"    else-expand :color blue)
          ("E"    else-expand-or-next-expand :color blue)
          ("k"    else-kill :color blue)
          ("K"    psimacs/else/kill-always :color blue)
          ("C"    else-template-compile-buffer)
          ("x"    else-extract-placeholder)
          ("X"    else-extract-all)
          ("s"    else-show-placeholder-names)
          ("q" nil :color blue)
        )
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-advanced-else-mode.el :var file-description="Advanced else-mode setup"
(use-package else-plus :straight nil :after else-mode)
#+end_src

#+begin_src emacs-lisp :tangle config/init-advanced-else-mode.el :var file-description="Advanced else-mode setup"
(use-package else-popup-2 :straight nil :after else-mode)
#+end_src

#+begin_src emacs-lisp :tangle config/init-advanced-else-mode.el :var file-description="Advanced else-mode setup"
(use-package else-completing-read :straight nil :after else-mode)
#+end_src

#+begin_src emacs-lisp :tangle config/init-advanced-else-mode.el :var file-description="Advanced else-mode setup"
(use-package else-ivy :straight nil :after else-mode)
#+end_src

** Image+

The package [[https://github.com/mhayashi1120/Emacs-imagex][image+]] works with an ImageMagick installation and allows you the manipulation of images.

#+begin_src emacs-lisp :tangle config/init-advanced-image+-mode.el :var file-description="Advanced image+-mode setup"
;;
;; Allows the manipulation of images.
;;
(use-package image+
    :init
        (eval-after-load 'image '(require 'image+))

        (setenv "PATH" (concat (getenv "PATH")
                            ";" psimacs/config/image-magick-dir
                            ";" psimacs/config/image-magick-dir "modules/coders"
                            ";" psimacs/config/image-magick-dir "modules/filters"
                        ))

        (if psimacs/system/is-win32-p
            (progn
              (setq imagex-convert-command  (concat psimacs/config/image-magick-dir  "convert.exe"))
              (setq imagex-identify-command (concat psimacs/config/image-magick-dir "identify.exe"))
            )
          (progn
            (setq imagex-convert-command  "convert")
            (setq imagex-identify-command "identify")
          ))

    :after hydra
    :bind (
            :map psimacs/config/global-key-map/hydra ("C-i" . psimacs/hydra/image+/body)
          )
    :hydra (psimacs/hydra/image+ (:color pink :hint nil)
            "Image+

"
            ("+" imagex-sticky-zoom-in          "zoom in"  :column "Zoom")
            ("-" imagex-sticky-zoom-out         "zoom out" :column "Zoom")
            ("M" imagex-sticky-maximize         "maximize" :column "Zoom")
            ("O" imagex-sticky-restore-original "restore original" :column "Zoom")
            ("S" imagex-sticky-save-image       "save file" :column "Save")
            ("r" imagex-sticky-rotate-right     "rotate right" :column "Rotate")
            ("l" imagex-sticky-rotate-left      "rotate left" :column "Rotate")
            ("q" nil "quit" :color blue :column "Save")
        )
)
#+end_src


** Emacs Application Framework :noexport:

The package [[https://github.com/emacs-eaf/emacs-application-framework][eaf]] provides a free/libre and open-source extensible framework that
revolutionizes the graphical capabilities of Emacs, the key to ultimately Live in Emacs.

#+begin_quote
The vision of the Emacs Application Framework (EAF) project is that, while fully retaining
the rich history, culture and ecosystem of Emacs and Emacs Lisp, to open up completely new
doors to the ecosystems of Python, Qt5, and even JavaScript. EAF extends Emacs to the
world of modern graphics, but still preserving the extensibility and customizability of
Emacs, it will be the key to ultimately Live in Emacs.
#+end_quote

#+begin_src emacs-lisp :tangle config/init-advanced-eaf-mode.el :var file-description="Advanced eaf-mode setup"
;;
;; Emacs Application Framework
;;
(defun psimacs/config/eaf-install-deps(app-dir)
  "Install deps from dependencies.json from APP-DIR."
  (let* ((deps-dict (with-temp-buffer
                      (insert-file-contents (expand-file-name "dependencies.json" app-dir))
                      (json-parse-string (buffer-string))))
         (pip-deps    (gethash "win32" (or (gethash "pip" deps-dict) (make-hash-table))))
         (vue-install (gethash "vue_install" deps-dict))
         (npm-install (gethash "npm_install" deps-dict))
         (npm-rebuild (gethash "npm_rebuild" deps-dict))
         (npm-cmd (if (memq system-type '(cygwin windows-nt ms-dos)) "npm.cmd" "npm")))
    (when pip-deps
      (dolist (pkg (append pip-deps nil))
        (message "%s" (shell-command-to-string (format "pip install %s" pkg)))))
    (when vue-install
      (let ((default-directory app-dir))
        (message "%s" (shell-command-to-string (format "%s install" npm-cmd)))
        (message "%s" (shell-command-to-string (format "%s run build" npm-cmd)))))
    (when npm-install
      (let ((default-directory app-dir))
        (message "%s" (shell-command-to-string (format "%s install" npm-cmd)))))
    (when npm-rebuild
      (let ((default-directory app-dir))
        (message "%s" (shell-command-to-string (format "%s rebuild" npm-cmd)))))))

(use-package eaf
  :straight (eaf :type git :host github :repo "emacs-eaf/emacs-application-framework"
                 :files ("*")
                 :post-build '(psimacs/config/python-runtime-exe "install-eaf.py" "--install-core-deps"))
  :config
    (when psimacs/system/is-win32-p
      (setq eaf-wm-name "windows")
    )

    (setq eaf-config-location psimacs/config/eaf-config-location)
    (setq eaf-python-command psimacs/config/python-runtime-exe)
)

(use-package eaf-demo
  :after (eaf)
  :straight (eaf-demo :type git
                      :host github
                      :repo "emacs-eaf/eaf-demo"
                      :files ("*")
            )
)

(use-package eaf-browser
  :after (eaf)
  :straight (eaf-browser :type git
                         :host github
                         :repo "emacs-eaf/eaf-browser"
                         :files ("*")
                         :post-build (psimacs/config/eaf-install-deps (straight--build-dir "eaf-browser"))
            )
  :custom (eaf-browser-continue-where-left-off t)
          (eaf-browser-enable-adblocker t)
          ;(browse-url-browser-function 'eaf-open-browser)
          ;; ToDo: EAF does not work currently, Please Solve
          ;; https://github.com/emacs-eaf/emacs-application-framework/issues/943
          ;; (browse-url-browser-function 'eaf-open-browser)

  :config (defalias 'browse-web #'eaf-open-browser)
          ;(eaf-bind-key take_photo "p" eaf-camera-keybinding)
          ;(eaf-bind-key nil "M-q" eaf-browser-keybinding)
          (setq eaf-browser-remember-history nil)
          ;(setq eaf-browser-default-search-engine "duckduckgo")
          ;(setq eaf-browse-blank-page-url "https://duckduckgo.com")
          ;(setq eaf-browser-default-zoom 1.25)
          ;(setq eaf-browser-enable-plugin nil)
          ;(setq eaf-browser-enable-javascript nil)
          ;(setq eaf-camera-save-path "new/path/")
          (setq eaf-browser-dark-mode-theme 'light)
          ;(setq eaf-browser-dark-mode nil)
)

(use-package eaf-pdf-viewer
  :after (eaf)
  :straight (eaf-pdf-viewer :type git
                            :host github
                            :repo "emacs-eaf/eaf-pdf-viewer"
                            :files ("*")
                            :post-build (psimacs/config/eaf-install-deps (straight--build-dir "eaf-pdf-viewer"))
            )
  :config (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
          (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
)

(use-package eaf-markdown-previewer
  :after (eaf)
  :straight (eaf-markdown-previewer :type git
                                    :host github
                                    :repo "emacs-eaf/eaf-markdown-previewer" :files ("*")
                                    :post-build (psimacs/config/eaf-install-deps (straight--build-dir "eaf-markdown-previewer"))
            )
)

(use-package eaf-camera
  :after (eaf)
  :straight (eaf-camera :type git
                        :host github
                        :repo "emacs-eaf/eaf-camera"
                        :files ("*")
                        ;:post-build (psimacs/config/eaf-install-deps (straight--build-dir "eaf-camera"))
            )
)

(use-package eaf-terminal
  :after (eaf)
  :straight (eaf-terminal :type git
                          :host github
                          :repo "emacs-eaf/eaf-terminal"
                          :files ("*")
                          ;:post-build (psimacs/config/eaf-install-deps (straight--build-dir "eaf-terminal"))
            )
)
#+end_src

** Graphviz-dot-mode

[[https://github.com/ppareit/graphviz-dot-mode][Graphviz-dot-mode]] is a package supporting working with [[https://graphviz.org/][Graphviz]] DOT-format files.

#+begin_src emacs-lisp :tangle config/init-advanced-graphviz-dot-mode.el :var file-description="Advanced graphviz-dot-mode setup"
;;
;; Support working with Graphviz DOT files
;;
(use-package graphviz-dot-mode
    :config
        (setq graphviz-dot-indent-width 4)
    :mode ("\\.dot\\'" . graphviz-dot-mode)
    :hook
        (graphviz-dot-mode . company-mode)
)
#+end_src

** Voice Coding Support

Attention: This is work in progress and not actually working!!!

References:
- [[https://talonvoice.com/][Talon Voice]]
- [[https://github.com/knausj85/knausj_talon][knausj_talon]]
- [[https://github.com/jcaw/porthole][porthole]]
- [[https://github.com/jcaw/porthole-python-client][porthole-python-client]]
- [[https://pypi.org/project/emacs-porthole/][emacs-porthole on pip]]
- [[https://eschulte.github.io/emacs-web-server/index.html][Emacs-Web-Server]]
- [[https://gitmemories.com/john2x/dank-mode][dank-mode]] shows how to install web-server with straight.

#+begin_src emacs-lisp :tangle config/init-advanced-voice-assistance.el :var file-description="Advanced voice assistance setup"
;;
;; Support for voice assisted codeing
;;
(use-package web-server
  :defer t
  :straight (web-server :host github :repo "eschulte/emacs-web-server" :local-repo "web-server")
)

(setq psimacs/porthole/servername "psimacs-porthole-control-server")
;(setq psimacs/porthole/username   "dummy")
;(setq psimacs/porthole/password   "dummy")
;(setq psimacs/porthole/port-nr    8000)

(defun psimacs/config/handle-voice-command (cmd)
  "Handler for voice commands CMD."
  ;;(message cmd)
  (setq unread-command-events
    (nconc (listify-key-sequence (kbd cmd)) unread-command-events))
)

(defun psimacs/config/handle-voice-test-command (cmd)
  "Handler for voice test commands CMD."
  (message cmd)
)

(defun psimacs/config/list-interactive-documented-commands()
  "Get a list of all interactive commands."
  (let ((result))
    (mapatoms
     (lambda (s)
       (when (and (commandp s)
                  (documentation s t)
                  (null (get s 'byte-obsolete-info)))
         (setq result (cons s result)))))
    result
  )
)

(use-package porthole
  :init
    (porthole-start-server
      psimacs/porthole/servername
     ; :PORT psimacs/porthole/port-nr
     ; :USERNAME psimacs/porthole/username
     ; :PASSWORD psimacs/porthole/password
     ; :PUBLISH-PORT nil
     ; :PUBLISH-USERNAME nil
     ; :PUBLISH-PASSWORD nil
    )

    (porthole-expose-function psimacs/porthole/servername 'psimacs/config/handle-voice-command)
    (porthole-expose-function psimacs/porthole/servername 'psimacs/config/handle-voice-test-command)
    (porthole-expose-function psimacs/porthole/servername 'psimacs/config/list-interactive-documented-commands)
    (porthole-expose-function psimacs/porthole/servername 'insert)
)
#+end_src

Python client usage:

#+begin_src shell
pip install emacs-porthole
#+end_src

#+begin_src python
from emacs_porthole import call

result = call("psimacs-porthole-control-server", method="insert", params=["Some text to insert"])
result = call("psimacs-porthole-control-server", method="handle-voice-command", params=["Some text to insert"])
#+end_src

* Programming Support

*Psimacs* provides extended support for programming.

** Commenter

The package [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] help you comment code efficiently.

#+begin_src emacs-lisp :tangle config/init-advanced-programming.el :var file-description="Advanced programming setup"
;;
;; Comment code efficiently
;;
(use-package evil-nerd-commenter
    :bind (
            :map psimacs/config/global-key-map/common
            ("k" . evilnc-comment-or-uncomment-lines)
          )

)
#+end_src

** String Inflection

[[https://github.com/akicho8/string-inflection][String-inflection]] is a nifty package to cycle through string case styles:
/camel/, /snake/, /kebab/... The package includes a handful of cycling functions for
different languages (Ruby, Python and Java), but it's easy to mix and match to roll your own.

#+attr_html: :class styledtable
| Key binding | Command                         | Description                                                              |
|-------------+---------------------------------+--------------------------------------------------------------------------|
| H-m H-l=    | =M-x string-inflection-all-cycle= | foo_bar => FOO_BAR => FooBar => fooBar => foo-bar => Foo_Bar => foo_bar. |
|-------------+---------------------------------+--------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-programming.el :var file-description="Advanced programming setup"
;;
;; A nifty package to cycle through string case styles
;;
(use-package string-inflection
  :bind (:map prog-mode-map
            ("H-m H-l" . string-inflection-all-cycle)
        )
)
#+end_src

** Quick-Peek

The support package [[https://github.com/cpitclaudel/quick-peek][Quick-peek]] provides an inline pop-up library for Emacs Lisp.

See also:
- [[https://github.com/cpitclaudel/quick-peek][Quick-peek]]
- [[https://github.com/alphapapa/org-quick-peek][org-quick-peek]]
- [[https://github.com/alexmurray/flycheck-posframe][flycheck-posframe]]
- [[https://github.com/tumashu/posframe][posframe]]
- [[https://github.com/flycheck/flycheck-inline][flycheck-inline]]

#+begin_src emacs-lisp :tangle config/init-advanced-programming.el :var file-description="Advanced programming setup"
;;
;; Inline pop-up library for Emacs
;;
(use-package quick-peek
    :config
        (set-face-attribute 'quick-peek-border-face nil
            :background "#75b79e"
            :height 0.1)
        (set-face-attribute 'quick-peek-padding-face nil
            :height 0.1)
)
#+end_src

** Flycheck

[[https://www.flycheck.org][Flycheck]] is a modern on-the-fly syntax checking extension for
GNU Emacs, intended as replacement for the older Flymake extension which is part of *Emacs*.

#+begin_src emacs-lisp :tangle config/init-advanced-programming.el :var file-description="Advanced programming setup"
;;
;; A modern on-the-fly syntax checking extension for Emacs
;;
(use-package flycheck
    :diminish flycheck-mode
    :config
        (global-flycheck-mode)
    :custom
        ;(flycheck-emacs-lisp-initialize-packages nil)  ; ??? maybe necessary because of straight, not sure yet
        (flycheck-display-errors-delay .3)

        (flycheck-python-flake8-executable      psimacs/config/flake8-runtime-exe)
        (flycheck-python-pylint-executable      psimacs/config/pylint-runtime-exe)
        (flycheck-python-pycompile-executable   psimacs/config/python-runtime-exe)
        (flycheck-python-mypy-executable        psimacs/config/mypy-runtime-exe)

        ;; Disable for emacs-lisp because of error:
        ;;      Suspicious state from syntax checker emacs-lisp: Flycheck checker emacs-lisp
        ;;      returned 255, but its output contained no errors: End of file during parsing
        ;;
        ;;      Try installing a more recent version of emacs-lisp, and please open a bug report
        ;;      if the issue persists in the latest release.  Thanks!
        ;;
        ;; Test with the next emacs version in the near future. flycheck for emacs-lisp is
        ;; absolut desirable.
        (flycheck-disabled-checkers '(emacs-lisp emacs-lisp-checkdoc))

        (flycheck-disabled-checkers '(python-pyright))

    :bind (
        :map psimacs/config/global-key-map/hydra ("C-f" . psimacs/hydra/flycheck/body)
          )
    :hydra (psimacs/hydra/flycheck
        (:color pink :hint nil)
"
^Flycheck^           ^Errors^           ^Checker^
^-^------------------^-^----------------^-^----------
_v_: verify setup    _p_: previous      _?_: describe
_M_: manual          _n_: next          _d_: disable
^ ^                  _c_: check         _m_: mode
_q_: quit            _l_: list          _s_: select
^ ^                  ^ ^                ^ ^
"
        ("p" flycheck-previous-error)
        ("n" flycheck-next-error)
        ("?" flycheck-describe-checker)
        ("M" flycheck-manual)
        ("d" flycheck-disable-checker)
        ("c" flycheck-buffer)
        ("l" flycheck-list-errors)
        ("m" flycheck-mode)
        ("s" flycheck-select-checker)
        ("v" flycheck-verify-setup)
        ("q" nil :color blue)
    )
)
#+end_src

*** Flycheck Inline

[[https://github.com/flycheck/flycheck-inline][flycheck-inline]] is an extension package for [[https://www.flycheck.org][Flycheck]]. It implements a minor-mode for displaying errors
from Flycheck right below their reporting location, using overlays.

#+begin_src emacs-lisp :tangle config/init-advanced-programming.el
;;
;; Show errors right below of their reporting location
;;
(use-package flycheck-inline
    :after flycheck
    :config
        (add-hook 'flycheck-mode-hook #'flycheck-inline-mode)
)
#+end_src

** Language Server Protcol LSP

The [[https://github.com/Microsoft/language-server-protocol/][Language Server Protocol (v3.14)]] describes an client/server protocol for programming langugage servers and clients.

See also
- [[https://github.com/emacs-lsp/lsp-mode][Language Server Protocol Support for Emacs]],
- [[https://github.com/emacs-lsp][emacs-lsp ]]
- [[https://emacs-lsp.github.io/lsp-mode/][LSP Mode - LSP support for Emacs]]

Remarks:
- =cmake -H. -BDebug -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXPORT_COMPILE_COMMANDS=YES=
- =set(CMAKE_EXPORT_COMPILE_COMMANDS ON)=

*** Dap-Mode

The package [[https://emacs-lsp.github.io/dap-mode/][dap-mode]] provides an *Emacs* client library that allow the communication to a Debug server that supports
the [[https://microsoft.github.io/debug-adapter-protocol/][Debug Adapter Protocol]], which is a wire protocol between the client and the Debug server.  It's similar to the
[[https://emacs-lsp.github.io/lsp-mode/][Lsp-mode]] but provides integration with a debug server.

[[https://emacs-lsp.github.io/dap-mode/][Dap-mode]] provides the following commands:

| Key binding   | Command                               | Description                                                      |
|---------------+---------------------------------------+------------------------------------------------------------------|
| =<f9>=          | =M-x dap-breakpoint-toggle=             | Toggle breakpoint at line.                                       |
| =S-<f9>=        | =M-x dap-breakpoint-delete=             | Delete breakpoint at line.                                       |
| =C-S-<f9>=      | =M-x dap-breakpoint-delete-all=         | Delete all breakpoints.                                          |
| =C-<f9>=        | =M-x dap-breakpoint-add=                | Add breakpoint at line.                                          |
| =M-<f9>=        | =M-x dap-breakpoint-condition=          | Set/unset breakpoint condition.                                  |
| =C-M-<f9>=      | =M-x dap-breakpoint-hit-condition=      | Set/unset breakpoint hit condition.                              |
| =S-M-<f9>=      | =M-x dap-breakpoint-log-message=        | Set/unset breakpoint log message.                                |
|---------------+---------------------------------------+------------------------------------------------------------------|
|               | =M-x dap-eval=                          | Eval string.                                                     |
|               | =M-x dap-eval-region=                   | Eval region string.                                              |
|               | =M-x dap-eval-thing-at-point=           | Eval symbol at point.                                            |
|---------------+---------------------------------------+------------------------------------------------------------------|
| =<f10>=         | =M-x dap-next=                          | Debug next.                                                      |
| =C-<f10>=       | =M-x psimacs/dap/run-to-cursor=         | Add breakpoint at point and continue.                            |
| =<f11>=         | =M-x dap-step-in=                       | Debug step in.                                                   |
| =S-<f11>=       | =M-x dap-step-out=                      | Debug step out.                                                  |
|               | =M-x dap-stop-thread=                   | Stop thread.                                                     |
| =S-<f6>=        | =M-x dap-restart-frame=                 | Restarts current frame.                                          |
| =<f6>=          | =M-x dap-continue=                      | Debug continue.                                                  |
| =S-<f5>=        | =M-x dap-disconnect=                    | Cancel current debug session.                                    |
|               | =M-x dap-switch-stack-frame=            | Switch active stack frame.                                       |
|               | =M-x dap-switch-thread=                 | Switch active thread.                                            |
|               | =M-x dap-switch-session=                | Switch active session.                                           |
|---------------+---------------------------------------+------------------------------------------------------------------|
|               | =M-x dap-debug-edit-template=           | Generate run command.                                            |
| =<f5>=          | =M-x dap-debug=                         | Create and run new configuration using the available templates.  |
| =M-<f5>=        | =M-x dap-debug-last=                    | Debug previous configuration.                                    |
| =C-M-<f5>=      | =M-x dap-debug-recent=                  | Select configuration to run from the previously started command. |
| =C-S-<f5>=      | =M-x dap-debug-restart=                 | Restarts current frame.                                          |
|---------------+---------------------------------------+------------------------------------------------------------------|
|               | =M-x dap-go-to-output-buffer=           | Go output buffer.                                                |
|---------------+---------------------------------------+------------------------------------------------------------------|
|               | =M-x dap-ui-sessions=                   | Show active/terminated sessions view.                            |
|               | =M-x dap-ui-locals=                     | Show locals view.                                                |
|               | =M-x dap-ui-expressions=                | Show expressions view.                                           |
|               | =M-x dap-ui-breakpoints=                | Show breakpoints view.                                           |
|               | =M-x dap-ui-repl=                       | DAP UI REPL.                                                     |
|---------------+---------------------------------------+------------------------------------------------------------------|
|               | =M-x dap-ui-mode=                       | Display the DAP visuals.                                         |
|               | =M-x dap-ui-any-windows-mode=           | Show/Hide the windows from =dap-auto-configure-features=.          |
|               | =M-x dap-ui-show-many-windows=          | Show auto configured feature windows.                            |
|               | =M-x dap-ui-hide-many-windows=          | Hide auto configured feature windows.                            |
|---------------+---------------------------------------+------------------------------------------------------------------|
|               | =M-x dap-tm-loaded-sources=             | Loaded sources can be viewed by invoking this command.           |
|---------------+---------------------------------------+------------------------------------------------------------------|
| =C-c-l <tab>=   | =M-x company-indent-or-complete-common= | Indent the current line or region, or complete the common part.  |
|---------------+---------------------------------------+------------------------------------------------------------------|
| =<f7>=          | =M-x dap-hydra=                         | Opens a [[https://emacs-lsp.github.io/dap-mode/][dap-mode]] hydra.                                          |
| =C-c l C-c h d= | =M-x dap-hydra=                         | Opens a [[https://emacs-lsp.github.io/dap-mode/][dap-mode]] hydra.                                          |
| =H-SPC d=       | =M-x dap-hydra=                         | Opens a [[https://emacs-lsp.github.io/dap-mode/][dap-mode]] hydra.                                          |
|---------------+---------------------------------------+------------------------------------------------------------------|

Breakpoints can be viewed after invoking =dap-ui-breakpoints= with:

| Key binding | Command                                | Description                     |
|-------------+----------------------------------------+---------------------------------|
| =\-RET=       | =M-x dap-ui-breakpoints-goto=            | Go to breakpoint under cursor.  |
| =d=           | =M-x dap-ui-breakpoints-delete=          | Delete breakpoint under cursor. |
| =D=           | =M-x dap-ui-breakpoints-delete-selected= | Delete selected breakpoints.    |
| =m=           | =M-x bui-list-mark=                      | Mark breakpoint under point.    |
| =u=           | =M-x bui-list-unmark=                    | Unmark breakpoint under point.  |
| =U=           | =M-x bui-list-unmark-all=                | Unmark breakpoint under point.  |
|-------------+----------------------------------------+---------------------------------|

[[https://emacs-lsp.github.io/dap-mode/][Dap-mode]] supports =launch.json= files out of the box, and there is nothing that needs to be enabled. All that
needs to be done is to add a =launch.json= file at the project root and to run =dap-debug=.
All configurations stored in the =launch.json= will automatically show up in the selection.
=launch.json= files in [[https://emacs-lsp.github.io/dap-mode/][dap-mode]] are just like in *VSCode* and even support variables.

Remarks:
  - Running =M-x dap-cpptools-setup= is necessary at least once.
  - Running =M-x dap-debug-edit-template= shows a function template to edit for a particular configuration. It looks like
    the following examples.

    #+begin_src emacs-lisp :tangle no
(dap-register-debug-template "My App"
  (list :type "python"
        :args "-i"
        :cwd nil
        :env '(("DEBUG" . "1"))
        :target-module (expand-file-name "~/src/myapp/.env/bin/myapp")
        :request "launch"
        :name "My App"))
    #+end_src

    #+begin_src emacs-lisp :tangle no
(dap-register-debug-template
  "Python :: Run file (buffer)"
  (list :type "python"
        :args ""
        :cwd nil
        :module nil
        :program nil
        :request "launch"
        :name "Python :: Run file (buffer)"))
    #+end_src

    #+begin_src emacs-lisp :tangle no
(dap-register-debug-template
  "Python :: Run file from project directory"
  (list :name "Python :: Run file from project directory"
        :type "python"
        :args ""
        :cwd "${workspaceFolder}"
        :module nil
        :program nil
        :request "launch"))
    #+end_src

    #+begin_src emacs-lisp :tangle no
(dap-register-debug-template
  "Python :: Run pytest (buffer)"
  (list :type "python"
        :args ""
        :cwd nil
        :program nil
        :module "pytest"
        :request "launch"
        :name "Python :: Run pytest (buffer)"))
    #+end_src

    #+begin_src emacs-lisp :tangle no
(dap-register-debug-template
  "cpptools::Run Configuration"
  (list :type "cppdbg"
        :request "launch"
        :name "cpptools::Run Configuration"
        :MIMode "gdb"
        :program "${workspaceFolder}/ replace with your binary"
        :cwd "${workspaceFolder}"))
    #+end_src

    #+begin_src emacs-lisp :tangle no
(dap-register-debug-template
  "Debug Server"
  (list :type "node"
        :request "launch"
        :name "Debug Server"
        :program "${workspaceFolder}/src/server/index.ts"
        :outfiles ["${workspaceFolder}/public/src/server/**/*.js"]
    #+end_src

    It might be a good idea to store such a configuration into a project local =Debug.el= file for
    future usage.

See also:
- [[https://code.visualstudio.com/docs/editor/debugging][launch.json]]
- [[https://code.visualstudio.com/docs/editor/variables-reference][launch.json variables]]
- [[https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/][Configuring Emacs as a C/C++ IDE]]

#+begin_src emacs-lisp :tangle config/init-advanced-lsp-mode.el :var file-description="Advanced lsp-mode setup"
;;
;; Support Debug servers
;;
(use-package dap-mode
    :after lsp-mode
    :commands (dap-mode dap-debug dap-debug-edit-template dap-auto-configure-mode)
    :config
        (dap-auto-configure-mode)
        (setq dap-breakpoints-file    psimacs/config/dap-breakpoints-file)
        (setq dap-ui-repl-history-dir psimacs/config/dap-ui-repl-history-dir)

        ;;(setq dap-auto-configure-features '(sessions locals tooltip))
        ;;(setq dap-auto-configure-features '(sessions locals breakpoints expressions controls tooltip))
        ;;(dap-mode 1)
        ;;(dap-ui-mode 1)
        ;;(dap-tooltip-mode 1)
        ;;(tooltip-mode 1)
        ;;(dap-ui-controls-mode 1)

        (defun psimacs/dap/run-to-cursor ()
          "Run to cursor."
          (interactive)
          ;(save-excursion
            (call-interactively #'dap-breakpoint-add)
            (call-interactively #'dap-continue)
          ;)
        )

    ;; currently I do not like that the hydra is always shown
    ;:hook (
    ;        (dap-stopped . (lambda (arg) (call-interactively #'dap-hydra)))
    ;      )
    :bind (:map dap-mode-map
           ("<f5>"     . dap-debug)
           ("M-<f5>"   . dap-debug-last)
           ("C-M-<f5>" . dap-debug-recent)
           ("C-S-<f5>" . dap-debug-restart)
           ("S-<f5>"   . dap-disconnect)

           ("<f6>"     . dap-continue)
           ("S-<f6>"   . dap-restart-frame)

           ("<f7>"     . dap-hydra)

           ("<f9>"     . dap-breakpoint-toggle)
           ("C-<f9>"   . dap-breakpoint-add)
           ("S-<f9>"   . dap-breakpoint-delete)
           ("C-S-<f9>" . dap-breakpoint-delete-all)
           ("M-<f9>"   . dap-breakpoint-condition)
           ("C-M-<f9>" . dap-breakpoint-hit-condition)
           ("S-M-<f9>" . dap-breakpoint-log-message)

           ("<f10>"    . dap-next)
           ("C-<f10>"  . psimacs/dap/run-to-cursor)
           ("<f11>"    . dap-step-in)
           ("S-<f11>"  . dap-step-out)

           :map lsp-command-map
           ("<tab>"   . company-indent-or-complete-common)
           ("C-c h d" . dap-hydra)

           :map psimacs/config/global-key-map/hydra
           ("d"       . dap-hydra)
         )
)
#+end_src

*** LSP-Mode

[[https://emacs-lsp.github.io/lsp-mode/][Lsp-mode]] is a client for [[https://github.com/Microsoft/language-server-protocol/][Language Server Protocol (v3.14)]]. [[https://emacs-lsp.github.io/lsp-mode/][Lsp-mode]] aims to provide IDE-like experience by providing
optional integration with the most popular Emacs packages like [[https://company-mode.github.io/][company]], [[https://www.flycheck.org][Flycheck]] and [[https://github.com/bbatsov/projectile][projectile]].

Currently, *Psimacs* uses [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] for the following language modes:
- c-mode
- c++-mode
- cmake-mode

Python-mode is handled by [[https://github.com/jorgenschaefer/elpy][elpy]] at the moment. That might be changed in the future.

When using [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] most of the features depend on server capabilities.

[[https://emacs-lsp.github.io/lsp-mode/][Lsp-mode]] provides default bindings which are dynamically enabled/disabled based on the server functionality.
All the commands are configured =lsp-command-map= which is bound to =lsp-keymap-prefix=.

*Psimacs* binds [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] commands to key prefix =C-c l=.

Following a survey of the [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] command bindings:

| Key binding | Command                                   | Description                                                                                  |
|-------------+-------------------------------------------+----------------------------------------------------------------------------------------------|
| =C-c l s s=   | =M-x lsp=                                   | Entry point for the server startup.                                                          |
| =C-c l s r=   | =M-x lsp-workspace-restart=                 | Restart workspace and language server.                                                       |
| =C-c l s q=   | =M-x lsp-workspace-shutdown=                | Shutdown workspace and language server.                                                      |
| =C-c l s d=   | =M-x lsp-describe-session=                  | Describes current session.                                                                   |
| =C-c l s D=   | =M-x lsp-disconnect=                        | Disconnect the buffer from the language server keeping the server running.                   |
| =C-c l = ==   | =M-x lsp-format-buffer=                     | Ask the server to format this document.                                                      |
| =C-c l = r=   | =M-x lsp-format-region=                     | Ask the server to format the region, or if none is selected, the current line.               |
| =C-c l F a=   | =M-x lsp-workspace-folders-add=             | Add new project root to the list of workspace folders.                                       |
| =C-c l F r=   | =M-x lsp-workspace-folders-remove=          | Remove project root from the list of workspace folders.                                      |
| =C-c l F b=   | =M-x lsp-workspace-blacklist-remove=        | Remove project root from the workspace blacklist.                                            |
| =C-c l T a=   | =M-x lsp-modeline-code-actions-mode=        | Toggle code actions on modeline.                                                             |
| =C-c l T b=   | =M-x lsp-headerline-breadcrumb-mode=        | Toggle breadcrumb on headerline.                                                             |
| =C-c l T L=   | =M-x lsp-toggle-trace-io=                   | Toggle client-server protocol logging.                                                       |
| =C-c l T h=   | =M-x lsp-toggle-symbol-highlight=           | Toggle symbol highlighting.                                                                  |
| =C-c l T S=   | =M-x lsp-ui-sideline-mode=                  | Toggle minor mode for showing information for current line in sideline.                      |
| =C-c l T d=   | =M-x lsp-ui-doc-mode=                       | Toggle minor mode for showing hover information in child frame.                              |
| =C-c l T s=   | =M-x lsp-toggle-signature-auto-activate=    | Toggle signature auto activate.                                                              |
| =C-c l T f=   | =M-x lsp-toggle-on-type-formatiing=         | Toggle on type formatting.                                                                   |
| =C-c l T D=   | =M-x lsp-modeline-diagnostics-mode=         | Toggle diagnostics modeline.                                                                 |
| =C-c l T T=   | =M-x lsp-treemacs-sync-mode=                | Toggle global minor mode for synchronizing lsp-mode workspace folders and treemacs projects. |
| =C-c l g g=   | =M-x lsp-find-definition=                   | Find definitions of the symbol under point.                                                  |
| =C-c l g r=   | =M-x lsp-find-references=                   | Find references of the symbol under point.                                                   |
| =C-c l g e=   | =M-x lsp-treemacs-errors-list=              | Display error list.                                                                          |
| =C-c l g d=   | =M-x lsp-find-declaration=                  | Find declarations of the symbol under point.                                                 |
| =C-c l g h=   | =M-x lsp-treemacs-call-hierarchy=           | Show the incoming call hierarchy for the symbol at point.                                    |
| =C-c l g a=   | =M-x xref-find-apropos=                     | Find all meaningful symbols that match pattern.                                              |
| =C-c l G s=   | =M-x lsp-ui-peak-find-workspace-symbol=     | Find symbols in the workspace.                                                               |
| =C-c l h h=   | =M-x lsp-describe-thing-at-point=           | Display the type signature and documentation of the thing at                                 |
| =C-c l h s=   | =M-x lsp-signature-activate=                | Activate signature help.                                                                     |
| =C-c l h g=   | =M-x lsp-ui-doc-glance=                     | Trigger display hover information popup and hide it on next typing.                          |
| =C-c l r r=   | =M-x lsp-rename=                            | Rename the symbol (and all references to it).                                                |
| =C-c l r o=   | =M-x lsp-organize-imports=                  | Perform the source.organizeImports code action, if available.                                |
| =C-c l a a=   | =M-x lsp-execute-code-action=               | Execute code action.                                                                         |
| =C-c l a h=   | =M-x lsp-document-highlight=                | Highlight all relevant references to the symbol at point.                                    |
| =C-c l G g=   | =M-x lsp-ui-peek-find-definitions=          | Peek definitions to the identifier at point.                                                 |
| =C-c l G r=   | =M-x lsp-ui-peek-find-references=           | Peek references to the identifier at point.                                                  |
| =C-c l G s=   | =M-x lsp-ui-peek-workspace-symbol=          | Peek symbols in the workspace.                                                               |
|-------------+-------------------------------------------+----------------------------------------------------------------------------------------------|
| =C-c l C-c i= | =M-x lsp-ui-peek-find-implementation=       | Find implementation locations of the symbol at point.                                        |
| =C-c l C-c m= | =M-x lsp-ui-imenu=                          | Open ui-imenu in side window.                                                                |
| =C-c l C-c d= | =M-x psimacs/lsp-ui-mode/toggle-lsp-ui-doc= | Minor mode for showing information in child frame.                                           |
|-------------+-------------------------------------------+----------------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-lsp-mode.el :var file-description="Advanced lsp-mode setup"
;;
;; Support language servers
;;
(use-package lsp-mode
    :commands (lsp lsp-deferred company-lsp)
    :init
        (setq lsp-log-io nil)

        (setq lsp-keymap-prefix "C-c l")

        (setq lsp-session-file psimacs/config/lsp-session-file)
        (setq lsp-server-install-dir psimacs/config/lsp-server-install-dir)

        ;;(setq lsp-yaml-schema-store-local-db psimacs/config/lsp-yaml-schema-store-local-db-file)

        ;; Don't auto-kill LSP server after last workspace buffer is killed, because I
        ;; will do it for you, after `+lsp-defer-shutdown' seconds.
        (setq lsp-keep-workspace-alive nil)

        ;; Disable features that have great potential to be slow.
        (setq lsp-enable-folding nil
              lsp-enable-text-document-color nil)
        ;; Reduce unexpected modifications to code
        (setq lsp-enable-on-type-formatting nil)
        ;; Make breadcrumbs opt-in; they're redundant with the modeline and imenu
        (setq lsp-headerline-breadcrumb-enable nil)

        (setq lsp-idle-delay 0.500)

        (setq lsp-auto-guess-root t)
        (setq lsp-enable-indentation t)
        (setq lsp-enable-imenu t)
        (setq lsp-file-watch-threshold 15000)
        (setq lsp-prefer-flymake nil)

        (setq lsp-enable-symbol-highlighting t)
        (setq lsp-lens-enable t)
        (setq lsp-modeline-code-actions-enable t)

        (setq lsp-completion-enable t)
        (setq lsp-enable-completion-at-point t)

        (setq lsp-modeline-diagnostics-enable nil)

        (setq lsp-signature-auto-activate nil)
        (setq lsp-modeline-workspace-status-enable t)
        (setq lsp-semantic-tokens-enable t)
        (setq lsp-progress-spinner-type 'progress-bar-filled)
        (setq lsp-enable-file-watchers t)

        ;;(setq lsp-auto-execute-action nil)
        ;;(setq lsp-before-save-edits nil)
        ;;(setq lsp-eldoc-enable-hover nil)
        ;;(setq lsp-diagnostic-package :none)
        (setq lsp-completion-provider :none)
        ;;(setq lsp-enable-links nil)
        ;;(setq lsp-clients-python-library-directories '("/usr/local/" "/usr/"))
    :config
        ;; Mark lsp-clients-clangd-args as safe to override.
        (put 'lsp-clients-clangd-args 'safe-local-variable #'consp)

        (setq lsp-use-plists t)

        (setq lsp-workspace-folders-remove (list psimacs/config/home-dir))

        ;(define-key lsp-mode-map (kbd "C-c l") lsp-command-map)

        (setq lsp-enable-dap-auto-configure t)

        (setq lsp-clangd-binary-path psimacs/config/clangd-runtime-exe)

        (setq lsp-clients-clangd-executable psimacs/config/clangd-runtime-exe)
        (setq lsp-clients-clangd-args '("-j=4" "-background-index" "-log=error"))

        (use-package consult-lsp
            :bind (:map lsp-mode-map
                ("C-M-." . consult-lsp-symbols)))

        ;(require 'dap-lldb)
        (require 'dap-cpptools)

    :hook (
            (c-mode      . lsp-deferred) ; . lsp)
            (c++-mode    . lsp-deferred) ; . lsp)
            (cmake-mode  . lsp-deferred) ; . lsp)

            (lsp-mode    . lsp-enable-which-key-integration)


            ;;(before-save . lsp-format-buffer)
            ;;(before-save . lsp-organize-imports)

            (lsp-mode . (lambda ()
                            (set (make-local-variable 'company-backends)
                                '(
                                    (company-lsp
                                     company-capf
                                         company-keywords
                                              company-abbrev
                                              company-dabbrev
                                              company-dabbrev-code
                                              company-files
                                              company-yasnippet
                                    )
                                 )))))
)
#+end_src

Study commands:
- =lsp-restart-workspace=
- =lsp-file-watch-ignored=,

**** lsp-ui

The package [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]] contains all the higher level UI modules of [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]], like [[https://www.flycheck.org][flycheck]] support and code lenses.

Code lenses is a feature originating in the Visual Studio Code galaxy.

#+begin_quote
CodeLens is a popular feature in Visual Studio Code. The essence of the feature is
/actionable contextual information interspersed/ in your source code.
That's quite a mouthful. Let me break it down for you.

CodeLens are links in your code:

    - Actionable - You can click on the link and something happens.
    - Contextual - The links are close to the code they are representing.
    - Interspersed - The links located throughout your source code.
#+end_quote


#+begin_src emacs-lisp :tangle config/init-advanced-lsp-mode.el :var file-description="Advanced lsp-mode setup"
;;
;; UI modules for lsp-mode
;;
(use-package lsp-ui
    :after lsp-mode
    :commands (
                lsp-ui-mode
                lsp-ui-doc-mode
                lsp-ui-doc--hide-frame
                lsp-ui-doc-hide
                lsp-ui-peek-find-definitions
                lsp-ui-peek-find-references

                lsp-find-declaration
                lsp-find-type-definition
                lsp-signature-activate
                lsp-describe-thing-at-point
                lsp-rename
                lsp-format-buffer
                lsp-execute-code-action
                lsp-describe-session
                lsp-workspace-restart
                lsp-workspace-shutdown
              )
    :config
        (setq lsp-ui-doc-enable nil)
        (setq lsp-ui-doc-header t)
        (setq lsp-ui-doc-include-signature nil)
        ;;(setq lsp-ui-doc-show-with-cursor nil)
        ;;(setq lsp-ui-doc-show-with-mouse nil)
        (setq lsp-ui-doc-position 'at-point) ;; top, bottom, or at-point
        (setq lsp-ui-doc-max-width 120)
        (setq lsp-ui-doc-max-height 30)
        (setq lsp-ui-doc-use-childframe t)
        (setq lsp-ui-doc-use-webkit t)
        (setq lsp-ui-flycheck-enable nil)
        (setq lsp-ui-sideline-enable t)
        (setq lsp-ui-sideline-ignore-duplicate t)
        (setq lsp-ui-sideline-show-symbol t)
        (setq lsp-ui-sideline-show-hover t)
        (setq lsp-ui-sideline-show-diagnostics nil)
        (setq lsp-ui-sideline-show-code-actions t)
        (setq lsp-ui-sideline-code-actions-prefix "😳")
        ;;(setq lsp-ui-sideline-delay 0.5)
        (setq lsp-ui-imenu-enable t)
        (setq lsp-ui-imenu-kind-position 'top)
        (setq lsp-ui-peek-enable t)
        (setq lsp-ui-peek-peek-height 20)
        (setq lsp-ui-peek-list-width 50)
        (setq lsp-ui-peek-fontify 'on-demand)   ;; never, on-demand, or always

        (defun psimacs/lsp-ui-mode/toggle-lsp-ui-doc ()
            "Minor mode for showing information in child frame."
            (interactive)
            (if lsp-ui-doc-mode
                (progn
                    (lsp-ui-doc-mode -1)
                    (lsp-ui-doc--hide-frame))
                    (lsp-ui-doc-mode 1)))

        (advice-add #'keyboard-quit :before #'lsp-ui-doc-hide)

    :hydra (psimacs/hydra/lsp
        (:exit t :hint nil)
"
Prelimanary Language Server Protocol Hydra:

 ^ ^Buffer             ^   ^Server               ^ ^Symbol           ^ ^Refactor
-------------------------------------------------------------------------------------
 _f_: format           _M-r_: restart            _d_: declaration    _r_: rename
 _m_: imenu            _S_  : shutdown           _D_: definition
 _x_: execute action   _M-s_: describe session   _R_: references
                                                 _i_: implementation
 ^ ^                   ^   ^                     _t_: type
 ^ ^                   ^   ^                     _s_: signature
 _q_: quit             ^   ^                     _o_: documentation
"
        ("d" lsp-find-declaration)
        ("D" lsp-ui-peek-find-definitions)
        ("R" lsp-ui-peek-find-references)
        ("i" lsp-ui-peek-find-implementation)
        ("t" lsp-find-type-definition)
        ("s" lsp-signature-activate)
        ("o" lsp-describe-thing-at-point)
        ("r" lsp-rename)

        ("f" lsp-format-buffer)
        ("m" lsp-ui-imenu)
        ("x" lsp-execute-code-action)

        ("M-s" lsp-describe-session)
        ("M-r" lsp-workspace-restart)
        ("S"   lsp-workspace-shutdown)

        ("q" nil :color blue)
       )
    :bind
        (:map lsp-command-map
            ("<tab>"   . company-indent-or-complete-common)
            ("C-c i"   . lsp-ui-peek-find-implementation)
            ("C-c m"   . lsp-ui-imenu)
            ("C-c d"   . psimacs/lsp-ui-mode/toggle-lsp-ui-doc)
            ("C-c h l" . psimacs/hydra/lsp/body)
            :map psimacs/config/global-key-map/hydra
            ("l"       . psimacs/hydra/lsp/body)
        )
    :hook
        (lsp-mode . lsp-ui-mode)
)
#+end_src

**** lsp-ivy

The package [[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] provides an interactive [[https://github.com/abo-abo/swiper][ivy]] interface to the workspace symbol functionality offered by [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]].

Alternative: [[https://github.com/emacs-lsp/helm-lsp][Helm lsp integration]]

#+begin_src emacs-lisp :tangle config/init-advanced-lsp-mode.el :var file-description="Advanced lsp-mode setup"
;;
;; Ivy interface for lsp-mode
;;
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+end_src

**** lsp-treemacs

The package [[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] integrates [[https://github.com/Alexander-Miller/treemacs][treemacs]] with [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]].

#+begin_src emacs-lisp :tangle config/init-advanced-lsp-mode.el :var file-description="Advanced lsp-mode setup"
;;
;; Treemacs integration of lsp-mode
;;
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+end_src

** Lisp

The package [[https://www.emacswiki.org/emacs/elisp-format.el][elisp-format]] format elisp code.

It provides the following commands:

| Key binding | Command                           | Description                                             |
|-------------+-----------------------------------+---------------------------------------------------------|
|             | =M-x elisp-format-region=           | Format region or defun.                                 |
|             | =M-x elisp-format-buffer=           | Format buffer.                                          |
|             | =M-x elisp-format-file=             | Format file.                                            |
|             | =M-x elisp-format-file-batch=       | Format file with `batch'.                               |
|             | =M-x elisp-format-directory=        | Format recursive elisp files in directory.              |
|             | =M-x elisp-format-directory-batch=  | Format recursive elisp files in directory with `batch'. |
|             | =M-x elisp-format-dired-mark-files= | Format dired marked files.                              |
|             | =M-x elisp-format-library=          | Format library.                                         |
|-------------+-----------------------------------+---------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-lisp.el :var file-description="Advanced lisp setup"
;;
;; Format elsip code
;;
(use-package elisp-format
;    :straight (elisp-autofmt :host gitlab :repo "ideasman42/emacs-elisp-autofmt")
)
#+end_src

*** Recompile directory

Convenience function for compiling elips files found in directory.

#+begin_src emacs-lisp :tangle config/init-advanced-lisp.el :var file-description="Advanced lisp setup"
;;
;; Compiling of elips file in directory
;;
(defun psimacs/elisp/recompile-dir ()
    "Recompile elisp directory."
    (interactive)
    (byte-recompile-directory (read-from-minibuffer "Byte Recompile: " default-directory) 1)
)
#+end_src

*** Replace sexp with its value

Convenience function that allows you to write an /s-expression/ and replace it with the value of its evaluation.

#+begin_src emacs-lisp :tangle config/init-advanced-lisp.el :var file-description="Advanced lisp setup"
;;
;; Replace preceding sexp with its evaluated value
;;
(defun psimacs/elisp/eval-sexp-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (prin1 (eval (read (current-kill 0)))
         (current-buffer)))
#+end_src

** Python

See also:
- [[https://www.emacswiki.org/emacs/PythonProgrammingInEmacs][EmacsWiki: PythonProgrammingInEmacs]]
- [[https://wikemacs.org/index.php?title=Python&mobileaction=toggle_view_mobile][WikEmacs: Python]]

*** Python Mode

Configuration of the build-in python mode.

| Key binding | Command                                  | Description                                                 |
|-------------+------------------------------------------+-------------------------------------------------------------|
| =H-M-b=       | =M-x python-nav-backward-block=            | Moves to the previous python block.                         |
| =H-M-f=       | =M-x python-nav-forward-block=             | Moves to the next python block.                             |
|-------------+------------------------------------------+-------------------------------------------------------------|
| =H-x C-c r=   | =M-x psimacs/python/remove-unused-imports= | Removes unused imports and unused variables with [[https://github.com/myint/autoflake][autoflake]]. |
| =H-x C-c R=   | =M-x psimacs/python/blacken=               | Reformat buffer with tool [[https://github.com/psf/black][black]].                            |
| =H-x C-c Y=   | =M-x psimacs/python/yapify=                | Reformat buffer with tool [[https://github.com/google/yapf][yapf]].                             |
|-------------+------------------------------------------+-------------------------------------------------------------|

References:
- Formatter [[https://github.com/google/yapf][yapf]].
- Formatter [[https://github.com/psf/black][black]].
- Code clean up tool [[https://github.com/myint/autoflake][autoflake]].

#+begin_src emacs-lisp :tangle config/init-advanced-python.el :var file-description="Advanced Python setup"
;;
;; Configure basic python-mode
;;
(use-package python
    :straight nil
    :mode ("\\.py\\'" . python-mode)
    :init
        (setq python-indent-offset 4)
        (setq python-indent-guess-indent-offset-verbose nil)

        ;(setq python-shell-interpreter psimacs/config/python-runtime-exe)
        ;(setq python-shell-interpreter-args "-i")

        (setq python-shell-interpreter psimacs/config/ipython-runtime-exe)
        (setq python-shell-interpreter-args "-i --simple-prompt")

        ;(setq python-shell-interpreter psimacs/config/jupyter-runtime-exe)
        ;(setq python-shell-interpreter-args "console --simple-prompt")
        ;(setq python-shell-prompt-detect-failure-warning nil)
        ;(add-to-list 'python-shell-completion-native-disabled-interpreters "jupyter")

        ;(setq python-shell-interpreter psimacs/config/jupyter-runtime-exe)
        ;(setq python-shell-interpreter-args "console --simple-prompt --existing")

        ;(python-check-command psimacs/config/flake8-runtime-exe)

    :config
        (defun psimacs/python/remove-unused-imports()
          "Removes unused imports and unused variables with autoflake."
          (interactive)
          (if (executable-find  psimacs/config/autoflake-runtime-exe)
              (progn
                (save-buffer)
                (shell-command (format "%s --remove-all-unused-imports -i %s"
                                       psimacs/config/autoflake-runtime-exe
                                       (shell-quote-argument (buffer-file-name))))
                (revert-buffer t t t))
            ;; else
            (warn "python-mode: Cannot find autoflake executable."))
        )

        (defun psimacs/python/blacken()
          "Reformat buffer with tool black."
          (interactive)
          (if (executable-find psimacs/config/black-runtime-exe)
              (progn
                (save-buffer)
                (shell-command (format "%s -l %s %s"
                                       psimacs/config/black-runtime-exe
                                       fill-column
                                       (shell-quote-argument (buffer-file-name))))
                (revert-buffer t t t))
            ;; else
            (warn "python-mode: Cannot find black executable."))
        )

        (defun psimacs/python/yapify()
          "Reformat buffer with tool yapf."
          (interactive)
          (if (executable-find psimacs/config/yapf-runtime-exe)
              (progn
                (save-buffer)
                (shell-command (format "%s -i --style pep8 %s"
                                       psimacs/config/yapf-runtime-exe
                                       (shell-quote-argument (buffer-file-name))))
                (revert-buffer t t t))
            ;; else
            (warn "python-mode: Cannot find yapf executable."))
        )

        (defun psimacs/python/mypy-strict()
          "Strict static type checking with mypy."
          (interactive)
          (if (executable-find psimacs/config/mypy-runtime-exe)
              (progn
                (save-buffer)
                (shell-command (format "%s --strict %s"
                                       psimacs/config/mypy-runtime-exe
                                       (shell-quote-argument (buffer-file-name))))
                (revert-buffer t t t))
            ;; else
            (warn "python-mode: Cannot find mypy executable."))
        )

        (defun psimacs/python/mypy()
          "Static type checking with mypy."
          (interactive)
          (if (executable-find psimacs/config/mypy-runtime-exe)
              (progn
                (save-buffer)
                (shell-command (format "%s %s"
                                       psimacs/config/mypy-runtime-exe
                                       (shell-quote-argument (buffer-file-name))))
                (revert-buffer t t t))
            ;; else
            (warn "python-mode: Cannot find mypy executable."))
        )

        (defun psimacs/python/pylint()
          "Lint checking with pylint."
          (interactive)
          (if (executable-find psimacs/config/pylint-runtime-exe)
              (progn
                (save-buffer)
                (shell-command (format "%s %s"
                                       psimacs/config/pylint-runtime-exe
                                       (shell-quote-argument (buffer-file-name))))
                (revert-buffer t t t))
            ;; else
            (warn "python-mode: Cannot find pylint executable."))
        )

    :bind (
              :map python-mode-map
              ("H-M-b" . python-nav-backward-block)
              ("H-M-f" . python-nav-forward-block)

              ("H-x C-c r" . psimacs/python/remove-unused-imports)
              ("H-x C-c R" . psimacs/python/blacken)
              ("H-x C-c Y" . psimacs/python/yapify)

              ("H-x C-c m" . psimacs/python/mypy)
              ("H-x C-c M" . psimacs/python/mypy-strict)

              ("H-x C-c l" . psimacs/python/pylint)
          )
)
#+end_src

*** Yapfify

Package [[https://github.com/JorisE/yapfify][yapfify]] uses [[https://github.com/google/yapf][yapf]] to format a Python buffer.

#+begin_src emacs-lisp :tangle config/init-advanced-python.el :var file-description="Advanced Python setup"
;;
;; Format the python buffer following YAPF rules
;;
(use-package yapfify
    :defer t
    :config
        (setq yapfify-executable psimacs/config/yapf-runtime-exe)
)
#+end_src

*** Dap-Python-Mode

#+begin_src emacs-lisp :tangle config/init-advanced-python.el :var file-description="Advanced Python setup"
;;
;; Configure basic python-mode
;;
(use-package dap-python
    :straight nil
    :after dap-mode
    :config
        ;;
        ;; Python specific
        ;;
        (setq dap-python-debugger 'debugpy)
        (setq dap-python-executable psimacs/config/python-runtime-exe)
    :hook (python-mode . (lambda () (require 'dap-python)))
)
#+end_src

*** flycheck-pycheckers                                          :noexport:

The package [[https://github.com/msherry/flycheck-pycheckers][flycheck-pycheckers]] provides
multiple syntax checker for Python in *Emacs*, using [[http://www.flycheck.org/][Flycheck]].

This package provides a way to run multiple syntax checkers on Python code, in parallel.
The list of supported checkers includes:
- [[https://www.pylint.org/][pylint]]
- [[http://flake8.pycqa.org/][flake8]]
- [[https://www.python.org/dev/peps/pep-0008/][pep8]]
- [[https://github.com/PyCQA/pyflakes][pyflakes]]
- [[http://mypy-lang.org/][mypy]]
- [[https://github.com/PyCQA/bandit][bandit]]

This is an alternative way of running multiple Python syntax checkers in
[[http://www.flycheck.org/][Flycheck]] that doesn't depend on [[http://www.flycheck.org/][Flycheck's]]
chaining mechanism.

See also: [[http://www.flycheck.org/en/latest/user/quickstart.html][Flycheck Quickstart]]

ToDo: Disabled because it does not work out of the box on windows.

#+begin_src emacs-lisp :tangle config/init-advanced-python.el :var file-description="Advanced Python setup"
;;
;; Multiple Python checkers at once
;;
(use-package flycheck-pycheckers
    :after flycheck
    :custom
        ;(flycheck-pycheckers-command (concat user-emacs-directory "straight/repos/flycheck-pycheckers/bin/pycheckers.py"))
        ;(flycheck-pycheckers-command (concat psimacs/config/site-lisp-dir "pycheckers.bat"))

        (flycheck-pycheckers-checkers '(flake8 pylint mypy3 pyflakes))

    :hook (flycheck-mode . flycheck-pycheckers-setup)
)
#+end_src

*** Python pyls configuration                                           :noexport:

#+begin_src emacs-lisp :tangle config/init-advanced-python.el :var file-description="Advanced Python setup"
(use-package lsp-mode
  :straight nil
  :config
        (lsp-register-custom-settings
            '(("pyls.plugins.pyls_mypy.enabled" t t)
              ("pyls.plugins.pyls_mypy.live_mode" nil t)
              ("pyls.plugins.pyls_black.enabled" t t)
              ("pyls.plugins.pyls_isort.enabled" t t)
             )
        )
  :hook
        ((python-mode . lsp)))
#+end_src

*** lsp-jedi                                           :noexport:

Package [[https://github.com/fredcamps/lsp-jedi][lsp-jedi]] is [[https://emacs-lsp.github.io/lsp-mode/][Lsp-mode]]
client leveraging the [[https://github.com/pappasam/jedi-language-server][jedi-language-server]].

This one is currently not functioning!

#+begin_src emacs-lisp :tangle config/init-advanced-python.el :var file-description="Advanced Python setup"
(use-package lsp-jedi
  :config
        (with-eval-after-load "lsp-mode"
            (add-to-list 'lsp-disabled-clients 'pyls)
            (add-to-list 'lsp-enabled-clients 'jedi)
        )
    :hook
        ((python-mode . lsp))
)
#+end_src

*** LSP-Python-MS Mode                                           :noexport:

Package [[https://github.com/emacs-lsp/lsp-python-ms][lsp-python-ms]] is a [[https://emacs-lsp.github.io/lsp-mode/][Lsp-mode]]
client leveraging the [[https://github.com/Microsoft/python-language-server][Microsoft’s python-language-server]].

#+begin_src emacs-lisp :tangle config/init-advanced-python.el :var file-description="Advanced Python setup"
(use-package lsp-python-ms
  ;;:after lsp-mode
  :init (setq lsp-python-ms-auto-install-server t)
  :hook (python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (lsp-deferred)))  ; lsp
)
#+end_src

*** LSP-Pyright

Package [[https://github.com/emacs-lsp/lsp-pyright][lsp-pyright]] is a [[https://emacs-lsp.github.io/lsp-mode/][Lsp-mode]]
client leveraging the [[https://github.com/microsoft/pyright][Pyright language server]].

#+begin_src emacs-lisp :tangle config/init-advanced-python.el :var file-description="Advanced Python setup"
(use-package lsp-pyright
    ;;:after lsp-mode
    :config
        (setq lsp-pyright-python-executable-cmd psimacs/config/python-runtime-exe)

    :hook (python-mode . (lambda ()
                            (require 'lsp-pyright)
                            (lsp-deferred)))  ; or lsp
)
#+end_src

*** elpy                                                         :noexport:

[[https://github.com/jorgenschaefer/elpy][Elpy]] is an extension for the Emacs text editor to
work with Python projects.

See also:
- [[https://elpy.readthedocs.io/en/latest/][Documentation: Elpy]],
- [[https://github.com/jorgenschaefer/elpy][elpy]],
- [[https://realpython.com/emacs-the-best-python-editor/][Emacs: The Best Python Editor?]],
- [[https://stackoverflow.com/questions/tagged/elpy][Newest 'elpy' Questions - Stack Overflow]]

Useful key bindings:

#+attr_html: :class styledtable
| Key binding   | Command                                              | Description                                                                                                                                                                                        |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-c C-c=       | =M-x elpy-shell-send-region-or-buffer=                 |                                                                                                                                                                                                    |
| =C-RET=         | =M-x elpy-shell-send-statement-and-step=               |                                                                                                                                                                                                    |
| =C-c C-z=       | =M-x elpy-shell-switch-to-shell=                       |                                                                                                                                                                                                    |
| =C-c C-d=       | =M-x elpy-doc=                                         |                                                                                                                                                                                                    |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-c C-f=       | =M-x elpy-find-file=                                   | Find a file in the current project.                                                                                                                                                                |
| =C-c C-s=       | =M-x elpy-rgrep-symbol=                                | Search the files in the current project for a string.                                                                                                                                              |
|               | =M-x elpy-set-project-root=                            | Set the current project root directory                                                                                                                                                             |
|               | =M-x elpy-set-project-variable=                        | Set or change the value of a project-wide variable.                                                                                                                                                |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =M-TAB=         | =M-x elpy-company-backend=                             | Provide completion suggestions for a completion at point.                                                                                                                                          |
| =M-.=           | =M-x xref-find-definitions=                            | Go to the location where the identifier at point is defined.                                                                                                                                       |
| =C-x 4 M-.=     | =M-x elpy-goto-definition-other-window=                | Same as =elpy-go-to-definition= but goes to the definition of the symbol at point in other window, if defined.                                                                                       |
| =C-x 4 .=       | =M-x xref-find-definition-other-window=                | Like =M-.= but switch to the other window.                                                                                                                                                           |
| =C-x 5 .=       | =M-x xref-find-definition-other-frame=                 | Like =M-.= but switch to the other frame.                                                                                                                                                            |
| =M-*=           | =M-x pop-tag-mark=                                     | Go back to the last place where =M-.= was used, effectively turning =M-.= and =M-*= into a forward and backward motion for definition lookups.                                                           |
| =M-,=           | =M-x xref-pop-marker-stack=                            | Go back to the last place where =M-.= was used, effectively turning =M-.= and =M-*= into a forward and backward motion for definition lookups.                                                           |
| =C-c C-o=       | =M-x elpy-occur-definitions=                           | Search the buffer for a list of definitions of classes and functions.                                                                                                                              |
|               | =M-x elpy-goto-assignment=                             | Go to the location where the identifier at point is assigned.                                                                                                                                      |
| =M-?=           | =M-x xref-find-references=                             | Find references for an identifier of the current buffer.                                                                                                                                           |
| =C-M-.=         | =M-x xref-find-apropos=                                | Find all meaningful symbols that match a given pattern.                                                                                                                                            |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-c C-z=       | =M-x elpy-shell-switch-to-shell=                       | Switch to buffer with a Python interpreter running, starting one if necessary.                                                                                                                     |
|               | =M-x elpy-shell-toggle-dedicated-shell=                | Attaches a dedicated python shell (not shared with the other python buffers) to the current python buffer.                                                                                         |
|               | =M-x elpy-shell-set-local-shell=                       | Attach the current python buffer to a specific python shell.                                                                                                                                       |
| =C-c C-k=       | =M-x elpy-shell-kill=                                  | Kill the associated python shell.                                                                                                                                                                  |
| =C-c C-K=       | =M-x elpy-shell-kill-all=                              | Kill all active python shells.                                                                                                                                                                     |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-c C-y e=     | =M-x elpy-shell-send-statement=                        | Send the current statement to the Python shell and keep point position.                                                                                                                            |
| =C-c C-y C-e=   | =M-x elpy-shell-send-statement-and-step=               | Send the current statement to the Python shell and move point to first subsequent statement.                                                                                                       |
| =C-c C-y E=     | =M-x elpy-shell-send-statement-and-go=                 | Send the current statement to the Python shell, keeping point position, and switch focus to the Python shell buffer.                                                                               |
| =C-c C-y C-S-E= | =M-x elpy-shell-send-statement-and-step-and-go=        | Send the current statement to the Python shell, move point to first subsequent statement, and switch focus to the Python shell buffer.                                                             |
| =C-c C-y O=     | =M-x elpy-shell-send-group-and-step=                   | Send the current or next group of top-level statements to the Python shell and step.                                                                                                               |
| =C-c C-y W=     | =M-x elpy-shell-send-codecell-and-step=                | Send the current code cell to the Python shell and step.                                                                                                                                           |
| =C-c C-y r=     | =M-x elpy-shell-send-region-or-buffer=                 | Send the the active region (if any) or the entire buffer (otherwise) to the Python shell and keep point position.                                                                                  |
| =C-c C-y s=     | =M-x elpy-shell-send-top-statement=                    |                                                                                                                                                                                                    |
| =C-c C-y S=     | =M-x elpy-shell-send-top-statement-and-go=             |                                                                                                                                                                                                    |
| =C-c C-y f=     | =M-x elpy-shell-send-defun=                            |                                                                                                                                                                                                    |
| =C-c C-y F=     | =M-x elpy-shell-send-defun-and-go=                     |                                                                                                                                                                                                    |
| =C-c C-y c=     | =M-x elpy-shell-send-defclass=                         |                                                                                                                                                                                                    |
| =C-c C-y C=     | =M-x elpy-shell-send-defclass-and-go=                  |                                                                                                                                                                                                    |
| =C-c C-y o=     | =M-x elpy-shell-send-group=                            |                                                                                                                                                                                                    |
| =C-c C-y O=     | =M-x elpy-shell-send-group-and-go=                     |                                                                                                                                                                                                    |
| =C-c C-y w=     | =M-x elpy-shell-send-codecell=                         |                                                                                                                                                                                                    |
| =C-c C-y W=     | =M-x elpy-shell-send-codecell-and-go=                  |                                                                                                                                                                                                    |
| =C-c C-y R=     | =M-x elpy-shell-send-region-or-buffer-and-go=          |                                                                                                                                                                                                    |
| =C-c C-y b=     | =M-x elpy-shell-send-buffer=                           |                                                                                                                                                                                                    |
| =C-c C-y B=     | =M-x elpy-shell-send-buffer-and-go=                    |                                                                                                                                                                                                    |
| =C-c C-y C-s=   | =M-x elpy-shell-send-top-statement-and-step=           |                                                                                                                                                                                                    |
| =C-c C-y C-S-S= | =M-x elpy-shell-send-top-statement-and-step-and-go=    |                                                                                                                                                                                                    |
| =C-c C-y C-f=   | =M-x elpy-shell-send-defun-and-step=                   |                                                                                                                                                                                                    |
| =C-c C-y C-S-F= | =M-x elpy-shell-send-defun-and-step-and-go=            |                                                                                                                                                                                                    |
| =C-c C-y C-c=   | =M-x elpy-shell-send-defclass-and-step=                |                                                                                                                                                                                                    |
| =C-c C-y C-S-C= | =M-x elpy-shell-send-defclass-and-step-and-go=         |                                                                                                                                                                                                    |
| =C-c C-y C-S-O= | =M-x elpy-shell-send-group-and-step-and-go=            |                                                                                                                                                                                                    |
| =C-c C-y C-W=   | =M-x elpy-shell-send-codecell-and-step-and-go=         |                                                                                                                                                                                                    |
| =C-c C-y C-r=   | =M-x elpy-shell-send-region-or-buffer-and-step=        |                                                                                                                                                                                                    |
| =C-c C-y C-S-R= | =M-x elpy-shell-send-region-or-buffer-and-step-and-go= |                                                                                                                                                                                                    |
| =C-c C-y C-b=   | =M-x elpy-shell-send-buffer-and-step=                  |                                                                                                                                                                                                    |
| =C-c C-y C-S-B= | =M-x elpy-shell-send-buffer-and-step-and-go=           |                                                                                                                                                                                                    |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-c C-n=       | =M-x elpy-flymake-next-error=                          | Navigate errors.                                                                                                                                                                                   |
| =C-c C-p=       | =M-x elpy-flymake-previous-error=                      | Navigate errors.                                                                                                                                                                                   |
| =C-c C-v=       | =M-x elpy-check=                                       | Run a syntax check on the current file where the output is displayed in a new buffer, giving you an overview and allowing you to jump to the errors from there.                                    |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-c C-d=       | =M-x elpy-doc=                                         | When point is on a symbol, Elpy will try and find the documentation for that object, and display that.                                                                                             |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-c @ C-c=     | =M-x elpy-folding-toggle-at-point=                     | Toggle folding for the thing at point, it can be a docstring, a comment or a code block.                                                                                                           |
| =C-c @ C-b=     | =M-x elpy-folding-toggle-docstrings=                   | Toggle folding of all python docstrings.                                                                                                                                                           |
| =C-c @ C-m=     | =M-x elpy-folding-toggle-comments=                     | Toggle folding of all comments.                                                                                                                                                                    |
| =C-c @ C-f=     | =M-x elpy-folding-hide-leafs=                          | Hide all code leafs, i.e. code blocks that do not contains any other blocks.                                                                                                                       |
| =C-c @ C-a=     | =M-x hs-show-all=                                      | Unfold everything.                                                                                                                                                                                 |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-c C-u d=     | =M-x elpy-pdb-debug-buffer=                            | Run pdb on the current buffer.                                                                                                                                                                     |
| =C-c C-u b=     | =M-x elpy-pdb-toggle-breakpoint-at-point=              | Add (or remove) a breakpoint on the current line.                                                                                                                                                  |
| =C-c C-u p=     | =M-x elpy-pdb-break-at-point=                          | Run pdb on the current buffer and pause at the cursor position.                                                                                                                                    |
| =C-c C-u e=     | =M-x elpy-pdb-debug-last-exception=                    | Run post-mortem pdb on the last exception.                                                                                                                                                         |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-c C-t=       | =M-x elpy-test=                                        | Start a test run.                                                                                                                                                                                  |
|               | =M-x elpy-set-test-runner=                             | This changes the current test runner.                                                                                                                                                              |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-c C-e=       | =M-x elpy-multiedit-python-symbol-at-point=            | Edit all occurrences of the symbol at point at once.                                                                                                                                               |
| =C-c C-r f=     | =M-x elpy-format-code=                                 | Format code using the available formatter.                                                                                                                                                         |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-c C-r r=     | =M-x elpy-refactor-rename=                             | Rename all occurences of the symbol at point (variable, function, class, …). If needed, rename occurences in other files as well.                                                                  |
| =C-c C-r v=     | =M-x elpy-refactor-extract-variable=                   | Move the selection to a new variable.                                                                                                                                                              |
| =C-c C-r f=     | =M-x elpy-refactor-extract-function=                   | Move the selection to a new function.                                                                                                                                                              |
| =C-c C-r i=     | =M-x elpy-refactor-inline=                             | Inline the variable at point. i.e. replace it with its defining expression.                                                                                                                        |
|               | =M-x elpy-profile-buffer-or-region=                    | Send the current buffer or region to the profiler and display the result with =elpy-profile-visualizer=.                                                                                             |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-c C-x c=     | =M-x elpy-django-command=                              | Choose what command you’d like to run via =django-admin.py= or =manage.py=.                                                                                                                            |
| =C-c C-x r=     | =M-x elpy-django-runserver=                            | Start the development server command, runserver. Default arguments are =127.0.0.1= for ip address and =8000= for port. These can be changed via =elpy-django-server-ipaddr= and =elpy-django-server-port=. |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|               | =M-x elpy-rpc-restart=                                 | Close all running RPC processes. Elpy will re-start them on demand with current settings.                                                                                                          |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|               | =M-x pyvenv-workon=                                    | The main interaction point with virtual envs, mirroring the normal activate and deactivate commands of virtual envs and the workon command of virtualenvwrapper.sh.                                |
|               | =M-x pyvenv-activate=                                  | The main interaction point with virtual envs, mirroring the normal activate and deactivate commands of virtual envs and the workon command of virtualenvwrapper.sh.                                |
|               | =M-x pyvenv-deactivate=                                | The main interaction point with virtual envs, mirroring the normal activate and deactivate commands of virtual envs and the workon command of virtualenvwrapper.sh.                                |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| =C-M-n=         | =M-x elpy-nav-forward-block=                           | Navigate forward to the next block.                                                                                                                                                                |
| =C-M-p=         | =M-x elpy-nav-backward-block=                          | Navigate backward to the previous block.                                                                                                                                                           |
|---------------+------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|


#+begin_src emacs-lisp :tangle config/init-advanced-python.el :var file-description="Advanced Python setup"
;;
;; Python programming support
;;
(use-package elpy
    ;:after flycheck
    :bind
        (:map elpy-mode-map
            ("C-M-n" . elpy-nav-forward-block)
            ("C-M-p" . elpy-nav-backward-block)
        )
    :init
        (advice-add 'python-mode :before 'elpy-enable)
    :hook
        (
            (elpy-mode . flycheck-mode)
            (elpy-mode . (lambda ()
                            (set (make-local-variable 'company-backends) '((elpy-company-backend :with company-yasnippet))))
                         )
        )
    :custom
        (python-indent-offset 4)

        ;(python-shell-interpreter psimacs/config/python-runtime-exe)
        ;(python-shell-interpreter-args "-i")

        (python-shell-interpreter "ipython")
        (python-shell-interpreter-args "-i --simple-prompt")

        ;setq python-shell-interpreter "jupyter"
        ;python-shell-interpreter-args "console --simple-prompt"
        ;python-shell-prompt-detect-failure-warning nil)
        ;(add-to-list 'python-shell-completion-native-disabled-interpreters "jupyter")

        ;setq python-shell-interpreter "jupyter"
        ;python-shell-interpreter-args "console --simple-prompt --existing")

        ;(python-check-command psimacs/config/flake8-runtime-exe)
        (elpy-syntax-check-command psimacs/config/flake8-runtime-exe)
    ;:config
        ; fix for MacOS, see https://github.com/jorgenschaefer/elpy/issues/1550
        ;(setq elpy-shell-echo-output nil)
        ;(setq elpy-rpc-python-command "python3")
        ;(setq elpy-rpc-timeout 2)
)
#+end_src

** CMake

[[https://cmake.org/][CMake]] is an open-source, cross-platform family of tools designed to build, test and package software.

*** CMake-Mode

[[https://gitlab.kitware.com/cmake/cmake/blob/master/Auxiliary/cmake-mode.el][Cmake-mode]] provides syntax
highlighting and indentation for =CMakeLists.txt= and =*.cmake= source files.

| Key binding | Command                         | Description                              |
|-------------+---------------------------------+------------------------------------------|
| =H-x C-c R=   | =M-x psimacs/cmake/format-buffer= | Reformat buffer with tool  [[https://github.com/cheshirekow/cmake_format][cmake-format]]. |
|-------------+---------------------------------+------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-cmake-mode.el :var file-description="Advanced cmake-mode setup"
;;
;; Support for CMake
;;
(use-package cmake-mode
    :config
        (defun psimacs/cmake/format-buffer()
          "Format cmake-mode buffer with the cmake-format tool."
          (interactive)
          (if (executable-find psimacs/config/cmake-format-runtime-exe)
              (progn
                (shell-command (format "%s -i %s"
                                       psimacs/config/cmake-format-runtime-exe
                                       (shell-quote-argument (buffer-file-name))))
                (revert-buffer t t t))
            ;; else
            (warn "cmake-mode: Cannot find cmake-format executable."))
        )
    :bind (
              :map cmake-mode-map
              ("H-x C-c R" . psimacs/cmake/format-buffer)
          )
)
#+end_src

*** CMake Font Lock

The package [[https://github.com/Lindydancer/cmake-font-lock][cmake-font-lock]] provides *Emacs* font lock
rules for CMake.

#+begin_src emacs-lisp :tangle config/init-advanced-cmake-mode.el :var file-description="Advanced cmake-mode setup"
;;
;; Font locking of CMake code
;;
(use-package cmake-font-lock
    :config
        (autoload 'cmake-font-lock-activate "cmake-font-lock" nil t)
        (add-hook 'cmake-mode-hook 'cmake-font-lock-activate)
)
#+end_src

*** CMake-IDE :noexport:

[[https://github.com/atilaneves/cmake-ide][cmake-ide]] is a package to enable IDE-like features on Emacs
for CMake projects.

It works by running [[https://cmake.org/][CMake]] in *Emacs* in order to obtain the necessary compiler
flags to pass to the other tools. Since all the dependencies are specified in the CMake scripts, there
is no need to maintain a parallel dependency tracking system for Emacs. Just ask CMake.

See also:
- [[https://www.youtube.com/watch?v=5FQwQ0QWBTU][CppCon 2015 Lightning talk on cmake-ide]]

Remark:
- *Psimacs* currently does not use this package. The package [[https://github.com/hatlafax/projectile-cmake][projectile-cmake]]
  gives fine grained support of [[https://cmake.org/][CMake]] with *Emacs* [[https://github.com/bbatsov/projectile][projectile]].

#+begin_src emacs-lisp :tangle no config/init-advanced-cmake-mode.el :var file-description="Advanced cmake-mode setup"
;;
;; IDE for CMake
;;
(use-package cmake-ide
    :after cc-mode projectile
    :hook (c++-mode . psimacs/cmake-ide-mode/cmake-ide-find-project)
    :preface
        (defun psimacs/cmake-ide-mode/cmake-ide-find-project ()
            "Finds the directory of the project for cmake-ide."
            (with-eval-after-load 'projectile
                (setq cmake-ide-project-dir (projectile-project-root))
                (setq cmake-ide-build-dir (concat cmake-ide-project-dir "build"))
            )
            (setq cmake-ide-compile-command (concat "cd " cmake-ide-build-dir " && cmake .. && make"))
            (cmake-ide-load-db)
        )
        (defun psimacs/cmake-ide-mode/switch-to-compilation-window ()
            "Switches to the *compilation* buffer after compilation."
            (other-window 1)
        )
    :bind ([remap comment-region] . cmake-ide-compile)
    :init
        (cmake-ide-setup)
    :config
        (advice-add 'cmake-ide-compile :after #'psimacs/cmake-ide-mode/switch-to-compilation-window)
)
#+end_src

** CC-mode

References for the C++ programming language:
- [[https://en.wikipedia.org/wiki/C%2B%2B][Wikipedia: C++]]
- [[https://isocpp.org/][News, Status & Discussion about Standard C++]]
- [[https://www.cplusplus.com/][Welcome to cplusplus.com]]
- [[https://en.cppreference.com][C++ Reference]]
- [[https://justinmeiners.github.io/sgi-stl-docs/][Standard Template Library Programmer's Guide]]
- [[https://www.boost.org/][Boost C++ Libraries]]

*** Modern C++ Font Lock

The package [[https://github.com/ludwigpacifici/modern-cpp-font-lock][modern-cpp-font-lock]] provides
syntax highlighting support for /*Modern C++*/ - until /*C++20*/ and Technical Specification.
This package aims to provide a simple highlight of the C++ language without dependency.

#+begin_src emacs-lisp :tangle config/init-advanced-c++-mode.el :var file-description="Advanced c++-mode setup"
;;
;; Font locking of modern C++ code.
;;
(use-package modern-cpp-font-lock
    :hook
        (c++-mode . modern-c++-font-lock-mode)
)
#+end_src

*** C++ Style

The following is an attemp to setup a style that appeals me. Ignore it if you want something
different.

See also:
- [[https://www.gnu.org/software/emacs/manual/html_mono/ccmode.html][CC-Mode]], [[https://www.emacswiki.org/emacs/IndentingC][Indenting C]], [[https://www.gnu.org/software/emacs/manual/html_node/ccmode/Indentation-Commands.html][Indentation commands]], [[https://www.gnu.org/software/emacs/manual/html_node/ccmode/Styles.html#Styles][Styles]], [[https://en.wikipedia.org/wiki/Indent_style][Indent style]]

**** Basic offset

#+begin_src emacs-lisp :tangle config/init-advanced-c++-mode.el :var file-description="Advanced c++-mode setup"
;;
;; Always default to 4 spaces indent offset.
;;
(setq-default c-basic-offset 4)
#+end_src

**** Guess Style

See also:
- [[https://www.gnu.org/software/emacs/manual/html_node/ccmode/Guessing-the-Style.html#Guessing-the-Style][Guessing the Style]]

#+begin_src emacs-lisp :tangle config/init-advanced-c++-mode.el :var file-description="Advanced c++-mode setup"
;;
;; A special c++ code styling
;;
(c-add-style "psimacs/c++-mode/CADdy++-style"
             '("gnu"
                (c-basic-offset . 4)     ; Guessed value
                (c-offsets-alist
                (access-label . 0)      ; Guessed value
                (arglist-cont . 0)      ; Guessed value
                (arglist-intro . +)     ; Guessed value
                (block-close . 0)       ; Guessed value
                (brace-list-close . 0)  ; Guessed value
                (brace-list-entry . 0)  ; Guessed value
                (brace-list-intro . +)  ; Guessed value
                (brace-list-open . 0)   ; Guessed value
                (case-label . +)        ; Guessed value
                (class-close . 0)       ; Guessed value
                (class-open . 0)        ; Guessed value
                (cpp-define-intro . +)  ; Guessed value
                (defun-block-intro . +) ; Guessed value
                (defun-close . 0)       ; Guessed value
                (defun-open . 0)        ; Guessed value
                (else-clause . 0)       ; Guessed value
                (inclass . +)           ; Guessed value
                (inline-close . 0)      ; Guessed value
                (label . 0)             ; Guessed value
                (member-init-cont . -)  ; Guessed value
                (member-init-intro . 0) ; Guessed value
                (statement . 0)             ; Guessed value
                (statement-block-intro . +) ; Guessed value
                (statement-case-intro . +) ; Guessed value
                (statement-case-open . 0) ; Guessed value
                (statement-cont . 0)      ; Guessed value
                (substatement . +)        ; Guessed value
                (substatement-open . 0) ; Guessed value
                (template-args-cont . +) ; Guessed value
                (topmost-intro . 0)      ; Guessed value
                (topmost-intro-cont . 0) ; Guessed value
                (annotation-top-cont . 0)
                (annotation-var-cont . +)
                (arglist-close . c-lineup-close-paren)
                (arglist-cont-nonempty . c-lineup-arglist)
                (block-open . 0)
                (brace-entry-open . 0)
                (c . c-lineup-C-comments)
                (catch-clause . 0)
                (comment-intro . c-lineup-comment)
                (composition-close . 0)
                (composition-open . 0)
                (cpp-macro . -1000)
                (cpp-macro-cont . +)
                (do-while-closure . 0)
                (extern-lang-close . 0)
                (extern-lang-open . 0)
                (friend . 0)
                (func-decl-cont . +)
                (incomposition . +)
                (inexpr-class . +)
                (inexpr-statement . +)
                (inextern-lang . +)
                (inher-cont . c-lineup-multi-inher)
                (inher-intro . +)
                (inlambda . c-lineup-inexpr-block)
                (inline-open . 0)
                (inmodule . +)
                (innamespace . +)
                (knr-argdecl . 0)
                (knr-argdecl-intro . 5)
                (lambda-intro-cont . +)
                (module-close . 0)
                (module-open . 0)
                (namespace-close . 0)
                (namespace-open . 0)
                (objc-method-args-cont . c-lineup-ObjC-method-args)
                (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
                (objc-method-intro . [0])
                (stream-op . c-lineup-streamop)
                (string . -1000)
                (substatement-label . 0))))
#+end_src

Every line is just indented to the same level as the previous one, and =<TAB>=
adjusts the indentation in steps specified by =c-basic-offset=.
=<TAB>= simply indents the current line.
Always default to 4 spaces indent offset.

#+begin_src emacs-lisp :tangle config/init-advanced-c++-mode.el :var file-description="Advanced c++-mode setup"
(defun psimacs/c++-mode/c-mode-hook ()
    (c-set-style "psimacs/c++-mode/CADdy++-style")
)

;;
;; CC-Mode
;;
(use-package cc-mode
    :straight nil
    :config
        (add-hook 'c-mode-common-hook
            (lambda ()
                ;(when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
                ;  (ggtags-mode 1))
                (setq c-syntactic-indentation nil)
                (setq c-tab-always-indent t)
                (setq c-basic-offset 4)
            )
        )
        ;(add-hook   'c-mode-hook 'psimacs/c++-mode/c-mode-hook)
        ;(add-hook 'c++-mode-hook 'psimacs/c++-mode/c-mode-hook)
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-advanced-c++-mode.el :var file-description="Advanced c++-mode setup"
;;
;; C++ style settings
;;
(use-package psimacs-c-style
    :straight nil
    :hook ( (c-mode c++-mode) . psimacs-set-c-style)
            (c-mode-common    . psimacs-make-newline-indent)
)
#+end_src

** TypeScript

Package [[https://github.com/emacs-typescript/typescript.el][typescript]] provides support for the [[https://www.typescriptlang.org/][TypeScript]] programming language.

For typescript the language server must be installed with =node.js=:

#+begin_example
npm i -g typescript-language-server
npm i -g typescript
#+end_example

#+begin_src emacs-lisp :tangle config/init-advanced-typescript.el :var file-description="Advanced TypeScript setup"
;;
;; Configure basic typescript-mode
;;
(use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
        (setq typescript-indent-level 4)
        (require 'dap-node)
)
#+end_src

** YAML

Reference:
- [[https://github.com/yoshiki/yaml-mode][yaml-mode]]
- [[https://github.com/zkry/yaml-pro][yaml-pro: tools for editing YAML leveraging tree-sitter/parser]]

#+begin_src emacs-lisp :tangle config/init-advanced-yaml.el :var file-description="Advanced YAML setup"
(use-package yaml-mode
    :defer t
    :bind (("H-c p" . yaml-get-path-at-point))
    :mode (("\\.yml\\'"  . yaml-mode)
           ("\\.yaml\\'" . yaml-mode))
    :commands (
        yaml-path-at-point
        yaml-clean-string
        yaml-indentation-level
        display-line-overlay+
      )
    :config
        (use-package yaml-pro
            :hook (yaml-mode  . yaml-pro-mode)
            :bind (("H-c M-p" . yaml-pro-move-subtree-up)
                   ("H-c M-n" . yaml-pro-move-subtree-down))
        )

        ;; Based on https://github.com/chopmo/dotfiles/blob/master/.emacs.d/customizations/yaml.el
        (defun yaml-indentation-level (s)
            (if (string-match "^ " s)
                (+ 1 (yaml-indentation-level (substring s 1)))
            0))

        (defun yaml-clean-string (s)
            (let* ((s (replace-regexp-in-string "^[ -:]*" "" s))
                   (s (replace-regexp-in-string ":$" "" s)))
                s))

        (defun yaml-path-at-point ()
            (save-excursion
            (let* ((line (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
                   (level (yaml-indentation-level line))
                   result
                  )
                (while (> (point) (point-min))
                    (beginning-of-line 0)
                    (setq line (buffer-substring-no-properties (line-beginning-position) (line-end-position)))
                    (let ((new-level (yaml-indentation-level line)))
                        (when (and (string-match "[^[:blank:]]" line)
                                   (< new-level level)
                              )
                            (setq level new-level)
                            (setq result (push (yaml-clean-string line) result)))))
                            (mapconcat 'identity result " => ")))
        )

        (defun yaml-get-path-at-point ()
            "Display the yaml path at point for 5 seconds"
            (interactive)
            (let ((ov (display-line-overlay+ (window-start) (yaml-path-at-point))))
                  (run-with-timer 1 nil (lambda () (when (overlayp ov)
                                             (delete-overlay ov)))))
        )
)
#+end_src

** JSON

Reference:
- [[https://github.com/json-emacs/json-mode][json-mode.el]]
- [[https://github.com/Sterlingg/json-snatcher][json-snatcher]]

#+begin_src emacs-lisp :tangle config/init-advanced-json.el :var file-description="Advanced JSON setup"
;;
;; Support for JSON
;;
(use-package json-mode
  :mode (("\\.json\\'" . json-mode))
)
#+end_src

** ELSE Grammar Compiler

ELSE, the Emacs Language Sensitive Editor, is a system for template generation
aimed at reducing the amount of user typing and to operate seamlessly with a minimum of
interference to the user.
ELSE is implemented as a minor mode and can work with any major mode. As ELSE is
invoked the first time for each major mode, it will load a template file specific to that mode.

The ELSE grammar compiler is a tool written specifically to generate these ELSE template files
from an [[https://www.antlr.org/][ANTLR]] language grammar specification.

The tools provided in this section provide a simple workflow for working on a ANTLR grammar
file and creating a final ELSE template file ready to use in *Psimacs*.

Reference:
- [[https://github.com/hatlafax/ELSE-grammar-compiler][ELSE-grammar-compiler]]
- [[https://github.com/hatlafax/ELSE][ELSE fork by me]]
- [[https://github.com/peter-milliken/ELSE][ELSE]]
- [[https://www.antlr.org/][ANTLR]]

This simplistic ANTLRv4 major mode implementation allows to work on a ANTLRv4 file buffer. It provides
syntax highlighting and supports the special /annotation system/ that has been added to the ANTLRv4 specification
in order to provide extra meta information for the ELSE framework.

#+attr_html: :class styledtable
| Key binding | Command                                               | Description                                                                                |
|-------------+-------------------------------------------------------+--------------------------------------------------------------------------------------------|
| =C-c C-c=     | =M-x psimacs/antlrv4/create-else-grammar=               | Create a ELSE language specification from the ANTLRv4 grammar found in the current buffer. |
| =C-c C-v=     | =M-x psimacs/antlrv4/create-visualization-from-grammar= | Create a HTML visualization of the ANTLRv4 grammar found in the current buffer.            |
|-------------+-------------------------------------------------------+--------------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-antlrv4.el :var file-description="Advanced ANTLRv4 setup"
;;
;; Support for ANTLRv4
;;
(use-package antlrv4-mode
  :straight nil
  :mode "\\.g4\\'"
  :config
        (defun psimacs/antlrv4/create-else-grammar ()
          "Create a ELSE language specification from the ANTLRv4 grammar found in the current buffer."
          (interactive)
          (when (eq major-mode 'antlrv4-mode)
            (save-buffer)
            (save-excursion
              (let* (
                      (language (psimacs/ui/internal/select-from-item-list "Provide a target language: " '(
                        "ada" "c" "c++" "cmake" "csharp" "emacs-lisp" "java" "javascript" "latex"
                       "modelica" "php" "typescript" "ecmascript" "python" "pascal" "rust" "scala"
                       "clojure" "golang" "dot" "erlang" "html" "prolog" "restructuredtext" "ruby"
                       "texinfo"
                      ) 2))
                      (f-dir  (file-name-directory buffer-file-name))
                      (f-name (file-name-nondirectory buffer-file-name))
                      (out-dir psimacs/config/else-grammar-compiler-out-dir)
                      (out-file (concat psimacs/config/else-grammar-compiler-out-dir language ".lse"))
                      (res-file (concat psimacs/config/else-lse-dir language ".lse"))
                      (bck-file (concat psimacs/config/else-lse-dir language ".lse~"))
                      (placeholder nil)
                    )

                (when (re-search-backward "^\\([[:alnum:]_-]+\\)[[:space:]]*$" nil t)
                  (setq placeholder (match-string 1))
                )

                (make-directory psimacs/config/else-grammar-compiler-out-dir t)
                (when (file-exists-p out-file)
                  (delete-file out-file)
                )

                ;(message "%s"
                (shell-command
                    (concat
                        psimacs/config/python-runtime-exe
                        " "
                        psimacs/config/else-grammar-compiler-py
                        " -i " f-dir " -o " out-dir " -l " language " -p '*(){}[].,;:'" " -I 'a-zA-Z_0-9-' " "-x " f-name
                    )
                )

                (when (file-exists-p out-file)
                  (when (file-exists-p res-file)
                    (while (file-exists-p bck-file)
                      (setq bck-file (concat bck-file "~"))
                    )
                    (rename-file res-file bck-file)
                  )

                  (let ((res-file-buffer (get-file-buffer res-file)))
                    (copy-file out-file res-file)
                    (if res-file-buffer
                        (progn
                          (revert-buffer res-file-buffer t t)
                          (pop-to-buffer res-file-buffer)
                        )
                      (find-file-other-window res-file)
                    )

                    (goto-char (point-min))
                    (else-compile-buffer)

                    (message "placeholder = %s" placeholder)

                    (when placeholder
                      (goto-char (point-min))
                      (re-search-forward (concat "DEFINE PLACEHOLDER[[:blank:]]+\"?" placeholder "\"?[[:blank:]]*$") nil t)
                      (recenter 1)
                    )
                  )
                )
              )
            )
          )
        )

        (defun psimacs/antlrv4/create-visualization-from-grammar ()
          "Create a HTML visualization of the ANTLRv4 grammar found in the current buffer."
          (interactive)
          (when (eq major-mode 'antlrv4-mode)
            (save-buffer)
            (let (
                    (grammar-copy-file (concat (file-name-sans-extension (buffer-file-name)) "-tmp" (file-name-extension (buffer-file-name) t)))
                    (ebnf-file (concat (file-name-sans-extension (buffer-file-name)) ".ebnf"))
                    (html-file (concat (file-name-sans-extension (buffer-file-name)) ".html"))
                    (old-buffer (current-buffer))
                 )

              (when (file-exists-p grammar-copy-file)
                (delete-file grammar-copy-file)
              )

              (when (file-exists-p ebnf-file)
                (delete-file ebnf-file)
              )

              (when (file-exists-p html-file)
                (delete-file html-file)
              )

              (with-temp-buffer
                (insert-buffer-substring old-buffer)

                 (goto-char (point-min))

                ;; remove all annotation lines
                (delete-matching-lines "^[[:blank:]]*annotations[[:blank:]]*(.*")

                (write-region (point-min)
                              (point-max) grammar-copy-file t)
              )

              (when (file-exists-p grammar-copy-file)
                (shell-command
                          (concat
                              psimacs/config/java-runtime-exe
                              " -jar "
                             psimacs/config/ebnf-convert-jar-file
                              " -noinline "
                              grammar-copy-file
                              " > "
                              ebnf-file))

                (when (file-exists-p ebnf-file)
                  (shell-command
                          (concat
                              psimacs/config/java-runtime-exe
                              " -jar "
                              psimacs/config/ebnf-railroad-jar-file
                              " -keeprecursion -nofactoring -noinline -html "
                              ebnf-file
                              " > "
                              html-file))

                  (delete-file ebnf-file)

                  (when (file-exists-p html-file)
                    (browse-url html-file)
                    ;(eaf-open-browser-other-window (concat "file://" html-file))
                  )
                )
                (delete-file grammar-copy-file)
              )
            )
          )
        )

  :bind (
           :map antlrv4-mode-map
           ("C-c C-c"     . psimacs/antlrv4/create-else-grammar)
           ("C-c C-v"     . psimacs/antlrv4/create-visualization-from-grammar)
        )
)
#+end_src

** Deft

[[https://github.com/jrblevin/deft][Deft]] is an Emacs mode for quickly browsing, filtering, and editing directories
of plain text notes, inspired by Notational Velocity. It was designed for
increased productivity when writing and taking notes by making it fast and
simple to find the right file at the right time and by automating many of the
usual tasks such as creating new files and saving files.

#+attr_html: :class styledtable
| Key binding | Command                             | Description                                                             |
|-------------+-------------------------------------+-------------------------------------------------------------------------|
| =C-c n D=     | =M-x deft=                            | Switch to *Deft* buffer and load files.                                   |
|-------------+-------------------------------------+-------------------------------------------------------------------------|
| =<Ret>=       | =M-x deft-complete=                   | Open file.                                                              |
| =C-o=         | =M-x deft-open-file-other-window=     | Open file at point in other window.                                     |
| =C-u C-o=     | =C-u M-x deft-open-file-other-window= | Open file at point in other window and switch to window.                |
|-------------+-------------------------------------+-------------------------------------------------------------------------|
| =C-c C-c=     | =M-x deft-filter-clear=               | Clear the current filter string and refresh the file browser.           |
| =C-c C-q=     | =M-x quit-window=                     | Close Deft window.                                                      |
| =C-c C-g=     | =M-x deft-refresh=                    | Update the file cache, reapply the filter, and refresh the *Deft* buffer. |
|-------------+-------------------------------------+-------------------------------------------------------------------------|
| =C-c C-t=     | =M-x deft-toggle-incremental-search=  | Toggle the ‘deft-incremental-search’ setting.                           |
| =C-c C-l=     | =M-x deft-filter=                     | Update the filter with STR and update the file browser.                 |
| =C-c C-s=     | =M-x deft-toggle-sort-method=         | Toggle file sorting method defined in ‘deft-current-sort-method’        |
|-------------+-------------------------------------+-------------------------------------------------------------------------|
| =C-c C-n=     | =M-X deft-new-file=                   | Create a new file quickly.                                              |
| =C-c C-d=     | =M-x deft-delete-file=                | Delete the file represented by the button at the point.                 |
| =C-c C-r=     | =M-x deft-rename-file=                | Rename the file represented by the button at the point.                 |
| =C-c C-a=     | =M-x deft-archive-file=               | Archive the file represented by the button at the point.                |
|-------------+-------------------------------------+-------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-advanced-deft.el :var file-description="Advanced Deft setup"
;;
;; Configure deft-mode
;;
(use-package deft
  :commands (deft deft-base-filename psimacs/config/deft-parse-title)
  :config
      (setq deft-directory  psimacs/config/roam-notes-dir)
      (setq deft-recursive t)
      (setq deft-default-extension "org")
      (setq deft-extensions '("org" "md" "txt"))
      (setq deft-use-filename-as-title t)
      ;(setq deft-use-filename-as-title nil)
      (setq deft-use-filter-string-for-filename t)
      (setq deft-auto-save-interval -1.0)
      (setq deft-file-naming-rules
            '((noslash  . "-")
              (nospace . "-")
              (case-fn . downcase)))
      (setq deft-org-mode-title-prefix t)
      (setq deft-text-mode 'org-mode)

      (defun psimacs/config/deft-parse-title (file contents)
        "Parse the given FILE and CONTENTS and determine the title.
If `deft-use-filename-as-title' is nil, the title is taken to
be the first non-empty line of the FILE.  Else the base name of the FILE is
used as title."
        (let ((begin (string-match "^#\\+[tT][iI][tT][lL][eE]: .*$" contents)))
          (if begin
              (string-trim (substring contents begin (match-end 0)) "#\\+[tT][iI][tT][lL][eE]: *" "[\n\t ]+")
            (deft-base-filename file))))

      (advice-add 'deft-parse-title :override #'psimacs/config/deft-parse-title)
      (setq deft-strip-summary-regexp
          (concat "\\("
                  "[\n\t]" ;; blank
                  "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
                  "\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n" ;; org-roam ID
                  "\\|\\[\\[\\(.*\\]\\)" ;; any link
                  "\\)"))

  :bind
      ("C-c n D" . deft)
)
#+end_src

* Major Modes

Configuration of important major modes for *Psimacs*.

** BibTeX

Manage references and bibliographies with Emacs BibTeX mode.

Emacs ships with =bibtex-mode= to create and manage bibliographies. This mode, as the name suggests,
uses the [[http://www.bibtex.org/][BibTeX]] file format as your literature database. [[http://www.bibtex.org/][BibTeX]] is a tool to manage literature and
citations and is typically used for [[https://www.latex-project.org/][LaTeX]] typesetting.

A typical entry for a book will look like this:

#+begin_src example
@book{prevos_principles_2019,
  title        = {Principles of Strategic Data Science},
  author       = {Prevos, Peter},
  year         = 2019,
  publisher    = {Packt Publishing},
  isbn         = {978-1-83898-529-5},
  file         = {:/prevos-2019.pdf},
  keywords     = {data science, strategy}
}
#+end_src

See also: [[https://lucidmanager.org/productivity/emacs-bibtex-mode/][Manage your literature with Emacs BibTeX Mode]]

#+begin_src emacs-lisp :tangle config/init-major-modes-latex-mode.el :var file-description="Major Modes - latex-mode setup"
(use-package bibtex
    :straight nil
    :hook (bibtex-mode . flyspell-mode)
    :init
        (setq bibtex-user-optional-fields '(
                                            ("keywords" "Keywords to describe the entry" "")
                                            ("file" "Link to document file." ":")
                                           ))
        (setq bibtex-align-at-equal-sign t)
        (setq bibtex-dialect 'biblatex)
        (setq bibtex-text-indentation 20)

        (setq bibtex-autokey-year-length 4
              bibtex-autokey-name-year-separator "-"
              bibtex-autokey-year-title-separator "-"
              bibtex-autokey-titleword-separator "-"
              bibtex-autokey-titlewords 2
              bibtex-autokey-titlewords-stretch 1
              bibtex-autokey-titleword-length 5)

        (defun psimacs/bibtex/isbn-to-bibtex ()
          "Get the bibtex entry from the ISBN number."
          (interactive)
          (let (
                 (isbn (read-string "Enter ISBN number: "))
                 (service (psimacs/ui/internal/select-from-item-list "Service: " '("goob" "openl" "wiki")))
               )
            (setq isbn (replace-regexp-in-string "[^0-9-]*" "" isbn))
            (apply #'call-process psimacs/config/isbn-meta-exe nil t t `(,isbn ,service "bibtex"))
          )
        )
)
#+end_src

*** Ivy-BibTeX

[[https://github.com/tmalsburg/helm-bibtex][Ivy-bibtex]] allows you to search and manage your BibTeX bibliography.
The main selling points are efficient search in large bibliographies using powerful search expressions
and tight integration into your Emacs workflows.

| Key binding | Command                         | Description                              |
|-------------+---------------------------------+------------------------------------------|
| =C-c i b=   | =M-x ivy-bibtex= | Ivy layer for bibtex. |
|-------------+---------------------------------+------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-major-modes-latex-mode.el
(use-package ivy-bibtex
    :bind ("C-c i b" . ivy-bibtex)
    :init
        (setq bib-files-directory (directory-files psimacs/config/bibliography-dir t "^[A-Z|a-z].+.bib$"))
        (setq pdf-files-directory (psimacs/file-system/concat-directory psimacs/config/bibliography-dir "pdf"))

        (setq bibtex-completion-bibliography bib-files-directory)
        (setq bibtex-completion-library-path pdf-files-directory)
        (setq bibtex-completion-notes-path (psimacs/file-system/concat-directory psimacs/config/bibliography-dir "notes"))
        (setq bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n")

        (setq bibtex-completion-additional-search-fields '(keywords tags url journal booktitle))

        (setq bibtex-completion-display-formats
                '(
                    (article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
                    (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
                    (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
                    (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
                    (online        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${url:40}")
                    (misc          . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}")
                    (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}")
             ))

        (setq bibtex-completion-pdf-symbol "⌘")
        (setq bibtex-completion-notes-symbol "✎")

        (setq bibtex-completion-pdf-field "File")
        (setq bibtex-completion-pdf-open-function
            (lambda (fpath)
                (call-process (concat psimacs/config/pdf-viewer-runtime " -reuse-instance") nil 0 nil fpath)))

        (setq ivy-bibtex-default-action 'bibtex-completion-insert-citation)
)
#+end_src

** LaTeX

Support for writing text with [[https://www.latex-project.org/][LaTeX.]] *Psimacs* uses the [[https://www.gnu.org/software/auctex/][AUCTeX]] package for assisting the [[https://www.latex-project.org/][LaTeX]] text editing.
On default, *Psimacs* generates [[https://en.wikipedia.org/wiki/PDF][PDF-files]] and configures the free [[https://www.sumatrapdfreader.org/free-pdf-reader.html][SumatraPDF]] application for viewing these
files.

| Key binding | Command                | Description                               |
|-------------+------------------------+-------------------------------------------|
| =C-c C-c=     | =M-x TeX-command-master= | You get a list of actions to choose from. |
| =C-c i g=     | =M-x pdf-sync-forward-search= | |
|-------------+------------------------+-------------------------------------------|

Following an unsorted list if references:
- [[https://www.gnu.org/software/auctex/][AUCTeX]]
- [[https://www.gnu.org/software/auctex/reftex.html][RefTeX]]
- [[https://www.emacswiki.org/emacs/LaTeX][EmacsWiki: LaTeX]]
- [[https://www.emacswiki.org/emacs/AUCTeX][EmacsWiki: AUCTeX]]
- [[https://www.emacswiki.org/emacs/RefTeX][EmacsWiki: RefTeX]]
- [[https://github.com/cdominik/cdlatex][CDLaTex]]
- [[http://latex.tugraz.at/programme/emacs][LaTeX]]
- [[https://www.latex-project.org/][The LaTeX Project]]
- [[https://en.wikibooks.org/wiki/LaTeX][WikiBooks: LaTeX]]
- [[https://en.wikibooks.org/wiki/LaTeX/Mathematics][WikiBooks: LaTeX Mathematics]]
- [[http://tug.ctan.org/info/lshort/english/lshort.pdf][The Not So Short Introduction to LaTeX2e]]
- [[https://www.youtube.com/playlist?list=PL1D4EAB31D3EBC449][LaTeX tutorial on YouTube]]
- [[https://www.dante.de/][Dante e.V.]]
- [[https://www.tug.org/texlive/][TeX Live]]
- [[https://miktex.org/][MiKTeX]]
- [[https://www.ctan.org/?lang=en][CTAN]]
- [[https://www.golatex.de/wiki/KOMA-Script][KOMA-Script]]

Remark:
- I used to have some problems with the MikTeX installation. I got error messages on running pdflatex.
  The follwing two commands worked for me running in a Windows console:

  #+begin_example
cd c:\Utils\MiKTeX\miktex\bin\x64
updmap.exe
initexmf --mkmaps
  #+end_example

  Reference:
  - [[https://tex.stackexchange.com/questions/154998/miktex-makepk-pk-font-alegreya-regular-lf-t1-base-could-not-be-created][miktex-makepk: PK font Alegreya-Regular-lf-t1--base could not be created]]
  - [[https://comp.text.tex.narkive.com/EHoYEqh7/pdflatex-can-t-find-font][pdflatex can't find font]]

#+begin_src emacs-lisp :tangle config/init-major-modes-latex-mode.el
;;
;; pdf-tools configuration
;;
(use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-tools-install)
    :bind ("C-c i g" . pdf-sync-forward-search)
    :config
        (setq mouse-wheel-follow-mouse t)
        (setq pdf-view-resize-factor 1.10)
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-major-modes-latex-mode.el
;;
;; RefTex configuration
;;
(use-package reftex
    :config
        (setq reftex-cite-prompt-optional-args t) ; Prompt for empty optional arguments in cite
)
#+end_src



*** pdf-tools :noexport:

Package [[https://github.com/politza/pdf-tools][pdf-tools]] provids an internal [[https://en.wikipedia.org/wiki/PDF][PDF-files]] viewer. Unfortunately, I could not get this one to work
on my Windows OS setup.

#+begin_src emacs-lisp :tangle config/init-major-modes-latex-mode.el
;;
;; Latex configuration
;;
(use-package tex
    :straight auctex
    :defer t
;(use-package tex-site
;    :straight (auctex :host github :repo "hatlafax/auctex")
;     ;:straight auctex
    :mode ("\\.tex\\'" . latex-mode)
    :commands (
                TeX-revert-document-buffer
                LaTeX-find-matching-begin
                LaTeX-math-mode
              )
    :defines (TeX-save-query preview-image-type)
    :init
        (defun psimacs/config/use-external-pdf-viewer ()
            "Use the external PDF viewer."
            (interactive)
            (setq TeX-view-program-list
              `(
                ;; SumatraPDF viewer
                (,psimacs/config/pdf-viewer-name (
                                                  ,(concat psimacs/config/pdf-viewer-runtime " -reuse-instance")
                                                  (mode-io-correlate " -forward-search \"%b\" %n ") " %o"
                                                 ))
               ))

            (setq TeX-view-program-selection `(
                                               (output-pdf ,psimacs/config/pdf-viewer-name)
                                               (output-dvi "Yap")
                                               ((output-dvi style-pstricks) "dvips and start")
                                               (output-html "start")
                                              ))
        )

        (defun psimacs/config/use-internal-pdf-viewer ()
            "Use the internal PDF viewer."
            (interactive)
            (add-hook 'LaTeX-mode-hook 'pdf-tools-install)

            (setq TeX-view-program-list
                  '(
                    ("pdf-tools" "TeX-pdf-tools-sync-view")
                   ))

            (setq TeX-view-program-selection '(
                                               (output-pdf "pdf-tools")
                                              ))
            (setq TeX-source-correlate-start-server t)
        )

        (defun psimacs/config/select-current-pdf-viewer ()
            "Select the currently active pdf viewer"
            (interactive)
            (let* (( result (psimacs/ui/internal/select-from-item-list "Choose PDF viewr: " `(,psimacs/config/pdf-viewer-name "pdf-tools"))))
                (if (equal result "pdf-tools")
                    (psimacs/config/use-internal-pdf-viewer)
                  (psimacs/config/use-external-pdf-viewer))
            )
        )

    :config
        (setq TeX-auto-save t)
        (setq TeX-parse-self t)
        (setq-default TeX-master nil)

        (setq LaTeX-biblatex-use-Biber t)
        (setq TeX-command-BibTeX "Biber")

        (defcustom LaTeX-indent-level-item-continuation 10
          "*Indentation of continuation lines for items in itemize-like environments."
          :group 'LaTeX-indentation
          :type 'integer)

        (require 'latex)

        (defun LaTeX-indent-item ()
          "Provide proper indentation for LaTeX \"itemize\",\"enumerate\", and \"description\" environments.

\"\\item\" is indented `LaTeX-indent-level' spaces relative to
the the beginning of the environment.

Continuation lines are indented either twice
`LaTeX-indent-level', or `LaTeX-indent-level-item-continuation'
if the latter is bound."

          (save-match-data
            (let* ((offset LaTeX-indent-level)
                   (contin (or (and (boundp 'LaTeX-indent-level-item-continuation)
                                    LaTeX-indent-level-item-continuation)
                               (* 2 LaTeX-indent-level)))
                   (re-beg "\\\\begin{")
                   (re-end "\\\\end{")
                   (re-env "\\(itemize\\|\\enumerate\\|description\\)")
                   (indent (save-excursion
                             (when (looking-at (concat re-beg re-env "}"))
                               (end-of-line))
                             (LaTeX-find-matching-begin)
                             (current-column))))
              (cond ((looking-at (concat re-beg re-env "}"))
                     (or (save-excursion
                           (beginning-of-line)
                           (ignore-errors
                             (LaTeX-find-matching-begin)
                             (+ (current-column)
                                (if (looking-at (concat re-beg re-env "}"))
                                    contin
                                  offset))))
                         indent))
                    ((looking-at (concat re-end re-env "}"))
                     indent)
                    ((looking-at "\\\\item")
                     (+ offset indent))
                    (t
                     (+ contin indent))))))

        (add-hook 'LaTeX-mode-hook
            (lambda ()
                ;(rainbow-delimiters-mode)
                ;(company-mode)
                ;(smartparens-mode)

                (setq LaTeX-indent-level 4)
                (setq LaTeX-item-indent  0)
                (setq TeX-brace-indent-level 4)
                (setq TeX-newline-function 'reindent-then-newline-and-indent)
                (setq LaTeX-indent-environment-list
                        (nconc '(("itemize" LaTeX-indent-item)
                                 ("enumerate" LaTeX-indent-item)
                                 ("description" LaTeX-indent-item))
                        LaTeX-indent-environment-list))

                ;(add-to-list 'LaTeX-verbatim-environments "pycode")
                ;(add-to-list 'LaTeX-indent-environment-list '("pycode" current-indentation))

                (visual-line-mode)      ; word-wrapped document
                (LaTeX-math-mode)       ; (C-c ~) minor mode rebinding the key LaTeX-math-abbrev-prefix to allow easy typing of mathematical symbols
                                        ; ` will read a character from the keyboard, and insert the symbol as specified in LaTeX-math-default and LaTeX-math-list.
                                        ; You can use another prefix key (instead of `) by setting the variable LaTeX-math-abbrev-prefix.
                (turn-on-reftex)
                (setq reftex-plug-into-AUCTeX t)
                (reftex-isearch-minor-mode)

                ;(setq TeX-engine 'xetex)
                ;(setq TeX-engine 'luatex)

                ;(setq TeX-command-extra-options "-shell-escape")

                (setq TeX-PDF-mode t)
                ;(setq TeX-PDF-from-DVI "Dvips")
                ;(setq TeX-PDF-from-DVI "Dvipdfmx")
                (setq TeX-save-query nil)       ; C-c C-a will silently save the file before firing LaTeX

                (setq preview-image-type 'pnm)

                (setq TeX-source-correlate-mode t)
                (setq TeX-source-correlate-method 'synctex)
                (setq TeX-source-correlate-start-server t)

                ;(setq LaTeX-math-menu-unicode t)
                ;(setq font-latex-fontify-sectioning 1.3)

                (psimacs/config/use-external-pdf-viewer)

                ;; Update PDF buffers after successful LaTeX runs
                (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
    ))
)
#+end_src

*** Company-auctex

Package [[https://github.com/alexeyr/company-auctex][company-auctex]] provides a group of backends for
[[https://company-mode.github.io/][company]] providing auto-completion for AUCTeX.

#+begin_src emacs-lisp :tangle config/init-major-modes-latex-mode.el
(use-package company-auctex
    :after (auctex company)
    :config (company-auctex-init)
)
#+end_src

Package [[https://github.com/vspinu/company-math][company-math]] defines three company-mode backends:
=company-math-symbols-latex, =company-math-symbols-unicode= and =company-latex-commands=.

#+begin_src emacs-lisp :tangle config/init-major-modes-latex-mode.el
(use-package company-math
    :after (auctex company)
    :config
        (defun psimacs/latex/company-mode-setup ()
            (setq-local company-backends
                (append '((company-math-symbols-latex company-math-symbols-unicode company-latex-commands)) company-backends))
        )
    :hook (TeX-mode . psimacs/latex/company-mode-setup)
)
#+end_src

** Org-Mode

Package [[https://orgmode.org][org-mode]] is for keeping notes, maintaining TODO lists,
planning projects, and authoring documents with a fast and effective plain-text system.

The following links might be useful for diving deeper into [[http://orgmode.org/][Org-Mode]]:
- [[http://orgmode.org/manual/index.html][Org Mode Manual]]
- [[http://orgmode.org/worg/][Worg, the Org Mode Community]]
- [[https://www.emacswiki.org/emacs/OrgMode][EmacsWiki: Org Mode]]
- [[https://www.suenkler.info/notes/emacs-orgmode/][Aufgabenverwaltung im Emacs Org mode]]
- [[https://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][Dig Into Org Mode]]
- [[http://orgmode.org/worg/org-contrib/babel/][Org Mode Babel]]
- [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][Introduction to Literate Programming]]
- [[https://org-babel.readthedocs.io/en/latest/][Readthedocs about Org Babel]]
- [[http://orgmode.org/worg/orgcard.html][Org Mode reference card]]
- [[http://orgmode.org/orgcard.pdf][Org Mode Ref Card]]
- [[http://ergoemacs.org/emacs/emacs_org_markup.html][Org Mode Markup Cheatsheet]]
- [[http://pragmaticemacs.com/][Pragmatic Emacs]]
- [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
- [[https://mmmyddd.github.io/wiki/emacs/org-mode.html][Org-Mode by Justin]]

*** Remove build-in org from load-path :noexport:

*Psimacs* uses the [[https://orgmode.org/worg/org-contrib/][org-mode contributed packages]] which are
not part of the *Emacs* build-in [[https://orgmode.org][org-mode]] installation.
Therefore a fresh [[https://code.orgmode.org/bzg/org-mode][org-mode]] containing the [[https://orgmode.org/worg/org-contrib/][org-mode contributed packages]]
is installed by *Psimacs*.

In order to avoid inconsistencies with of build-in org package, we just remove it from the load-path.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Remove the built-in version of org-mode from the load-path.
;;
(require 'cl-seq)
(setq load-path
      (cl-remove-if
       (lambda (x)
         (string-match-p "org$" x))
       load-path))
#+end_src

*** The main Org-Mode configuration

The configuration is long and gets longer with time. Therefore it is split
into multiple chunks of code.

**** Fixing missing org-loaddefs.el :noexport:

The problem is that *Psimacs* uses currently an =org-plus-contrib= version taken directly from
the [[https://code.orgmode.org/bzg/org-mode.git][org-mode git]] repository. In order to install that version compatible =make= needs to be
installed on the machine. In order to circumvent this problem the following code gets installed,
that basically calls fixing functionality provided by [[https://orgmode.org][org-mode]]. This is described in the subsection
 [[https://orgmode.org/worg/dev/org-build-system.html][Support for Manual Build]] of the /Org Build System/ page.


#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Fix missing org-loaddefs.el
;;
(defun psimacs/config/fix-org-autoload-function (package &rest _)
    "Pre-build function to fix missing autoloads Org."
    (when (member package '("org" "org-plus-contrib"))
        (let ( (default-directory (straight--repos-dir "org"))
               (repo-loaddef-file (concat (straight--repos-dir "org") "org-loaddefs.el"))
               (load-path  (copy-sequence load-path))
             )
            (message "from org-fix %s" default-directory)

            (when (file-exists-p repo-loaddef-file)
                (message "... deleting %s" repo-loaddef-file)
                (delete-file repo-loaddef-file)
            )

            (normal-top-level-add-to-load-path '("lisp"))
            (load-library "../mk/org-fixup.el")

            (declare-function org-make-autoloads "../mk/org-fixup.el" (&optional compile force))
            (org-make-autoloads)

            (when (get-buffer "org-loaddefs.el")
                (kill-buffer "org-loaddefs.el")
            )
        )
        (remove-hook 'straight-use-package-pre-build-functions #'psimacs/config/fix-org-autoload-function)
    )
)

(add-hook 'straight-use-package-pre-build-functions #'psimacs/config/fix-org-autoload-function)
#+end_src

**** Org-Mode package installation :noexport:

If the temporary workaround is in use, the =:straight org-plus-contrib= statement needs to be replaced by the =:straight nil= statement.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; The main org-mode configuration
;;
(use-package org
    :straight (org-plus-contrib
                :repo "https://code.orgmode.org/bzg/org-mode.git"
                :local-repo "org"
                :files (:defaults "contrib/lisp/*.el")
             )
    :mode (("\\.\\(org\\|org_archive\\)$" . org-mode))

    ;;
    ;; The following code lines are only necessary because of the config files byte-compiling feature of Psimacs.
    ;; Probably a better way exists for this.
    ;;
    :commands ( org-transpose-element
                org-transpose-words
                org-table-transpose-table-at-point
                org-forward-heading-same-level
                org-backward-heading-same-level
                org-agenda-show
                org-agenda-goto
              )
    :defines org-agenda-mode-map
)
#+end_src

**** Org-Mode package installation

For now use the default *Emacs* build-in org-mode.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; The main org-mode configuration
;;
(use-package org
    :straight (:type built-in)
    :mode (("\\.\\(org\\|org_archive\\)$" . org-mode))

    ;;
    ;; The following code lines are only necessary because of the config files byte-compiling feature of Psimacs.
    ;; Probably a better way exists for this.
    ;;
    :commands ( org-transpose-element
                org-transpose-words
                org-table-transpose-table-at-point
                org-forward-heading-same-level
                org-backward-heading-same-level
                org-agenda-show
                org-agenda-goto
              )
    :defines org-agenda-mode-map
)
#+end_src

**** Org-Contrib package installation

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; The main org-mode configuration
;;
(use-package org-contrib)
#+end_src

**** Helper functions for Org-Mode

A small number of internal helper functions used in *Psimacs's* [[https://code.orgmode.org/bzg/org-mode][org-mode]] configuration.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Some helper functions that are used below
;;
(use-package org
    :straight nil
    :config
        (defun psimacs/internal/org-global-props (&optional property buffer)
          "Get the plists of global org properties of current buffer."
          (unless property (setq property "PROPERTY"))
          (with-current-buffer (or buffer (current-buffer))
            (org-element-map (org-element-parse-buffer) 'keyword (lambda (el) (when (string-match property (org-element-property :key el)) el)))))

        (defun psimacs/internal/org-global-prop-value (key)
          "Get global org property KEY of current buffer."
          (org-element-property :value (car (psimacs/internal/org-global-props key))))
)
#+end_src

**** Resolve conflicts with other packages

[[https://code.orgmode.org/bzg/org-mode][Org-mode]] does introduce some conflicts with other packages. The known ones are described in [[https://orgmode.org/manual/Conflicts.html][Packages that conflict with Org mode]].

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Conflicts with other packages
;;
;;
;; The main org-mode configuration
;;
(use-package org
    :straight nil
    :config
        (setq org-export-backends '(ascii html icalendar latex beamer md odt org-ref pandoc))
        (setq org-cite-csl-styles-dir psimacs/config/org-cite-csl-styles-dir)

        ;; Make windmove work in Org mode
        (add-hook 'org-shiftup-final-hook    'windmove-up)
        (add-hook 'org-shiftleft-final-hook  'windmove-left)
        (add-hook 'org-shiftdown-final-hook  'windmove-down)
        (add-hook 'org-shiftright-final-hook 'windmove-right)

        (setq org-support-shift-select t)   ;; Make shift-cursor commands select text when possible

        ;;
        ;; Do not pollute the main user directory
        ;;
        (setq org-persist-directory psimacs/config/org-persisit-dir)

        ;;
        ;; Counsel tag completion does not work properly.
        ;;
        (require 'counsel)
        (with-eval-after-load 'org        (define-key org-mode-map        (kbd "C-c C-S-q") #'counsel-org-tag))
        (with-eval-after-load 'org-agenda (define-key org-agenda-mode-map (kbd "C-c C-S-q") #'counsel-org-tag-agenda))
)
#+end_src

**** Basic Org-Mode settings

The following are basic [[https://code.orgmode.org/bzg/org-mode][org-mode]] settings used by *Psimacs*.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Basic org-mode configuration
;;
;; Allow alphabetical lists with something like [@a]
(use-package org
    :straight nil
    :config
        (setq org-return-follows-link t)
        (setq org-drawers (quote ("PROPERTIES" "CLOCKTABLE" "CLOCKING" "LOGBOOK" "CLOCK" "RESULTS" "PEOPLE" "RESOURCES")))
        (setq org-log-done 'time)
        (setq org-log-into-drawer t)
        (setq org-clock-into-drawer "CLOCKING")
        ;(setq org-completion-use-ido t)
        ;(setq org-tags-exclude-from-inheritance '("review")))

        (add-to-list 'org-modules 'org-habit t)
        (setq org-habit-show-habits-only-for-today t) ;; only show habits in today’s agenda view.

        (setq org-src-fontify-natively t)
        (setq org-list-description-max-indent 5)

        (setq org-adapt-indentation nil)
        ;(setq org-hide-leading-stars 'hidestars) ; see org-superstar

        (setq org-indent-indentation-per-level 2)
        (setq org-list-description-max-indent 4)
        (setq org-indent-mode-turns-off-org-adapt-indentation t)
        (setq org-indent-mode-turns-on-hiding-stars t)

        (setq org-src-preserve-indentation t)
        (setq org-startup-indented t)
        (setq org-startup-folded t)

        (setq org-deadline-warning-days 7)      ;; warn me of any deadlines in next 7 days

        (setq org-id-locations-file psimacs/config/org-id-file)

        (setq org-hide-emphasis-markers t)

        ;; https://abode.karthinks.com/org-latex-preview/#org99ce71c
        (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.0))

        ;;(plist-put org-latex-preview-appearance-options :page-width 0.8)
        (setq org-latex-preview-numbered t)
        (setq org-latex-preview-live t)
        ;;(add-hook 'org-mode-hook 'org-latex-preview-auto-mode)
        ;; Block C-n, C-p etc from opening up previews when using auto-mode
        ;;(setq org-latex-preview-auto-ignored-commands
        ;;  '(next-line previous-line mwheel-scroll
        ;;    scroll-up-command scroll-down-command))
        ;;(setq org-latex-preview-live-debounce 0.25))


        (defun psimacs/internal/org-remove-empty-drawer-on-clock-out()
            (save-excursion
                (beginning-of-line 0)
                (org-remove-empty-drawer-at (point))
            )
        )

        (defun psimacs/org/hack/fix-org-cycle-error ()
          "Hack function to unfreeze the sub-tree folding in org-mode."
          (interactive)
            (let ((P0 (point))(P1 (point-min)) (P2 (point-max)))
              (save-buffer)
              (kill-region P1 P2)
              (yank)
              (goto-char P0)
            )
        )

        (add-hook 'org-clock-out-hook 'psimacs/internal/org-remove-empty-drawer-on-clock-out 'append)
)
#+end_src

**** Org-latex-preview hack

The following is a hack for windows only. The =org-latex-preview= does not work out of the box for
*Psimacs* on Windows. The reason is a handling of a shorted relative file name that is not properly
consumed by the MSYS2 backend. In order to circumvent this problem, *Psimacs* provides the following
argument filter advise for function =org-compile-file=:

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Provide an advise for function org-compile-file
;;
(use-package org
    :straight nil
    :config
        (when psimacs/system/is-win32-p
            (defun psimacs/config/org-compile-file (args)
                "Filter argument advice: replace the first argument SOURCE by its non-shortened name"
                (setcar args (file-truename (nth 0 args)))
                args
            )

            (advice-add 'org-compile-file :filter-args #'psimacs/config/org-compile-file)
        )
)
#+end_src

**** The ToDo-keywords configuration

*Psimacs* defines a number of /ToDo/ keyword sequences.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; ToDo keywords setup
;;
(use-package org
    :straight nil
    :config
        ;;
        ;; The extra stuff after each keyword defines a shortcut key and whether a log entry should be added.
        ;; For example WAITING(i@/!) means 'i' is the keyboard shortcut, @ means "note with timestamp"
        ;; and /! means "add a timestamp even if I bailed on writing a note."
        ;;
        (setq
            org-todo-keywords '(
                (sequence "TODO(t/!)" "WORK(w/!)" "WAIT(a/!)" "HOLD(h@/!)" "PR(p@/!)" "MERGING(m@/!)" "|" "DONE(d/!)" "STOP(s@/!)" "MERGED(d/!)")
                (sequence "REPORT(r/!)" "BUG(b/!)" "FEEDBACK(f@/!)" "WAITING(i@/!)" "VERIFY(v@/!)" "KNOWNCAUSE(k@/!)" "|" "FIXED(x/!)")
                (sequence "|" "CANCELED(c@/!)" "DELEGATED(e@/!)")
            )
        )

        (setq
            org-todo-keyword-faces '(
                ("TODO"         . (:foreground "OrangeRed" :weight bold)) ;org-todo)
                ("WORK"         . (:foreground "LawnGreen" :weight bold))
                ("WAIT"         . (:foreground "DeepPink"  :weight bold))
                ("HOLD"         . (:foreground "DeepPink"  :weight bold))
                ("PR"           . (:foreground "DeepPink"  :weight bold))
                ("MERGING"      . (:foreground "LawnGreen" :weight bold))
                ("MERGED"       . (:foreground "DimGray"   :weight bold)) ;(org-done))
                ("DONE"         . (:foreground "DimGray"   :weight bold)) ;(org-done))
                ("STOP"         . (:foreground "DimGray"   :weight bold)) ;(org-done))

                ("REPORT"       . (:foreground "OrangeRed" :weight bold)) ;org-todo)
                ("BUG"          . (:foreground "OrangeRed" :weight bold)) ;org-todo)
                ("FEEDBACK"     . (:foreground "DeepPink"  :weight bold))
                ("WAITING"      . (:foreground "DeepPink"  :weight bold))
                ("VERIFY"       . (:foreground "DeepPink"  :weight bold))
                ("KNOWNCAUSE"   . (:foreground "DeepPink"  :weight bold))
                ("FIXED"        . (:foreground "DimGray"   :weight bold)) ;(org-done))

                ("CANCELED"     . (:foreground "DimGray"   :weight bold)) ;(org-done))
                ("DELEGATED"    . (:foreground "DimGray"   :weight bold)) ;(org-done))
            )
        )

        (setq org-enforce-todo-dependencies t)
        (setq org-enforce-todo-checkbox-dependencies t)

        (setq org-use-fast-todo-selection t)
        (setq org-treat-S-cursor-todo-selection-as-state-change nil)
)
#+end_src

**** The Tag-keywords configuration

A list of useful tags is predefined by *Psimacs*.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Tag keywords
;;
(use-package org
    :straight nil
    :config
        (setq org-tag-faces '(
                ;; Rough task assignment
                ("research"     . (:foreground "LightGoldenrod1"))
                ("learn"        . (:foreground "LightGoldenrod1"))
                ("engineer"     . (:foreground "LightGoldenrod1"))
                ("inform"       . (:foreground "LightGoldenrod1"))
                ("publish"      . (:foreground "LightGoldenrod1"))
                ("read"         . (:foreground "LightGoldenrod1"))
                ("write"        . (:foreground "LightGoldenrod1"))
                ("fix"          . (:foreground "LightGoldenrod1"))
                ("do"           . (:foreground "LightGoldenrod1"))
                ("config"       . (:foreground "LightGoldenrod1"))
                ("get"          . (:foreground "LightGoldenrod1"))
                ("request"      . (:foreground "LightGoldenrod1"))
                ("buy"          . (:foreground "LightGoldenrod1"))
                ("order"        . (:foreground "LightGoldenrod1"))
                ("dont-forget"  . (:foreground "LightGoldenrod1"))
                ("repetitive"   . (:foreground "LightGoldenrod1"))

                ;; Category of the task
                ("pg50"         . (:foreground "DeepSkyBlue"))
                ("render-engine". (:foreground "DeepSkyBlue"))
                ("opensg"       . (:foreground "DeepSkyBlue"))
                ("opengl"       . (:foreground "DeepSkyBlue"))
                ("boost"        . (:foreground "DeepSkyBlue"))
                ("emacs"        . (:foreground "DeepSkyBlue"))
                ("build"        . (:foreground "DeepSkyBlue"))


                ;; Language
                ("cpp"          . (:foreground "LawnGreen"))
                ("python"       . (:foreground "LawnGreen"))
                ("lisp"         . (:foreground "LawnGreen"))
                ("bash"         . (:foreground "LawnGreen"))
                ("prolog"       . (:foreground "LawnGreen"))
                ("javascript"   . (:foreground "LawnGreen"))
                ("java"         . (:foreground "LawnGreen"))
                ("C#"           . (:foreground "LawnGreen"))

                ;; Context
                ("phone"        . (:foreground "turquoise1"))
                ("home"         . (:foreground "turquoise1"))
                ("office"       . (:foreground "turquoise1"))
                ("shopping"     . (:foreground "turquoise1"))
                ("d-dorf"       . (:foreground "turquoise1"))
                ("cologne"      . (:foreground "turquoise1"))
                ("motorcycle"   . (:foreground "turquoise1"))

                ;; ToDo-Keywords
                ("todo"         . (:foreground "OrangeRed"))
                ("work"         . (:foreground "OrangeRed"))
                ("wait"         . (:foreground "OrangeRed"))
                ("hold"         . (:foreground "OrangeRed"))
                ("pr"           . (:foreground "OrangeRed"))
                ("merging"      . (:foreground "OrangeRed"))
                ("done"         . (:foreground "OrangeRed"))
                ("stop"         . (:foreground "OrangeRed"))
                ("merged"       . (:foreground "OrangeRed"))
                ("report"       . (:foreground "OrangeRed"))
                ("bug"          . (:foreground "OrangeRed"))
                ("feedback"     . (:foreground "OrangeRed"))
                ("waiting"      . (:foreground "OrangeRed"))
                ("verify"       . (:foreground "OrangeRed"))
                ("knowncause"   . (:foreground "OrangeRed"))
                ("fixed"        . (:foreground "OrangeRed"))
                ("canceled"     . (:foreground "OrangeRed"))
                ("delegated"    . (:foreground "OrangeRed"))

                ;; Common unspecied tags
                ("noexport"     . (:foreground "gold1"))
                ("noexportL0"   . (:foreground "gold1"))
                ("noexportL1"   . (:foreground "gold1"))
                ("noexportL2"   . (:foreground "gold1"))
                ("faq"          . (:foreground "gold1"))
                ("question"     . (:foreground "gold1"))
                ("note"         . (:foreground "gold1"))
                ("meeting"      . (:foreground "gold1"))
                ("private"      . (:foreground "gold1"))
                ("time"         . (:foreground "gold1"))
                ("important"    . (:foreground "gold1"))
                ("flagged"      . (:foreground "gold1"))
                ("project"      . (:foreground "gold1"))
                ("appointment"  . (:foreground "gold1"))

                ;; property tags
                ("ordered"      . (:foreground "chocolate1"))
              )
        )

        ;; Available key shortcuts for further tags.
        ;; h j k u
        ;; G N U

        (setq org-tag-persistent-alist
            '(
                ;; Rough task assignment
                (:startgroup    . nil)
                ("research"     . ?r)
                ("learn"        . ?l)
                ("engineer"     . ?e)
                ("inform"       . ?i)
                ("publish"      . ?p)
                ("read"         . ?a)
                ("write"        . ?w)
                ("fix"          . ?f)
                ("do"           . ?d)
                ("config"       . ?c)
                ("get"          . ?g)
                ("request"      . ?q)
                ("buy"          . ?b)
                ("order"        . ?o)
                ("repetitive"   . ?u)
                (:endgroup      . nil)

                ;; Category of the task
                (:startgroup    . nil)
                ("pg50"         . ?1)
                ("render-engine". ?2)
                ("opensg"       . ?3)
                ("opengl"       . ?4)
                ("boost"        . ?5)
                ("emacs"        . ?6)
                ("build"        . ?7)
                (:endgroup      . nil)

                ;; Language
                (:startgroup    . nil)
                ("cpp"          . ?+)
                ("python"       . ?P)
                ("lisp"         . ?L)
                ("bash"         . ?s)
                ("prolog"       . ?O)
                ("javascript"   . ?J)
                ("java"         . ?*)
                ("C#"           . ?')
                (:endgroup      . nil)

                ;; Context
                (:startgroup    . nil)
                ("phone"        . ?_)
                ("home"         . ?,)
                ("office"       . ?\;)
                ("shopping"     . ?.)
                ("d-dorf"       . ?<)
                ("cologne"      . ?>)
                ("motorcycle"   . ?:)
                (:endgroup      . nil)

                ;; ToDo-Keywords
                (:startgroup    . nil)
                ("todo"         . ?T)
                ("work"         . ?W)
                ("wait"         . ?A)
                ("hold"         . ?H)
                ("pr"           . ?Q)
                ("merging"      . ?M)
                ("done"         . ?D)
                ("stop"         . ?S)
                ("merged"       . ?0)

                ("report"       . ?R)
                ("bug"          . ?B)
                ("feedback"     . ?F)
                ("waiting"      . ?I)
                ("verify"       . ?V)
                ("knowncause"   . ?K)
                ("fixed"        . ?X)

                ("canceled"     . ?C)
                ("delegated"    . ?E)
                (:endgroup      . nil)

                ;; Common unspecied tags
                ("noexport"     . ?x)
                ("noexportL0"   . ?y)
                ("noexportL1"   . ?Y)
                ("noexportL2"   . ?z)
                ("faq"          . ??)
                ("question"     . ?&)
                ("note"         . ?n)
                ("meeting"      . ?m)
                ("private"      . ?v)
                ("time"         . ?t)
                ("important"    . ?#)
                ("flagged"      . ?=)
                ("project"      . ?-)
                ("appointment"  . ?N)

                ;; property tags
                ("ordered"      . ?Z)
            )
        )

        (setq org-tags-exclude-from-inheritance nil)

        ;; maybe later
        ;;(setq org-fast-tag-selection-single-key (quote auto))
        ;;(setq org-fast-tag-selection-single-key (quote expert))

        (setq org-use-fast-tag-selection t)
        (setq org-complete-tags-always-offer-all-agenda-tags nil)
        (setq org-track-ordered-property-with-tag "ordered")
)
#+end_src

**** ToDo-state tag triggers

For each /ToDo/-state a corresponding /tag/ is defined above. This section defines
/tag/ changes that should be triggered by /ToDo/ state changes.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; The defined ToDo state Tag triggers
;;
(use-package org
    :straight nil
    :config
        (setq org-todo-state-tags-triggers
            (quote (
                (""            ("todo") ("work") ("wait") ("hold") ("pr") ("merging") ("done") ("stop") ("merged") ("report") ("bug") ("feedback") ("waiting") ("verify") ("knowncause") ("fixed") ("canceled") ("delegated") (""           . nil))
                ("TODO"                 ("work") ("wait") ("hold") ("pr") ("merging") ("done") ("stop") ("merged") ("report") ("bug") ("feedback") ("waiting") ("verify") ("knowncause") ("fixed") ("canceled") ("delegated") ("todo"       . t))
                ("WORK"        ("todo")          ("wait") ("hold") ("pr") ("merging") ("done") ("stop") ("merged") ("report") ("bug") ("feedback") ("waiting") ("verify") ("knowncause") ("fixed") ("canceled") ("delegated") ("work"       . t))
                ("WAIT"        ("todo") ("work")          ("hold") ("pr") ("merging") ("done") ("stop") ("merged") ("report") ("bug") ("feedback") ("waiting") ("verify") ("knowncause") ("fixed") ("canceled") ("delegated") ("wait"       . t))
                ("HOLD"        ("todo") ("work") ("wait")          ("pr") ("merging") ("done") ("stop") ("merged") ("report") ("bug") ("feedback") ("waiting") ("verify") ("knowncause") ("fixed") ("canceled") ("delegated") ("hold"       . t))
                ("PR"          ("todo") ("work") ("wait") ("hold")        ("merging") ("done") ("stop") ("merged") ("report") ("bug") ("feedback") ("waiting") ("verify") ("knowncause") ("fixed") ("canceled") ("delegated") ("pr"         . t))
                ("MERGING"     ("todo") ("work") ("wait") ("hold") ("pr")             ("done") ("stop") ("merged") ("report") ("bug") ("feedback") ("waiting") ("verify") ("knowncause") ("fixed") ("canceled") ("delegated") ("merging"    . t))
                ("DONE"        ("todo") ("work") ("wait") ("hold") ("pr") ("merging")          ("stop") ("merged") ("report") ("bug") ("feedback") ("waiting") ("verify") ("knowncause") ("fixed") ("canceled") ("delegated") ("done"       . t))
                ("STOP"        ("todo") ("work") ("wait") ("hold") ("pr") ("merging") ("done")          ("merged") ("report") ("bug") ("feedback") ("waiting") ("verify") ("knowncause") ("fixed") ("canceled") ("delegated") ("stop"       . t))
                ("MERGED"      ("todo") ("work") ("wait") ("hold") ("pr") ("merging") ("done") ("stop")            ("report") ("bug") ("feedback") ("waiting") ("verify") ("knowncause") ("fixed") ("canceled") ("delegated") ("merged"     . t))

                ("REPORT"      ("todo") ("work") ("wait") ("hold") ("pr") ("merging") ("done") ("stop") ("merged")            ("bug") ("feedback") ("waiting") ("verify") ("knowncause") ("fixed") ("canceled") ("delegated") ("report"     . t))
                ("BUG"         ("todo") ("work") ("wait") ("hold") ("pr") ("merging") ("done") ("stop") ("merged") ("report")         ("feedback") ("waiting") ("verify") ("knowncause") ("fixed") ("canceled") ("delegated") ("bug"        . t))
                ("FEEDBACK"    ("todo") ("work") ("wait") ("hold") ("pr") ("merging") ("done") ("stop") ("merged") ("report") ("bug")              ("waiting") ("verify") ("knowncause") ("fixed") ("canceled") ("delegated") ("feedback"   . t))
                ("WAITING"     ("todo") ("work") ("wait") ("hold") ("pr") ("merging") ("done") ("stop") ("merged") ("report") ("bug") ("feedback")             ("verify") ("knowncause") ("fixed") ("canceled") ("delegated") ("waiting"    . t))
                ("VERIFY"      ("todo") ("work") ("wait") ("hold") ("pr") ("merging") ("done") ("stop") ("merged") ("report") ("bug") ("feedback") ("waiting")            ("knowncause") ("fixed") ("canceled") ("delegated") ("verify"     . t))
                ("KNOWNCAUSE"  ("todo") ("work") ("wait") ("hold") ("pr") ("merging") ("done") ("stop") ("merged") ("report") ("bug") ("feedback") ("waiting") ("verify")                ("fixed") ("canceled") ("delegated") ("knowncause" . t))
                ("FIXED"       ("todo") ("work") ("wait") ("hold") ("pr") ("merging") ("done") ("stop") ("merged") ("report") ("bug") ("feedback") ("waiting") ("verify") ("knowncause")           ("canceled") ("delegated") ("fixed"      . t))

                ("CANCELED"    ("todo") ("work") ("wait") ("hold") ("pr") ("merging") ("done") ("stop") ("merged") ("report") ("bug") ("feedback") ("waiting") ("verify") ("knowncause") ("fixed")              ("delegated") ("canceled"   . t))
                ("DELEGATED"   ("todo") ("work") ("wait") ("hold") ("pr") ("merging") ("done") ("stop") ("merged") ("report") ("bug") ("feedback") ("waiting") ("verify") ("knowncause") ("fixed") ("canceled")               ("delegated"  . t))
            ))
        )
)
#+end_src

**** Mermaid support with Org-Mode

[[https://mermaid.js.org][Mermaid]] is an open-source tool allowing users to create diagrams and charts from a plain text language.
*Emacs* integration of [[https://mermaid.js.org][Mermaid]] if provided by the package [[https://github.com/arnm/ob-mermaid][ob-mermaid]].

References:
- [[https://mermaid.js.org][Mermaid]]
- [[https://github.com/arnm/ob-mermaid][ob-mermaid]]
- [[https://github.com/mermaid-js/mermaid-cli][mermaid-cli]]
- [[https://mermaid.live/][Mermaid Live Editor]]

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; Mermaid support in ORG documents
;;
(use-package ob-mermaid
    :after org
    :config
        (setq ob-mermaid-cli-path (expand-file-name psimacs/config/mermaid-runtime-cmd))
)
#+end_src

**** YAML support with Org-Mode

[[https://github.com/llhotka/ob-yaml][Org Babel support for YAML]] support for YAML source code blocks in Org Babel.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; YAML support in ORG documents
;;
(use-package ob-yaml
    :straight (ob-yaml :host github :repo "llhotka/ob-yaml" :build (:not compile))
    :after org
)
#+end_src

**** Org babel language configuration

Configuration settings for [[https://orgmode.org/worg/org-contrib/babel/intro.html][org babel]].

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Org babel language support
;;
(use-package org
    :straight nil
    :config
        (setq org-confirm-babel-evaluate nil)

        (org-babel-do-load-languages 'org-babel-load-languages '(
            (C . t)
            (python . t)
            (plantuml . t)
            (mermaid . t)
            (dot . t)
            (emacs-lisp . t)
            (latex . t)
            (yaml .t)
        ))

        (setq org-plantuml-jar-path (expand-file-name psimacs/config/plantuml-jar-file))
)
#+end_src

**** Org Agenda configuration

Setup of the [[https://orgmode.org/manual/Agenda-Views.html][org agenda views]].

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Agenda setup
;;
(use-package org
    :straight nil
    :config
        (defun psimacs/config/init-agenda-files ()
          "Initialize the list of agenda files."
          (interactive)
          (let ((files '() ))
              (setq files (cl-loop
               for file in psimacs/config/org-capture-coding-diary-files
               collect (concat psimacs/config/agenda-dir file)))

              (setq org-agenda-files files)
            )
          )

        (defvar psimacs/config/org-agenda--todo-keyword-regex
          (reduce (lambda (cur acc)
                    (concat acc "\\|" cur))
                  (mapcar (lambda (entry) (concat "\\* " entry))
                          '("TODO" "WORK" "WAIT" "HOLD" "PR" "MERGING" "MERGED" "DONE" "STOP" "REPORT" "BUG" "FEEDBACK" "WAITING" "VERIFY" "KNOWNCAUSE" "FIXED" "CANCELED" "DELEGATED")))
          "Regex which filters all TODO keywords")

        (defvar psimacs/config/org-agenda--last-months-regex
          (let* ((y0 (string-to-number (format-time-string "%Y" (current-time))))
                 (y1 y0)
                 (y2 y0)
                 (y3 y0)
                 (y4 y0)
                 (m0 (string-to-number (format-time-string "%d" (current-time))))
                 (m1 (if (> m0 1) (- m0 1) (progn (setq y1 (- y0 1) y2 y1 y3 y2 y4 y3) 12)))
                 (m2 (if (> m1 1) (- m1 1) (progn (setq y2 (- y0 1)       y3 y2 y4 y3) 12)))
                 (m3 (if (> m2 1) (- m2 1) (progn (setq y3 (- y0 1)             y4 y3) 12)))
                 (m4 (if (> m3 1) (- m3 1) (progn (setq y4 (- y0 1)                  ) 12)))
                 (s0 (format "%d-%02d" y0 m0))
                 (s1 (format "%d-%02d" y1 m1))
                 (s2 (format "%d-%02d" y2 m2))
                 (s3 (format "%d-%02d" y3 m3))
                 (s4 (format "%d-%02d" y4 m4))
                )
            (reduce (lambda (cur acc)
                    (concat acc "\\|" cur))
                  `(,s4 ,s3 ,s2 ,s1 ,s0))))


        (defun psimacs/config/org-agenda--calculate-files-for-regex (regex)
          "Yields a fresh array with all files containing todos which match REGEX.

        Uses grep to discover all files containing anything stored in
        org-agenda--todo-keyword-regex."
          (remove-if #'file-directory-p
           (split-string
            (shell-command-to-string
             (concat "grep --include=\"*.org\" -rl -e '" regex "' " psimacs/config/roam-notes-dir))
            "\n")))


        (defun psimacs/config/org-agenda-all ()
          "Use all files for org-agenda."
          (interactive)
          (psimacs/config/init-agenda-files)
          (setq org-agenda-files (append org-agenda-files (list psimacs/config/roam-notes-dir))))

        (defun psimacs/config/org-agenda-todos ()
          "Use all files with TODO states."
          (interactive)
          (psimacs/config/init-agenda-files)
          (setq org-agenda-files (append org-agenda-files (psimacs/config/org-agenda--calculate-files-for-regex psimacs/config/org-agenda--todo-keyword-regex))))

        (defun psimacs/config/org-agenda-last-months ()
          "Use all files which refer to the last few months."
          (interactive)
          (psimacs/config/init-agenda-files)
          (setq org-agenda-files (append org-agenda-files (psimacs/config/org-agenda--calculate-files-for-regex psimacs/config/org-agenda--last-months-regex))))

        (psimacs/config/org-agenda-last-months)
        ;;(psimacs/config/init-agenda-files)

        (setq org-agenda-skip-unavailable-files t)

        (setq org-agenda-window-setup 'current-window)

        (setq org-agenda-dim-blocked-tasks t)
        (setq org-agenda-compact-blocks t)      ;; Compact the block agenda view

        (setq org-agenda-span (quote fortnight)) ;; show me tasks scheduled or due in next fortnight

        (setq org-agenda-skip-scheduled-if-deadline-is-shown t) ;; don't show tasks as scheduled if they are already shown as a deadline

        (setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled)) ;; don't give awarning colour to tasks with impending deadlines if they are scheduled to be done

        (setq org-agenda-todo-ignore-deadlines (quote all)) ;; don't show tasks that have deadlines in the normal todo list
        (setq org-agenda-todo-ignore-scheduled (quote all)) ;; don't show tasks that are scheduled  in the normal todo list

        (setq org-agenda-sorting-strategy                   ;; sort tasks in order of when they are due and then by priority
            (quote
                (
                    (agenda deadline-up priority-down)
                    (todo priority-down category-keep)
                    (tags priority-down category-keep)
                    (search category-keep)
                )
            )
        )

        (setq org-agenda-custom-commands
              (quote (("f" "Agenda + flagged"
                       ((tags "flagged")
                        (agenda ""))))))

        (unless (file-directory-p psimacs/config/agenda-dir)
            (mkdir psimacs/config/agenda-dir t)
        )
)
#+end_src

**** Refiling and Archiving

Once information is in the system, it may need to be moved around. Org provides [[https://orgmode.org/manual/Refiling-and-Archiving.html][Refile, Copy and Archive]] commands for this.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Refiling
;;
(use-package org
    :straight nil
    :config
        (setq org-refile-targets '((org-agenda-files :maxlevel . 9)))
        (setq org-refile-use-outline-path 'file)
        (setq org-outline-path-complete-in-steps nil)
        (setq org-refile-allow-creating-parent-nodes 'confirm)

        (setq org-log-refile t)        ;; a timestamp or a note is recorded whenever an entry is refiled.
        (setq org-refile-keep nil)     ;; Do not refile and keep the entry in place
        (setq org-refile-use-cache t)  ;; Caching of refile targets for performane reasons. See command org-refile-cache-clear

        (run-with-idle-timer 300 t (lambda ()
                            (org-refile-cache-clear)
                            (org-refile-get-targets)))

        (setq org-reverse-note-order nil)
)
#+end_src

**** Priorities configuration

[[https://orgmode.org/manual/Priorities.html#Priorities][Priorities]] allows to give /ToDo/ states an additional dimension.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Priorities
;;
(use-package org
    :straight nil
    :config
        (setq org-highest-priority ?A)
        (setq org-lowest-priority  ?E)
        (setq org-default-priority ?C)

        (setq org-priority-faces
              '(
                (?A . (:foreground "Red"         :weight bold))
                (?B . (:foreground "DeepPink"    :weight bold))
                (?C . (:foreground "LawnGreen"   :weight bold))
                (?D . (:foreground "DeepSkyBlue" :weight bold))
                (?E . (:foreground "gold1"       :weight bold))
               )
        )
)
#+end_src

**** Capturing base configuration

[[https://orgmode.org/manual/Capture.html#Capture][Capture]] lets you quickly store notes with little interruption of your work flow.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Capture
;;
(use-package org
    :straight nil
    :config
        (add-hook 'org-capture-mode-hook
            (lambda ()
                (setq-local org-tag-alist (org-global-tags-completion-table))
            )
        )

        ;;(add-hook 'org-capture-mode-hook
        ;;    (lambda ()
        ;;        (save-restriction
        ;;            (widen)
        ;;            (setq-local org-tag-alist (org-get-buffer-tags))
        ;;        )
        ;;    )
        ;;)

        (defun psimacs/internal/org-capture-file-link ()
            (let (
                (result "")
                (file (org-capture-get :original-file))
                )
                (when file
                    (setq result
                        (concat
                            "[[file:"
                            file
                            "::"
                            (with-current-buffer (org-capture-get :original-file-nondirectory) (number-to-string (line-number-at-pos)))
                            "]["
                            (org-capture-get :original-file-nondirectory)
                            "]]")))
                result
            )
        )

        (defun psimacs/internal/org-capture-code-block ()
            (let (region-text result mode arg)
                (setq result "")
                (setq region-text (org-capture-get :initial))
                (if (> (length region-text) 0)
                    (progn
                        (setq mode (with-current-buffer (org-capture-get :original-file-nondirectory) major-mode))
                        (setq arg "")
                        (when (equal mode 'awk-mode)          (setq arg "awk"))
                        (when (equal mode 'c++-mode)          (setq arg "cpp"))
                        (when (equal mode 'c-mode)            (setq arg "C"))
                        (when (equal mode 'calc-mode)         (setq arg "calc"))
                        (when (equal mode 'graphviz-dot-mode) (setq arg "dot"))
                        (when (equal mode 'lisp-mode)         (setq arg "emacs-lisp"))
                        (when (equal mode 'latex-mode)        (setq arg "latex"))
                        (when (equal mode 'org-mode)          (setq arg "org"))
                        (when (equal mode 'perl-mode)         (setq arg "perl"))
                        (when (equal mode 'plantuml-mode)     (setq arg "plantuml"))
                        (when (equal mode 'mermaid-mode)      (setq arg "mermaid"))
                        (when (equal mode 'python-mode)       (setq arg "python"))
                        (when (equal mode 'sh-mode)           (setq arg "shell"))
                        (when (equal mode 'prolig-mode)       (setq arg "prolog"))

                        (setq result (concat
                            "\n"
                            "#+begin_src" " " arg "\n"
                            region-text "\n"
                            "#+end_src" "\n"
                            ))))
                result
            )
        )
)
#+end_src

**** Capturing templates

*Psimacs* provides some predefined  [[https://orgmode.org/manual/Capture.html#Capture][capture]] templates that are defined in the following block.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Capturing templates
;;
(use-package org
    :straight nil
    :config
        (defun psimacs/internal/org-catpure-set-templates ()
            (let (
                    (code-point-template "* %? %^G\nEntered: %U\n%(psimacs/internal/org-capture-file-link)\n %(psimacs/internal/org-capture-code-block)\n")
                    (todo-template    "* TODO [#C] %? %^G\nEntered:   %U\nScheduled: %(org-time-stamp nil nil)\n%i\n")
                    (note-template    "* %? :Note:%^G\nEntered: %U\n")
                    (meeting-template "* %? :Meeting:%^G\nEntered:   %U\nScheduled: %(org-time-stamp '(8) nil)\n")
                    (journal-template    "** %^{Heading}\nEntered: %U\n%i\n%a")
                    (log-time-template   "** %U - %^{Activity} :Time:")

                    (code-diary-file     (concat psimacs/config/agenda-dir psimacs/config/org-capture-coding-diary-file))
                    (diary-file          (concat psimacs/config/agenda-dir "Diary.org"))
                    (journal-file        (concat psimacs/config/agenda-dir "Journal.org"))
                    (time-log-file       (concat psimacs/config/agenda-dir "TimeLog.org"))
                )

                (setq org-capture-templates
                    `(
                        ("c" "Code Point" entry (file+headline ,diary-file      "Code Points") ,code-point-template :empty-lines 1)
                        ("C" "Code Point" entry (file+headline ,code-diary-file "Code Points") ,code-point-template :empty-lines 1)

                        ("t" "ToDo"       entry (file+headline ,diary-file      "Tasks")       ,todo-template       :empty-lines 1)
                        ("T" "ToDo"       entry (file+headline ,code-diary-file "Tasks")       ,todo-template       :empty-lines 1)

                        ("n" "Note"       entry (file+headline ,diary-file      "Notes")       ,note-template       :empty-lines 1)
                        ("N" "Note"       entry (file+headline ,code-diary-file "Notes")       ,note-template       :empty-lines 1)

                        ("m" "Meeting"    entry (file+headline ,diary-file      "Meetings")    ,meeting-template    :empty-lines 1)
                        ("M" "Meeting"    entry (file+headline ,code-diary-file "Meetings")    ,meeting-template    :empty-lines 1)

                        ("j" "Journal"    entry (file+datetree ,journal-file)                  ,journal-template)
                        ("l" "Log Time"   entry (file+datetree ,time-log-file)                 ,log-time-template)
                    )
                )
            )
        )

        (defun psimacs/org/switch-capture-coding-diary-file ()
            "Switch current coding diary file."
            (interactive)
            (let ( (choice (ido-completing-read "Diary: " psimacs/config/org-capture-coding-diary-files )) )
              ;;(message "choice = %s" choice)
              (customize-set-variable 'psimacs/config/org-capture-coding-diary-file choice)

              (let ( (diary-file     (concat psimacs/config/agenda-dir psimacs/config/org-capture-coding-diary-file))
                     (diary-template (concat psimacs/config/agenda-dir "Diary.Template")) )
                (if (not (file-exists-p diary-file))
                  (copy-file diary-template diary-file))

                (psimacs/internal/org-catpure-set-templates)
              )))

        (psimacs/internal/org-catpure-set-templates)
)
#+end_src

**** HTML export tuning

Some configuration for HTML export is neccessary.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; org-mode html export
;;
(use-package org
    :straight nil
    :config
        (defun psimacs/internal/org-inline-css-hook (exporter)
            "Insert custom inline css on html export.

EXPORTER - the current exporter.

Insert custom inline css to automatically set the background of
code to whatever theme I`m using`s background."
            (when (eq exporter 'html)
                (let* (
                        (pre-bg (face-background 'default))
                        (pre-fg (face-foreground 'default))
                    )
                    (setq org-html-head-extra
                        (concat
                            org-html-head-extra
                            (format "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n" pre-bg pre-fg)
                        )
                    )
                )
            )
        )

        (add-hook 'org-export-before-processing-functions 'psimacs/internal/org-inline-css-hook)
)
#+end_src

**** Publishing support :noexport:

ToBe done.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Publishing setup
;;
(use-package org
    :straight nil
    :config

        ;; (setq org-publish-project alist
        ;;       '(
        ;;         ("org"
        ;;          :base-directory             "~/org"
        ;;          :publishing-directory       "~/public-html"
        ;;          :publishing-function        "org-html-publish-to-html"
        ;;          :section-nubers             nil
        ;;          :with-toc                   nil
        ;;        )
        ;;     ))
)
#+end_src

**** ODT export support

Provide some support for the [[https://en.wikipedia.org/wiki/OpenDocument][OpenDocument ODT]] file export.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; ODT support for export
;;
(use-package org
    :straight nil
    :defines ( org-export-odt-convert-processes )
    :config
        (require 'ox-odt)
        (setq org-odt-preferred-output-format "docx")

        (defun psimacs/config/org-export-as-docx-via-odt ()
            (let ((cmd psimacs/config/libre-office-exe))
                (when (and (eq system-type 'windows-nt) (file-exists-p cmd))
                    (setq cmd (shell-quote-argument cmd))
                    ;; org v7
                    (setq org-export-odt-convert-processes `(("LibreOffice" ,(concat cmd " --headless --convert-to %f%x --outdir %d %i"))))

                    ;; org v8/v9
                    (setq org-odt-convert-processes `(("LibreOffice" ,(concat cmd " --headless --convert-to %f%x --outdir %d %i")))))
            ))

        (psimacs/config/org-export-as-docx-via-odt)    ;; Run the function I just defined to set up org-export-as-docx-via-odt.
)
#+end_src

**** LaTeX export support

References:
    - [[https://jonathanabennett.github.io/blog/2019/05/29/writing-academic-papers-with-org-mode/][Jonathan Bennett's Blog: Writing Academic Papers with Org-mode]]
    - [[http://www.wouterspekkink.org/academia/writing/tool/doom-emacs/2021/02/27/writing-academic-papers-with-org-mode.html][Wouter Spekkink: Writing academic papers with org-mode]]

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; LaTeX support for export
;;
(use-package org
    :straight nil
    :config
        (add-to-list 'org-latex-classes
               '(
                    "apa7"
                    "\\documentclass{apa7}"
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
                )
        )
)
#+end_src

**** Markdown export support

Exporting to markdown yield non functioning table of content at least in
Gitlab. The problem is found in the standard use of ~<a id=~ which
has to be adjoined by ~<a name=~. The following code advices an
altered function that exports the problematic string.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Markdown support for export
;;
(use-package org
    :straight nil
    :config
        (defvar psimacs/config/org-export-markdown-headlines-with-name-tag t
            "Use the name tag instead of the id tag for markdown export.")

        (defun psimacs/config/org-md-headline (headline contents info)
          "Transcode HEADLINE element into Markdown format.
        CONTENTS is the headline contents.  INFO is a plist used as
        a communication channel."
          (unless (org-element-property :footnote-section-p headline)
            (let* ((level (+ (org-export-get-relative-level headline info)
                             (1- (plist-get info :md-toplevel-hlevel))))
               (title (org-export-data (org-element-property :title headline) info))
               (todo (and (plist-get info :with-todo-keywords)
                      (let ((todo (org-element-property :todo-keyword
                                    headline)))
                    (and todo (concat (org-export-data todo info) " ")))))
               (tags (and (plist-get info :with-tags)
                      (let ((tag-list (org-export-get-tags headline info)))
                    (and tag-list
                         (concat "     " (org-make-tag-string tag-list))))))
               (priority
                (and (plist-get info :with-priority)
                 (let ((char (org-element-property :priority headline)))
                   (and char (format "[#%c] " char)))))
               ;; Headline text without tags.
               (heading (concat todo priority title))
               (style (plist-get info :md-headline-style)))
              (cond
               ;; Cannot create a headline.  Fall-back to a list.
               ((or (org-export-low-level-p headline info)
                (not (memq style '(atx setext)))
                (and (eq style 'atx) (> level 6))
                (and (eq style 'setext) (> level 2)))
            (let ((bullet
                   (if (not (org-export-numbered-headline-p headline info)) "-"
                 (concat (number-to-string
                      (car (last (org-export-get-headline-number
                              headline info))))
                     "."))))
              (concat bullet (make-string (- 4 (length bullet)) ?\s) heading tags "\n\n"
                  (and contents (replace-regexp-in-string "^" "    " contents)))))
               (t
            (let ((anchor
                   (and (org-md--headline-referred-p headline info)
                    (if psimacs/config/org-export-markdown-headlines-with-name-tag
                        (let ((headline-name
                                (or (org-element-property :CUSTOM_ID headline)
                                (org-export-get-reference headline info))
                             ))
                            (format "<a id=\"%s\"></a>\n<a name=\"%s\"></a>" headline-name headline-name)
                        )
                    (format "<a id=\"%s\"></a>"
                            (or (org-element-property :CUSTOM_ID headline)
                            (org-export-get-reference headline info)))
                    )
                )))
              (concat (org-md--headline-title style level heading anchor tags)
                  contents)))))))

        (advice-add 'org-md-headline :override #'psimacs/config/org-md-headline)
)
#+end_src

**** Generally useful functions for Org-Mode

This section contains a number of useful functions for working with [[https://code.orgmode.org/bzg/org-mode][org-mode]] files.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Generally useful functions
;;
(use-package org
    :straight nil
    :config
        ;;
        ;; Search for headings
        ;;
        (defun psimacs/org/search ()
          "Search for headings."
          (interactive)
          (org-refile '(4)))

        ;;
        ;; Currently open org files
        ;;
        (defun psimacs/org/opened-buffer-files ()
          "Return the list of files currently opened in Emacs."
          (interactive)
          (delq nil
                (mapcar (lambda (x)
                  (if (and (buffer-file-name x)
                           (string-match "\\.org$"
                                         (buffer-file-name x)))
                      (buffer-file-name x)))
                (buffer-list))))
)
#+end_src

**** Handling of IDs in org-mode files

Unique ID properties for headlines can be quite useful for linking =org= files together. This
section contains some useful funcionality with respect to automatically generating such IDs.

Function =psimacs/org/ids-to-headlines-in-file= generates unique IDs for each headline found in
the current file.

Additionally the code defines a property =#+auto_ids: yes= that when found in the file automatically
generates IDs for all headlines on file save.

Function =psimacs/org/copy-id-to-clipboard= conveniently allows you to copy the ID link of a headline
to the clipboad allowing to easily construct =id:= links to [[https://code.orgmode.org/bzg/org-mode][org-mode]] items.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Handling of IDs in org-mode files
;;
(use-package org
    :straight nil
    :config
        ;;
        ;; Add ID properties to all headlines of file
        ;;
        (defun psimacs/org/ids-to-headlines-in-file ()
            "Add ID properties to all headlines in the current file which do not already have one."
            (interactive)
            (org-map-entries 'org-id-get-create)
        )

        ;;
        ;; Add ID properties to all headlines of file automatically if property '#+auto_ids: yes'
        ;;
        (defun psimacs/config/ids-to-headlines-in-file ()
          "Calls `psimacs/org/ids-to-headlines-in-file' only if buffer has property `auto_ids' set to `on', t, `yes' or `active'.

Example: #+auto_ids: yes"
          (let ( (val (psimacs/internal/org-global-prop-value "auto_ids")) )
              (when (and val (or (cl-equalp val "on") (cl-equalp val "yes") (cl-equalp val "t") (cl-equalp val "active")) )
                  (psimacs/org/ids-to-headlines-in-file)
          )))

        (add-hook 'org-mode-hook
            (lambda ()
               (add-hook 'before-save-hook 'psimacs/config/ids-to-headlines-in-file nil 'local)))

        ;;
        ;; Copy ID link with headline. Probably create new ID.
        ;;
        (defun psimacs/org/copy-id-to-clipboard ()
            "Copy an ID link with the headline to killring, if no ID is there then create a new unique ID.
This function works only in org-mode or org-agenda buffers.
The purpose of this function is to easily construct id-links to `org-mode' items.
If its assigned to a key it saves you marking the text and copying to the killring."
            (interactive)
            (when (eq major-mode 'org-agenda-mode) ;switch to orgmode
                (org-agenda-show)
                (org-agenda-goto)
            )
            (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
                (let* ( (mytmphead (nth 4 (org-heading-components)))
                        (mytmpid (funcall 'org-id-get-create))
                        (mytmplink (format "[[id:%s][%s]]" mytmpid mytmphead)) )
                    (kill-new mytmplink)
                    (message "Copied %s to killring (clipboard)" mytmplink)
                )
            )
        )
)
#+end_src

**** Functions for generating /Key binding, Command, Description/ tables.

In order to document the keybindings used in this configuration tables are used that
have three columns, namely =Key binding=, =Command= and =Description=.

Function =psimacs/org/table-create-preamble-keybinding-command-description= starts a new tabel of
that kind.

Function =psimacs/org/table-insert-row-keybinding-command-description= inserts either above or
below of point in the current table a template entry allowing to faster generate a final entry
to the table.

Function =psimacs/org/table-append-row-keybinding-command-description= performs the same operation
but always appends to the end of the table.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Support for easy keybinding, command, description table editing
;;
(use-package org
    :straight nil
    :config
        ;;
        ;; Support for writing this configuration file.
        ;;
        (defun psimacs/org/table-create-preamble-keybinding-command-description ()
          "This function creates a three column table with header \\='Key binding\\=', \\='Command\\=' and \\='Description\\='."
          (interactive)
          (with-current-buffer (current-buffer)
            (insert "| Key binding | Command | Description |\n")
            (insert "|-------------+---------+-------------|\n")))

        (defun psimacs/org/table-insert-row-keybinding-command-description (&optional arg)
          "This function inserts a three column row template above the current line into the table.

The current table is the active table or the last table above point.
The
        "
          (interactive "P")
          (let ((last-point (point)))
            (unless (org-at-table-p)
              (beginning-of-line)
              (while (and (not (org-at-table-p))
                          (> (point)
                             (point-min)))
                (beginning-of-line)
                (forward-line -1)))
            (if (org-at-table-p)
                (progn (with-current-buffer (current-buffer)
                         (org-table-insert-row arg)
                         (insert "==")
                         (org-table-next-field)
                         (insert "=M-x =")
                         (org-table-next-field)
                         (beginning-of-line)))
              (progn (goto-char last-point)))))

        (defun psimacs/org/table-append-row-keybinding-command-description ()
          "This function appends a three column row template to the current table.

The current table is the active table or the last table above point.
        "
          (interactive)
          (let ((last-point (point)))
            (if (org-at-table-p)
                (progn (while (and (org-at-table-p)
                                   (< (point)
                                      (point-max)))
                         (beginning-of-line)
                         (forward-line 1))
                       (forward-line -1))
              ;; else
              (progn (beginning-of-line)
                     (while (and (not (org-at-table-p))
                                 (> (point)
                                    (point-min)))
                       (beginning-of-line)
                       (forward-line -1))))
            (if (org-at-table-p)
                (psimacs/org/table-insert-row-keybinding-command-description t)
              ;; else
              (progn (goto-char last-point)))))
)
#+end_src

**** Key bindings used for org mode.

In this section the key bindings for the *Psimacs* [[https://code.orgmode.org/bzg/org-mode][org-mode]] configuration are defined.

#+attr_html: :class styledtable1
| Key binding     | Command                                                              | Description                                                                                        |
|-----------------+----------------------------------------------------------------------+----------------------------------------------------------------------------------------------------|
| =C-c C-.=         | =M-x org-time-stamp-inactive=                                          | Insert an inactive time stamp.                                                                     |
| =H-x C-c C-c i=   | =M-x psimacs/org/copy-id-to-clipboard=                                 | Copy an ID link with the headline to killring, if no ID is there then create a new unique ID.      |
| =H-x C-c C-x i=   | =M-x psimacs/org/ids-to-headlines-in-file=                             | Add ID properties to all headlines in the current file which do not already have one.              |
| =H-x C-c C-k i=   | =M-x org-table-insert-row=                                             | Insert a new row above the current line into the table.                                            |
| =H-x C-c C-k h=   | =M-x org-table-insert-hline=                                           | Insert a horizontal-line below the current line into the table.                                    |
| =H-x C-c S-C-k p= | =M-x psimacs/org/table-create-preamble-keybinding-command-description= | This function creates a three column table with header 'Key binding', 'Command' and 'Description'. |
| =H-x C-c S-C-k i= | =M-x psimacs/org/table-insert-row-keybinding-command-description=      | This function inserts a three column row template above the current line into the table.           |
| =H-x C-c S-C-k a= | =M-x psimacs/org/table-append-row-keybinding-command-description=      | This function appends a three column row template to the current table.                            |
|-----------------+----------------------------------------------------------------------+----------------------------------------------------------------------------------------------------|
| =H-x a=           | =M-x org-agenda=                                                       | Dispatch agenda commands to collect entries to the agenda buffer.                                  |
| =H-x l=           | =M-x org-store-link=                                                   | Store a link to the current location.                                                              |
| =H-x c=           | =M-x org-capture=                                                      | Capture something.                                                                                 |
| =H-x &=           | =M-x org-mark-ring-goto=                                               | Jump to the previous position in the mark ring.                                                    |
|-----------------+----------------------------------------------------------------------+----------------------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
;;
;; Key bindings for org-mode
;;
(use-package org
    :straight nil
    :config
    :bind (
           :map org-mode-map
           ("C-c C-."     . org-time-stamp-inactive)
           ("H-x C-c C-c i" . psimacs/org/copy-id-to-clipboard)
           ("H-x C-c C-x i" . psimacs/org/ids-to-headlines-in-file)
           ("H-x C-c C-k i" . org-table-insert-row)
           ("H-x C-c C-k h" . org-table-insert-hline)
           ("H-x C-c S-C-k p" . psimacs/org/table-create-preamble-keybinding-command-description)
           ("H-x C-c S-C-k i" . psimacs/org/table-insert-row-keybinding-command-description)
           ("H-x C-c S-C-k a" . psimacs/org/table-append-row-keybinding-command-description)

           :map psimacs/config/global-key-map/execute
           ("a" . org-agenda)
           ("l" . org-store-link)
           ("c" . org-capture)
           ("&" . org-mark-ring-goto)
          )
)
#+end_src

*** Visual Alignment for Tables :noexport:

Package  [[https://github.com/casouri/valign][valign]] provides visual alignment for Org Mode, Markdown
and table.el tables on GUI Emacs. It can properly align tables containing variable-pitch font, CJK characters
and images. Meanwhile, the text-based alignment generated by Org mode (or Markdown mode) is left untouched.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el :var file-description="Major Modes - org-mode setup"
(use-package valign
  :hook
      (org-mode . valign-mode)
      (markdown-mode . valign-mode)
  :config
      (setq valign-fancy-bar 1)
)
#+end_src

*** Org-ref: citations, cross-references, etc...

[[https://github.com/jkitchin/org-ref][org-ref]] makes it easy to insert citations, cross-references, indexes and glossaries as
hyper-functional links into org files.

The links are fontified so you can tell them apart from other links, and each link is
clickable to access functions like opening a pdf, notes or url associated with the link.

Each link also can be exported to LaTeX to build a PDF.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; Org-ref configuration
;;
(use-package org-ref
    ;;:straight nil
    :after org
    :init
        (require 'org-ref-utils)
        (require 'org-ref-ivy)
        (require 'org-ref-arxiv)
        (require 'org-ref-scopus)
        (require 'org-ref-wos)
        (require 'queue)

        (defun psimacs/org-ref/export/file (&optional _async _subtreep _visible-only _body-only _ext-plist)
          "Export notebook to html."
          (interactive)
          (let* ((name (file-name-sans-extension (buffer-file-name)))
                 (wcfg (current-window-configuration))
                )
            (let ((org-export-with-drawers "RESULTS"))
              (with-current-buffer (org-ref-export-as-org)
                (with-current-buffer (org-html-export-as-html)
                  (write-file (concat name ".html"))
                  (quit-window t)
                  )
                (quit-window t)
                )
              )

              (set-window-configuration wcfg)
            )
        )

        (defun psimacs/org-ref/export/file-md (&optional _async _subtreep _visible-only _body-only _ext-plist)
          "Export notebook to md."
          (interactive)
          (let* ((name (file-name-sans-extension (buffer-file-name)))
                 (wcfg (current-window-configuration))
                )
            (let ((org-export-with-drawers "RESULTS"))
              (with-current-buffer (org-ref-export-as-org)
                (with-current-buffer (org-md-export-as-markdown)
                  (write-file (concat name ".md"))
                  (quit-window t)
                  )
                (quit-window t)
                )
              )

              (set-window-configuration wcfg)
            )
        )

        (org-export-define-derived-backend 'org-ref 'org
          :menu-entry
          '(?R "Org-ref export"
               ((?a "to Ascii" org-ref-export-to-ascii)
                (?m "to markdown" org-ref-export-to-md)
                (?M "to MARKDOWN" psimacs/org-ref/export/file-md)
                (?h "to html" org-ref-export-to-html)
                (?H "to HTML" psimacs/org-ref/export/file)
                (?l "to LaTeX" org-ref-export-to-latex)
                (?p "to PDF" org-ref-export-to-pdf)
                (?o "to ODT" org-ref-export-to-odt)
                (?O "to Org buffer" org-ref-export-as-org)
                (?e "to email" org-ref-export-to-message)
                (?w "to docx" org-ref-export-to-docx)
                (?X "notebook" psimacs/jupyter/export/notebook)
        )))

        (defun psimacs/config/citeproc-bt--process-brackets (fn &rest args)
          "Advice for the `citeproc-bt--process-brackets' allowing resuing of embedded LaTeX math."
          ;(message "Entry: %S" args)

          (let* ((result (car args))
                 (lhb    (nth 1 args))
                 (rhb    (nth 2 args))
                 (formular-rx (rx "\\(" (group (*? anything)) "\\)"))
	               (match t)
                 (value nil)
                 (q (make-queue)))

            (while match
              (cond ((string-match formular-rx result)
                     (queue-enqueue q (match-string 0 result))
	                   (setq result (replace-match "<<QUEUED-MATCH>>" t t result)
		                 match t))
	                  (t (setq match nil))))

            ;(message "result1: %S" result)
            (setq result (apply fn `(,result ,lhb ,rhb)))
            ;(message "result2: %S" result)

            (setq match t)
            (while match
              (cond ((string-match "<<QUEUED-MATCH>>" result)
                     (setq value (queue-dequeue q)
	                         result (replace-match (concat lhb value rhb) t t result)
                           match t))
       	          (t (setq match nil))))
             ;(message "result3: %S" result)
             result)
        )

        (advice-add 'citeproc-bt--process-brackets :around #'psimacs/config/citeproc-bt--process-brackets)

        (defun psimacs/config/ivy-bibtex-display-transformer (candidate)
          (let* ((width (- (frame-width) 2))
                 (idx (get-text-property 1 'idx candidate))
                 (entry (cdr (nth idx (ivy-state-collection ivy-last))))
                 (fill-column (- width 7)))
            (with-temp-buffer
              (insert
               (mapconcat (lambda (x)
                            (apply
                             #'propertize
                             (s-format (car x)
                                       (lambda (key data)
                                         (pcase key
                                           ("=has-pdf="  (or (cdr (assoc key data)) "  "))
                                           ("=has-note=" (or (cdr (assoc key data)) "  "))
                                           ("keywords" (let ((keys (cdr (assoc key data))))
                                                         (if (stringp keys)
                                                             (format ", (%s)" keys)
                                                           "")))
                                           (_ (or (cdr (assoc key data)) "")))
                                         )
                                       entry)
                             (cdr x)))
                          '(("${=has-pdf=}${=has-note=} ${year} ")
                            ("${author}" face (:foreground "DodgerBlue3"))
                            (", ")
                            ("${title}" face italic)
                            (", ")
                            ("${journal}")
                            ("${keywords}" face bold))
                          ""))
              (fill-region (point-min) (point-max))
              (goto-char (point-min))
              (cond
               ((looking-at bibtex-completion-pdf-symbol)
                nil)
               ((looking-at " ?")
                nil)
               (t
                (skip-chars-forward " ")
                ;(setf (buffer-substring (point-min) (point)) "  ")))
                (cl--set-buffer-substring (point-min) (point) "  ")))
              (forward-line)
              (indent-region (point) (point-max) 7)

              (buffer-string))))

        (ivy-configure 'org-ref-cite-insert-ivy :display-transformer-fn #'psimacs/config/ivy-bibtex-display-transformer)

        (defun psimacs/config/ivy-bibtex-display-transformer-1 (candidate)
          "Prepare bib entry CANDIDATE for display."
          (let* ((width (- (frame-width) 2))
                 (idx (get-text-property 1 'idx candidate))
                 (entry (cdr (nth idx (ivy-state-collection ivy-last)))))
            (s-concat (if (s-starts-with-p ivy-mark-prefix candidate) ivy-mark-prefix "")
                      (bibtex-completion-format-entry entry width)
                      )
            )
          )

        (defun psimacs/config/ivy-bibtex-display-transformer-2 (candidate)
          "Prepare bib entry CANDIDATE for display.
This transformer allows org syntax in the candidate strings."
          (let* ((width (- (frame-width) 2))
	         (idx (get-text-property 1 'idx candidate))
	         (entry (cdr (nth idx (ivy-state-collection ivy-last))))
	         (fill-column (- width 7)))
            (with-temp-buffer
              (insert
               (s-concat
	        (if (s-starts-with-p ivy-mark-prefix candidate)
	            ivy-mark-prefix "")
	        (bibtex-completion-format-entry entry nil)))
              (fill-region (point-min) (point-max))
              (goto-char (point-min))
              (forward-line)
              (indent-region (point) (point-max) 7)
              (buffer-string))))

        ;;(ivy-configure 'org-ref-cite-insert-ivy :display-transformer-fn #'psimacs/config/ivy-bibtex-display-transformer-1)
        ;;(ivy-configure 'org-ref-cite-insert-ivy :display-transformer-fn #'psimacs/config/ivy-bibtex-display-transformer-2)

    :bind (
        :map bibtex-mode-map
            ("H-SPC b" . org-ref-bibtex-hydra/body)
        :map org-mode-map
            ("H-x C-c C-c l" . org-ref-insert-link)
            ("H-x C-c C-c L" . org-ref-insert-link-hydra/body)
    )
)

(use-package org-ref-ivy
    :straight nil
    :init
        (setq org-ref-insert-link-function      'org-ref-insert-link-hydra/body
	      org-ref-insert-cite-function      'org-ref-cite-insert-ivy
	      org-ref-insert-label-function     'org-ref-insert-label-link
	      org-ref-insert-ref-function       'org-ref-insert-ref-link
	      org-ref-cite-onclick-function     (lambda (_) (org-ref-citation-hydra/body))
              org-ref-completion-library        'org-ref-ivy-cite
              org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
        )
)
#+end_src

*** CANCELED Prettify headings with Org-Modern

References:
- [[https://lucidmanager.org/productivity/ricing-org-mode/][Ricing Org Mode: A Beautiful Writing Environment]]

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el
(use-package org-modern
    :after org
    :config
        (global-org-modern-mode)
)
#+end_src

*** Prettify headings with Org-Superstar


Prettify headings and plain lists in Org mode. Package [[https://github.com/integral-dw/org-superstar-mode][org-superstar]] is a direct descendant of
[[https://github.com/sabof/org-bullets][org-bullets]], with most of the code base completely rewritten.


#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; Prettify headings and plain lists in Org mode
;;
(use-package org-superstar
    :after org
    :config
        ;; Stop cycling bullets to emphasize hierarchy of headlines.
        (setq org-superstar-cycle-headline-bullets nil)

        ;(setq org-superstar-special-todo-items t)

        ;(setq org-superstar-headline-bullets-list '( "Ⅰ" "Ⅱ" "Ⅲ" "Ⅳ" "Ⅴ" "Ⅵ" "Ⅶ" "Ⅷ" "Ⅸ" "Ⅹ" ))
        ;(setq org-superstar-headline-bullets-list '("◉" ("🞛" ?◈) "○" "▷"))
        (setq org-superstar-headline-bullets-list '( "■" "●" "✸" "◆" "★" "▷" "✿" "✜"))
        (setq org-superstar-item-bullet-alist '( (?* . ?☆) (?+ . ?•) (?- . ?▷) ))

        ;    ;; Document Title, (\huge)
        (set-face-attribute 'org-document-title nil
                             :height 2.074
                             :foreground 'unspecified
                             :inherit 'default
        )

        (set-face-attribute 'org-superstar-item nil :height 1.2)
        (set-face-attribute 'org-superstar-header-bullet nil :height 1.2)
        (set-face-attribute 'org-superstar-leading nil :height 1.3)

        (setq org-hide-leading-stars nil)
        ;(setq org-superstar-leading-bullet ?\s)
        ;(setq org-superstar-leading-bullet ".")
        (setq org-superstar-leading-bullet "‧")

        ;(setq org-superstar-remove-leading-stars t)

        ;; Hide away leading stars on terminal.
        (setq org-superstar-leading-fallback ?\s)

        ;(setq inhibit-compacting-font-caches t)

        ;(setq org-superstar-todo-bullet-alist
        ;    '(
        ;        ("TODO"         . ?☐)
        ;        ("WORK"         . ?☐)
        ;        ("WAIT"         . ?☐)
        ;        ("HOLD"         . ?☐)
        ;        ("PR"           . ?☐)
        ;        ("MERGE"        . ?☐)
        ;        ("DONE"         . ?✔)
        ;        ("STOP"         . ?☐)
        ;
        ;        ("REPORT"       . ?☐)
        ;        ("BUG"          . ?☐)
        ;        ("FEEDBACK"     . ?☐)
        ;        ("WAITING"      . ?☐)
        ;        ("VERIFY"       . ?☐)
        ;        ("KNOWNCAUSE"   . ?☐)
        ;        ("FIXED"        . ?☐)
        ;
        ;        ("CANCELED"     . ?✘)
        ;        ("DELEGATED"    . ?☐)
        ;     ))

        (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
)
#+end_src

*** Insert links from the clipboard

The [[https://github.com/rexim/org-cliplink][org-cliplink]] package inserts [[https://orgmode.org][org-mode]] links from the clipboard.

A simple command =C-x p i= that takes a URL from the clipboard and inserts an [[https://orgmode.org][org-mode]] link with a title
of a page found by the URL into the current buffer.

See also: [[https://github.com/rexim/org-cliplink][org-cliplink]]

| Key binding | Command          | Description                               |
|-------------+------------------+-------------------------------------------|
| =C-x p i=     | =M-x org-cliplink= | Insert [[https://orgmode.org][org-mode]] links from the clipboard. |
|-------------+------------------+-------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; Insert links from the clipboard
;;
(use-package org-cliplink
    :after org
    :bind*
        ("C-x p i" . org-cliplink)
)
#+end_src

*** Auto completion for Org-Mode            :noexport:

[[https://github.com/aki2o/org-ac][Org-ac]] is an extension of *Emacs* that provide auto-complete sources for [[https://orgmode.org][org-mode]].
You'll be able to use auto-complete as substitute for pcomplete which is bound
to =M-<TAB>=.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; Provide auto-complete sources for org-mode
;;
(use-package org-ac
    :after org
    :init
        (org-ac/config-default)
)
#+end_src

*** Completions of structured templates.

[[https://orgmode.org/manual/Structure-Templates.html][Org tempo]] reimplements completions of structure template before point.

| Key binding | Description                           |
|-------------+---------------------------------------|
| =<﻿a TAB=      | =#+begin_export ascii ... #+end_export= |
| =<c TAB=      | =#+begin_center ... #+end_center=       |
| =<C TAB=      | =#+begin_comment ... #+end_comment=     |
| =<e TAB=      | =#+begin_example ... #+end_example=     |
| =<E TAB=      | =#+begin_export ... #+end_export=       |
| =<h TAB=      | =#+begin_export html ... #+end_export=  |
| =<l TAB=      | =#+begin_export latex ... #+end_export= |
| =<q TAB=      | =#+begin_quote ... #+end_quote=         |
| =<s TAB=      | =#+begin_src ... #+end_src=             |
| =<v TAB=      | =#+begin_verse ... #+end_verse=         |
|-------------+---------------------------------------|

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el
(use-package org-tempo
    :after org
    :straight nil
)
#+end_src

*** Presentation with Org-Mode

Presenting with [[https://orgmode.org][org-mode]]:
- [[http://orgmode.org/worg/exporters/beamer/ox-beamer.html][Org Manual: Beamer presentations]]
- [[http://orgcandman.github.io/blog/2016/01/:dat/Writing-emacs-presentations-with-beamer.html][Writing presentations in emacs with Beamer]]
- [[https://github.com/eschulte/epresent][epresent Package]]
- [[http://orgmode.org/worg/org-tutorials/non-beamer-presentations.html][Writing Non-Beamer presentations in org-mode]]
- [[http://sachachua.com/blog/2013/04/how-to-present-using-org-mode-in-emacs/][How to present using Org-mode in Emacs]]

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; Presentations with org-mode
;;
(use-package ox-beamer :straight nil :after org)
;(use-package epresent :straight t :after org)
#+end_src

*** Exporting to reStructuredText

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; reStructuredText with org-mode
;;
(use-package ox-rst :after org)
#+end_src

*** Exporting to Hugo

[[https://github.com/kaushalmodi/ox-hugo][ox-hugo]] is an Org exporter backend that exports Org to Hugo-compatible Markdown ([[https://github.com/russross/blackfriday][Blackfriday]])
and also generates the front-matter ([[https://toml.io/en/][TOML]] or  [[https://yaml.org/][YAML]] format).

See also: [[https://en.wikipedia.org/wiki/TOML][TOML on wikipedia]] and [[https://toml.io/en/][Tom's Obvious Minimal Language]] as well as to [[https://en.wikipedia.org/wiki/YAML][YAML on wikipedia]] and [[https://yaml.org/][YAML Ain't Markup Language]]

For a gentle introduction read this [[https://www.kengrimes.com/ox-hugo-tutorial/][ox-hugo tutorial.]] The official documentation can be found at [[https://ox-hugo.scripter.co/][Org to Markdown for Hugo]].

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; ox-hugo org exporter
;;
(use-package ox-hugo :after ox)
#+end_src

*** Exporting to Pandoc

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; ox-pandoc org exporter
;;
(use-package ox-pandoc
    :after ox
)
#+end_src

*** Lower case org keywords

Replace [[https://orgmode.org][org-mode]] keywords to lowercase in accordance to [[https://orgmode.org][org-mode]] 9.2

Reference: [[https://scripter.co/org-keywords-lower-case/][Converting Org keywords to lower-case]]

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; Lower case org keywords
;;
(defun psimacs/org/lower-case-org-keywords ()
  "Lower case Org keywords and block identifiers.

Example: \"#+TITLE\" -> \"#+title\"
           \"#+BEGIN_EXAMPLE\" -> \"#+begin_example\"

Inspiration:
https://code.orgmode.org/bzg/org-mode/commit/13424336a6f30c50952d291e7a82906c1210daf0."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (let ((case-fold-search nil)
          (count 0))
      ;; Match examples: "#+foo bar", "#+foo:", "=#+foo=", "~#+foo~",
      ;;                 "‘#+foo’", "“#+foo”", ",#+foo bar",
      ;;                 "#+FOO_bar<eol>", "#+FOO<eol>".
      (while (re-search-forward "\\(?1:#\\+[A-Z_]+\\(?:_[[:alpha:]]+\\)*\\)\\(?:[ :=~’”]\\|$\\)" nil :noerror)
        (setq count (1+ count))
        (replace-match (downcase (match-string-no-properties 1)) :fixedcase nil nil 1))
      (message "Lower-cased %d matches" count))))
#+end_src

*** Jupyter Notebook Integration

[[https://github.com/nnicandro/emacs-jupyter][emacs-jupyter]] provides /REPL/ and org-mode source block frontends to Jupyter kernels.
Kernel interactions integrated with Emacs’s built-in features.

| Key binding    | Command                                            | Description                                     |
|----------------+----------------------------------------------------+-------------------------------------------------|
| =H-SPC j=        | =M-x psimacs/hydra/jupyter/open-hydra=               | Show hydra for jupyter notebooks commands.      |
|----------------+----------------------------------------------------+-------------------------------------------------|
| =H-RET=          | =M-x jupyter-org-execute-and-next-block=             | Execute jupyter block and move to next block.   |
| =C-S-H-<return>= | =M-x psimacs/jupyter/execute-all-jupyter-src-blocks= | Execute all jupyter blocks.                     |
|----------------+----------------------------------------------------+-------------------------------------------------|
| =H-m n=          | =M-x psimacs/jupyter/next-jupyter-src-block=         | Move point into the next jupyter src block.     |
| =H-m p=          | =M-x psimacs/jupyter/previous-jupyter-src-block=     | Move point into the previous jupyter src block. |
|----------------+----------------------------------------------------+-------------------------------------------------|
| =H-m i d=        | =M-x org-display-inline-images=                      | Display inline images.                          |
| =H-m i r=        | =M-x org-redisplay-inline-images=                    | Redisplay inline images.                        |
| =H-m i t=        | =M-x org-toogle-inline-images=                       | Toogle inline images.                           |
|----------------+----------------------------------------------------+-------------------------------------------------|

The following commands are defined only if point is in an org-babel source block.

| Key binding | Command                                | Description                                                                 |
|-------------+----------------------------------------+-----------------------------------------------------------------------------|
| =C-RET=       | =M-x org-ctrl-c-ctrl-c=                  | Execute block.                                                              |
| =S-RET=       | =M-x jupyter-org-execute-and-next-block= | Execute block and move to next block.                                       |
| =M-RET=       |                                        | Execute block and add a new block.                                          |
| =C-M-RET=     | =M-x jupyter-org-execute-to-point=       | Execute block to point.                                                     |
| =S-C-RET=     | =M-x org-babel-execute-buffer=           | Execute all blocks of buffer.                                               |
| =H-M-RET=     | =M-x jupyter-org-execute-subtree=        | Execute subree to point.                                                    |
|-------------+----------------------------------------+-----------------------------------------------------------------------------|
| =C-M-x=       | =M-x jupyter-eval-defun=                 | Evaluate the function at point.                                             |
| =M-i=         | =M-x jupyter-inspect-at-point=           | Inspect the code at point.                                                  |
| =C-c C-b=     | =M-x jupyter-eval-buffer=                | Evaluate the whole buffer.                                                  |
| =C-c C-c=     | =M-x jupyter-eval-line-or-region=        | Evaluate line or region.                                                    |
| =C-c C-i=     | =M-x jupyter-repl-interrupt-kernel=      | Interrupt the kernel if possible.                                           |
| =C-c C-r=     | =M-x jupyter-repl-restart-kernel=        | Restart the kernel.                                                         |
| =C-c C-s=     | =M-x jupyter-repl-scratch-buffer=        | Switch to a scratch buffer connected to the current REPL in another window. |
| =C-c C-o=     | =M-x jupyter-eval-remove-overlays=       | Remove all evaluation result overlays in the buffer.                        |
| =C-c M-:=     | =M-x jupyter-eval-string=                | Evaluate string.                                                            |
|-------------+----------------------------------------+-----------------------------------------------------------------------------|


| Key binding | Description                           |
|-------------+---------------------------------------|
| =<bsh TAB=    | Bash shell source code block.         |
| =<sh TAB=     | Shell source code block.              |
| =<el TAB=     | Emacs lisp source code block.         |
| =<ell TAB=    | Lexical Emacs lisp source code block. |
| =<p TAB=      | Python source code block.             |
| =<ip TAB=     | IPython source code block.            |
| =<jp TAB=     | Jupyter source code block.            |
| =<jps TAB=    | Jupyter session source code block.    |
| =<sl TAB=     | Source block with language choice.    |
| =sbh TAB=     | Get source header value snippet.      |
|-------------+---------------------------------------|

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; Export org to jupyter notebook
;;
(use-package ox-ipynb
  :straight (:host github :repo "jkitchin/ox-ipynb")
  :after ox
  :config
    (defun psimacs/config/export-to-ipynb-file (&optional async subtreep visible-only body-only info)
              "Advice for the ox-ipynb-export-to-ipynb-file."

      (let ((org-export-with-broken-links t))
      (with-current-buffer (ox-ipynb-export-to-ipynb-buffer async subtreep visible-only body-only info)
        (let* (
               (efn (message (psimacs/file-system/find-file default-directory)))
               (buf (find-file-noselect efn) ))

          (message efn)

          (write-file efn)
          (with-current-buffer buf
            (setq-local export-file-name efn))
          (kill-buffer buf)
          efn))))

    (advice-add 'ox-ipynb-export-to-ipynb-file :override #'psimacs/config/export-to-ipynb-file)
)
#+end_src

#+begin_src emacs-lisp :tangle config/init-major-modes-org-mode.el
;;
;; Configuration of emacs-jupyter
;;

;; * line numbers
(defvar psimacs/jupyter/ob/number-line-overlays '()
  "List of overlays for line numbers.")

(make-variable-buffer-local 'psimacs/jupyter/ob/number-line-overlays)

(use-package zmq)
(use-package jupyter
    :after ox-ipynb
    :demand t
    :config
        (message "jupyter has been configured!")

                ;(setq jupyter--debug t)
        (setq jgupyter-default-timeout 20.0)
        (setq jupyter-long-timeout 120)

        (defvar psimacs/config/jupyter-result-with-colons t
            "Print colons in front of result values.")

        (defvar psimacs/config/jupyter-advice-jupyter-fn t
            "Advice jupyter function with private reimplementations.")

        ;; * automatic buffer kernels This is done by setting a session name in the org
        ;; file <jps is a yasnippet that does this reliably. I decided for now it is too
        ;; difficult to advise everything in jupyter to get the same result.

        (add-to-list 'org-babel-load-languages '(jupyter . t) t)

        (setq org-babel-default-header-args:jupyter-python
              '((:results . "both")
                (:session . "jupyter-python")
                (:kernel  . "python3")
                (:pandoc  . "t")
                (:exports . "both")
                (:cache   . "no")
                (:noweb   . "no")
                (:hlines  . "no")
                (:tangle  . "no")
                (:eval    . "never-export")))

        (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)

        (add-to-list 'org-src-lang-modes '("jupyter-python" . python))

        (put 'jupyter-org-resource-directory 'safe-local-variable #'stringp)

        ;;
        ;; Hack, for the problem that jupyter-locate-python does not find python.
        ;; See https://github.com/emacs-jupyter/jupyter/issues/468
        ;;
        (defun psimacs/jupyter/jupyter-locate-python ()
          "Return the path to the python executable in use by Jupyter.
        If the `default-directory' is a remote directory, search on that
        remote.  Raise an error if the executable could not be found.

        The paths examined are the data paths of \"jupyter --paths\" in
        the order specified.

        This function always returns the `file-local-name' of the path."
          (let* ((remote (file-remote-p default-directory))
                 (paths (mapcar (lambda (x) (concat remote x))
                           (or (plist-get
                                (jupyter-read-plist-from-string
                                 (jupyter-command "--paths" "--json"))
                                :data)
                               (error "Can't get search paths"))))
                 (path nil))

            (cl-loop
             with programs = '("bin/python3" "bin/python"
                               ;; Need to also check Windows since paths can be
                               ;; pointing to local or remote files.
                               "python3.exe" "python.exe")

             with pred = (lambda (dir)
                           (cl-loop
                            for program in programs
                            for _spath = (expand-file-name program dir)
                            thereis
                              ;(setq path (and (file-exists-p _spath) _spath))
                              (setq path (file-local-name (executable-find "python")))
                              )
                           )

             for path in paths
             thereis (locate-dominating-file path pred)
             finally (error "No `python' found in search paths"))
            (file-local-name path))
        )

        (advice-add 'jupyter-locate-python :override #'psimacs/jupyter/jupyter-locate-python)


        (defalias 'org-babel-execute:ipython 'org-babel-execute:jupyter-python)
        (setq org-babel-default-header-args:ipython org-babel-default-header-args:jupyter-python)
        (add-to-list 'org-src-lang-modes '("ipython" . python))

        (defun psimacs/jupyter/get-session ()
          "Get the session name in the current buffer."
          (let ((lang (car (org-babel-get-src-block-info))))
            (or
             (cdr
              (assoc :session
                     (cadr (org-babel-params-from-properties lang))))
             (cdr (assoc :session
                         org-babel-default-header-args:jupyter-python)))))


        (defun psimacs/jupyter/org-kill-kernel ()
          "Kill the kernel."
          (interactive)
          (let ((session (psimacs/jupyter/get-session)))
            (catch 'done
              (cl-loop for buffer in (buffer-list)
                       do
                       (when (string-match
                              (format "*jupyter-repl\\[.*\\]-%s*" session)
                              (buffer-name buffer))
                         (kill-buffer buffer)
                         (setq header-line-format nil)
                         (throw 'done buffer))))))


        (defun psimacs/jupyter/kill-kernel-hook (&rest _args)
          (setq header-line-format
                (format "%s running. Click here to kill it."
                        (psimacs/jupyter/get-session)))
          (local-set-key [header-line down-mouse-1]
                         `(lambda ()
                            (interactive)
                            (psimacs/jupyter/org-kill-kernel)))
          (add-hook 'kill-buffer-hook 'psimacs/jupyter/org-kill-kernel nil t))


        (defun psimacs/jupyter/check-restart (&rest _args)
          "If :restart is in the header, kill the kernel first."
          (let ((src (org-element-context)))
            (when (string-match ":restart" (or (org-element-property :parameters src) ""))
              (psimacs/jupyter/org-kill-kernel))))

        ;; * Fixing raw results
        ;; in emacs-jupyter :results raw, :results drawer did not work. This function seems to do the trick.

        ;; This function in emacs-jupyter seems to take a long time, and maybe is run
        ;; asynchronously. That messes up the order of results, as faster running things
        ;; come first in some process filter. This avoids this step and we do it later
        ;; in `psimacs/jupyter/org-sync-results'. There is probably no guarantee that
        ;; this always works though.
        (defun psimacs/jupyter/org-export-block-or-pandoc (type value _params)
          "Return VALUE, either converted with pandoc or in an export block.
        If PARAMS has non-nil value for key `:pandoc' and TYPE is in
        `jupyter-org-pandoc-convertable', convert the result with pandoc.
        Otherwise, wrap it in an export block."
          (jupyter-org-export-block type value))


        ;; used to advise `jupyter-org-sync-results'. I do this to fix some issues liek
        ;; retsults drawers, etc.
        (defun psimacs/jupyter/org-sync-results (req)
          "Return the result string in org syntax for the results of REQ.
        Meant to be used as the return value of
        `org-babel-execute:jupyter'."
          (when-let* ((results (nreverse (jupyter-org-request-results req)))
                      ;; Not sure why these are reversed above, it works right for some things,
                      ;; but not right for display stuff. I wonder if there is some way
                      ;; to tell when something is displayed.
                      (params (jupyter-org-request-block-params req))
                      (result-params (alist-get :result-params params)))

            (when psimacs/config/jupyter-result-with-colons
              (setq results (jupyter-org--coalesce-stream-results results)))

            ;; There is an inconsistency when you specify :results value where printed
            ;; outputs and the return value is provided, sometimes as a fixed width.
            ;; That is consistent with the jupyter notebook, but not consistent with
            ;; org-babel. Here I only return the last thing if value is selected, and do
            ;; not require it to be fixed-width. That also isn't quite right, except in
            ;; a drawer.
            (when (member "value" result-params)
              (let ((retval (car (last results))))
                (setq results
                      (list
                       (cond
                        ((eq 'fixed-width (org-element-type retval))
                         (if (not psimacs/config/jupyter-result-with-colons)
                           (org-element-property :value retval)
                          retval))
                        (t
                         retval))))))

            (when (member "both" result-params)
              (let ((retval (car (last results))))
                (setf (car (last results))
                      (cond
                       ((eq 'fixed-width (org-element-type retval))
                        (if (not psimacs/config/jupyter-result-with-colons)
                         (org-element-property :value retval)
                         retval))
                       (t
                        retval)))))

            ;; Do pandoc conversion here so the order of results is preserved.
            (when (cdr (assoc :pandoc params))
              (setq results
                    (cl-loop for result in results
                             collect
                             (cond
                              ((stringp result)
                               result)
                              ((and (listp result)
                                    (member (org-element-property :type result) jupyter-org-pandoc-convertable))
                               (jupyter-pandoc-convert
                                (org-element-property :type result)
                                "org"
                                (org-element-property :value result)))
                              (t
                               result)))))

            (org-element-interpret-data
             (cond
              ;; This happens when a named block is a variable in another block.
              ;; It is different than a :results silent header.
              ((jupyter-org-request-silent-p req)
               results)

              ((member "raw" result-params)
               results)

              ;; fall through to a drawer for now.
              (t
               (apply #'jupyter-org-results-drawer results))))))


        (defvar psimacs/jupyter/advices
          '((org-babel-execute:jupyter          :before   psimacs/jupyter/kill-kernel-hook)
            (org-babel-execute:jupyter          :before   psimacs/jupyter/check-restart)
            (jupyter-org-sync-results           :override psimacs/jupyter/org-sync-results)
            (jupyter-org-export-block-or-pandoc :override psimacs/jupyter/org-export-block-or-pandoc)
          )
          "Advices for psimacs/jupyter.
        This is a list of (emacs-jupyter-fn :position psimacs/jupyter/fn)")


        (defun psimacs/jupyter/advise ()
          "Turn psimacs/jupyter advices on."
          (interactive)
          (message "Advising emacs-jupyter")
          (setq psimacs/config/jupyter-advice-jupyter-fn t)
          (cl-loop for (emacs-jupyter-fn position psimacs/jupyter/fn) in psimacs/jupyter/advices
                   do
                   (advice-add emacs-jupyter-fn position psimacs/jupyter/fn)))


        (defun psimacs/jupyter/unadvise ()
          "Turn psimacs/jupyter advices off."
          (interactive)
          (message "Un-advising emacs-jupyter")
          (setq psimacs/config/jupyter-advice-jupyter-fn nil)
          (cl-loop for (emacs-jupyter-fn _position psimacs/jupyter/fn) in psimacs/jupyter/advices
                   do
                   (advice-remove emacs-jupyter-fn psimacs/jupyter/fn)))

        (defun psimacs/jupyter/toggle-advice-functions ()
            "Toggle the advice of jupyter functions."
            (interactive)
            (if psimacs/config/jupyter-advice-jupyter-fn
                (psimacs/jupyter/unadvise)
               (psimacs/jupyter/advise)))

        (defun psimacs/jupyter/toggle-results-with-colons ()
            "Toggle the flag `psimacs/config/jupyter-result-with-colons'."
            (interactive)
            (setq psimacs/config/jupyter-result-with-colons (not psimacs/config/jupyter-result-with-colons)))

        ;; Turn on by default
        (psimacs/jupyter/advise)


        ;; I don't know where the \\ lines come from, this removes them.
        (defun psimacs/config/rm-backslashes ()
          "rm \\ from the end of lines."
          (let ((result-start (org-babel-where-is-src-block-result)))
            (save-excursion
              (when (and result-start
                         (goto-char result-start)
                         (looking-at org-babel-result-regexp))
                (while (re-search-forward "\\\\\\\\" (org-babel-result-end) t)
                  (replace-match "")
                  ;; I don't know why this is needed, but without, it was not finding everything.
                  (goto-char result-start))))))

        (add-hook 'org-babel-after-execute-hook 'psimacs/config/rm-backslashes)

        ;; * Fix org-show-entry so it doesn't collapse results all the time
        ;;
        ;; I like to see the results, and this function usually hides them. I added the
        ;; unless wrapper, so it doesn't happen if point is on a src block. In a
        ;; previous version I just commented out the org-cycle-hide-drawers line, and I
        ;; may need to go back to that. this version should work as the original one
        ;; though except in src blocks. normally it is triggered by jumping to the next
        ;; src-block, and this is when I don't want it to hide the previous results.

        (defun psimacs/org/show-entry ()
          "Show the body directly following this heading.
        Show the heading too, if it is currently invisible."
          (interactive)
          (unless (org-in-src-block-p)
            (save-excursion
              (ignore-errors
                (org-back-to-heading t)
                (outline-flag-region
                 (max (point-min) (1- (point)))
                 (save-excursion
                   (if (re-search-forward
                        (concat "[\r\n]\\(" org-outline-regexp "\\)") nil t)
                       (match-beginning 1)
                     (point-max)))
                 nil)
                (org-cycle-hide-drawers 'children)))))

        (advice-add 'org-show-entry :override #'psimacs/org/show-entry)

        ;; * Working with exceptions
        ;;
        ;; The syntax highlighting for exceptions seems broken. `jupyter-org-client' has
        ;; a bunch of code that suggests this should be working, even referencing my
        ;; blog post about it. This is ok for now I guess. As I recall the syntax
        ;; highlighting is not persistent if you don't put the ansi codes in the buffer.
        ;;
        ;; this handled in generic functions that I find too difficult to trace for now.

        (defun psimacs/jupyter/jump-to-error ()
          "In a src block, jump to the line indicated as an error in the results.
        In a SyntaxError, there is not a traceback with a line number, so
        we handle it separately. It doesn't seem like it should be that
        way, but it is."
          (interactive)
          (let* ((cp (point))
                 (location (org-babel-where-is-src-block-result))
                 (case-fold-search t))

            (when (and location
                       (goto-char location)
                       (looking-at org-babel-result-regexp))
              (cond
               ;; Check for SyntaxError
               ((string-match "SyntaxError:" (buffer-substring location (org-babel-result-end)))
                (re-search-forward (rx (zero-or-more " ") "^") nil (org-babel-result-end))
                (forward-line -1)
                (let ((pattern (string-trim-left
                                (buffer-substring-no-properties
                                 (line-beginning-position) (line-end-position)))))
                  (goto-char cp)
                  (goto-char (org-element-property :begin (org-element-context)))
                  (unless
                      (search-forward pattern (org-element-property :end (org-element-context)) t)
                    (message "No SyntaxError found like %s" pattern))))

               ;; search for something like --> 21
               (t
                (goto-char location)
                (re-search-forward "^-*> \\([[:digit:]]*\\)" (org-babel-result-end))
                (save-match-data
                  (goto-char cp)
                  (goto-char (org-element-property :begin (org-element-context))))
                (forward-line (string-to-number (match-string-no-properties 1))))))))


        ;; * Handling ansi codes

        (defun psimacs/jupyter/ansi ()
          "Replaces ansi-codes in exceptions with colored text.
        I thought emacs-jupyter did this automatically, but it may only
        happen in the REPL. Without this, the tracebacks are very long
        and basically unreadable.

        We also add some font properties to click on goto-error.

        This should only apply to jupyter-lang blocks."
          (when (string-match "^jupyter" (car (or (org-babel-get-src-block-info t) '(""))))
            (let* ((r (org-babel-where-is-src-block-result))
                   (result (when r
                             (save-excursion
                               (goto-char r)
                               (org-element-context)))))
              (when result
                (ansi-color-apply-on-region (org-element-property :begin result)
                                            (org-element-property :end result))

                ;; Let's fontify "# [goto error]" to it is clickable
                (save-excursion
                  (goto-char r)
                  (when (search-forward "# [goto error]" (org-element-property :end result) t)
                    (add-text-properties
                     (match-beginning 0) (match-end 0)
                     (list 'help-echo "Click to jump to error."
                           'mouse-face 'highlight
                           'local-map (let ((map (copy-keymap help-mode-map)))
                                        (define-key map [mouse-1] (lambda ()
                                                                    (interactive)
                                                                    (search-backward "#+begin_src")
                                                                    (psimacs/jupyter/jump-to-error)))
                                        map))))))

              t)))

        (defun psimacs/jupyter/insert-src-block (&optional below)
          "Insert a src block above the current point.
With prefix arg BELOW, insert it below the current point.

If point is in a block, copy the header to the new block"
          (interactive "P")
          (if (org-in-src-block-p)
              (let* ((src (org-element-context))
	             (start (org-element-property :begin src))
	             (end (org-element-property :end src))
	             (lang (org-element-property :language src))
	             (switches (or (org-element-property :switches src) ""))
	             (parameters (or (org-element-property :parameters src) ""))
	             location)
	        (if below
	            (progn
	              (goto-char start)
	              (setq location (org-babel-where-is-src-block-result nil nil))
	              (if (not  location)
		          (goto-char end)
		        (goto-char location)
		        (goto-char (org-element-property :end (org-element-context))))
	              (insert (format "\n#+begin_src %s %s %s\n\n#+end_src\n\n" lang switches parameters))
	              (forward-line -3))
	          ;; after current block
	          (goto-char (org-element-property :begin (org-element-context)))
	          (insert (format "\n#+begin_src %s %s %s\n\n#+end_src\n\n" lang switches parameters))
	          (forward-line -3)))

            ;; Not in a src block, just insert a block
            (beginning-of-line)
            (insert (format "\n#+begin_src %s\n\n#+end_src\n" (completing-read "Language: " (mapcar 'car org-babel-load-languages))))
            (forward-line -1)))


            (defun psimacs/jupyter/ob/jump-to-first-line ()
              "Move point to start of first line in the src block."
              (interactive)
              (org-mark-ring-push)
              (org-edit-special)
              (goto-char (point-min))
              (org-edit-src-exit))


            (defun psimacs/jupyter/ob/jump-to-end-line ()
              "Move point to end of last line in the src block."
              (interactive)
              (org-mark-ring-push)
              (org-edit-special)
              (goto-char (point-max))
              (org-edit-src-exit))


            (defun psimacs/jupyter/ob/jump-to-end ()
              "Jump to src block end."
              (interactive)
              (org-mark-ring-push)
              (let* ((src (org-element-context))
                     (nlines (org-element-property :post-blank src)))

                (goto-char (org-element-property :end src))
                (when (numberp nlines)
                  (forward-line (* -1 (cl-incf nlines))))
                (goto-char (line-end-position))))

            (defun psimacs/jupyter/ob/toggle-output ()
              "Toggle folded state of results if there are some."
              (interactive)
              (let ((loc (org-babel-where-is-src-block-result)))
                (when loc
                  (save-excursion
                    (goto-char loc)
                    (org-cycle)))))


            (defun psimacs/jupyter/ob/mark-code ()
              "Mark the code in the block."
              (interactive)
              (org-edit-special)
              (let ((p0 (point-min))
                    (p1 (point-max)))
                (goto-char p0)
                (org-edit-src-exit)
                (set-mark (point))
                (goto-char (+ (point) (- p1 2)))))

            (defun psimacs/jupyter/ob/toggle-line-numbers ()
              "Toggle line numbers on and off."
              (interactive)
              (if psimacs/jupyter/ob/number-line-overlays
                  (psimacs/jupyter/ob/remove-line-numbers)
                (psimacs/jupyter/ob/add-line-numbers)))


            (defun psimacs/jupyter/ob/remove-line-numbers ()
              "Remove line numbers from org src-block."
              (interactive)
              (mapc 'delete-overlay
                    psimacs/jupyter/ob/number-line-overlays)
              (setq-local psimacs/jupyter/ob/number-line-overlays '())
              (remove-hook 'post-command-hook 'psimacs/jupyter/ob/add-line-numbers t))


            (defun psimacs/jupyter/ob/add-line-numbers ()
              "Add line numbers to an org src-block."
              (interactive)
              (save-excursion
                (let* ((src-block (org-element-context))
                       (nlines (- (length
                                   (s-split
                                    "\n"
                                    (org-element-property :value src-block)))
                                  1)))
                  ;; clear any existing overlays
                  (psimacs/jupyter/ob/remove-line-numbers)

                  (goto-char (org-element-property :begin src-block))
                  ;; the beginning may be header, so we move forward to get the #+BEGIN
                  ;; line. Then jump one more to get in the code block
                  (while (not (looking-at "#\\+BEGIN"))
                    (forward-line))
                  (forward-line)
                  (cl-loop for i from 1 to nlines
                           do
                           (beginning-of-line)
                           (let (ov)
                             (setq ov (make-overlay (point)(point)))
                             (overlay-put
                              ov
                              'before-string (propertize
                                              (format "%03s " (number-to-string i))
                                              'font-lock-face '(:foreground "black" :background "gray80")))
                             (push ov psimacs/jupyter/ob/number-line-overlays))
                           (forward-line))))
              ;; This allows you to update the numbers if you change the block, e.g. add/remove lines
              (add-hook 'post-command-hook 'psimacs/jupyter/ob/add-line-numbers nil 'local))


        ;; https://github.com/nnicandro/emacs-jupyter/issues/391
        ;; https://stackoverflow.com/questions/47585133/how-to-auto-suppress-results-for-empty-output
        (advice-add 'org-babel-insert-result :filter-args
            (lambda (args)
              (let ((result (car args))
                (result-params (cadr args))
                (others (cddr args)))
            (apply 'list
                   result
                   (if (or
                    (string-empty-p result) (not result))
                   (progn (org-babel-remove-result) '("silent"))
                    result-params)
                   others))))


        (add-to-list 'org-babel-after-execute-hook 'psimacs/jupyter/ansi t)

        (defun psimacs/jupyter/export/notebook (&optional _async _subtreep _visible-only _body-only _ext-plist)
          "Export notebook to html and ipynb."
          (interactive)
          (let* ((name (file-name-sans-extension (buffer-file-name)))
                 (wcfg (current-window-configuration))
                )
            (let ((org-export-with-drawers "RESULTS"))
              (with-current-buffer (org-ref-export-as-org)
                (with-current-buffer (org-html-export-as-html)
                  (write-file (concat name ".html"))
                  (quit-window t)
                  )
                (quit-window t)
                )
              )

            (let ((org-export-with-broken-links t)
                  (org-export-with-drawers nil))
              (with-current-buffer (org-ref-export-as-org)
                (with-current-buffer (ox-ipynb-export-to-ipynb-buffer)
                  (write-file (concat name ".ipynb"))
                  (quit-window t)
                  )
                (quit-window t)
                )
              )
              (set-window-configuration wcfg)
            )
        )

        (defun psimacs/jupyter/next-jupyter-src-block ()
          "Move point into the next jupyter src block."
          (interactive)
          (let ((found nil))
            (while (not found)
              (org-babel-next-src-block)

              (if (org-in-src-block-p)
                  (let ((info (org-babel-get-src-block-info)))
                    (when (string-match "^jupyter-\\(.+\\)$" (car info))
                      (setq found t)
                    )
                  )
                (setq found t)))))

        (defun psimacs/jupyter/previous-jupyter-src-block ()
          "Move point into the previous jupyter src block."
          (interactive)
          (let ((found nil))
            (while (not found)
              (org-babel-previous-src-block)

              (if (org-in-src-block-p)
                  (let ((info (org-babel-get-src-block-info)))
                    (when (string-match "^jupyter-\\(.+\\)$" (car info))
                      (setq found t)
                    )
                  )
                (setq found t)))))

        (defun psimacs/jupyter/in-jupyter-src-block-p ()
            "t if point is inside a jupyter source block, else nil."
            (let ((found nil))
                (if (org-in-src-block-p)
                    (let ((info (org-babel-get-src-block-info)))
                        (if (string-match "^jupyter-\\(.+\\)$" (car info))
                            (setq found t)
                        )
                    ))
                found
            ))

        (defun psimacs/jupyter/execute-all-jupyter-src-blocks ()
          "Execute all jupyter source blocks of the document."
          (interactive)
          (save-excursion
            (let ((proceed t))
                (goto-char (point-min))
                (unless (psimacs/jupyter/in-jupyter-src-block-p)
                    (psimacs/jupyter/next-jupyter-src-block))

                (while (and proceed (psimacs/jupyter/in-jupyter-src-block-p))
                    (org-ctrl-c-ctrl-c)
                    (let ((p (point)))
                        (psimacs/jupyter/next-jupyter-src-block)
                        (when (eq p (point))
                            (setq proceed nil))

                    )
                )
            )
          )
        )

        (defun psimacs/jupyter/execute-remaining-jupyter-src-blocks ()
          "Execute the remaining jupyter source blocks of the document."
          (interactive)
          (save-excursion
            (let ((proceed t))
                (unless (psimacs/jupyter/in-jupyter-src-block-p)
                    (psimacs/jupyter/next-jupyter-src-block))

                (while (and proceed (psimacs/jupyter/in-jupyter-src-block-p))
                    (org-ctrl-c-ctrl-c)
                    (let ((p (point)))
                        (psimacs/jupyter/next-jupyter-src-block)
                        (when (eq p (point))
                            (setq proceed nil))
                    )
                )
            )
          )
        )

        (defun psimacs/jupyter/remove-results-remaining-jupyter-src-blocks ()
          "Remove the results of the remaining jupyter source blocks of the document."
          (interactive)
          (save-excursion
            (let ((proceed t))
                (unless (psimacs/jupyter/in-jupyter-src-block-p)
                    (psimacs/jupyter/next-jupyter-src-block))

                (while (and proceed (psimacs/jupyter/in-jupyter-src-block-p))
                    (org-babel-remove-result)
                    (let ((p (point)))
                        (psimacs/jupyter/next-jupyter-src-block)
                        (when (eq p (point))
                            (setq proceed nil))
                    )
                )
            )
          )
        )

        (defun psimacs/jupyter/execute-jupyter-src-blocks-and-move-to-next ()
          "Execute current resp. next jupyter source blocks and move to the next one."
          (interactive)
          (unless (psimacs/jupyter/in-jupyter-src-block-p)
            (psimacs/jupyter/next-jupyter-src-block))

          (when (psimacs/jupyter/in-jupyter-src-block-p)
            (org-ctrl-c-ctrl-c)
            (psimacs/jupyter/next-jupyter-src-block)
            (recenter-top-bottom)
          )
        )

        (defvar psimacs/jupyter/src-keys '()
          "Keep a list of key definitions for each language.")


        (defmacro psimacs/jupyter/define-src-key (language key def)
          "For LANGUAGE (symbol) src blocks, define key sequence KEY as DEF.
KEY should be a string sequence that will be used in a `kbd' sequence.
This is like `define-key', except the definition only applies in
src blocks for a specific LANGUAGE.

If language is nil apply to all src-blocks.

Adapted from
http://endlessparentheses.com/define-context-aware-keys-in-emacs.html"
          (declare (indent 3)
	           (debug (form form form &rest sexp)))
          ;; store the key in psimacs/jupyter/src-keys
          (unless (cdr (assoc language psimacs/jupyter/src-keys))
            (cl-pushnew (list language '()) psimacs/jupyter/src-keys))

          (cl-pushnew (cons key def) (cdr (assoc language psimacs/jupyter/src-keys)))

          `(define-key org-mode-map ,(kbd key)
             '(menu-item
               ,(format "maybe-%s" (or (car (cdr-safe def)) def))
               nil
               :filter (lambda (&optional _)
		         ,(if language
		              `(when (and (org-in-src-block-p)
				          (string= ,(symbol-name language)
					           (car (org-babel-get-src-block-info t))))
			         ,def)
		            `(when (org-in-src-block-p)
		               ,def))))))


        (defvar psimacs/jupyter/src-key-bindings
          '(("C-<return>"   . #'org-ctrl-c-ctrl-c)
            ("S-<return>"   . #'jupyter-org-execute-and-next-block)
            ("M-<return>"   . #'(progn (org-ctrl-c-ctrl-c) (psimacs/jupyter/insert-src-block t)) )
            ("C-M-<return>" . #'jupyter-org-execute-to-point)
            ("H-M-<return>" . #'jupyter-org-execute-subtree)
            ("S-C-<return>" . #'jupyter-org-restart-and-execute-to-point)
            ("S-M-<return>" . #'jupyter-org-restart-kernel-execute-block)
            ("H-C-<return>" . #'jupyter-org-restart-kernel-execute-buffer))
          "Keybindings for src-blocks.")

        (defun psimacs/jupyter/src-key-bindings ()
          "Function to define key-bindings.
Usually called in a hook function."
          ;; These should work in every src-block IMO.
          (cl-loop for (key . cmd) in psimacs/jupyter/src-key-bindings
	           do
	           (eval `(psimacs/jupyter/define-src-key nil ,key ,cmd))))

        ;; I think this hook needs to be run at the end.
        (add-hook 'org-mode-hook 'psimacs/jupyter/src-key-bindings t)

        (defun psimacs/jupyter/show-src-keys (language)
          "Show a reminder of the keys bound for LANGUAGE blocks."
          (interactive (list (completing-read "Language: " (mapcar 'car psimacs/jupyter/src-keys))))
          (let* ((s (cl-loop for (key . function) in  (cdr (assoc (if (stringp language)
							              (intern-soft language)
							            language)
							          psimacs/jupyter/src-keys))
		             collect
		             (format "%10s  %40s" key function)))
	         (n (length s))
	         (m (floor (/ n 2))))
            (message "%s" (cl-loop for i to m concat
			           (s-join " | "
				           (append (-slice s (* i 3) (* 3 (+ i 1)))
					           '("\n")))))))


        ;; * The psimacs jupyter hydra
        ;; customization of what is in jupyter
        ;; These are more aligned with jupyter notebook I think

        (defvar psimacs/internal/hydra/jupyter-notebook
            (pretty-hydra-define
                psimacs/hydra/jupyter
                (
                   :title (psimacs/config/pretty-hydra-title "Jupyter Notebook" 'faicon "toggle-on" :v-adjust -0.1)
                   :color teal
                   :quit-key "q"
                )
                (
                    "Execute"
                      (
                        ("C-<return>"     org-ctrl-c-ctrl-c                                          "    current")
                        ("H-<return>"     psimacs/jupyter/execute-jupyter-src-blocks-and-move-to-next      "    current jupyter go next" :color red)
                        ("S-<return>"     jupyter-org-execute-and-next-block                         "    current src go next"     :color red)
                        ("M-<return>"     (progn (org-ctrl-c-ctrl-c) (psimacs/jupyter/insert-src-block t)) "    current and new")
                        ("C-M-<return>"   jupyter-org-execute-to-point                               "  to point")
                        ("H-M-<return>"   jupyter-org-execute-subtree                                "  subtree to point")
                        ("S-C-<return>"   jupyter-org-restart-and-execute-to-point                   "  restart - to point")
                        ("S-M-<return>"   jupyter-org-restart-kernel-execute-block                   "  restart - block")
                        ("H-C-<return>"   jupyter-org-restart-kernel-execute-buffer                  "  restart - buffer")
                        ("S-H-<return>"   psimacs/jupyter/execute-remaining-jupyter-src-blocks             "  remaining jupyter blocks")
                        ("C-S-H-<return>" psimacs/jupyter/execute-all-jupyter-src-blocks                   "all jupyter blocks")
                      )

                    "Navigate"
                      (
                        ("p" org-babel-previous-src-block        "previous"      :color red)
                        ("n" org-babel-next-src-block            "next"          :color red)
                        ("P" jupyter-org-previous-busy-src-block "busy previous" :color red)
                        ("N" jupyter-org-next-busy-src-block     "busy next"     :color red)
                        ("v" jupyter-org-jump-to-visible-block   "jump to visible")
                        ("j" jupyter-org-jump-to-block           "jump to block")
                        ("J" psimacs/jupyter/ob/jump-to-end            "jump to end")
                        ("E" psimacs/jupyter/jump-to-error             "jump to error")
                        ("a" psimacs/jupyter/ob/jump-to-first-line     "jump to first line")
                        ("e" psimacs/jupyter/ob/jump-to-end-line       "jump to last line")
                      )

                    "Edit"
                      (
                        ("M-p" jupyter-org-move-src-block                             "move block up"   :color red)
                        ("M-n" (jupyter-org-move-src-block t)                         "move block down" :color red)
                        ("x"   jupyter-org-kill-block-and-results                     "  kill block")
                        ("c"   jupyter-org-copy-block-and-results                     "  copy block")
                        ("C"   (jupyter-org-clone-block t)                            "  clone block")
                        ("m"   jupyter-org-merge-blocks                               "  merge blocks")
                        ("s"   jupyter-org-split-src-block                            "  split block")
                        ("+"   (jupyter-org-insert-src-block nil current-prefix-arg)  "  insert block above")
                        ("-"   (jupyter-org-insert-src-block t current-prefix-arg)    "  insert block below")
                        ("M"   psimacs/jupyter/ob/mark-code                                 "  mark block code")
                      )

                    "Miscellaneous"
                      (
                        ("l"     org-babel-remove-result          "    clear result")
                        ("L"     jupyter-org-clear-all-results    "    clear all results")
                        ("H-l"   jupyter-org-clear-all-results    "  clear all results")
                        ("h"     jupyter-org-edit-header          "    edit header")
                        ("i"     jupyter-org-inspect-src-block    "    inspect")
                        ("o"     psimacs/jupyter/ob/toggle-output       "    toogle output")
                        ("<tab>" org-cycle                        "org cycle"       :color red)
                        ("t"     psimacs/jupyter/ob/toggle-line-numbers "    toogle line numbers")
                        ("#"     org-comment-dwim                 "    dwim comment")
                        ("X"     psimacs/jupyter/export/notebook        "    export notebook" :color blue)
                      )

                      ""

                      (
                        ("di"  org-display-inline-images   " display images")
                        ("dr"  org-redisplay-inline-images " redisplay images")
                        ("dt"  org-toogle-inline-images    " toogle images")
                        ("z"   undo-fu-only-undo           "  undo"     :color red)
                        ("Z"   undo-fu-only-redo           "  redo"     :color red)
                        ("H-z" undo-fu-only-redo-all       "redo all" :color red)
                      )

                    "Kernel"
                      (
                        ("S" org-babel-jupyter-scratch-buffer   "scratch buffer")
                        ("r" org-babel-switch-to-session        "goto REPL")
                        ("R" (jupyter-org-with-src-block-client
                                 (jupyter-repl-restart-kernel)) "restart")
                        ("I" jupyter-org-interrupt-kernel       "interrupt kernel")
                        ("k" psimacs/jupyter/org-kill-kernel          "kill kernel")
                      )

                    "Settings"
                      (
                        ("A"   psimacs/jupyter/toggle-advice-functions    "toggle advice"        :color red :toggle psimacs/config/jupyter-advice-jupyter-fn)
                        ("U"   psimacs/jupyter/toggle-results-with-colons "toogle result colons" :color red :toggle psimacs/config/jupyter-result-with-colons)
                      )
                )
            )
            "Definition of the jupyter notebook hydra."
        )


        (defun psimacs/hydra/jupyter/open-hydra ()
            "First search jupyter source block then open jupyter hydra."
            (interactive)
            (unless (psimacs/jupyter/in-jupyter-src-block-p)
            (psimacs/jupyter/next-jupyter-src-block))

            (when (psimacs/jupyter/in-jupyter-src-block-p)
                (psimacs/hydra/jupyter/body)
            )
        )

        ;;(jupyter-org-define-key (kbd "H-SPC j") #'psimacs/hydra/jupyter/body)

    :bind (
        :map org-mode-map
            ("H-m n"          . psimacs/jupyter/next-jupyter-src-block)
            ("H-m p"          . psimacs/jupyter/previous-jupyter-src-block)
            ("H-<return>"     . psimacs/jupyter/execute-jupyter-src-blocks-and-move-to-next)
            ("S-H-<return>"   . psimacs/jupyter/execute-remaining-jupyter-src-blocks)
            ("C-S-H-<return>" . psimacs/jupyter/execute-all-jupyter-src-blocks)
            ("H-m i d"        . org-display-inline-images)
            ("H-m i r"        . org-redisplay-inline-images)
            ("H-m i t"        . org-toogle-inline-images)
            ("H-m H-l"        . remove-results-remaining-jupyter-src-blocks)
            ("H-SPC j"        . psimacs/hydra/jupyter/open-hydra)
        )
)
#+end_src

** Org-roam

[[https://www.orgroam.com/][Org-roam]] is a plain-text personal knowledge management system.

*** Org-Roam configuration

[[https://www.orgroam.com/][Org-roam]] allows for effortless non-hierarchical note-taking: with Org-roam, notes flow naturally,
making note-taking fun and easy. Org-roam augments the Org-mode syntax, and will work for anyone
already using [[https://orgmode.org][org-mode]] for their personal wiki.

The goal of org-roam is to create a web of notes linked between each other.
By linking notes in a non-hierarchical way, one can make connections between topics and remember
them without going through the hassle of creating a hierarchical tag system where
it’s never clear if a note should belong to tag *A* or its parent *B*, etc.

References:
- [[https://hugocisneros.com/blog/my-org-roam-notes-workflow/][My Org Roam Notes Workflow - Hugo Cisneros]]
- [[https://seds.nl/notes/ox_hugo_export_all_roam_to_hugo/][Ox-hugo export all roam to Hugo]]
- [[https://seds.nl/notes/export_org_roam_backlinks_with_gohugo/][Export org-roam backlinks with Gohugo]]
- [[https://blog.jethro.dev/posts/introducing_org_roam/][Introducing Org Roam by Jethro]]
- [[https://github.com/jethrokuan/braindump][Jethro's Braindump]]
- [[https://github.com/jethrokuan/dots/blob/0064ea2aab667f115a14ce48292731db46302c53/.doom.d/config.el#L488][Jethro's Braindump dotfile]]
- [[https://www.dailyemacs.com/posts/automatically_adding_org_roam_tags_to_hugo/][Automatically Adding Org Roam Tags To Hugo]]
- [[https://jasbrg.com/notes/2021-12-01-org_roam_post/][Org Roam Post by λx.jasbrg]]
- [[https://rgoswami.me/posts/org-note-workflow/][An Orgmode Note Workflow]]
- [[https://keido.site/notes/20211204183600/][Keido site]]
- [[https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/][5-org-roam-hacks]]

Brains:
- [[https://braindump.jethro.dev/][Jethro's Braindump]]
- [[https://braindump.badykov.com/about/][Ayrat's Braindump]]


#+attr_html: :class styledtable1
| Key binding | Command                                            | Description                                                                  |
|-------------+----------------------------------------------------+------------------------------------------------------------------------------|
| =C-c n A=     | =M-x psimacs/org-roam/refresh-agenda-list=           | Let be the org-agenda files the ones that have tag <Project>.                |
| =C-c n D=     | =M-x deft=                                           | Switch to *Deft* buffer and load files.                                        |
| =C-c n R=     | =M-x org-roam-node-random=                           | Find and open a random Org-roam node.                                        |
| =C-c n c=     | =M-x org-roam-capture=                               | Launches an ‘org-capture’ process for a new or existing node.                |
| =C-c n f=     | =M-x org-roam-node-find=                             | Find and open an Org-roam node by its title or alias.                        |
| =C-c n o=     | =M-x org-id-get-create=                              | Create an ID for the current entry and return it.                            |
|-------------+----------------------------------------------------+------------------------------------------------------------------------------|
| =C-c n i i=   | =M-x org-roam-node-insert=                           | Find an Org-roam node and insert (where the point is) an "id:" link to it.   |
| =C-c n i D=   | =M-x psimacs/org-roam/node-insert-immediate-default= | Immediate node insertion using the default capture template.                 |
| =C-c n i I=   | =M-x psimacs/org-roam/node-insert-immediate=         | Immediate node insertion but let you choose the capture template.            |
|-------------+----------------------------------------------------+------------------------------------------------------------------------------|
| =C-c n p f=   | =M-x psimacs/org-roam/find-project=                  | Find org roam node files which have tag <Project>.                           |
| =C-c n p n=   | =M-x psimacs/org-roam/project-capture-note=          | Select or create project node and capture note.                              |
| =C-c n p r=   | =M-x psimacs/org-roam/project-capture-reference=     | Select or create project node and capture reference.                         |
| =C-c n p s=   | =M-x psimacs/org-roam/project-capture-resource=      | Select or create project node and capture resource.                          |
| =C-c n p t=   | =M-x psimacs/org-roam/project-capture-task=          | Select or create project node and capture task.                              |
|-------------+----------------------------------------------------+------------------------------------------------------------------------------|
| =C-c n x i=   | =M-x psimacs/org-roam/capture-inbox=                 | Create a inbox capture node.                                                 |
|-------------+----------------------------------------------------+------------------------------------------------------------------------------|
| =C-c n r f=   | =M-x org-roam-ref-find=                              | Find and open an Org-roam node that’s dedicated to a specific ref.           |
|-------------+----------------------------------------------------+------------------------------------------------------------------------------|
| =C-c n a a=   | =M-x org-roam-alias-add=                             | Add ALIAS to the node at point.                                              |
| =C-c n a r=   | =M-x org-roam-ref-add=                               | Add REF to the node at point.                                                |
| =C-c n a t=   | =M-x org-roam-tag-add=                               | Add TAGS to the node at point.                                               |
|-------------+----------------------------------------------------+------------------------------------------------------------------------------|
| =C-c n g g=   | =M-x org-roam-graph=                                 | Build and possibly display a graph for NODE.                                 |
| =C-c n g u=   | =M-x org-roam-ui-mode=                               | Enable org-roam-ui.                                                          |
|-------------+----------------------------------------------------+------------------------------------------------------------------------------|
| =C-c n b d=   | =M-x org-roam-buffer-display-dedicated=              | Launch NODE dedicated Org-roam buffer.                                       |
| =C-c n b t=   | =M-x org-roam-buffer-toggle=                         | Toggle display of the persistent ‘org-roam-buffer’.                          |
|-------------+----------------------------------------------------+------------------------------------------------------------------------------|
| =C-c n d f=   | =M-x org-roam-dailies-find-directory=                | Find and open ‘org-roam-dailies-directory’.                                  |
| =C-c n d c=   | =M-x org-roam-dailies-goto-date=                     | Find the daily-note for a date using the calendar, creating it if necessary. |
| =C-c n d C=   | =M-x org-roam-dailies-capture-date=                  | Create an entry in the daily-note for a date using the calendar.             |
| =C-c n d d=   | =M-x org-roam-dailies-goto-today=                    | Find the daily-note for today, creating it if necessary.                     |
| =C-c n d D=   | =M-x org-roam-dailies-capture-today=                 | Create an entry in the daily-note for today.                                 |
| =C-c n d n=   | =M-x org-roam-dailies-goto-next-note=                | Find next daily-note.                                                        |
| =C-c n d p=   | =M-x org-roam-dailies-goto-previous-note=            | Find previous daily-note.                                                    |
| =C-c n d t=   | =M-x org-roam-dailies-goto-tomorrow=                 | Find the daily-note for tomorrow, creating it if necessary.                  |
| =C-c n d T=   | =M-x org-roam-dailies-capture-tomorrow=              | Create an entry in the daily-note for tomorrow.                              |
| =C-c n d y=   | =M-x org-roam-dailies-goto-yesterday=                | Find the daily-note for yesterday, creating it if necessary.                 |
| =C-c n d Y=   | =M-x org-roam-dailies-capture-yesterday=             | Create an entry in the daily-note for yesteday.                              |
|-------------+----------------------------------------------------+------------------------------------------------------------------------------|
| =C-c n TAB=   | =M-x psimacs/org/roam-screenshots=                   | Move screenshot images to org roam image directory.                          |
|-------------+----------------------------------------------------+------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-major-modes-org-roam.el :var file-description="Major Modes - org-roam setup"
;;
;; Allows for effortless non-hierarchical note-taking.
;;
(use-package org-roam
    :demand t
    :commands (
                org-roam-node-file
                org-roam-node-list
                org-roam-node-read
                org-roam-dailies--capture
                psimacs/org-roam/filter-by-tag
                psimacs/org-roam/list-notes-by-tag
                psimacs/org-roam/project-finalize-hook
                psimacs/org-roam/copy-todo-to-today
                psimacs/python/run-script
              )
    :defines (
                org-state
                org-roam-dailies-map
                org-roam-dailies-caputure-templates
             )
    :hook
         (before-save . time-stamp)
    ;    (after-init . org-roam-db-autosync-mode)
    :init
        (setq org-roam-v2-ack t)

    :config
        (defun psimacs/internal/sleep (_ &rest __)
            (sleep-for 0 1))

        (advice-add 'org-roam-db-query :before #'psimacs/internal/sleep)

        (setq org-roam-db-location psimacs/config/roam-db-file)
        (setq org-roam-directory psimacs/config/roam-notes-dir)
        (setq org-roam-dailies-directory "dailies/")
        (setq org-roam-completion-everywhere t)

        (setq org-id-link-to-org-use-id t)
        (setq org-roam-completion-system 'ivy)

        (setq org-id-extra-files (org-roam--list-files org-roam-directory))

        (cl-defmethod org-roam-node-type ((node org-roam-node))
          "Return the TYPE of NODE."
          (condition-case nil
              (file-name-nondirectory
               (directory-file-name
                (file-name-directory
                 (file-relative-name (org-roam-node-file node) org-roam-directory))))
            (error "")))

        (setq org-roam-node-display-template
              (concat "${type:15} ${title:*} " (propertize "${tags:10}" 'face 'org-tag)))

        (setq org-roam-capture-templates
            `(
                (
                    "d" "default" plain
                    "%?"
                    :if-new (
                                file+head
                                "%<%Y-%m-%d>-${slug}.org" ; "%<%Y-%m-%d-%H-%M-%S>-${slug}.org"
                                "#+title: ${title}\n#+date: %U\n#+lastmod: \n#+hugo_lastmod: Time-stamp: <>\n\n"
                            )
                    :unnarrowed t
                )
                (
                    "c" "cortex" plain
                    (file ,(psimacs/file-system/concat-file psimacs/config/roam-templates-dir "CortexTemplate.org"))
                    :if-new (
                                file "cortex/%<%Y-%m-%d>-${slug}.org"
                            )
                    :unnarrowed t
                )
                (
                    "C" "cookbook" plain
                    (file ,(psimacs/file-system/concat-file psimacs/config/roam-templates-dir "CookbookTemplate.org"))
                    :if-new (
                                file "cookbooks/%<%Y-%m-%d>-${slug}.org"
                            )
                    :unnarrowed t
                )
                (
                    "a" "article" plain
                    (file ,(psimacs/file-system/concat-file psimacs/config/roam-templates-dir "ArticleTemplate.org"))
                    :if-new (
                                file "articles/%<%Y-%m-%d>-${slug}.org"
                            )
                    :unnarrowed t
                )
                (
                    "f" "faq" plain
                    (file ,(psimacs/file-system/concat-file psimacs/config/roam-templates-dir "FAQTemplate.org"))
                    :if-new (
                                file "faq/%<%Y-%m-%d>-${slug}.org"
                            )
                    :unnarrowed t
                )
                (
                    "p" "project" plain
                    (file ,(psimacs/file-system/concat-file psimacs/config/roam-templates-dir "ProjectTemplate.org"))
                    :if-new (
                                file "projects/%<%Y-%m-%d>-${slug}.org"
                            )
                    :unnarrowed t
                )
                (
                    "n" "notebook" plain
                    (file ,(psimacs/file-system/concat-file psimacs/config/roam-templates-dir "NotebookTemplate.org"))
                    :if-new (
                                file "notebooks/%<%Y-%m-%d>-${slug}.org"
                            )
                    :unnarrowed t
                )
                (
                    "r" "reference" plain
                    (file ,(psimacs/file-system/concat-file psimacs/config/roam-templates-dir "ReferenceTemplate.org"))
                    :if-new (
                                file "references/%<%Y-%m-%d>-${slug}.org"
                            )
                    :unnarrowed t
                )
                (
                    "b" "book note" plain
                    (file ,(psimacs/file-system/concat-file psimacs/config/roam-templates-dir "BookNoteTemplate.org"))
                    :if-new (
                                file "books/%<%Y-%m-%d>-${slug}.org"
                            )
                    :unnarrowed t
                )
                (
                    "x" "research" plain
                    (file ,(psimacs/file-system/concat-file psimacs/config/roam-templates-dir "ResearchTemplate.org"))
                    :if-new (
                                file "research/%<%Y-%m-%d>-${slug}.org"
                            )
                    :unnarrowed t
                )
            )
        )

        (setq psimacs/org-roam/project-capture-templates
            `(
                (
                    "p" "project" plain
                    (file ,(psimacs/file-system/concat-file psimacs/config/roam-templates-dir "ProjectTemplate.org"))
                    :if-new (
                                file "projects/%<%Y-%m-%d>-${slug}.org"
                            )
                    :unnarrowed t
                )
            )
        )

        (setq org-roam-dailies-capture-templates
            (let (
                  (todo-template    "* TODO [#C] %? %^G\nEntered:   %U\nScheduled: %(org-time-stamp nil nil)\n%i\n")
                  (note-template    "* %? :Note:%^G\nEntered: %U\n")
                  (meeting-template "* %? :Meeting:%^G\nEntered:   %U\nScheduled: %(org-time-stamp '(8) nil)\n")
                  (preamble         "#+title: %<%Y-%m-%d (%A)>\n#+startup: showall\n\n")
                  (diary-file       "%<%Y-%m-%d>.org")
                 )
                    `(
                      ("t" "Task"    entry ,todo-template    :target (file+head+olp ,diary-file ,preamble ("Tasks"))     :empty-lines 1 :unnarrowed t)
                      ("n" "Note"    entry ,note-template    :target (file+head+olp ,diary-file ,preamble ("Notes"))     :empty-lines 1 :unnarrowed t)
                      ("m" "Meeting" entry ,meeting-template :target (file+head+olp ,diary-file ,preamble ("Meetings"))  :empty-lines 1 :unnarrowed t)
                     )
            ))


        (setq time-stamp-active t
              time-stamp-start "#\\+lastmod:[ \t]*"
              time-stamp-end "$"
              time-stamp-format "%04Y-%02m-%02d"
        )

        ;;
        ;; See https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/ for explanations
        ;;

        (defun psimacs/org-roam/node-insert-immediate (arg &rest args)
            "Immediate node ARG insertion but let you choose the capture template."
            (interactive "P")
            (let ((args (cons arg args))
                  (org-roam-capture-templates
                    (mapcar
                        #'(lambda (tmpl) (append tmpl '(:immediate-finish t)))
                        org-roam-capture-templates)
                  )
                 )
                (apply #'org-roam-node-insert args)
            )
        )

        (defun psimacs/org-roam/node-insert-immediate-default (arg &rest args)
            "Immediate node ARG insertion using the default capture template."
            (interactive "P")
            (let (
                    (args (cons arg args))
                    (org-roam-capture-templates (list (append (car org-roam-capture-templates) '(:immediate-finish t))))
                 )
                 (apply #'org-roam-node-insert args)
            )
        )

        (defun psimacs/org-roam/filter-by-tag (tag-name)
            (lambda (node)
                (member tag-name (org-roam-node-tags node)))
        )

        (defun psimacs/org-roam/list-notes-by-tag (tag-name)
            (mapcar #'org-roam-node-file
                  (seq-filter
                   (psimacs/org-roam/filter-by-tag tag-name)
                   (org-roam-node-list)))
        )

        (defun psimacs/org-roam/refresh-agenda-list ()
            "Let be the org-agenda files the ones that have tag <Project>."
            (interactive)
            (let ((dailies (psimacs/file-system/concat-directory psimacs/config/roam-notes-dir "dailies")))
              (psimacs/config/init-agenda-files)

              (setq org-agenda-files (append org-agenda-files (directory-files-recursively dailies ".org" nil)))

              (setq org-agenda-files (append org-agenda-files (psimacs/org-roam/list-notes-by-tag "Project")))
              (delq nil (delete-dups org-agenda-files))
            )
        )

        (defun psimacs/org-roam/project-finalize-hook ()
            "Adds the captured project file to `org-agenda-files' if the
capture was not aborted."
            ;; Remove the hook since it was added temporarily
            (remove-hook 'org-capture-after-finalize-hook #'psimacs/org-roam/project-finalize-hook)

            ;; Add project file to the agenda list if the capture was confirmed
            (unless org-note-abort
                (with-current-buffer (org-capture-get :buffer)
                    (add-to-list 'org-agenda-files (buffer-file-name))))
        )

        (defun psimacs/org-roam/find-project ()
            "Find org roam node files which have tag <Project>."
            (interactive)
            ;; Add the project file to the agenda after capture is finished
            (add-hook 'org-capture-after-finalize-hook #'psimacs/org-roam/project-finalize-hook)

            ;; Select a project file to open, creating it if necessary
            (org-roam-node-find
                nil
                nil
                (psimacs/org-roam/filter-by-tag "Project")
                nil
                :templates psimacs/org-roam/project-capture-templates
            )
        )

        (defun psimacs/org-roam/capture-inbox ()
            "Create a inbox capture node."
            (interactive)
            (org-roam-capture- :node (org-roam-node-create)
                               :templates
                                    '(
                                        (
                                            "i"
                                            "inbox" plain
                                            "* %U %?"
                                            :if-new (
                                                        file+head
                                                        "Inbox.org"
                                                        "#+title: Inbox\n\n"
                                                    )
                                        )
                                    )
            )
        )

        (defun psimacs/org-roam/project-capture-task ()
            "Create a project task capture node."
            (interactive)
            ;; Add the project file to the agenda after capture is finished
            (add-hook 'org-capture-after-finalize-hook #'psimacs/org-roam/project-finalize-hook)

            ;; Capture the new task, creating the project file if necessary
            (org-roam-capture- :node (
                                        org-roam-node-read
                                        nil
                                        (psimacs/org-roam/filter-by-tag "Project")
                                     )
                                :templates
                                    `(
                                        (
                                            "t" "task" entry
                                            "** TODO %?"
                                            :if-new (
                                                        file+head+olp "projects/%<%Y-%m-%d>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project" ("Tasks")
                                                    )
                                            :unnarrowed t
                                        )
                                    )
            )
        )

        (defun psimacs/org-roam/project-capture-note ()
            "Create a project note capture node."
            (interactive)

            ;; Capture the new note, creating the project file if necessary
            (org-roam-capture- :node (
                                        org-roam-node-read
                                        nil
                                        (psimacs/org-roam/filter-by-tag "Project")
                                     )
                                :templates
                                    `(
                                        (
                                            "n" "note" entry
                                            "** %?"
                                            :if-new (
                                                        file+head+olp "projects/%<%Y-%m-%d>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project" ("Notes")
                                                    )
                                            :unnarrowed t
                                        )
                                    )
            )
        )

        (defun psimacs/org-roam/project-capture-reference ()
            "Create a project reference capture node."
            (interactive)

            ;; Capture the new reference, creating the project file if necessary
            (org-roam-capture- :node (
                                        org-roam-node-read
                                        nil
                                        (psimacs/org-roam/filter-by-tag "Project")
                                     )
                                :templates
                                    `(
                                        (
                                            "r" "reference" item
                                            "- %?"
                                            :if-new (
                                                        file+head+olp "projects/%<%Y-%m-%d>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project" ("References")
                                                    )
                                            :unnarrowed t
                                        )
                                    )
            )
        )

        (defun psimacs/org-roam/project-capture-resource()
            "Create a project resource capture node."
            (interactive)

            ;; Capture the new resource, creating the project file if necessary
            (org-roam-capture- :node (
                                        org-roam-node-read
                                        nil
                                        (psimacs/org-roam/filter-by-tag "Project")
                                     )
                                :templates
                                    `(
                                        (
                                            "s" "resource" entry
                                            "- %?"
                                            :if-new (
                                                        file+head+olp "projects/%<%Y-%m-%d>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project" ("References")
                                                    )
                                            :unnarrowed t
                                        )
                                    )
            )
        )


        (defun psimacs/org-roam/copy-todo-to-today ()
            "Copy the todo task to today node."
            (interactive)
            (let ( (org-refile-keep t) ;; Set this to nil to delete the original, i.e if you want to move the completed task instead
                    (org-roam-dailies-capture-templates
                        '(
                            (
                                "t"
                                "tasks" entry "%?"
                                :if-new (
                                            file+head+olp
                                            "%<%Y-%m-%d>.org"
                                            "#+title: %<%Y-%m-%d>\n\n"
                                            ("Tasks")
                                        )
                            )
                        )
                    )
                    (org-after-refile-insert-hook #'save-buffer)
                    today-file
                    pos
                 )
                (save-window-excursion
                    (org-roam-dailies--capture (current-time) t)
                    (setq today-file (buffer-file-name))
                    (setq pos (point))
                )

                ;; Only refile if the target file is different than the current file
                (unless (equal (file-truename today-file)
                               (file-truename (buffer-file-name))
                        )
                    (org-refile nil nil (list "Tasks" today-file nil pos))
                )
            )
        )

        (add-to-list 'org-after-todo-state-change-hook
            (lambda ()
                (when (equal org-state "DONE")
                    (psimacs/org-roam/copy-todo-to-today))
            )
        )

        ;; Build the agenda list the first time for the session
        (psimacs/org-roam/refresh-agenda-list)

        (load (psimacs/file-system/concat-file psimacs/config/straight-dir "repos/org-roam/extensions/org-roam-dailies.el"))
        (load (psimacs/file-system/concat-file psimacs/config/straight-dir "repos/org-roam/extensions/org-roam-graph.el"))
        (load (psimacs/file-system/concat-file psimacs/config/straight-dir "repos/org-roam/extensions/org-roam-protocol.el"))

        (require 'org-roam-dailies)
        (require 'org-roam-protocol)

        (global-set-key (kbd "C-c n d") 'org-roam-dailies-map)

        (add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-direction)
               (direction . right)
               (window-width . 0.33)
               (window-height . fit-window-to-buffer)))

        (org-roam-db-autosync-enable)
        (org-roam-db-autosync-mode)

        ;;
        ;; Screenshot copying
        ;;
        (defvar psimacs/internal/org/roam-screenshots-category nil)
        (defvar psimacs/internal/org/roam-screenshots-category-list '("articles" "books" "cookbooks" "cortex" "faq" "notebooks" "projects" "references" "research"))

        (defvar psimacs/internal/org/roam-screenshots-group nil)
        (defvar psimacs/internal/org/roam-screenshots-group-list '())

        (defvar psimacs/internal/org/roam-screenshots-html-width  "500")
        (defvar psimacs/internal/org/roam-screenshots-latex-width "120")

        (defun psimacs/org/roam-screenshots ()
          "Copy all screenshots into the roam group choosen.

        In order to keep the interface of the function simple, the category (e.g. books, research or notebooks)
        is not explicitely ask for. Instead the function assumes that the choosen group is unique among all
        existing categories and that the group image folder already exists.

        In case that you would like to have latex support prefix command with 'C-u'.
        In case that you need full control prefix command with 'C-u C-u'.
        "
          (interactive)
          (if (eq (prefix-numeric-value current-prefix-arg) 16)
              (let* (
                     (category (ivy-read "Enter the category: " psimacs/internal/org/roam-screenshots-category-list :require-match nil :preselect psimacs/internal/org/roam-screenshots-category))
                     (group (ivy-read "Enter the group: " psimacs/internal/org/roam-screenshots-group-list :require-match nil :preselect psimacs/internal/org/roam-screenshots-group))
                     (image-dir psimacs/config/system-screenshot-dir)
                     (latex (if (y-or-n-p "Latex support? ") t nil))
                     (roam-dir psimacs/config/roam-notes-dir)
                     (html-width (read-string "HTML width: " psimacs/internal/org/roam-screenshots-html-width))
                     (latex-width (read-string "LaTeX width: " psimacs/internal/org/roam-screenshots-latex-width))
                     )

                (add-to-list 'psimacs/internal/org/roam-screenshots-category-list category)
                (setq psimacs/internal/org/roam-screenshots-category category)

                (add-to-list 'psimacs/internal/org/roam-screenshots-group-list group)
                (setq psimacs/internal/org/roam-screenshots-group group)

                (setq psimacs/internal/org/roam-screenshots-html-width  html-width)
                (setq psimacs/internal/org/roam-screenshots-latex-width latex-width)

                (psimacs/python/run-script
                 "roam-image.py"
                 (format "--category=%s" category)
                 (format "--group=%s" group)
                 (format "--image-dir=%s" image-dir)
                 (format "--roam-dir=%s" roam-dir)
                 (if latex "--latex" "")
                 (format "--html-width=%s" psimacs/internal/org/roam-screenshots-html-width)
                 (format "--latex-width=%s" psimacs/internal/org/roam-screenshots-latex-width)
                 )
                )
              ;else
              (let* (
                     (group (ivy-read "Enter the group: " psimacs/internal/org/roam-screenshots-group-list :require-match nil :preselect psimacs/internal/org/roam-screenshots-group))
                     (image-dir psimacs/config/system-screenshot-dir)
                     (latex (if current-prefix-arg t nil))
                     (roam-dir psimacs/config/roam-notes-dir)
                     )

                (add-to-list 'psimacs/internal/org/roam-screenshots-group-list group)
                (setq psimacs/internal/org/roam-screenshots-group group)

                (psimacs/python/run-script
                 "roam-image.py"
                 (format "--group=%s" group)
                 (format "--image-dir=%s" image-dir)
                 (format "--roam-dir=%s" roam-dir)
                 (if latex "--latex" "")
                 (format "--html-width=%s" psimacs/internal/org/roam-screenshots-html-width)
                 (format "--latex-width=%s" psimacs/internal/org/roam-screenshots-latex-width)
                 )
                )
              )
        )

    :bind (
            ("C-c n b t" . org-roam-buffer-toggle)
            ("C-c n b d" . org-roam-buffer-display-dedicated)
            ("C-c n f"   . org-roam-node-find)
            ("C-c n R"   . org-roam-node-random)
            ("C-c n g g" . org-roam-graph)
            ("C-c n g s" . org-roam-show-graph)
            ("C-c n g u" . org-roam-ui-mode)
            ("C-c n i i" . org-roam-node-insert)
            ("C-c n i I" . psimacs/org-roam/node-insert-immediate)
            ("C-c n i D" . psimacs/org-roam/node-insert-immediate-default)
            ("C-c n a t" . org-roam-tag-add)
            ("C-c n a a" . org-roam-alias-add)
            ("C-c n a r" . org-roam-ref-add)
            ("C-c n r f" . org-roam-ref-find)
            ("C-c n c"   . org-roam-capture)
            ("C-c n j"   . nil)
            ("C-c n p f" . psimacs/org-roam/find-project)
            ("C-c n p n" . psimacs/org-roam/project-capture-note)
            ("C-c n p r" . psimacs/org-roam/project-capture-reference)
            ("C-c n p s" . psimacs/org-roam/project-capture-resource)
            ("C-c n p t" . psimacs/org-roam/project-capture-task)
            ("C-c n x i" . psimacs/org-roam/project-capture-inbox)
            ("C-c n A"   . psimacs/org-roam/refresh-agenda-list)
            ("C-c n o"   . org-id-get-create)

            :map org-mode-map
                ("C-M-i" . completion-at-point)
                ("C-c n <tab>" . psimacs/org/roam-screenshots)

            :map org-roam-dailies-map
                ("d" . org-roam-dailies-goto-today)
                ("D" . org-roam-dailies-capture-today)

                ("y" . org-roam-dailies-goto-yesterday)
                ("Y" . org-roam-dailies-capture-yesterday)

                ("t" . org-roam-dailies-goto-tomorrow)
                ("T" . org-roam-dailies-capture-tomorrow)

                ("c" . org-roam-dailies-goto-date)
                ("C" . org-roam-dailies-capture-date)

                ("n" . org-roam-dailies-goto-next-note)
                ("p" . org-roam-dailies-goto-previous-note)

                ("f" . org-roam-dailies-find-directory)
                ("b" . nil)
                ("v" . nil)
                ("." . nil)
        )
)
#+end_src

*** WebSocket

The package [[https://github.com/ahyatt/emacs-websocket][websocket]] is an elisp library for websocket clients to talk to websocket
servers, and for websocket servers to accept connections from websocket clients.

[[https://github.com/org-roam/org-roam-ui][Org-roam-ui]] is a websocket client used by *Psimacs*..

#+begin_src emacs-lisp :tangle config/init-major-modes-org-roam.el :var file-description="Major Modes - org-roam setup"
;;
;; Library for websocket clients to talk to websocket servers.
;;
(use-package websocket
    :after org-roam
)
#+end_src

*** Org-roam-ui

[[https://github.com/org-roam/org-roam-ui][Org-roam-ui]] is a graphical frontend for your [[https://www.orgroam.com/][org-roam]] Zettelkasten.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-roam.el :var file-description="Major Modes - org-roam setup"
;;
;; Graphical frontend for your org-roam Zettelkasten.
;;
(use-package org-roam-ui
    ;:straight (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    :hook (after-init . org-roam-ui-mode)
    :config
        (setq org-roam-ui-sync-theme t
              org-roam-ui-follow t
              org-roam-ui-update-on-save t
              org-roam-ui-open-on-start nil)
)
#+end_src

*** org-roam-bibtex

[[https://github.com/org-roam/org-roam-bibtex][Org-roam-bibtex]] is an [[https://www.orgroam.com/][Org-roam]] extension that integrates Org Roam with bibliography/citation management
software: [[https://github.com/jkitchin/org-ref][Org-ref]], [[https://github.com/tmalsburg/helm-bibtex][helm-bibtex]], [[https://github.com/tmalsburg/helm-bibtex][Ivy-bibtex]] and [[https://github.com/bdarcus/citar][Citar]].

It allows users to manage their bibliographical notes using Org Roam and access the notes in
=org-roam-directory= via helm-bibtex, ivy-bibtex, citar-open-notes or by activation
Org-ref cite: links and Org-cite citations.

#+begin_src emacs-lisp :tangle config/init-major-modes-org-roam.el :var file-description="Major Modes - org-roam setup"
;;
;; Manage bibliographical notes
;;
(use-package org-roam-bibtex
    :after (org-roam ivy-bibtex)
    :bind (:map org-mode-map ("C-c n B" . orb-note-actions))
    :config
        (require 'org-ref)
)

;;(org-roam-bibtex-mode)
#+end_src

** Org-Noter

The package [[https://github.com/org-noter/org-noter][org-noter]] allows you to take notes in org-mode
files that stay in sync with pdf document files. It integrates also with the org-roam package.

Working with =org-noter=:

#+attr_html: :class styledtable1
| Key binding | Command                                    | Description                                                                    |
|-------------+--------------------------------------------+--------------------------------------------------------------------------------|
| =H-x n=       | =M-x org-noter=                              | Start ‘org-noter’ session.                                                     |
|             | =M-x org-noter-start-from-dired=             | In Dired, open sessions for marked files or file at point.                     |
|             | =M-x org-noter-set-doc-split-fraction=       | Set the fraction of the frame that the document window will occupy when split. |
|             | =M-x org-noter-set-notes-window-location=    | Set the notes window default location for the current session.                 |
|             | =M-x org-noter-create-skeleton=              | Create notes skeleton based on the outline of the document.                    |
|             | =M-x org-noter-pdf-set-columns=              | Interactively set the COLUMN_EDGES property for the current heading.           |
| =M-T=         | =M-x org-noter-toggle-notes-window-location= | Toggle between side- and bottom-notes window location.                         |
| =M-q=         | =M-x org-noter-kill-session=                 | Kill an ‘org-noter’ session.                                                   |
|-------------+--------------------------------------------+--------------------------------------------------------------------------------|
|             | =M-x org-noter-set-hide-other=               | Toggle hiding other headings for the current session.                          |
|             | =M-x org-noter-set-hide-other=               | Toggle hiding other headings for the current session.                          |
|-------------+--------------------------------------------+--------------------------------------------------------------------------------|

Keybindings for the *pdf buffer* in =org-noter-mode=:

#+attr_html: :class styledtable1
| Key binding               | Command                                               | Description                                                                                            |
|---------------------------+-------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| =SPC= =n= =<PageDown>= =<down>=   |                                                       | To move forward in document.                                                                           |
| =BACKSPACE= =p= =<PageUp>= =<up>= |                                                       | To move back in document.                                                                              |
|---------------------------+-------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| =i=                         | =M-x org-noter-insert-precise-note=                     | Insert a note associated with a specific location (x,y).                                               |
| =I=                         | =M-x org-noter-insert-precise-note-toggle-no-questions= | Insert a note associated with a specific location (x,y). Note is always create with the default title. |
| =C-i= =TAB=                   | =M-x org-noter-insert-note=                             | Inserts a note linked to the current page.                                                             |
| =C-S-i= =M-TAB=               | =M-x org-noter-insert-note-toggle-no-questions=         | Inserts a note linked to the current page. Note is always create with the default title.               |
|---------------------------+-------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| =M-p=                       | =M-x org-noter-sync-prev-note=                          | Go to the location of the previous note, in relation to where the point is.                            |
| =M-n=                       | =M-x org-noter-sync-next-note=                          | Go to the location of the next note, in relation to where the point is.                                |
| =M-.=                       | =M-x org-noter-sync-current-note=                       | Go the location of the selected note, in relation to where the point is.                               |
|---------------------------+-------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| =C-M-p=                     | =M-x org-noter-sync-prev-page-or-chapter=               | Show previous page or chapter that has notes.                                                          |
| =C-M-n=                     | =M-x org-noter-sync-next-page-or-chapter=               | Show next page or chapter that has notes.                                                              |
| =C-M-.=                     | =M-x org-noter-sync-current-page-or-chapter=            | Show current page or chapter notes.                                                                    |
|---------------------------+-------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| =M-T=                       | =M-x org-noter-toggle-notes-window-location=            | Toggle between side- and bottom-notes window location.                                                 |
| =M-q=                       | =M-x org-noter-kill-session=                            | Kill an ‘org-noter’ session.                                                                           |
|---------------------------+-------------------------------------------------------+--------------------------------------------------------------------------------------------------------|


Keybinding for the *org note buffer* in =org-noter-mode=:

#+attr_html: :class styledtable1
| Key binding | Command                                    | Description                                                                 |
|-------------+--------------------------------------------+-----------------------------------------------------------------------------|
| =M-p=         | =M-x org-noter-sync-prev-note=               | Go to the location of the previous note, in relation to where the point is. |
| =M-n=         | =M-x org-noter-sync-next-note=               | Go to the location of the next note, in relation to where the point is.     |
| =M-.=         | =M-x org-noter-sync-current-note=            | Go the location of the selected note, in relation to where the point is.    |
|-------------+--------------------------------------------+-----------------------------------------------------------------------------|
| =C-M-p=       | =M-x org-noter-sync-prev-page-or-chapter=    | Show previous page or chapter that has notes.                               |
| =C-M-n=       | =M-x org-noter-sync-next-page-or-chapter=    | Show previous page or chapter that has notes.                               |
| =C-M-.=       | =M-x org-noter-sync-current-page-or-chapter= | Show current page or chapter notes.                                         |
|-------------+--------------------------------------------+-----------------------------------------------------------------------------|
| =M-T=         | =M-x org-noter-toggle-notes-window-location= | Toggle between side- and bottom-notes window location.                      |
| =M-q=         | =M-x org-noter-kill-session=                 | Kill an ‘org-noter’ session.                                                |
|-------------+--------------------------------------------+-----------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-major-modes-org-noter.el :var file-description="Major Modes - org-noter setup"
(use-package org-noter
    :straight
        (:repo "org-noter/org-noter"
         :host github
         :type git
         :files ("*.el" "modules/*.el"))
    :config
        (org-noter-enable-org-roam-integration)

        (setq org-noter-arrow-background-color "cyan"
              org-noter-arrow-foreground-color "black")

    :bind (
            ("H-x n"    . org-noter)

            :map org-noter-doc-mode-map
                ("i"        . org-noter-insert-precise-note)
                ("I"        . org-noter-insert-precise-note-toggle-no-questions)
                ("C-i"      . org-noter-insert-note)
                ("C-S-i"    . org-noter-insert-note-toggle-no-questions)
                ("<tab>"    . org-noter-insert-note)
                ("M-<tab>"  . org-noter-insert-note-toggle-no-questions)

                ("M-p"      . org-noter-sync-prev-note)
                ("M-n"      . org-noter-sync-next-note)
                ("M-."      . org-noter-sync-current-note)

                ("C-M-p"    . org-noter-sync-prev-page-or-chapter)
                ("C-M-n"    . org-noter-sync-next-page-or-chapter)
                ("C-M-."    . org-noter-sync-current-page-or-chapter)

                ("M-T"      . org-noter-toggle-notes-window-location)
                ("M-q"      . org-noter-kill-session)


            :map org-noter-notes-mode-map
                ("M-p"      . org-noter-sync-prev-note)
                ("M-n"      . org-noter-sync-next-note)
                ("M-."      . org-noter-sync-current-note)

                ("C-M-p"    . org-noter-sync-prev-page-or-chapter)
                ("C-M-n"    . org-noter-sync-next-page-or-chapter)
                ("C-M-."    . org-noter-sync-current-page-or-chapter)

                ("M-T"      . org-noter-toggle-notes-window-location)
                ("M-q"      . org-noter-kill-session)
        )

)
#+end_src

** PlantUML Mode

The package [[https://github.com/skuro/plantuml-mode][plantuml-mode]] provides access to the nice
[[https://plantuml.com/en/][PlantUML]] tool that allows the generation of UML type of diagrams with
a plain text description.

See also:
- [[https://github.com/skuro/plantuml-mode][plantuml-mode]]
- [[http://plantuml.com/emacs][Emacs integration of PlantUml]]
- [[https://plantuml.com/en/][PlantUML in a nutshell]]
- [[http://plantuml.com/en/guide][PlantUML Language Reference Guide]]

#+begin_src emacs-lisp :tangle config/init-major-modes-plantuml-mode.el :var file-description="Major Modes - plantuml-mode setup"
;;
;; Configuration of the plantUML support in Psimacs.
;;
(defun psimacs/config/plantuml-eval-java-args (image-size heap-size)
    "Set the plantuml-java-args variables IMAGE-SIZE and HEAP-SIZE a new."
    (interactive
"nEnter image limit size:
nEnter Java heap size: ")

    (if (= heap-size 0)
        (setq heap-size psimacs/config/plantuml_java_arg_heap-size)
    )

    (if (= image-size 0)
        (setq image-size psimacs/config/plantuml_java_arg_limit_size)
    )

    (setq plantuml-java-args '("-jar"))

    (if (/= heap-size 0)
        (progn
            (setq plantuml-java-args (cons (concat "-Xmx" (number-to-string heap-size) "m") plantuml-java-args))
            (setq plantuml-java-args (cons (concat "-Xms" (number-to-string heap-size) "m") plantuml-java-args))
        )
    )

    (if (/= image-size 0)
        (setq plantuml-java-args (cons (concat "-DPLANTUML_LIMIT_SIZE=" (number-to-string image-size)) plantuml-java-args))
    )

    (setq plantuml-java-args (cons "-Djava.awt.headless=true" plantuml-java-args))
)

(defun psimacs/plantuml/execute-file ()
    "Execute the plantUml.jar with the current buffer file.
This function first saves the current buffer and then executes
the plantUml tool on that file, respecting the settings of the
major plantuml-mode.
"

    (interactive)
    (when (equal major-mode 'plantuml-mode)
        (save-buffer)

        (let (jar-file jar-param)
            (setq jar-file  (expand-file-name plantuml-jar-path))
            (setq jar-param (list (plantuml-jar-output-type-opt plantuml-output-type) "-charset" "UTF-8" (buffer-file-name)))

            (apply
                #'start-process "process/plantuml/execute-file" nil
                plantuml-java-command `(,@plantuml-java-args ,jar-file ,@jar-param)
            )
        )
    )
)

;;
;; The plantuml-mode package
;;
(use-package plantuml-mode
    :init
        (setenv "GRAPHVIZ_DOT" psimacs/config/graphviz-runtime-dot-exe)
        (setenv "localDir"     (expand-file-name psimacs/config/plantuml-dir))

        (setq plantuml-default-exec-mode 'jar)
        (setq plantuml-jar-path     psimacs/config/plantuml-jar-file)
        (setq plantuml-java-command psimacs/config/java-runtime-exe)

        (setq plantuml-output-type  "png") ; svg is incredible slow on Emacs in contrast to Firefox

        ; Initialize the plantuml-java-args variable
        (psimacs/config/plantuml-eval-java-args 0 0)

    :config
        (add-to-list 'auto-mode-alist    '("\\.uml\\'"      . plantuml-mode))
        (add-to-list 'auto-mode-alist    '("\\.plantuml\\'" . plantuml-mode))
        ;(add-to-list 'org-src-lang-modes '("plantuml"       . plantuml))


        (setq org-babel-default-header-args:plantuml
                      '((:results . "file")
                        (:exports . "both")
                        (:cache   . "no")
                        (:noweb   . "no")
                        (:hlines  . "no")
                        (:tangle  . "no")
                        (:eval    . "never-export")))

        ;;
        ;; Replace the function plantuml-update-preview-buffer with function psimacs/config/plantuml-update-preview-buffer
        ;; The only difference is that the psimacs/config/plantuml-update-preview-buffer adds the line
        ;; (set-buffer-file-coding-system 'binary). Without that line, I cannot get it working on my Windows platform.
        ;;
        (defun psimacs/config/plantuml-update-preview-buffer (prefix buf)
          "Show the preview in the preview buffer BUF.
Window is selected according to PREFIX:
- 4  (when prefixing the command with C-u) -> new window
- 16 (when prefixing the command with C-u C-u) -> new frame.
- else -> new buffer"
          (let ((imagep (and (display-images-p)
                             (plantuml-is-image-output-p))))
            (cond
             ((= prefix 16) (switch-to-buffer-other-frame buf))
             ((= prefix 4)  (switch-to-buffer-other-window buf))
             (t             (display-buffer buf)))
            (when imagep
              (with-current-buffer buf
                (set-buffer-file-coding-system 'binary)
                (image-mode)
                (set-buffer-multibyte t)
                ))))

        (defalias 'plantuml-update-preview-buffer 'psimacs/config/plantuml-update-preview-buffer)

        (require 'ido)

        (defun psimacs/config/plantuml-customize-java_arg_heap-size ()
            "Customize the Java heap size.
Allowed values: m0, m1, m2, m4, m8, m16, m32
m0  :    0
m1  :  256
m2  :  512
m4  : 1024
m8  : 2048
m16 : 4096
m32 : 8192"
            (interactive)

            (let (choices choice)
                (setq choices '("m0" "m1" "m2" "m4" "m8" "m16" "m32"))
                (setq choice (ido-completing-read "Heap size: " choices))

                ;(message "choice = %s" choice)

                (if (equal choice "m0")  (customize-set-variable 'psimacs/config/plantuml_java_arg_heap-size    0))
                (if (equal choice "m1")  (customize-set-variable 'psimacs/config/plantuml_java_arg_heap-size  256))
                (if (equal choice "m2")  (customize-set-variable 'psimacs/config/plantuml_java_arg_heap-size  512))
                (if (equal choice "m4")  (customize-set-variable 'psimacs/config/plantuml_java_arg_heap-size 1024))
                (if (equal choice "m8")  (customize-set-variable 'psimacs/config/plantuml_java_arg_heap-size 2048))
                (if (equal choice "m16") (customize-set-variable 'psimacs/config/plantuml_java_arg_heap-size 4096))
                (if (equal choice "m32") (customize-set-variable 'psimacs/config/plantuml_java_arg_heap-size 8192))

                ; Reinitialize the plantuml-java-args variable
                (psimacs/config/plantuml-eval-java-args 0 0)
            )
        )

        (defun psimacs/config/plantuml-customize-java_arg_image-size ()
            "Customize the plantUml image size.
Allowed values: x0, x1, x2, x4, x8
x0 :     0
x1 :  4096
x2 :  8192
x4 : 16384
x8 : 32768"
            (interactive)

            (let (choices choice)
                (setq choices '("x0" "x1" "x2" "x4" "x8"))
                (setq choice (ido-completing-read "Image size: " choices))

                ;(message "choice = %s" choice)

                (if (equal choice "x0") (customize-set-variable 'psimacs/config/plantuml_java_arg_limit_size     0))
                (if (equal choice "x1") (customize-set-variable 'psimacs/config/plantuml_java_arg_limit_size  4096))
                (if (equal choice "x2") (customize-set-variable 'psimacs/config/plantuml_java_arg_limit_size  8192))
                (if (equal choice "x4") (customize-set-variable 'psimacs/config/plantuml_java_arg_limit_size 16384))
                (if (equal choice "x8") (customize-set-variable 'psimacs/config/plantuml_java_arg_limit_size 32768))

                ; Reinitialize the plantuml-java-args variable
                (psimacs/config/plantuml-eval-java-args 0 0)
            )
        )
)
#+end_src

** Mermaid Mode

The package [[https://github.com/abrochard/mermaid-mode][mermaid-mode]] provides access to the nice
[[https://mermaid.js.org][Mermaid]] tool that allows the generation of diagrams and charts with
a plain text description.

See also:
- [[https://mermaid.js.org][Mermaid]]
- [[https://github.com/mermaid-js/mermaid-cli][mermaid-cli]]
- [[https://github.com/abrochard/mermaid-mode][mermaid-mode]]
- [[https://mermaid.live/][Mermaid Live Editor]]

#+begin_src emacs-lisp :tangle config/init-major-modes-mermaid-mode.el :var file-description="Major Modes - mermaid-mode setup"
;;
;; Configuration of the Mermaid support in Psimacs.
;;
(use-package mermaid-mode
    :config
    (setq mermaid-mmdc-location (expand-file-name psimacs/config/mermaid-runtime-cmd))
)
#+end_src

* Shells

References:
- [[https://github.com/akermu/emacs-libvterm][emacs-libvterm]]
- [[https://github.com/suonlight/multi-vterm][multi-vterm]]
- [[https://github.com/atomontage/xterm-color][xterm-color]]

** EShell

Some eshell configurations.

#+begin_src emacs-lisp :tangle config/init-advanced-shell.el :var file-description="Advanced shell setup"


(use-package exec-path-from-shell
  :config
    ;(exec-path-from-shell-initialize)
    ;(exec-path-from-shell-copy-env "PATH")
)

(use-package eshell-toggle
  :custom
    (eshell-toggle-size-fraction 3)
    (eshell-toggle-run-command nil)
    (eshell-toggle-init-function #'eshell-toggle-init-ansi-term)
)

(use-package eshell-syntax-highlighting
  :after esh-mode
  :config (eshell-syntax-highlighting-global-mode +1)
)

(use-package eshell
  :straight nil
  :config
    (setq
      eshell-directory-name psimacs/config/eshell-cache-dir
      eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands' ("bash" "htop" "ssh" "top" "zsh")
    )
)
#+end_src

** Powershell

[[https://github.com/jschaf/powershell.el/tree/87826777bd3ebd53740be99b4546bfc11ccc625d][PowerShell]] is an Emacs major mode
for editing and running [[https://docs.microsoft.com/en-us/powershell/scripting/overview?view=powershell-7.1][Microsoft PowerShell]] files.

References:
- [[https://docs.microsoft.com/en-us/powershell/][PowerShell Documentation]]
- [[https://en.wikipedia.org/wiki/PowerShell][Wikipedia about PowerShell]]
- [[https://docs.microsoft.com/en-us/learn/modules/introduction-to-powershell/][Introduction to PowerShell]]
- [[https://cdn.comparitech.com/wp-content/uploads/2018/08/Comparitech-Powershell-cheatsheet.pdf][PowerShell Cheat Sheet (PDF)]]
- [[https://download.microsoft.com/download/2/1/2/2122F0B9-0EE6-4E6D-BFD6-F9DCD27C07F9/WS12_QuickRef_Download_Files/PowerShell_LangRef_v3.pdf][Microsoft PowerShell Cheat Sheet (PDF)]]
- [[https://gist.github.com/pcgeek86/336e08d1a09e3dd1a8f0a30a9fe61c8a][PowerShell Cheat Sheet / Quick Reference]]

#+begin_src emacs-lisp :tangle config/init-advanced-shell.el :var file-description="Advanced shell setup"
;;
;; PowerShell
;;
(use-package powershell)
#+end_src

** VTerm

References:
- [[https://www.leonerd.org.uk/code/libvterm/][libvterm]]
- [[https://github.com/neovim/libvterm?tab=readme-ov-file][libvterm]]
- [[https://github.com/akermu/emacs-libvterm][emacs-libvterm]]
- [[https://docs.doomemacs.org/v21.12/modules/term/vterm/][:term vterm]]

- [[https://github.com/suonlight/multi-vterm][multi-vterm]]
- [[https://www.youtube.com/watch?v=4IAe3-YN-Wo][Emacs vterm terminal and multi-vterm install]]
- [[https://irreal.org/blog/?p=10651][Emacs As A Terminal Multiplexer]]
- [[https://www.youtube.com/watch?v=X8c_TrGfYcM][Using Emacs instead of tmux]]


#+begin_src emacs-lisp :tangle config/init-advanced-shell.el :var file-description="Advanced shell setup"
;;
;; vterm
;;
(when psimacs/system/is-linux-p
    (use-package vterm
      :defer t
      :if psimacs/system/is-linux-p
    )

    ;;
    ;; multi-vterm
    ;;
    (use-package multi-vterm
      :after vterm
      :defer t
      :if psimacs/system/is-linux-p
      :straight (:build t)
    )
)
#+end_src

** Various Shells

The following functions allow you to open various shells inside *Emcas*. Each shell does have its own quirks.
Perfect is none of them. The two commands for starting the [[https://docs.microsoft.com/en-us/powershell/][PowerShell]] and the [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html][EShell]] are only trivial wrapper
of the simpler commands.

References:
- [[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][Mastering EShell]]
- [[https://wikemacs.org/wiki/Eshell][Wikimacs EShell]]
- [[http://www.howardism.org/Technical/Emacs/eshell-fun.html][Eschewing Zshell for Emacs Shell]]

#+begin_src emacs-lisp :tangle config/init-advanced-shell.el :var file-description="Advanced shell setup"
;;
;; Functions that starts various shells
;;
(defun psimacs/shell/spawn-shell (name)
  "Create a new shell buffer."
  (interactive "Mname of shell buffer to create: ")
  (pop-to-buffer (get-buffer-create (generate-new-buffer-name name)))
  (shell (current-buffer))
)


(defun psimacs/shell/run-bash ()
  "Run a bash interactive shell."
  (interactive)
  (let ((process-environment (cl-copy-list process-environment))
          (explicit-shell-file-name psimacs/config/msys-runtime-exe)
          (explicit-bash.exe-args '("--login" "-i"))
          (binary-process-input t)
          (w32-quote-process-args t)
          )
      (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
      (shell "*bash*")
  )
)

(defun psimacs/shell/run-cmd ()
  "Run a DOS command shell."
  (interactive)
  (let ((explicit-shell-file-name "cmd.exe"))
    (shell "*cmd.exe*"))
  )

(defun psimacs/shell/run-powershell ()
  "Run a DOS command shell."
  (interactive)
  (powershell)
  )

(defun psimacs/shell/run-eshell ()
  "Run a Emacs eshell."
  (interactive)
  (eshell)
  )

;(defun psimacs/shell/run-ubuntu-bash ()
;  "Run a WSL2 Ubuntu bash shell"
;  (interactive)
;  (let ((process-environment (cl-copy-list process-environment))
;          (explicit-shell-file-name "C:\\Windows\\System32\\bash.exe" )
;          (explicit-bash.exe-args '("--login" "-i"))
;          (binary-process-input t)
;          (w32-quote-process-args t)
;          )
;      (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
;      (shell "*ubuntu bash*")
;  )
;)

;(defun psimacs/shell/run-wunix-shell ()
;  "Run Windows' bash in shell mode."
;  (interactive)
;  (let (
;        (explicit-shell-file-name "cmd.exe")
;        ;(explicit-cmd.exe-args '("/C" "c:\\Windows\\WinSxS\\amd64_microsoft-windows-lxss-bash_31bf3856ad364e35_10.0.19041.4474_none_b44cc5c971d28390\\bash.exe" "-i"))
;        (explicit-cmd.exe-args '("/C" "c:\Program Files\WindowsApps\CanonicalGroupLimited.Ubuntu_2404.1.66.0_x64__79rhkp1fndgsc\ubuntu.exe"))
;    )
;    (call-interactively 'shell)
;  )
;)

(defun psimacs/shell/run-vs-2019-x64-native-shell ()
  "Run Windows x64-native shell with Visual Studio environment."
  (interactive)
  (let (
        (explicit-shell-file-name "cmd.exe")
        (explicit-cmd.exe-args'("/k" "c:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\VC\\Auxiliary\\Build\\vcvars64.bat"))
    )
    (shell "*vs-2019-x64-native*")
  )
)

(defun psimacs/shell/run-vs-2019-x86-native-shell ()
  "Run Windows x86-native shell with Visual Studio environment."
  (interactive)
  (let (
        (explicit-shell-file-name "cmd.exe")
        (explicit-cmd.exe-args '("/k" "c:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\VC\\Auxiliary\\Build\\vcvars32.bat"))
    )
    (shell "*vs-2019-x86-native*")
  )
)

(defun psimacs/shell/run-vs-2019-x64_x86-cross-shell ()
  "Run Windows x64_x86-cross shell with Visual Studio environment."
  (interactive)
  (let (
        (explicit-shell-file-name "cmd.exe")
        (explicit-cmd.exe-args '("/k" "c:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\VC\\Auxiliary\\Build\\vcvarsamd64_x86.bat"))
    )
    (shell "*vs-2019-x64_x86-cross*")
  )
)

(defun psimacs/shell/run-vs-2019-x86_x64-cross-shell ()
  "Run Windows x86_x64-cross shell with Visual Studio environment."
  (interactive)
  (let (
        (explicit-shell-file-name "cmd.exe")
        (explicit-cmd.exe-args '("/k" "c:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\VC\\Auxiliary\\Build\\vcvarsx86_amd64.bat"))
    )
    (shell "*vs-2019-x86_x64-cross*")
  )
)
#+end_src

** Execute buffer with program

Allow you to run a program with the buffer as input in standard shell.

#+begin_src emacs-lisp :tangle config/init-advanced-shell.el
;;
;; Execute buffer with given program
;;
(defun psimacs/shell/execute-buffer-with-program (prg)
    "Execute program on current buffer.

This command first saves the current buffer and then executes the
saved file with the program provided as a shell command."
    (interactive "P")
    (save-buffer)
    (shell-command (concat prg buffer-file-name))
)
#+end_src

* Utility Functions

This section contains some useful elisp functions that I have collected over the time. Not all of them
are of high quality and some of them are obsolete because better alternatives are available. But I am used
to them so I will stay with them.

** Convenience

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Convenience functions
;;
(defun psimacs/convenience/bind-f6-to-last-command ()
    "Bind function key F6 to the last command used."
    (interactive)
    (global-set-key (kbd "<f6>") last-command)
)
#+end_src

** Help

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Help functions
;;
(use-package find-func :straight nil)

;;
;; Describe Foo at point
;;
(defun psimacs/help/describe-foo-at-point ()
    "Show the documentation of the Elisp function and variable near point.
This checks in turn:
-- for a function name where point is
-- for a variable name where point is
-- for a surrounding function call
"
    (interactive)
    (let (sym)
        (cond (
            (setq sym (ignore-errors
                (with-syntax-table emacs-lisp-mode-syntax-table
                    (save-excursion
                        (or (not (zerop (skip-syntax-backward "_w")))
                            (eq (char-syntax (char-after (point))) ?w)
                            (eq (char-syntax (char-after (point))) ?_)
                            (forward-sexp -1)
                        )
                        (skip-chars-forward "`'")
                    (let ((obj (read (current-buffer))))
                            (and (symbolp obj) (fboundp obj) obj))))))
             (describe-function sym))
             ((setq sym (variable-at-point)) (describe-variable sym))
                  ((setq sym (find-function-at-point)) (describe-function sym))))
)
#+end_src

*** ASCII Table

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; ASCII Table
;;
(defun joemac/help/show-ascii-chart ()
    "Show ASCII character table in *scratch* buffer.

Displays a character table in the *scratch* buffer for all
characters (0..255) in the current display mapping. Note that
the low characters (0..31) are displayed as the control characters
that they represent regardless of display mapping format."

    (interactive)
    (let (i j c)
        (switch-to-buffer "*scratch*")
        (erase-buffer)
        (insert "\n")
        (insert "---   +0   +32   +64   +96  +128  +160  +192  +224\n")
        (insert "\n")
        (setq i 0)
        (while (< i 32)
            (insert (format "%3d  " i))
            (setq j 0)
            (while (< j 8)
                (setq c (+ i (* j 32)))
                (if (eq j 0) (insert (format " ^%c" (+ c 64)))
                    (insert (format " %c " c))
                )
                (insert "   ")
                (setq j (1+ j))
            )
            (insert "\n")
            (setq i (1+ i))
        )
        (goto-char (point-min))
        ""
    )
)
#+end_src

** Buffer

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Buffer functions
;;
(defun psimacs/buffer/next-user-buffer ()
    "Switch to the next user buffer.

user buffer is determined by psimacs/buffer/user-buffer-q."

    (interactive)
    (next-buffer)
    (let ((i 0))
        (while (< i 20)
            (if (not (psimacs/buffer/user-buffer-q))
                (progn (next-buffer)
                    (setq i (1+ i)))
                    (progn (setq i 100)
                )
            )
        )
    )
)

(defun psimacs/buffer/previous-user-buffer ()
  "Switch to the previous user buffer.

user buffer is determined by psimacs/buffer/user-buffer-q."

    (interactive)
    (previous-buffer)
    (let ((i 0))
        (while (< i 20)
            (if (not (psimacs/buffer/user-buffer-q))
            (progn (previous-buffer)
                (setq i (1+ i))
            )
            (progn (setq i 100)))
        )
    )
)

(defun psimacs/buffer/user-buffer-q ()
    "Return t if current buffer is a user buffer, else nil.

Typically, if buffer name starts with *, it's not considered a user buffer.
This function is used by buffer switching command and close buffer command,
so that next buffer shown is a user buffer. You can override this function
to get your idea of user buffer."

    (interactive)
    (if (string-equal "*" (substring (buffer-name) 0 1))
        nil
        (if (string-equal major-mode "dired-mode")
            nil
            t
        )
    )
)

(defun psimacs/buffer/next-emacs-buffer ()
    "Switch to the next Emacs buffer.

Emacs buffer here is buffer whose name starts with *."

    (interactive)
    (next-buffer)
    (let ((i 0))
        (while (and (not (string-equal "*" (substring (buffer-name) 0 1))) (< i 20))
            (setq i (1+ i)) (next-buffer)
        )
    )
)

(defun psimacs/buffer/previous-emacs-buffer ()
    "Switch to the previous Emacs buffer.

Emacs buffer here is buffer whose name starts with *."

    (interactive)
    (previous-buffer)
    (let ((i 0))
        (while (and (not (string-equal "*" (substring (buffer-name) 0 1))) (< i 20))
            (setq i (1+ i)) (previous-buffer)
        )
    )
)
#+end_src

** Parenthesis

*** bounce sexp

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Parenthesis functions
;;
(defun psimacs/pair/bounce-sexp ()
    "Will bounce between matching parens."
    (interactive)
    (let ((prev-char (char-to-string (preceding-char)))
          (next-char (char-to-string (following-char))))
    (cond ((string-match "[[{(<]" next-char) (forward-sexp 1))
          ((string-match "[\]})>]" prev-char) (backward-sexp 1))
          (t (error "%s" "Not on a paren, brace, or bracket"))))
)
#+end_src

** Movement

*** Move to top of page

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Movement functions: Move to top of page
;;
(defun psimacs/movement/top-of-page()
    "Brings point to the top of the current page.

Cursor is set to line 0 of current window."
    (interactive)
    (move-to-window-line 0)
)
#+end_src

*** Move to bottom of page

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Move to bottom of page
;;
(defun psimacs/movement/bottom-of-page ()
    "Brings point to the bottom of the current page.

Cursor is set to last line of current window."
    (interactive)
    (move-to-window-line -1)
)
#+end_src

*** Move text (internal)

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Move text (internal)
;;
(defun psimacs/internal/move-text-internal (arg)
    "Move selected region or line up or down.

Move selected region or line if there is no selection up or down"
    (cond
        (   (and mark-active transient-mark-mode)
            (if (> (point) (mark))
                (exchange-point-and-mark))
            (let (
                    (column (current-column))
                    (text (delete-and-extract-region (point) (mark)))
                )
                (forward-line arg)
                (move-to-column column t)
                (set-mark (point))
                (insert text)
                (exchange-point-and-mark)
                (setq deactivate-mark nil)
            )
        )
        (t
            (let ((column (current-column)))
                (beginning-of-line)
                (when (or (> arg 0) (not (bobp)))
                    (forward-line)
                (when (or (< arg 0) (not (eobp)))
                    (transpose-lines arg))
                (forward-line -1))
                (move-to-column column t))
        )
    )
)
#+end_src

*** Move text down

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Move text down
;;
(defun psimacs/movement/move-text-down (arg)
    "Move region or line down.

Move region (`transient-mark-mode' active) or current line arg lines down."
    (interactive "*p")
    (psimacs/internal/move-text-internal arg)
)
#+end_src

*** Move text up

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Move text up
;;
(defun psimacs/movement/move-text-up (arg)
    "Move region or line up.

Move region (`transient-mark-mode' active) or current line arg lines up."
    (interactive "*p")
    (psimacs/internal/move-text-internal (- arg))
)
#+end_src

*** Find selection forward

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
(defalias 'psimacs/internal/get-clipboard-data
  (cond ((fboundp 'w32-get-clipboard-data) 'w32-get-clipboard-data)
        ((fboundp 'x-get-clipboard) 'x-get-clipboard)
        (t nil)))
#+end_src

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Find selection forward
;;
(defun psimacs/search/find-selection-forward ()
    "Find text cut buffer forward."
    (interactive "")
    (let (sel len)
        (setq sel (psimacs/internal/get-clipboard-data))
        (setq len (length sel))
        (search-forward sel)
        (deactivate-mark)
        (isearch-highlight (set-marker (make-marker) (- (point) len))
                           (set-marker (make-marker) (point)))
    )
)
#+end_src

** Search

*** Find selection backward

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Search functions
;;
(defun psimacs/search/find-selection-backward ()
    "Find text cut buffer backward."
    (interactive "")
    (let (sel len)
        (setq sel (psimacs/internal/get-clipboard-data))
        (setq len (length sel))
        (search-backward sel)
        (deactivate-mark)
        (isearch-highlight (set-marker (make-marker) (point))
                           (set-marker (make-marker) (+ (point) len)))
    )
)
#+end_src

** Indentation

*** Indent or complete

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Indentation functions
;;
(defun psimacs/indent/indent-or-complete ()
    "Complete if point is at end of a word, otherwise indent line."
    (interactive)
    (if (looking-at "\\>")
        (dabbrev-expand nil)
        (indent-for-tab-command)
    )
)
#+end_src

*** Indent Buffer

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
(defun psimacs/indent/indent-whole_buffer ()
    "Indent whole buffer."
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max))
)
#+end_src

** Kill

*** Kill whitespace to next token

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Kill functions
;;
(defun psimacs/kill/kill-ws-to-next-token ()
    "Deletes all whitespace forward to line end.

Deletes all whitespace (space and tab characters only) from (`point')
forward to the end of the current line or until a non-whitespace
character is encountered."
    (interactive)
    (while (or (looking-at " ") (looking-at "\t"))
        (delete-char 1 'kill)
    )
)
#+end_src

** Copy

*** Duplicate current line

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Copy functions
;;
(defun psimacs/copy/duplicate-current-line (&optional where)
  "Duplicates current line of text.

If the optional argument WHERE is non-nil, it is placed BEFORE the current line,
otherwise it is placed AFTER the current line."
    (interactive "P")
    (save-excursion
        (let (begl)
            (beginning-of-line)
            (setq begl (point))
            (forward-line 1)
            (insert-buffer-substring (current-buffer) begl (point))
        )
    )
    (if (not (eq where nil))
        (forward-line 1))
)
#+end_src

*** Duplicate line

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
(defun psimacs/copy/duplicate-line (&optional commentfirst)
    "Comment line at point; if COMMENTFIRST is non-nil, comment the original.

Easy way to duplicate a line and, optionally, comment-out the first one."
    (interactive)
    (beginning-of-line)
    (let
        ((beg (point)))
        (end-of-line)
        (let
            ((str (buffer-substring beg (point))))
            (when commentfirst
                (comment-region beg (point)))
                (insert
                    (concat (if (= 0 (forward-line 1)) "" "\n") str "\n"))
            (forward-line -1)
        )
    )
)
#+end_src

** Mark
*** Mark line

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Mark functions
;;
(defun psimacs/mark/mark-line (&optional _arg)
    "Mark whole line."
    (interactive "p")
    (beginning-of-line)
    (push-mark (point) nil t)
    (end-of-line)
)
#+end_src

*** Exchange point and mark

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
(defun psimacs/mark/exchange-point-and-mark ()
  "Exchange point and mark."
  (interactive)
  (if rectangle-mark-mode
      (rectangle-exchange-point-and-mark)
    (let ((mk (mark)))
      (rectangle-mark-mode 1)
      (goto-char mk))))
#+end_src

** Kill and Yank

*** Yank and forward line

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Kill and yank functions
;;
(defun psimacs/kill/yank-and-forward-line ()
    "Yank and forward line."
    (interactive)
    (let ((old-col (current-column)))
        (yank)
        (forward-line)
        (while (and (not (eolp)) (> old-col 0))
        (forward-char)
        (setq old-col (1- old-col))))
)
#+end_src

*** Kill current line

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
(defun psimacs/kill/kill-current-line ()
    "Kill current line."
    (interactive)
    (beginning-of-line)
    (kill-line)
)
#+end_src

** Convert
*** dos -> unix

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Convert functions
;;
(defun psimacs/newline/dos2unix ()
    "Convert buffer from Dos to Unix.

Convert buffer from Dos ^M end of lines to unix end of lines.
"
    (interactive)
    (goto-char (point-min))
    (while (search-forward "\r" nil t) (replace-match ""))
)
#+end_src

*** unix -> dos

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
(defun psimacs/newline/unix2dos ()
    "Convert buffer from Unix to Dos.

Convert buffer from Unix end of lines to Dos end of lines."
    (interactive)
    (goto-char (point-min))
    (while (search-forward "\n" nil t) (replace-match "\r\n"))
)
#+end_src

** dir-locals

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
(defun psimacs/dir-locals/reload-for-current-buffer ()
    "Reload dir locals for the current buffer."
    (interactive)
    (let ((enable-local-variables :all))
        (hack-dir-local-variables-non-file-buffer)
    )
)

(defun psimacs/dir-locals/reload-for-all-buffer-in-this-directory ()
    "For every buffer with the same `default-directory' as the current buffer's, reload dir-locals."
    (interactive)
    (let ((dir default-directory))
        (dolist (buffer (buffer-list))
            (with-current-buffer buffer
                (when (equal default-directory dir))
                    (psimacs/dir-locals/reload-for-current-buffer)
            )
        )
    )
)
#+end_src

** Miscellaneous

**** Count words

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Miscellaneous functions
;;
(defun psimacs/miscellaneous/count-words (start end)
    "Count number of words between START and END."
    (let ((count 0))
        (save-excursion
            (save-restriction
                (narrow-to-region start end)
                (goto-char (point-min))
                (while (forward-word 1)
                    (setq count (1+ count))
                )
            )
        )
        count
    )
)
#+end_src

**** Count in region

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
(defun psimacs/miscellaneous/count-region (start end)
    "Count lines, words and characters in region."
    (interactive "r")
    (let ((l (count-lines start end))
          (w (count-words start end))
          (c (- end start))
         )
        (message "Region has %d line%s, %d word%s and %d character%s."
             l (if (= 1 l) "" "s")
             w (if (= 1 w) "" "s")
             c (if (= 1 c) "" "s")
        )
    )
)
#+end_src

** Visual Studio

Integration of *Psimacs* with the Microsoft Visual Studio. Provided are two functions. At first their is a
command =psimacs/shell/open-file-in-visual-studio= that allows you to open the given file in the active
Visual Studio session. The second command allows you import the given file in the active Visual Studio project.

Both commands relay on two python scripts =Open.py= and =Impot.py=.

*** Open file in Visual Studio

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Open file in Visual Studio
;;
(defun psimacs/shell/open-file-in-visual-studio ()
    "Open the given file argument in the MS Visual Studion session.

This function takes credit from some external programs:
- python must be installed and running
- The DevEnv python package must be present
"
    (interactive)
    (let (
        (buf (psimacs/buffer/user-buffer-q))
        )
        (if buf
            (shell-command
                (concat
                    psimacs/config/python-runtime-exe
                    " "
                    (expand-file-name psimacs/config/python-vc-visual-studio-dir) "Open.py"
                    " "
                    buffer-file-name))
        )
    )
)
#+end_src

*** Import file in Visual Studio

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Import file in Visual Studio
;;
(defun psimacs/shell/import-file-in-visual-studio ()
    "Import the given file argument in the MS Visual Studion session.

This function takes credit from some external programs:
- python must be installed and running
- The DevEnv python package must be present
"
    (interactive)
    (let (
        (buf (psimacs/buffer/user-buffer-q))
        )
        (if buf
            (shell-command
                (concat
                    psimacs/config/python-runtime-exe
                    " "
                    (expand-file-name psimacs/config/python-vc-visual-studio-dir) "Import.py"
                    " "
                    buffer-file-name))
        )
    )
)
#+end_src

** C++ support

Some convenience functions for the [[https://isocpp.org/][C++]] programmer.

References:
- [[https://en.wikipedia.org/wiki/C%2B%2B][Wikipedia: C++]]
- [[https://isocpp.org/][News, Status & Discussion about Standard C++]]
- [[https://www.cplusplus.com/][Welcome to cplusplus.com]]
- [[https://en.cppreference.com][C++ Reference]]
- [[https://justinmeiners.github.io/sgi-stl-docs/][Standard Template Library Programmer's Guide]]
- [[https://www.boost.org/][Boost C++ Libraries]]

*** Switching between source and header files

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; C++ support
;;
;; Default extension for c++ header files.
(defvar c++-default-header-ext "hpp")
;; Default extension for c++ source files.
(defvar c++-default-source-ext "cpp")
;; Default regexp for c++ header files.
(defvar c++-header-ext-regexp "\\.\\(hxx\\|hpp\\|h\\|\hh\\|H\\)$")
;; Default regexp for c++ source files.
(defvar c++-source-ext-regexp "\\.\\(cxx\\|cpp\\|c\\|\cc\\|C\\)$")

(defvar c++-source-extension-list '("c" "cc" "C" "cpp" "cxx" "c++"))
(defvar c++-header-extension-list '("h" "hh" "H" "hpp" "hxx"))

(defun psimacs/c++/toggle-source-header()
    "Switches to the source buffer if currently in the header buffer and vice versa.

Header and source files are expected to reside at the same place.
"
    (interactive)
    (let ((_buf (current-buffer))
        (name (file-name-nondirectory (buffer-file-name)))
        file offs)
        (setq offs (string-match c++-header-ext-regexp name))
        (if offs
            (let ( (lst c++-source-extension-list)
                   (ok nil)
                   ext )
                (setq file (substring name 0 offs))
                (while (and lst (not ok))
                    (setq ext (car lst))
                    (if (file-exists-p (concat file "." ext))
                        (setq ok t))
                    (setq lst (cdr lst))
                )
                (if ok
                  (find-file (concat file "." ext))
                )
            )
            (let ()
                (setq offs (string-match c++-source-ext-regexp name))
                (if offs
                    (let (
                        (lst c++-header-extension-list)
                        (ok nil)
                        ext)
                        (setq file (substring name 0 offs))
                        (setq file (substring name 0 offs))
                        (while (and lst (not ok))
                            (setq ext (car lst))
                            (if (file-exists-p (concat file "." ext))
                                (setq ok t))
                                (setq lst (cdr lst)
                            )
                        )
                        (if ok
                            (find-file (concat file "." ext))
                        )
                    )
                )
            )
        )
    )
)
#+end_src

*** Align assignment vertically

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
(defun psimacs/internal/find-assignment ()
    "Find different kind of assignments."
    (if (re-search-forward
            "[^<>=!]=\\|\\+=\\|-=\\|\\*=\\|/=\\|&=\\||=\\|\\^=\\|<<=\\|>>="
            (save-excursion (end-of-line) (point)) t
        )
        (progn
            (goto-char (match-beginning 0))
            (if (looking-at ".==")
                nil
                (if (looking-at "\\+=\\|-=\\|\\*=\\|/=\\|&=\\||=\\|\\^=\\|<<=\\|>>=")
                    (set-mark (match-end 0))
                    (forward-char 1)
                    (set-mark (1+ (point)))
                )
                (delete-horizontal-space)
                t
            )
        )
    nil)
  )

(defun psimacs/c++/align-equals (start end)
    "Make the first assignment operator on each line line up vertically.

START - Position to start off.
END - Position to end."
    (interactive "*r")
    (save-excursion
        (let ((indent 0))
            (narrow-to-region start end)
            (goto-char (point-min))
            (while (not (eobp))
                (if (psimacs/internal/find-assignment)
                    (progn
                        (exchange-point-and-mark)
                        (setq indent (max indent (current-column)))
                        (delete-horizontal-space)
                        (insert " "))
                )
                (forward-line 1)
            )
            (goto-char (point-min))
            (while (not (eobp))
                (if (psimacs/internal/find-assignment)
                    (indent-to-column (1+ (- indent  (- (mark) (point)))))
                )
                (forward-line 1)
            )
        )
        (widen)
    )
)
#+end_src

** Sphinx

[[https://www.sphinx-doc.org/en/master/][Sphinx]] is a tool that makes it easy to create intelligent and beautiful documentation.
It must be alongside with installed with [[https://www.python.org/][Python]].

*** Run Sphinx-build

The following function run the *sphinx-build* command. It ask for a *reStructuredText* input =.rst= file.
A configuration file =conf.py= beside the input file is respected.

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Run the sphinx build process
;;
(defun psimacs/sphinx/build (&optional arg-file)
  "Run the sphinx-build tool for the given file.

Ask for the input file.
If configuration conf.py exists beside the input file, this configuration governs the build.
Otherwise, a simple command line configuration is assembled using customization variables
psimacs/config/sphinx/builder and psimacs/config/sphinx/html-theme.
"
  (interactive)
  (let* ((file (or arg-file (read-file-name "Enter file name: " default-directory)))
         (src-dir (file-name-directory file))
         (dst-dir (concat src-dir "build"))
         (conf (concat src-dir "conf.py"))
        )
    (when (file-exists-p file)
      (if (file-exists-p conf)
          (shell-command (concat psimacs/config/sphinx-build-runtime-exe " " src-dir " " dst-dir " " file))
        ;; else
        (let ((builder   (concat "-b " psimacs/config/sphinx/builder))
              (config    "-C")
              (theme     (concat "-D html_theme=" psimacs/config/sphinx/html-theme))
              (project   (concat "-D project=\"org-mode\""))
              (copyright (concat "-D copyright=\"" (format-time-string "%Y") ", " psimacs/config/copyright/author "\"" ))
              (author    (concat "-D author=\"" psimacs/config/copyright/author "\""))
              (master    (concat "-D master_doc=" (file-name-sans-extension (file-name-nondirectory file))))
             )
          ;; (message builder)
          ;; (message theme)
          ;; (message project)
          ;; (message copyright)
          ;; (message author)
          ;; (message master)
          ;; (message src-dir)
          ;; (message dst-dir)
          ;; (message file)
          (shell-command (concat psimacs/config/sphinx-build-runtime-exe " "
                                 builder   " "
                                 config    " "
                                 theme     " "
                                 project   " "
                                 copyright " "
                                 author    " "
                                 master    " "
                                 src-dir   " "
                                 dst-dir   " "
                                 file))))))
)

(defun psimacs/sphinx/org-sphinx-build ()
    "Run the sphinx-build tool for the current org buffer."
    (interactive)
    (when (eq major-mode 'org-mode)
      (org-rst-export-to-rst)
      (psimacs/sphinx/build (concat (file-name-sans-extension (buffer-file-name)) ".rst"))
    )
)
#+end_src

** Processes
Some convenience functions for calling extern processes.

*** Run Python Code

Call Python script and insert result into current buffer at point.

#+begin_src emacs-lisp :tangle config/init-utility-functions.el :var file-description="Utility functions setup"
;;
;; Run a python script
;;
(defun psimacs/python/run-script (py-script &rest args)
  "Exexute the given python script and insert the result in the active buffer at point.

The given python script is not found on the file system it is expected to be given relative
to the site-lisp directory.

Any number of arguments can be provided in addition to the script path.

The printed result of script execution is inserted at point of the currently active buffer.
"
  (let ((script py-script))
    (unless (file-exists-p script)
        (setq script (psimacs/file-system/concat-file psimacs/config/python-extensions-dir script))

        (unless (file-exists-p script)
            (setq script (psimacs/file-system/concat-file psimacs/config/site-lisp-dir script))
        )
    )

    (when (file-exists-p script)
      (message script args)
      (apply #'call-process psimacs/config/python-runtime-exe nil t t script args)
      )))
#+end_src
* Hydras

A collection of *Psimacs* hydras that not directly belong to a single package.

References:
- [[https://github.com/abo-abo/hydra][Hydra]]
- [[https://www.reddit.com/r/emacs/comments/3ba645/does_anybody_have_any_real_cool_hydras_to_share/][Hydras to Share]]

| Key binding | Command                                 | Description               |
|-------------+-----------------------------------------+---------------------------|
| =H-SPC H-SPC= | =M-x psimacs/hydra/hydra/body=            | Hydras...                 |
| =H-SPC SPC=   | =M-x psimacs/hydra/toggle/body=           | Toggles...                |
| =H-SPC a=     | =M-x psimacs/hydra/apropos/body=          | Apropos...                |
| =H-SPC d=     | =M-x dap-hydra=                           | DAP-Mode hydra...         |
| =H-SPC e=     | =M-x psimacs/hydra/else/body=             | ELSE mode hydra...        |
| =H-SPC h=     | =M-x psimacs/hydra/help/body=             | Help...                   |
| =H-SPC H=     | =M-x psimacs/hydra/helpful/body=          | Helpful...                |
| =H-SPC i=     | =M-x hydra-ivy/body=                      | Ivy...                    |
| =H-SPC j=     | =M-x psimacs/hydra/jupyter/open-hydra=    | Jupyter Notebook hydra... |
| =H-SPC l=     | =M-x psimacs/hydra/lsp/body=              | LSP Mode hydra...         |
| =H-SPC m=     | =M-x major-mode-hydra=                    | Major Mode's hydra...     |
| =H-SPC p=     | =M-x psimacs/hydra/projectile/body=       | Projectile...             |
| =H-SPC t=     | =M-x psimacs/hydra/avy/body=              | Fast Jumping in Text...   |
| =H-SPC T=     | =M-x psimacs/hydra/transpose/body=        | Transposing...            |
| =H-SPC w=     | =M-x psimacs/hydra/window/body=           | Window...                 |
| =H-SPC y=     | =M-x psimacs/hydra/yasnippet/body=        | YASnippet...              |
| =H-SPC C-c=   | =M-x psimacs/hydra/multiple-cursors/body= | Multiple Cursors...       |
| =H-SPC C-f=   | =M-x psimacs/hydra/flycheck/body=         | Flycheck...               |
| =H-SPC C-i=   | =M-x psimacs/hydra/image+/body=           | Image...                  |
| =H-SPC C-l=   | =M-x psimacs/hydra/vlf-large-files/body=  | Large Files...            |
| =H-SPC C-m=   | =M-x psimacs/hydra/word-modes/body=       | CamelCase...              |
| =H-SPC C-o=   | =M-x psimacs/hydra/org/body=              | Org-Mode...               |
| =H-SPC C-p=   | =M-x hydra-projectile-cmake/body=         | Projectile CMake...       |
| =H-SPC C-r=   | =M-x psimacs/hydra/rectangle/body=        | Rectangle...              |
| =H-SPC C-s=   | =M-x psimacs/hydra/straight/body=         | Straight...               |
| =H-SPC H-m=   | =M-x psimacs/hydra/navigation/body=       | Navigation...             |
|-------------+-----------------------------------------+---------------------------|

** Toggles

A hydra to give easy access to a number of toggles like minor modes etc.

References:
- [[https://emacsredux.com/blog/2016/02/07/auto-indent-your-code-with-aggressive-indent-mode/][Auto-indent your code with aggressive-indent-mode]]
- [[https://endlessparentheses.com/hungry-delete-mode.html][Hungry Delete Mode]]

#+begin_src emacs-lisp :tangle config/init-hydras.el :var file-description="Hydras Setup"
;;
;; Hydra for various toggles
;;
(defun psimacs/debug/toogle-debugging ()
    "Enable/Disable debugging flags."
    (interactive)
    (when debug-on-error
        (setq eval-expression-debug-on-error t))

    (setq-default debug-on-error (not debug-on-error))
    (setq-default eval-expression-debug-on-error (not eval-expression-debug-on-error))
)

(define-key psimacs/config/global-key-map/hydra (kbd "SPC")
    (pretty-hydra-define
        psimacs/hydra/toggle
        (
           :title (psimacs/config/pretty-hydra-title "Toggles" 'faicon "toggle-on" :v-adjust -0.1)
           :color amaranth
           :quit-key "q"
        )
        (
            "Basic"
                (
                    ("n" display-line-numbers-mode  "line number" :toggle t)
                    ("a" global-aggressive-indent-mode "aggressive indent" :toggle t)
                    ("c" keycast-mode "key cast mode" :toggle t)
                    ("d" global-hungry-delete-mode "hungry delete" :toggle t)
                    ("p" psimacs/activate/toggle-smartparens-paren-mode  "smartparens mode" :toggle show-smartparens-mode)
                    ("m" flyspell-mode "spell check" :toggle t)
                    ("M" flyspell-prog-mode "spell check for programming" :toggle t)
                    ("s" prettify-symbols-mode "pretty symbol" :toggle t)
                    ("r" rainbow-delimiters-mode "rainbow delimiters" :toggle t)
                    ("R" psimacs/pair/rainbow-toggle-sized-delimiters "rainbow delimiters sized" :toggle psimacs/config/rainbow-toogle-sized-delimiters-flag)
                    ("w" (setq-default show-trailing-whitespace (not show-trailing-whitespace)) "whitespace" :toggle show-trailing-whitespace)
                    ("i" display-fill-column-indicator-mode "fill column indicator" :toggle t)
                )
            "Coding"
                (
                    ("e" else-mode "else" :toggle t)
                    ("f" flycheck-mode "flycheck" :toggle t)
                    ("b" subword-mode "subword" :toggle t)
                    ("B" superword-mode "superword" :toggle t)
                )
            "Debugging"
                (
                    ("D" psimacs/debug/toogle-debugging "Debugging")
                    ("X" (setq-default eval-expression-debug-on-error (not eval-expression-debug-on-error)) "debug on error on eval-expression" :toggle eval-expression-debug-on-error)
                    ("E" toggle-debug-on-error "debug on error" :toggle (default-value 'debug-on-error))
                    ("Q" toggle-debug-on-quit  "debug on quit"  :toggle (default-value 'debug-on-quit))
                )

            "Miscellaneous"
                (
                    ("k" (setq-default dired-kill-when-opening-new-dired-buffer (not dired-kill-when-opening-new-dired-buffer)) "only one dired buffer" :toggle dired-kill-when-opening-new-dired-buffer)
                )
        )
    )
)
#+end_src

** CamelCase and a Like

A hydra to give easy access to the various build in word movement modes.

See also:
- [[http://ergoemacs.org/emacs/emacs_subword-mode_superword-mode.html][subword-mode, superword-mode, camelCase, snake_case]]

#+begin_src emacs-lisp :tangle config/init-hydras.el :var file-description="Hydras Setup"
;;
;; Hydra for various word modes
;;
(define-key psimacs/config/global-key-map/hydra (kbd "C-m")
    (pretty-hydra-define
        psimacs/hydra/word-modes
        (
           :title (psimacs/config/pretty-hydra-title "Word Movement Modes" 'faicon "toggle-on" :v-adjust -0.1)
           :color amaranth
           :quit-key "q"
        )
        (
            ""
                (
                    ("b" subword-mode   "subword Mode   ☞ some■Thing some■-thing some■_thing" :toggle t)
                    ("p" superword-mode "superword Mode ☞ someThing■ some-thing■ some_thing■" :toggle t)
                    ("n" normal-mode    "normal Mode    ☞ someThing■ some■-thing some■_thing")
                )
        )
    )
)
#+end_src

** Apropos

#+begin_src emacs-lisp :tangle config/init-hydras.el :var file-description="Hydras Setup"
;;
;; Hydra for Apropos
;;
(define-key psimacs/config/global-key-map/hydra (kbd "a")
    (defhydra psimacs/hydra/apropos
        (:color pink :hint nil)
"
^^^^^^Apropos
^^^^^^------------------------------------------------------
_a_: apropos           _l_: library           _i_: info
_c_: command           _o_: option            _t_: tags
_d_: documentation     _v_: variable          _z_: customize
_e_: value             _q_: quit
"
        ("a" apropos)
        ("c" apropos-command)
        ("d" apropos-documentation)
        ("e" apropos-value)
        ("l" apropos-library)
        ("o" apropos-user-option)
        ("v" apropos-variable)
        ("i" info-apropos)
        ("t" xref-find-apropos)
        ("z" psimacs/hydra/customize-apropos/body :color blue)
        ("q" nil :color blue)
    )
)

(defhydra psimacs/hydra/customize-apropos
    (:color pink :hint nil)
"
^^^^^^Apropos (customize)
^^^^^^-------------------------------------------------
_a_: apropos           _g_: groups            _q_: quit
_f_: faces             _o_: options
"
    ("a" customize-apropos)
    ("f" customize-apropos-faces)
    ("g" customize-apropos-groups)
    ("o" customize-apropos-options)
    ("q" nil "quit" :color blue)
)
#+end_src

** Help

#+begin_src emacs-lisp :tangle config/init-hydras.el :var file-description="Hydras Setup"
;;
;; Hydra for help
;;
(define-key psimacs/config/global-key-map/hydra (kbd "h")
    (defhydra psimacs/hydra/help
        (:color blue :hint nil)
"
^^Describe           ^^Keys                   ^^Search             ^^Documentation
^^^^^^^^----------------------------------------------------------------------------
_f_: function      _k_: keybinding          _a_: apropros          _i_: info
_p_: package       _w_: where-is            _d_: doc strings
_m_: mode          _b_: show all bindings   _s_: info by symbol
_v_: variable      ^ ^
_e_: view messages _l_: view lossage        _C_: coding-system     _I_: input-method

^ ^                _K_: Psimacs keys        ^ ^                    _P_: Psimacs
^ ^                _B_: Psimacs key list

_q_: quit
"
        ("e" view-echo-area-messages)
        ("l" view-lossage)
        ("C" describe-coding-system)
        ("I" describe-input-method)

        ;; Documentation
        ("i" info nil)

        ;; Keybinds
        ("b" describe-bindings nil)
        ("c" describe-key-briefly nil)
        ("k" helpful-key nil)
        ("w" where-is nil)

        ;; Search
        ("a" apropos-command nil)
        ("d" apropos-documentation nil)
        ("s" info-lookup-symbol nil)

        ;; Describe
        ("f" helpful-callable nil)
        ("p" describe-package nil)
        ("m" describe-mode nil)
        ("v" helpful-variable nil)
        ("y" describe-syntax nil)

        ;; Psimacs
        ("P" psimacs/help/browse-psimacs-config nil)
        ("K" psimacs/help/browse-psimacs-keys nil)
        ("B" psimacs/help/browse-psimacs-key-list nil)

        ;; quit
        ("q" help-quit)
    )
)
#+end_src

** Helpful

#+begin_src emacs-lisp :tangle config/init-hydras.el :var file-description="Hydras Setup"
;;
;; Hydra for helpful
;;
(define-key psimacs/config/global-key-map/hydra (kbd "H")
    (pretty-hydra-define
        psimacs/hydra/helpful
        (
            :title "Helpful"
            :color blue
            :hint nil
            :quit-key "q"
        )
        (
            "Commands"
                (
                    ("f" helpful-callable "callable")
                    ("F" helpful-function "function")
                    ("M" helpful-macro    "macro")
                    ("c" helpful-command  "command")
                    ("k" helpful-key      "key")
                    ("v" helpful-variable "variable")
                    ("p" helpful-at-point "at point")
                )
        )
    )
)
#+end_src

** Buffer Menu

#+begin_src emacs-lisp :tangle config/init-hydras.el :var file-description="Hydras Setup"
;;
;; Hydra for buffer menu
;;
(defhydra psimacs/hydra/buffer
    (:color pink :hint nil)
"
^Mark^             ^Unmark^           ^Actions^          ^Search
^^^^^^^^-----------------------------------------------------------------
_m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
_s_: save          _U_: unmark up     _b_: bury          _I_: isearch
_d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
_D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
_~_: modified
"
        ("m" Buffer-menu-mark)
        ("u" Buffer-menu-unmark)
        ("U" Buffer-menu-backup-unmark)
        ("d" Buffer-menu-delete)
        ("D" Buffer-menu-delete-backwards)
        ("s" Buffer-menu-save)
        ("~" Buffer-menu-not-modified)
        ("x" Buffer-menu-execute)
        ("b" Buffer-menu-bury)
        ("g" revert-buffer)
        ("T" Buffer-menu-toggle-files-only)
        ("O" Buffer-menu-multi-occur :color blue)
        ("I" Buffer-menu-isearch-buffers :color blue)
        ("R" Buffer-menu-isearch-buffers-regexp :color blue)
        ("c" nil "cancel")
        ("v" Buffer-menu-select "select" :color blue)
        ("o" Buffer-menu-other-window "other-window" :color blue)
        ("q" quit-window "quit" :color blue)
)

(define-key Buffer-menu-mode-map "." 'psimacs/hydra-buffer-menu/body)
#+end_src

** Transpose

#+begin_src emacs-lisp :tangle config/init-hydras.el :var file-description="Hydras Setup"
;;
;; Hydra for transposing
;;
(define-key psimacs/config/global-key-map/hydra (kbd "T")
    (defhydra psimacs/hydra/transpose
        (:color pink :hint nil)
"
Transpose^^
^^^^-------------------------------------
_c_: characters    _o_: Org mode words
_w_: words         _e_: Org mode elements
_l_: lines         _t_: Org mode tables
_s_: sentences
_p_: paragraphs    _q_: quit
"
        ("c" transpose-chars)
        ("w" transpose-words)
        ("o" org-transpose-words)
        ("l" transpose-lines)
        ("s" transpose-sentences)
        ("e" org-transpose-element)
        ("p" transpose-paragraphs)
        ("t" org-table-transpose-table-at-point)
        ("q" nil :color blue)
    )
)
#+end_src

** Org Mode

#+begin_src emacs-lisp :tangle config/init-hydras.el :var file-description="Hydras Setup"
;;
;; Hydra for org-mode
;;
(define-key psimacs/config/global-key-map/hydra (kbd "C-o")
    (defhydra psimacs/hydra/org
        (:color pink :hint nil)
"
Navigation^^^^
^^^^--------------------------------------------
_j_: next heading                      _g_: goto
_k_: prev heading                      _q_: quit
_h_: next heading (same level)
_l_: prev heading (same level)
_u_: up   heading
"
        ("j" outline-next-visible-heading)
        ("k" outline-previous-visible-heading)
        ("h" org-forward-heading-same-level)
        ("l" org-backward-heading-same-level)
        ("u" outline-up-heading)
        ("g" org-goto :exit t)
        ("q" nil :color blue)
    )
)
#+end_src

** Window

#+begin_src emacs-lisp :tangle config/init-hydras.el :var file-description="Hydras Setup"
;;
;; Hydra for windowing
;;
(require 'windmove)

(defun psimacs/window/move-splitter-left (arg)
    "Move window splitter by ARG columns left."
    (interactive "p")
    (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
        (enlarge-window-horizontally arg)))

(defun psimacs/window/move-splitter-right (arg)
    "Move window splitter by ARG columns right."
    (interactive "p")
    (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
        (shrink-window-horizontally arg)))

(defun psimacs/window/move-splitter-up (arg)
    "Move window splitter by ARG rows up."
    (interactive "p")
    (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
        (enlarge-window arg)
        (shrink-window arg)))

(defun psimacs/window/move-splitter-down (arg)
    "Move window splitter by ARG rows down."
    (interactive "p")
    (if (let ((windmove-wrap-around))
        (windmove-find-other-window 'up))
        (shrink-window arg)
        (enlarge-window arg)))

(define-key psimacs/config/global-key-map/hydra (kbd "w")
    (defhydra psimacs/hydra/window
        (:color pink :hint nil)
"
  ^^^^Movement^      ^^^Resize^       ^Buffer^              ^Window^            ^Golden Ratio^
^^^^^^^^^^^^^^------------------------------------------------------------------------------------
^ _i_ ^:  ▲       ^_I_ ^:  ▲      _f_: find files      _v_: vertical        _g_: toggle on/off
_j_ _l_: ◄ ►     _J_ _L_: ◄ ►     _F_: follow mode     _h_: horizontal      _G_: toggle widescreen
^ _k_ ^:  ▼       ^_K_ ^:  ▼      _b_: save            _s_: swap
^ ^ ^ ^          ^ ^ ^ ^          _p_: ◄ previous      _x_: delete window
^ _a_ ^:  ▲ scroll up  ^^^^       _n_: ► next          _X_: delete other
^ _z_ ^:  ▼ scroll down^^^^       _u_: undo            _o_: only this
^ ^ ^ ^          ^ ^ ^ ^          _r_: redo            _e_: ace 1
^ _q_ ^: quit    ^ ^ ^ ^          ^ ^                  _I_: maximize
"
        ("j" windmove-left )
        ("l" windmove-right )
        ("i" windmove-up )
        ("k" windmove-down )

        ("J" psimacs/window/move-splitter-left)
        ("L" psimacs/window/move-splitter-right)
        ("I" psimacs/window/move-splitter-up)
        ("K" psimacs/window/move-splitter-down)

        ("f" counsel-find-files)
        ("F" follow-mode)
        ("e" (lambda ()
                (interactive)
                (ace-window 1)
                (add-hook 'ace-window-end-once-hook
                          'psimacs/hydra/window/body)))
        ("v" (lambda ()
                (interactive)
                (split-window-right)
                (windmove-right)))
        ("h" (lambda ()
                (interactive)
                (split-window-below)
                (windmove-down)))
        ("s" (lambda ()
                (interactive)
                (ace-window 4)
                (add-hook 'ace-window-end-once-hook
                          'psimacs/hydra/window/body)))
        ("b" save-buffer)
        ("p" previous-buffer)
        ("n" next-buffer)
        ("x" delete-window)
        ("X" (lambda ()
                (interactive)
                (ace-window 16)
                (add-hook 'ace-window-end-once-hook
                          'psimacs/hydra/window/body)))
        ("o" delete-other-windows)
        ("I" maximize-window)

        ("g" golden-ratio-mode)
        ("G" golden-ratio-toggle-widescreen)

        ("u" (progn
                (winner-undo)
                (setq this-command 'winner-undo)))
        ("r" winner-redo)

        ("a" scroll-down-line)
        ("z" scroll-up-line)

        ("q" nil :color blue)
    )
)
#+end_src

** Rectangle

This hydra uses the build-in [[https://github.com/emacs-mirror/emacs/blob/master/lisp/rect.el][rect.el]]
package, which provides the operations on rectangles that are documented in the Emacs manual.

#+begin_src emacs-lisp :tangle config/init-hydras.el :var file-description="Hydras Setup"
;;
;; Hydra for rectangle
;;
(require 'rect)

(define-key psimacs/config/global-key-map/hydra (kbd "C-r")
    (defhydra psimacs/hydra/rectangle
        (:body-pre (rectangle-mark-mode 1) :color pink :post (deactivate-mark))
"
^^^^^^^^Rectangle
^^^^^^^^------------------------------------------
^ _i_ ^:  ▲   _d_: delete rect    _s_: string rect
_j_ _l_: ◄ ►  ^ ^                 _y_: yank rect
^ _k_ ^:  ▼   _n_: copy rect      _r_: reset
^^^^          _e_: exchange       _u_: undo
^^^^          ^ ^                 _p_: kill rect
^^^^          ^ ^                 _q_: quit
"
        ("j" rectangle-backward-char)
        ("l" rectangle-forward-char)
        ("i" rectangle-previous-line)
        ("k" rectangle-next-line)
        ("e" psimacs/mark/exchange-point-and-mark)
        ("n" copy-rectangle-as-kill)
        ("d" delete-rectangle)
        ("r" (if (region-active-p)
                (deactivate-mark)
                (rectangle-mark-mode 1)) nil)
        ("y" yank-rectangle)
        ("u" undo)
        ("s" string-rectangle)
        ("p" kill-rectangle)
        ("q" nil :color blue)
    )
)
#+end_src

** Projectile

#+begin_src emacs-lisp :tangle config/init-hydras.el :var file-description="Hydras Setup"
;;
;; Hydra for projectile
;;
(define-key psimacs/config/global-key-map/hydra (kbd "p")
    (defhydra psimacs/hydra/projectile
        (:color pink :hint nil)

    ; Attention: Unicode symbols must be available in the main font. Otherwise the hydra table formatting
    ; will not be perfect.

    ; iB ibuffer
    ; ▻  Switch
    ; ◬  Display / Find
    ; ●  With a prefix argument it will clear the cache first
    ; ▽  Dired / Root
    ; → W in window
    ; → F in Frame
    ; ⊕ prefix action available
    ; ∅ invaliadte / regenerate
    ; ∃ execute
    ; P Project
    ; Ƥ known / currently opened projects

        ("C"  projectile-configure-project                      "configure"   :column "Action")
        ("c"  projectile-compile-project                        "compile"     :column "Action")
        ("u"  projectile-run-project                            "run"         :column "Action")
        ("L"  projectile-install-project                        "install"     :column "Action")
        ("K"  projectile-package-project                        "package"     :column "Action")
        ("P"  projectile-test-project                           "test"        :column "Action")
        ("xg" projectile-run-gdb                                "gdb"         :column "Action")
        ("n"  psimacs/projectile/create-empty-projectile-file   "create P"    :column "Action")
        ("hc" hydra-projectile-cmake/body                       "cmake hydra" :column "Action" :color blue)
        ("q"  nil                                               "quit"        :column "Action" :color blue)

        ("I"  projectile-ibuffer                         "iB ∀ b ∊ P"        :column "Buffer") ; Open an IBuffer window showing all buffers in the current project.
        ("bb" projectile-switch-to-buffer                "▻ b ∊ P"           :column "Buffer") ; Display a list of all project buffers currently open.
        ("b4" projectile-switch-to-buffer-other-window   "▻ b ∊ P → W"       :column "Buffer") ; Switch to a project buffer and show it in another window.
        ("b5" projectile-switch-to-buffer-other-frame    "▻ b ∊ P → F"       :column "Buffer") ; Switch to a project buffer and show it in another frame.
       ("ESC" projectile-project-buffers-other-buffer    "▻ to recent b"     :column "Buffer") ; Switch to the most recently selected Projectile buffer.
    ("<left>" projectile-previous-project-buffer         "◄ Prev b"          :column "Buffer") ; Switch to the previous project buffer.
   ("<right>" projectile-next-project-buffer             "► Next b"          :column "Buffer") ; Switch to the next project buffer.|
        ("Ow" projectile-display-buffer                  "◬ b ∊ P → F"       :column "Buffer") ; Display a project buffer in another window without selecting it.
        ("k"  projectile-kill-buffer                     "kill ∀ b ∈ P"      :column "Buffer") ; Kills all project buffers.
        ("S"  projectile-save-project-buffers            "save ∀ b ∈ P"      :column "Buffer") ; Save all project buffers.
        ("o"  projectile-multi-occur                     "occur ∀ b ∈ O ⊂ P" :column "Buffer") ; Runs multi-occur on all project buffers currently open.

        ("fp" projectile-find-file                       "◬ ∀ f ∊ P ⊕"       :column "Find") ; Display a list of all files in the project. With a prefix argument it will clear the cache first.Find file in current project.
        ("F"  projectile-find-file-in-known-projects     "◬ ∀ f ∊ P|P ∊ K ⊕" :column "Find") ; Display a list of all files in all known projects.
        ("f4" projectile-find-file-other-window          "◬ ∀ f ∊ P → W"     :column "Find") ; Jump to a project's file using completion and show it in another window.
        ("f5" projectile-find-file-other-frame           "◬ ∀ f ∊ P → F"     :column "Find") ; Jump to a project's file using completion and show it in another frame.
        ("gg" projectile-find-file-dwim                  "◬ ∀ f → p → P"     :column "Find") ; Display a list of all files at point in the project. With a prefix argument it will clear the cache first.
        ("g4" projectile-find-file-dwim-other-window     "◬ ∀ f → p → P → W" :column "Find") ; Jump to a project's file based on context at point and show it in another window.
        ("g5" projectile-find-file-dwim-other-frame      "◬ ∀ f → p → P → F" :column "Find") ; Jump to a project's file based on context at point and show it in another frame.
        ("aa" projectile-find-other-file                 "◬ f.a ≃ f.b"       :column "Find") ; Switch between files with the same name but different extensions.
        ("a4" projectile-find-other-file-other-window    "◬ f.a ≃ f.b → W"   :column "Find") ; Switch between files with the same name but different extensions in other window.
        ("a5" projectile-find-other-file-other-frame     "◬ f.a ≃ f.b → W"   :column "Find") ; Switch between files with the same name but different extensions in other frame.
        ("l"  projectile-find-file-in-directory          "◬ ∀ f ∊ D"         :column "Find") ; Display a list of all files in a directory (that's not necessarily a project).
        ("e"  projectile-recentf                         "◬ ∀ f ∊ R"         :column "Find") ; Shows a list of recently visited project files.
        ("z"  projectile-cache-current-file              "f → C"             :column "Find") ; Adds the currently visited file to the cache.
        ("i"  projectile-invalidate-cache                "C → ∅"             :column "Find") ; Invalidates the project cache (if existing).

        ("dd" projectile-find-dir                        "◬ ∀ d ∊ P ⊕"   :column "Dired") ; Display a list of all directories in the project. With a prefix argument it will clear the cache first.
        ("d4" projectile-find-dir-other-window           "◬ ∀ d ∊ P → W" :column "Dired") ; Switch to a project directory and show it in another window.
        ("d5" projectile-find-dir-other-frame            "◬ ∀ d ∊ P → F" :column "Dired") ; Switch to a project directory and show it in another frame.
        ("DD" projectile-dired                           "▻ ▽ ∊ P"       :column "Dired") ; Opens the root of the project in dired.
        ("D4" projectile-dired-other-window              "▻ ▽ ∊ P → W"   :column "Dired") ; Opens the root of the project in dired in another window.
        ("D5" projectile-dired-other-frame               "▻ ▽ ∊ P → F"   :column "Dired") ; Opens the root of the project in dired in another frame.

        ("p"  projectile-switch-project                  "◬ ∀ p ∊ Ƥ"               :column "Project") ; Display a list of known projects you can switch to.
        ("Q"  projectile-switch-open-project             "▻ p ∊ Ƥ ⊙"               :column "Project") ; Switch to a project we have currently opened.
        ("j"  projectile-find-tag                        "◬ tag ∊ P"               :column "Project") ; Find tag in project.
        ("R"  projectile-regenerate-tags                 "∅ tag ∊ P"               :column "Project") ; Regenerate the project's tags.
        ("T"  projectile-find-test-file                  "◬ t ∊ P"                 :column "Project") ; Display a list of all test files(specs, features, etc) in the project.
        ("sg" projectile-grep                            "∃ grep → f ∊ P"          :column "Project") ; Run grep on the files in the project.
        ("sr" projectile-ripgrep                         "∃ ripgrep → ▽ ∊ P"       :column "Project") ; Run a Ripgrep search with 'SEARCH-TERM' at current root.
        ("r"  projectile-replace                         "∃ query-replace → f ∊ P" :column "Project") ; Runs interactive query-replace on all files in the projects.
        ("v"  projectile-vc                              "∃ vc-dir → ▽ ∊ P"        :column "Project") ; Run vc-dir on the root directory of the project.
        ("V"  projectile-browse-dirty-projects           "browse dirty version"    :column "Project") ; Browse dirty version controlled projects.
        ("E"  projectile-edit-dir-locals                 "dir-locals-file"         :column "Project") ; Opens the root dir-locals-file of the project.
        ("ss" projectile-ag                              "∃ ag → f ∊ P"            :column "Project") ; Runs ag on the project, performing a literal search.

        ("!"  projectile-run-shell-command-in-root       "∃ cmd → ▽ ∊ P"       :column "Shell") ; Runs shell-command in the root directory of the project.
        ("&"  projectile-run-async-shell-command-in-root "∃ cmd → ▽ ∊ P async" :column "Shell") ; Runs async-shell-command in the root directory of the project.
        ("xs" projectile-run-shell                       "shell → ▽ ∊ P"       :column "Shell") ; Invoke 'shell' in the project's root.
        ("xv" projectile-run-vterm                       "vterm → ▽ ∊ P"       :column "Shell") ; Invoke 'vterm' in the project's root.
        ("xe" projectile-run-eshell                      "eshell  → ▽ ∊ P"     :column "Shell") ; Invoke 'eshell' in the project's root.
    )
)
#+end_src

** Straight

The following hydra should help in working with the [[https://github.com/radian-software/straight.el][Straight]] package manager.

#+begin_src emacs-lisp :tangle config/init-hydras.el :var file-description="Hydras Setup"
;;
;; Hydra for straight
;;
(define-key psimacs/config/global-key-map/hydra (kbd "C-s")
    (defhydra psimacs/hydra/straight
        (:color pink :hint nil)
        "
_c_: check all       |_f_: fetch all     |_m_: merge all      |_n_: normalize all   | _u_: push all
_C_: check package   |_F_: fetch package |_M_: merge package  |_N_: normlize package| _U_: push package
-------------------^^+-----------------^^+------------------^^+-------------------^^+----------------^^
_r_: rebuild all     |_p_: pull all      |_v_: versions freeze|_w_: watcher start   |_g_: get recipe
_R_: rebuild package |_P_: pull package  |_V_: versions thaw  |_W_: watcher stop    |_e_: prune build

_q_: quit_
"
        ("c" straight-check-all)
        ("C" straight-check-package)
        ("r" straight-rebuild-all)
        ("R" straight-rebuild-package)
        ("f" straight-fetch-all)
        ("F" straight-fetch-package)
        ("p" straight-pull-all)
        ("P" straight-pull-package)
        ("m" straight-merge-all)
        ("M" straight-merge-package)
        ("n" straight-normalize-all)
        ("N" straight-normalize-package)
        ("u" straight-push-all)
        ("U" straight-push-package)
        ("v" straight-freeze-versions)
        ("V" straight-thaw-versions)
        ("w" straight-watcher-start)
        ("W" straight-watcher-stop)
        ("g" straight-get-recipe)
        ("e" straight-prune-build)
        ("q" nil "quit" :color blue)
))
#+end_src

** Parenthesis

#+begin_src emacs-lisp :tangle config/init-hydras.el :var file-description="Hydras Setup"
;;
;; Hydra for parenthesis
;;
(define-key psimacs/config/global-key-map/hydra (kbd "p")
    (pretty-hydra-define
        psimacs/hydra/smartparens
        (
            :title "Parenthesis"
            :color pink
            :hint nil
            :quit-key "q"
        )
        (
            "Move"
                (
                    ("C-f" sp-forward-sexp  "Forward across one sexp")
                    ("C-b" sp-backward-sexp "Backward across one sexp")
                    ("M-F" sp-forward-symbol "End of a symbol")
                    ("M-B" sp-backward-symbol "Beginning of a symbol")
                    ("C-n" sp-next-sexp "Forward to the beginning of next sexp")
                    ("C-p" sp-previous-sexp "Backward to the end of prev sexp")
                    ("C-u" sp-up-sexp "Forward out of one level of parentheses")
                    ("M-u" sp-backward-up-sexp "Backward out of one level of parentheses")
                    ("C-d" sp-down-sexp "Forward down one level of sexp")
                    ("M-d" sp-backward-down-sexp "Backward down one level of sexp")
                )
            "Jump"
                (
                    ("C-a" sp-beginning-of-sexp "Beginning of the sexp the point is in")
                    ("C-e" sp-end-of-sexp "End of the sexp the point is in")
                    ("M-a" sp-beginning-of-next-sexp "Beginning of the next sexp on the same depth")
                    ("M-e" sp-beginning-of-previous-sexp "Beginning of the prev sexp on the same depth")
                )
            "Action"
                (
                    ("C-t" sp-transpose-sexp "Transpose sexpr around point")
                    ("M-t" sp-transpose-hybrid-sexp "Transpose hybrid sexps around point")
                    ("C-j" sp-join-sexp "Join sexp before and after point if they are of the same depth")
                    ("C-v" sp-convolute-sexp "Convolute balanced sexp")
                    ("C-i" sp-indent-defun "Reindent the current defun")
                )
            "Kill/Copy/Unwrap"
                (
                    ("C-m" sp-mark-sexp "Set mark /ARG/ sexp from point")
                    ("C-k" sp-kill-sexp "Kill sexp following point")
                    ("M-w" sp-copy-sexp "Copy following ARG expressions to the kill-ring")
                    ("M-<delete>" sp-unwrap-sexp "Unwrap the next sexp")
                    ("M-<backspace>" sp-backward-unwrap-sexp "Unwrap the prev sexp")
                )
            "Barf/Slurp"
                (
                    ("C-<right>" sp-forward-slurp-sexp "Slurp forward")
                    ("C-<left>" sp-backward-slurp-sexp "Slurp backward")
                    ("M-<right>" sp-forward-barf-sexp "Barf forward")
                    ("M-<left>" sp-backward-barf-sexp "Barf backward")
                )
            "Splice"
                (
                    ("M-D" sp-splice-sexp "Unwrap the current list")
                    ("C-M-<delete>" sp-splice-sexp-killing-forward "Unwrap the current list and kill all the sexp between")
                    ("C-M-<backspace>" sp-splice-sexp-killing-backward "Unwrap the current list and kill all the sexp")
                    ("C-S-<backspace>" sp-splice-sexp-killing-around "Unwrap the current list and kill everything inside except next expression")
                )
            "Select"
                (
                    ("C-s N" sp-select-next-thing-exchange "Select next thing and exchange point and mark")
                    ("C-s n" sp-select-next-thing "Select next thing")
                    ("C-s p" sp-select-previous-thing "Select prev thing")
                    ("C-c i" sp-change-inner "Change the inside of the next sexp")
                    ("M-c e" sp-change-enclosing "Change the inside of the enclosing sexp")
                )
        )
    )
)
#+end_src

** Navigation

#+begin_src emacs-lisp :tangle config/init-hydras.el :var file-description="Hydras Setup"
;;
;; Hydra for navigation
;;
    (define-key psimacs/config/global-key-map/hydra (kbd "H-m")
        (pretty-hydra-define
            psimacs/hydra/navigation
            (
               :title (psimacs/config/pretty-hydra-title "Navigation")
               :color pink
               :quit-key "q"
            )
            (
                "Basic"
                  (
                    ("C-f"       forward-char             "      forward char")
                    ("C-b"       backward-char            "      backward char")
                    ("M-f"       forward-word             "      forward word")
                    ("M-b"       backward-word            "      backward word")
                    ("C-M-f"     forward-sexp             "    forward sexp")
                    ("C-M-b"     backward-sexp            "    backward sexp")
                    ("M-e"       forward-sentence         "      forward sentence")
                    ("M-a"       backward-sentence        "      backward sentence")
                    ("C-<down>"  forward-paragraph        " forward paragraph  M-{")
                    ("C-<up>"    backward-paragraph       "   backward paragraph M-}")
                    ("C-n"       next-line                "      next line")
                    ("C-p"       previous-line            "      previous line")
                    ("C-a"       move-beginning-of-line   "      beginning of line")
                    ("C-e"       move-end-of-line         "      end of line")
                    ("M-m"       back-to-indentation      "      first non-whitespace char")
                    ("C-<home>"  beginning-of-buffer      " beginning of buffer M-<")
                    ("C-<end>"   end-of-buffer            "  end of buffer       M->")
                    ("M-g c"     goto-char                "    goto char position")
                    ("M-g M-g"   goto-line                "  goto line")
                    ("M-g <tab>" move-to-column           "goto column")
                    ("H-x H-,"   goto-last-change         "  goto last change")
                    ("H-x H-."   goto-last-change-reverse "  goto last change reverse")
                  )

                "Scroll and Search"
                  (
                    ("C-v"       scroll-up-command        "      scroll up   <PageDown>")
                    ("M-v"       scroll-down-command      "      scroll down <PageUp>")
                    ("M-<next>"  scroll-other-window      " scroll other window up C-M-v")
                    ("M-<prior>" scroll-other-window-down "scroll other window down")
                    ("C-x <"     scroll-left              "    scroll left")
                    ("C-x >"     scroll-right             "    scroll right")
                    ("C-l"       recenter-top-bottom      "      recenter top botton")
                    ("C-M-S"     recenter-other-window    "    recenter other window")
                    ("C-M-l"     reposition-window        "    reposition window")
                    ("H-m C-s s" isearch-forward          "search forward")
                    ("H-m C-s r" isearch-backward         "search backward")
                    ("H-c s"     vr/isearch-forward       "    search forward with pcre")
                    ("H-c p"     vr/isearch-backward      "    search backward with pcra")
                    ("C-s"       swiper-isearch           "      swiper search")
                  )

                "Avy and Mosey"
                  (
                    ("H-m C-s C-a c"   avy-goto-char                  "  avy goto char")
                    ("H-m C-s C-a C"   avy-goto-char-2                "  avy goto char 2")
                    ("H-m C-s C-a t"   avy-goto-char-timer            "  avy goto char N")
                    ("H-m C-s C-a T"   avy-org-goto-heading-timer     "  avy goto org heading N")
                    ("H-m C-s C-a l"   avy-goto-line                  "  avy goto line")
                    ("H-m C-s C-a W"   avy-goto-word-0                "  avy goto word 0")
                    ("H-m C-s C-a w"   avy-goto-word-1                "  avy goto word 1")
                    ("H-m C-s C-m f"   mosey-psimacs-forward          "  mosey forward")
                    ("H-m C-s C-m b"   mosey-psimacs-backward         "  mosey backward")
                    ("H-m C-s C-m F"   mosey-psimacs-forward-bounce   "  mosey forward bounce")
                    ("H-m C-s C-m B"   mosey-psimacs-backward-bounce  "  mosey backward bounce")
                    ("H-m C-s C-m C-f" mosey-psimacs-forward-cycle    "mosey forward cycle")
                    ("H-m C-s C-m C-b" mosey-psimacs-backward-cycle   "mosey forward cycle")
                  )

                "Org"
                  (
                    ("C-c C-n"     org-next-visible-heading              "    next heading")
                    ("C-c C-p"     org-previous-visible-heading          "    prev heading")
                    ("C-c C-f"     org-forward-heading-same-level        "    next heading same level")
                    ("C-c C-b"     org-backward-heading-same-level       "    prev heading same level")
                    ("C-c C-u"     outline-up-heading                    "    up heading")
                    ("C-c C-j"     org-goto                              "    org goto")
                    ("H-m n"       psimacs/jupyter/next-jupyter-src-block      "      next jupyter block")
                    ("H-m p"       psimacs/jupyter/previous-jupyter-src-block  "      prev jupyter block")
                    ("C-c %"       org-mark-ring-push                    "      mark ring push")
                    ("C-c &"       org-mark-ring-goto                    "      mark ring goto")
                    ("C-c C-x C-n" org-next-link                         "next link")
                    ("C-c C-x C-p" org-previous-link                     "prev link")
                  )

                "Smart Prarens"
                  (
                    ("H-p C-f" sp-forward-sexp                  "forward sexp")
                    ("H-p C-b" sp-backward-sexp                 "backward sexp")
                    ("H-p M-F" sp-forward-symbol                "forward symbol")
                    ("H-p M-B" sp-backward-symbol               "backward symbol")
                    ("H-p C-n" sp-next-sexp                     "next sexp")
                    ("H-p C-p" sp-previous-sexp                 "prev sexp")
                    ("H-p C-u" sp-up-sexp                       "up sexp")
                    ("H-p C-d" sp-down-sexp                     "down sexp")
                    ("H-p M-u" sp-backward-up-sexp              "backward up sexp")
                    ("H-p M-d" sp-backward-down-sexp            "backward down sexp")
                    ("H-p C-a" sp-beginning-of-sexp             "beg sexp")
                    ("H-p C-e" sp-end-of-sexp                   "end sexp")
                    ("H-p M-a" sp-beginning-of-next-sexp        "beginning next sexp")
                    ("H-p M-e" sp-beginning-of-previous-sexp    "beginning prev sexp")
                  )

                "Buffer"
                  (
                    ("C-<tab>"     psimacs/buffer/next-user-buffer      "    next user buffer")
                    ("C-S-<tab>"   psimacs/buffer/previous-user-buffer  "  prev user buffer")
                    ("H-<tab>"     psimacs/buffer/next-emacs-buffer     "    next emacs buffer")
                    ("H-S-<tab>"   psimacs/buffer/previous-emacs-buffer "  prev emacs butter")
                    ("C-x <right>" next-buffer                    "next buffer")
                    ("C-x <left>"  previous-buffer                " prev buffer")
                    ("C-x C-b"     ibuffer                        "    edit list of buffers" :color blue)
                    ("C-x b"       switch-to-buffer               "      switch to buffer")
                    ("C-x k"       kill-buffer                    "      kill buffer")
                    ("H-b"         frog-jump-buffer               "        frog jump buffer")
                    ("H-B"         frog-jump-buffer-other-window  "        from jump buffer other window")
                  )

                "Tabs, Bookmarks, ELSE"
                  (
                    ("s-n"      centaur-tabs-forward            "     next tab")
                    ("s-p"      centaur-tabs-backward           "     prev tab")
                    ("C-x o"    ace-window                      "   ace other window")
                    ("C-x O"    other-frame                     "   next frame")
                    ("<f2>"     bm-next                         "    next bookmark")
                    ("S-<f2>"   bm-previous                     "  prev bookmark")
                    ("C-<f2>"   bm-toggle                       "  set bookmark")
                    ("C-S-<f2>" bm-remove-all-current-buffer    "remove all bookmarks")

                    ("H-n"      else-next                       "     ELSE next placeholder")
                    ("H-p"      else-previous                   "     ELSE prev placeholder")
                    ("H-SPC e"  psimacs/hydra/else/body               " ELSE hydra" :color blue)
                  )
            )
        )
    )

#+end_src

** Hydra

#+begin_src emacs-lisp :tangle config/init-hydras.el :var file-description="Hydras Setup"
;;
;; Hydra for hydra
;;
(define-key psimacs/config/global-key-map/hydra (kbd "H-SPC")
    (pretty-hydra-define
        psimacs/hydra/hydra
        (
            :title "Hydra"
            :color teal
            :hint nil
            :quit-key "q"
        )
        (
            "Help"
                (
                    ("a" psimacs/hydra/apropos/body             "Apropos")
                    ("h" psimacs/hydra/help/body                "Help")
                    ("H" psimacs/hydra/helpful/body             "Helpful")
                )

            "Navigation"
                (
                    ("t"   psimacs/hydra/avy/body               "  Avy Text Navigation")
                    ("C-o" psimacs/hydra/org/body               "Org Navigation")
                    ("C-m" psimacs/hydra/word-modes/body        "Word Movement Modes")
                    ("H-m" psimacs/hydra/navigation/body        "Navigation")
                )

            "Edit"
                (
                    ("T"   psimacs/hydra/transpose/body        "  Transpose")
                    ("C-c" psimacs/hydra/multiple-cursors/body "Multiple Cursors")
                    ("C-r" psimacs/hydra/rectangle/body        "Rectangle")
                )

            "UI"
                (
                    ("SPC" psimacs/hydra/toggle/body            "Toggle")
                    ("w"   psimacs/hydra/window/body            "  Window")
                )

            "Project"
                (
                    ("p"   psimacs/hydra/projectile/body        "  Projectile")
                    ("C-p" hydra-projectile-cmake/body          "Projectile Cmake")
                )

            "Tools"
                (
                    ("i"   hydra-ivy/body                 "  Ivy")
                    ("y"   psimacs/hydra/yasnippet/body         "  Snippets")
                    ("C-i" psimacs/hydra/image+/body            "Image+")
                    ("C-f" psimacs/hydra/flycheck/body          "Flycheck")
                )

            "Programming"
                (
                    ("e"   psimacs/hydra/else/body              "ELSE Mode")
                    ("j"   psimacs/hydra/jupyter/open-hydra     "Jupyter Notebook")
                    ("l"   psimacs/hydra/lsp/body               "LSP Mode")
                    ("d"   dap-hydra                      "DAP Mode")
                )

            "Miscellaneous"
                (
                    ("C-l" psimacs/hydra/vlf-large-files/body   "VLF Large File Support")
                    ("C-s" psimacs/hydra/straight/body          "Straight")
;;                    ("m"   major-mode-hydra               "  Major Mode")
                )
        )
    )
)
#+end_src

* Key bindings

Additional key bindings for *Psimacs*:

#+attr_html: :class styledtable1
| Key binding     | Command                                                      | Description                                                                                       |
|-----------------+--------------------------------------------------------------+---------------------------------------------------------------------------------------------------|
| =C-TAB=           | =M-x psimacs/buffer/next-user-buffer=                          | Switch to the next user buffer. Buffer name starts with *, it's not considered a user buffer.     |
| =C-S-TAB=         | =M-x psimacs/buffer/previous-user-buffer=                      | Switch to the previous user buffer. Buffer name starts with *, it's not considered a user buffer. |
| =H-TAB=           | =M-x psimacs/buffer/next-emacs-buffer=                         | Switch to the next emacs buffer, i.e. that starts with *.                                         |
| =H-S-TAB=         | =M-x psimacs/buffer/previous-emacs-buffer=                     | Switch to the previous emacs buffer, i.e. that starts with *.                                     |
| =C-x <right>=     | =M-x next-buffer=                                              | Switch to the next buffer.                                                                        |
| =C-x <left>=      | =M-x previous-buffer=                                          | Switch to the previous buffer.                                                                    |
|-----------------+--------------------------------------------------------------+---------------------------------------------------------------------------------------------------|
| =H-<up>=          | =M-x psimacs/movement/move-text-up=                            | Move region or line up.                                                                           |
| =H-<down>=        | =M-x psimacs/movement/move-text-down=                          | Move region or line down.                                                                         |
|-----------------+--------------------------------------------------------------+---------------------------------------------------------------------------------------------------|
| =H-m C-v C-o=     | =M-x psimacs/shell/open-file-in-visual-studio=                 | Open the given file argument in the MS Visual Studion session.                                    |
| =H-m C-v C-i=     | =M-x psimacs/shell/import-file-in-visual-studio=               | Import the given file argument in the MS Visual Studion session.                                  |
|-----------------+--------------------------------------------------------------+---------------------------------------------------------------------------------------------------|
| =H-m C-f C-a c=   | =M-x find-file <psimacs/config/org-capture-coding-diary-file>= | Find coding diary file in agenda directory.                                                       |
| =H-m C-f C-a d=   | =M-x find-file <Diary.org>=                                    | Find diary file in agenda directory.                                                              |
| =H-m C-f C-a j=   | =M-x find-file <Journal.org>=                                  | Find journal file in agenda directory.                                                            |
| =H-m C-f C-a l=   | =M-x find-file <TimeLog.org>=                                  | Find time log file in agenda directory.                                                           |
|-----------------+--------------------------------------------------------------+---------------------------------------------------------------------------------------------------|
| =H-m C-f C-f=     | =M-x find-function=                                            | Find the definition of function near point                                                        |
|-----------------+--------------------------------------------------------------+---------------------------------------------------------------------------------------------------|
| =H-m C-e C-m v=   | =M-x visual-line-mode=                                         | Line wrapping. See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Visual-Line-Mode.html][Visual Line Mode]].                                                              |
| =H-m C-p C-b=     | =M-x psimacs/pair/bounce-sexp=                                 | Will bounce between matching parens.                                                              |
| =H-m C-x s b=     | =M-x psimacs/convenience/bind-f6-to-last-command=              | Bind function key F6 to the last command used.                                                    |
|-----------------+--------------------------------------------------------------+---------------------------------------------------------------------------------------------------|
| =H-x C-c C-e s h= | =M-x psimacs/sphinx/org-sphinx-build=                          | Run the sphinx-build tool for the current org buffer.                                             |
| =H-x C-c C-e s H= | =M-x psimacs/sphinx/build=                                     | Run the sphinx-build tool for the given file.                                                     |
|-----------------+--------------------------------------------------------------+---------------------------------------------------------------------------------------------------|

#+begin_src emacs-lisp :tangle config/init-keybindings.el :var file-description="Key bindings setup"
;;
;; Extra key bindings
;;
(bind-key* "<C-tab>"   'psimacs/buffer/next-user-buffer)
(bind-key* "<C-S-tab>" 'psimacs/buffer/previous-user-buffer)
(bind-key* "<H-tab>"   'psimacs/buffer/next-emacs-buffer)
(bind-key* "<H-S-tab>" 'psimacs/buffer/previous-emacs-buffer)

(bind-key* "<H-<up>>"   'psimacs/movement/move-text-up)
(bind-key* "<H-<down>"  'psimacs/movement/move-text-down)

(define-key psimacs/config/global-key-map/special (kbd "C-v C-o") 'psimacs/shell/open-file-in-visual-studio)
(define-key psimacs/config/global-key-map/special (kbd "C-v C-i") 'psimacs/shell/import-file-in-visual-studio)

(define-key psimacs/config/global-key-map/special (kbd "C-f C-a c") (lambda () (interactive) (find-file (concat psimacs/config/agenda-dir psimacs/config/org-capture-coding-diary-file))))
(define-key psimacs/config/global-key-map/special (kbd "C-f C-a d") (lambda () (interactive) (find-file (concat psimacs/config/agenda-dir "Diary.org"))))
(define-key psimacs/config/global-key-map/special (kbd "C-f C-a j") (lambda () (interactive) (find-file (concat psimacs/config/agenda-dir "Journal.org"))))
(define-key psimacs/config/global-key-map/special (kbd "C-f C-a l") (lambda () (interactive) (find-file (concat psimacs/config/agenda-dir "TimeLog.org"))))

(define-key psimacs/config/global-key-map/special (kbd "C-e C-m v") 'visual-line-mode)

(define-key psimacs/config/global-key-map/special (kbd "C-p C-b") 'psimacs/pair/bounce-sexp)

(define-key psimacs/config/global-key-map/special (kbd "C-x s b") 'psimacs/convenience/bind-f6-to-last-command)

(define-key psimacs/config/global-key-map/execute (kbd "C-c C-e s h") 'psimacs/sphinx/org-sphinx-build)
(define-key psimacs/config/global-key-map/execute (kbd "C-c C-e s H") 'psimacs/sphinx/build)

(define-key psimacs/config/global-key-map/special (kbd "C-f C-f") 'find-function)
#+end_src

* Tree-Sitter support

References:
- [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][How to Get Started with Tree-Sitter]]
- [[https://tree-sitter.github.io/tree-sitter/][tree-sitter]]
- [[https://www.masteringemacs.org/article/tree-sitter-complications-of-parsing-languages][Tree Sitter and the Complications of Parsing Languages]]
- [[https://github.com/mickeynp/combobulate][Structured Navigation and Editing with Combobulate]]
- [[https://www.masteringemacs.org/article/combobulate-intuitive-structured-navigation-treesitter][Combobulate: Intuitive, Structured Navigation with Tree-Sitter]]
- [[https://www.masteringemacs.org/article/combobulate-structured-movement-editing-treesitter][Combobulate: Structured Movement and Editing with Tree-Sitter]]
- [[https://github.com/Nathan-Furnal/dotemacs][Nathan-Furnal dotemacs]]
- [[https://github.com/renzmann/treesit-auto][treesit-auto]]
- [[https://github.com/renzmann/treesit-auto/issues/76][Doesn't work with yasnippet #76]

#+begin_src emacs-lisp :tangle yes

(defun psimacs/config/treesit-install-all-languages ()
    "Install all languages specified by `treesit-language-source-alist'."
    (let ((languages (mapcar 'car treesit-language-source-alist)))
      (dolist (lang languages)
              (treesit-install-language-grammar lang)
              (message "`%s' parser was installed." lang)
              (sit-for 0.75))))

(defun psimacs/config/treesit-install ()
  "Install tree-sitter"
  (interactive)
  ;; https://github.com/fbrosda/yasnippet-treesitter-shim
  ;(use-package yasnippet-treesitter-shim
  ;  :straight (:host github :repo "fbrosda/yasnippet-treesitter-shim"
  ;             :files ("snippets/*"))
  ;  :no-require t
  ;  :config
  ;  (add-to-list 'yas-snippet-dirs
  ;               (straight--build-dir "yasnippet-treesitter-shim"))
  ;)


  (setq treesit-language-source-alist
     '((bash       . ("https://github.com/tree-sitter/tree-sitter-bash"))
       (cmake      . ("https://github.com/uyha/tree-sitter-cmake"))
       (c          . ("https://github.com/tree-sitter/tree-sitter-c"))
       (c++        . ("https://github.com/tree-sitter/tree-sitter-cpp"))
       (css        . ("https://github.com/tree-sitter/tree-sitter-css"))
       (elisp      . ("https://github.com/Wilfred/tree-sitter-elisp"))
       (glsl       . ("https://github.com/tree-sitter-grammars/tree-sitter-glsl"))
       (go         . ("https://github.com/tree-sitter/tree-sitter-go"))
       (html       . ("https://github.com/tree-sitter/tree-sitter-html"))
       (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" "master" "src"))
       (json       . ("https://github.com/tree-sitter/tree-sitter-json"))
       (latex      . ("https://github.com/latex-lsp/tree-sitter-latex"))
       (make       . ("https://github.com/alemuller/tree-sitter-make"))
       (org        . ("https://github.com/milisims/tree-sitter-org"))
       (powershell . ("https://github.com/airbus-cert/tree-sitter-powershell"))
       (proto      . ("https://github.com/mitchellh/tree-sitter-proto"))
       (markdown   . ("https://github.com/ikatyang/tree-sitter-markdown"))
       (python     . ("https://github.com/tree-sitter/tree-sitter-python"))
       (rst        . ("https://github.com/stsewd/tree-sitter-rst"))
       (ruby       . ("https://github.com/tree-sitter/tree-sitter-ruby"))
       (rust       . ("https://github.com/tree-sitter/tree-sitter-rust"))
       (sql        . ("https://github.com/m-novikov/tree-sitter-sql"))
       (toml       . ("https://github.com/tree-sitter/tree-sitter-toml"))
       (tsx        . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
       (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
       (yaml       . ("https://github.com/ikatyang/tree-sitter-yaml"))))

  (psimacs/config/treesit-install-all-languages)

  (use-package treesit-auto
      :demand t
      :custom
        (treesit-auto-install 'prompt)
      :config
        (global-treesit-auto-mode)
        (treesit-auto-add-to-auto-mode-alist 'all)

        ;; Workaround for https://github.com/renzmann/treesit-auto/issues/76
        (setq major-mode-remap-alist (treesit-auto--build-major-mode-remap-alist))
  )



  ;(add-to-list 'major-mode-remap-alist '(c-mode      . c-ts-mode))
  ;(add-to-list 'major-mode-remap-alist '(c++-mode    . c++-ts-mode))
  ;(add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))


  (defun run-non-ts-hooks ()
    (let ((major-name (symbol-name major-mode)))
      (when (string-match-p ".*-ts-mode" major-name)
        (run-hooks (intern (concat (replace-regexp-in-string "-ts" "" major-name) "-hook"))))))

  (add-hook 'prog-mode-hook 'run-non-ts-hooks)

  (setq treesit-font-lock-level 4)

  (use-package combobulate
      :straight nil
      :load-path "./work-lisp/combobulate"
      ;:straight (combobulate :host github :repo "mickeynp/combobulate")
      :preface
            (setq combobulate-key-prefix "C-c o")
      :hook
        ((python-ts-mode     . combobulate-mode)
         (js-ts-mode         . combobulate-mode)
         (html-ts-mode       . combobulate-mode)
         (css-ts-mode        . combobulate-mode)
         (yaml-ts-mode       . combobulate-mode)
         (typescript-ts-mode . combobulate-mode)
         (json-ts-mode       . combobulate-mode)
         (tsx-ts-mode        . combobulate-mode)
        )
  )

)
#+end_src

* Interesting packages that could be handy

- [[https://github.com/minad/vertico][Vertico]]
- [[https://github.com/abo-abo/org-download][org-download]]
- [[https://github.com/TobiasZawada/org-yt][org-yt]]
- [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]]
- [[https://github.com/ichernyshovvv/org-timeblock][org-timeblock]]

* Byte compile configuration

#+begin_src emacs-lisp :tangle yes
;;
;; Byte compile the configuration
;;
(when psimacs/config/byte-compile-config-folder
    ;;
    ;; In order to get proper location for compile warnings
    ;;
    (defun psimacs/config/dont-delay-compile-warnings (fun type &rest args)
        (if (eq type 'bytecomp)
            (let ((after-init-time t))
              (apply fun type args))
          (apply fun type args)))

    (advice-add 'display-warning :around #'psimacs/config/dont-delay-compile-warnings)

    (byte-recompile-directory psimacs/config/config-dir 0)
)

;;
;; Avoid lint warning of checkdoc
;;
(provide 'init)
;;; init.el ends here
#+end_src
