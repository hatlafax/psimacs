;;; early-init.el --- Early initialization -*- lexical-binding: t -*-
;;
;; Don't edit this file, edit init.org instead ...
;;

;; Copyright (C) 2020-2021 Johannes Brunen (hatlafax)

;; Author:  Johannes Brunen <hatlafax@gmx.de>
;; URL:     https://github.com/hatlafax/psimacs
;; License: GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007

;; This file is not part of GNU Emacs.
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU GENERAL PUBLIC LICENSE
;; Version 3, 29 June 2007 published by the Free Software Foundation.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file LICENSE.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;

;;; Commentary:
;;
;; Emacs 27 introduces early-init.el, which is run before init.el,
;; before package and UI initialization happens.
;;

;;
;; Tangling procedure constants.
;;
(defconst psimacs/config/tangle-anything t
  "If this flag is nil no code is generated by the startup.
This flag allows to only use the 'init-*.el' files of the framework.")

(defconst psimacs/config/tangle-early-init-file t
  "If this flag is t the 'early-init.el' file is generated at startup.
If nil, only the 'early-init.el' file is omitted from the code generation process.")

;;
;; Synchronization procedure constants.
;;
(defconst psimacs/config/synchronize-at-startup t
  "If this flag is t the 'early-init.el' file synchronizes the configuration with Dropbox.
The local configuration can be synchronized with a mirror configuration on Dropbox. This
allows sharing of a single configuration on multiple machines.")

;;
;; Conveniency byte size constants
;;
(defconst   1MB (* 1024 1024))
(defconst   4MB (*   4 1MB))
(defconst  20MB (*  20 1MB))
(defconst  30MB (*  30 1MB))
(defconst  50MB (*  50 1MB))
(defconst  64MB (*  64 1MB))
(defconst 128MB (* 128 1MB))

;;
;; Primary Psimacs file and directory constants use for tangling and synchronization
;;
(defconst psimacs/config/main-org-file "init.org"
  "The psimacs initialization file.")

(defconst psimacs/config/main-html-file "init.html"
  "The psimacs htmlized initialization file.")

(defconst psimacs/config/icon-file "psi.ico"
  "The psimacs icon file.")

(defconst psimacs/config/license-file "LICENSE"
  "The psimacs license file.")

(defconst psimacs/config/custom-file "custom.el"
  "The psimacs custom elips file.")

(defconst psimacs/config/agenda-dir "agenda"
  "The psimacs agenda directory.")

(defconst psimacs/config/latex-dir "latex"
  "The psimacs latex directory.")

(defconst psimacs/config/assets-dir "assets"
  "The psimacs assets directory.")

(defconst psimacs/config/copyright/year       "2020-2021")
(defconst psimacs/config/copyright/author     "Johannes Brunen")
(defconst psimacs/config/copyright/pseudonyme "hatlafax")
(defconst psimacs/config/copyright/email      "hatlafax@gmx.de")
(defconst psimacs/config/copyright/url        "https://github.com/hatlafax/psimacs")
(defconst psimacs/config/copyright/license    "GNU GENERAL PUBLIC LICENSE")
(defconst psimacs/config/copyright/version    "Version 3, 29 June 2007")

;;
;; Psimacs default garbage collection parameters
;;
(defconst psimacs/config/gc-cons-threshold 64MB
  "The default value to use for 'gc-cons-threshold'.
If you experience freezing, decrease this. If you experience stuttering,
increase this.")

(defconst psimacs/config/gc-cons-percentage 0.1
  "This variable specifies the amount of consing before garbage collection occurs.
It is the fraction of the current heap size."
)

;;
;; Use lexical binding instead of dynamic binding.
;;
(setq-default lexical-binding t)

;;
;; Inhibit the package manager at all
;;
(setq package-enable-at-startup nil)

;;
;; If this option is nil, changing a frame' font, menu bar, tool bar, internal borders,
;; fringes or scroll bars may resize its outer frame in order to keep the number of
;; columns or lines of its text area unaltered. If this option is t, no such resizing
;; is done.
;;
(setq frame-inhibit-implied-resize t)

;;
;; Beautify Emacs
;;
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(horizontal-scroll-bar-mode -1)

;;
;; Change color to avoid screen flickering
;;
(when (display-graphic-p)
  (set-face-background 'default "#4f4f4f" nil)
  (set-face-foreground 'default "#f0dfaf" nil)
)

;;
;; Garbage collection optimization
;;
(setq gc-cons-threshold  most-positive-fixnum
      ;; The value of this variable is the number of bytes of storage that must
      ;; be allocated for Lisp objects after one garbage collection in order to
      ;; trigger another garbage collection.

      gc-cons-percentage 0.6
      ;; The value of this variable specifies the amount of consing before a
      ;; garbage collection occurs, as a fraction of the current heap size.
)


;;
;; After initialization set the garbage collection threshold to a reasonable value.
;;
(add-hook 'add-init-hook
          `(lambda ()
            (setq gc-cons-threshold  psimacs/config/gc-cons-threshold
                  gc-cons-percentage psimacs/config/gc-cons-percentage)
            (garbage-collect)
                  ) t)

(defvar psimacs/config/file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

;;
;; After initialization reset the file-name-handler-alist
;;
(add-hook 'emacs-startup-hook
          (lambda ()
            (setq file-name-handler-alist psimacs/config/file-name-handler-alist)
            (makunbound 'psimacs/config/file-name-handler-alist)
            ))

;;
;; Suppressing ad-handle-definition warnings
;;
(setq ad-redefinition-action 'accept)

(setq debug-on-error  t                 ; That will open the debugger when the error is raised.
      message-log-max t                 ; Specifies how many lines to keep in the *Messages* buffer.
                                        ; The value t means there is no limit on how many lines to keep.
)

;;
;; Preamble support
;;
(defun psimacs/config/generate-preamble (file org-file description)
  "Generate a proper preamble string for the given file.
FILE        : el file that get generated
ORG-FILE    : org mode file that is prints
DESCRIPTION : short description text"
  (let (
        (preamble (concat (format ";;; %s ---%s-*- coding: utf-8 -*- lexical-binding: t -*-\n" (file-name-nondirectory file) description)
                                  ";;\n"
                          (format ";; Don't edit this file, edit %s instead ...\n" (file-name-nondirectory org-file))
                                  ";;\n"
                                  "\n"
                          (format ";; Copyright (C) %s %s (%s)\n"
                                  psimacs/config/copyright/year
                                  psimacs/config/copyright/author
                                  psimacs/config/copyright/pseudonyme)
                                  "\n"
                          (format ";; Author:  %s <%s>\n"
                                  psimacs/config/copyright/author
                                  psimacs/config/copyright/email)
                          (format ";; URL:     %s\n" psimacs/config/copyright/url)
                          (format ";; License: %s %s\n"
                                  psimacs/config/copyright/license
                                  psimacs/config/copyright/version)
                                  "\n"
                                  ";; This file is not part of GNU Emacs.\n"
                                  ";;\n"
                                  ";; This program is free software; you can redistribute it and/or\n"
                          (format ";; modify it under the terms of the %s\n"
                                  psimacs/config/copyright/license)
                          (format ";; %s published by the Free Software Foundation.\n" psimacs/config/copyright/version)
                                  ";;\n"
                                  ";; This program is distributed in the hope that it will be useful,\n"
                                  ";; but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
                                  ";; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n"
                                  ";; General Public License for more details.\n"
                                  ";;\n"
                                  ";; You should have received a copy of the GNU General Public License\n"
                                  ";; along with this program; see the file LICENSE.  If not, write to\n"
                                  ";; the Free Software Foundation, Inc., 51 Franklin Street, Fifth\n"
                                  ";; Floor, Boston, MA 02110-1301, USA.\n"
                                  ";;\n"
                                  "\n")))
    preamble
  )
)

(defun psimacs/config/tangle-section-canceled ()
  "Return t if the current section header was 'CANCELED' or 'DISABLED', else nil.

Section headers starts with '*', '**', etc, e.g.:

'** CANCELED Some section header text'"
  (save-excursion (if (re-search-backward "^\\*+\\s-+\\(.*?\\)?\\s-*$" nil t)
                      (or (string-prefix-p "CANCELED" (match-string 1) t)
                          (string-prefix-p "DISABLED" (match-string 1) t)) nil)))

(defun psimacs/config/tangle-config-org (orgfile elfile)
  "This function will write all source blocks from 'file.org' into 'file.el' that are ...
        - not marked as :tangle no
        - have a source-code of =emacs-lisp=
        - doesn't have the todo-markers CANCELED or DISABLED

Elisp source code blocks that are marked as ':tangle foo.el' are written to file 'foo.el' instead.
For these files extra header and footer are written. In this case, also an additional header argument
':var file-description \"text\" is evaluated and used in the file header.

Shortly, all tangled source code blocks for file foo.el are written to one file 'foo.el' that look like

;; foo.el --- text -*- coding: utf-8 -*- lexical-binding: t -*-
;;
;; Don't edit this file, edit file.org instead ...
;;
...
(provide 'foo)

Source code blocks that tangle to early-init.el are handled differently. In this case neither a
'require' statement in file.el nor the 'provide' clause is added to the file early-init.el.
"
  (let* ((body-list ())
         (src-block-regexp   (concat
                              ;; (1) indentation                 (2) lang
                              "^\\([ \t]*\\)#\\+begin_src[ \t]+\\([^ \f\t\n\r\v]+\\)[ \t]*"
                              ;; (3) switches
                              "\\([^\":\n]*\"[^\"\n*]*\"[^\":\n]*\\|[^\":\n]*\\)"
                              ;; (4) header arguments
                              "\\([^\n]*\\)\n"
                              ;; (5) body
                              "\\([^\000]*?\n\\)??[ \t]*#\\+end_src"))
         (found-files-alist ())
         (found-load-dir-alist ()))
    (with-temp-buffer (insert-file-contents orgfile)
                      (goto-char (point-min))
                      (while (re-search-forward src-block-regexp nil t)
                        (let ((lang (match-string 2))
                              (args (match-string 4))
                              (body (match-string 5))
                              (canc (psimacs/config/tangle-section-canceled)))
                          (when (and (string= lang "emacs-lisp")
                                     (not (string-match-p "^.*:tangle\\s-+no.*$" args))
                                     (not canc))
                            (when (string-match "^.*:tangle\\s-+\\([^:]+\\).*$" args)
                              (let ((dst (string-trim (match-string 1 args)))
                                    (dst-file)
                                    (dst-dir)
                                    (line)
                                    (package-name)
                                    (relative-dir))
                                (if (string= dst "yes")
                                    (progn
                                      (setq body (concat body "\n"))
                                      (add-to-list 'body-list body))
                                  ;; ...else a .el file is requested explicitly.
                                  (progn
                                    (setq dst-file (expand-file-name (concat user-emacs-directory dst)))
                                    (setq dst-dir  (file-name-directory dst-file))
                                    (setq package-name (file-name-sans-extension (file-name-nondirectory dst-file)))

                                    (when (or
                                           (not (equal package-name "early-init"))
                                           (and
                                            (equal package-name "early-init")
                                            psimacs/config/tangle-early-init-file))
                                      (unless (cdr (assoc dst-file found-files-alist))
                                        (when (file-exists-p dst-file)
                                          (delete-file dst-file))

                                        (unless (file-exists-p dst-dir)
                                          (make-directory dst-dir t))

                                        (setq relative-dir (file-relative-name (file-name-directory dst-dir)
                                                                               user-emacs-directory))

                                        (unless (or
                                                 (cdr (assoc dst-dir found-load-dir-alist))
                                                 (equal relative-dir "./"))
                                          (setq line (format
                                                      "(add-to-list 'load-path (concat user-emacs-directory \"%s\"))\n\n"
                                                      relative-dir))
                                          (add-to-list 'body-list line)
                                          (map-put found-load-dir-alist dst-dir t)
                                        )

                                        (let ((description " "))
                                          (when (string-match
                                                 "^.*:var\\s-+file-description\\s-*=\\s-*\"\\([^\"]+\\).*$"
                                                 args)
                                            (setq description (concat " " (string-trim (match-string 1
                                                                                                     args))
                                                                      " ")))

                                          (unless (equal package-name "early-init")
                                            (if (equal description " ")
                                                (setq line (format "(require '%s)\n\n" package-name))
                                              (progn
                                               (setq line (format "(require '%s)" package-name))
                                               (setq line (concat line (make-string (- 42 (length line)) ?\s) (format ";;%s\n\n" description)))
                                               ))
                                            (add-to-list 'body-list line))

                                          (with-temp-buffer (insert (psimacs/config/generate-preamble
                                                                     dst-file
                                                                     orgfile
                                                                     description))
                                                            (write-region (point-min)
                                                                          (point-max) dst-file t))
                                        )
                                        (map-put found-files-alist dst-file t)
                                      )
                                      (with-temp-buffer (insert body)
                                                        (insert "\n")
                                                        (write-region (point-min)
                                                                      (point-max) dst-file t)))))))))))

    ;;
    ;; Add the config pathes to Emacs load path list and add the final provide-clause to the
    ;; written emacs package files.
    ;;
    (dolist (element found-files-alist)
      (let* ((file (car element))
             (package-name (file-name-sans-extension (file-name-nondirectory file))))

        (unless (equal package-name "early-init")
          (with-temp-buffer (insert (format "(provide '%s)\n" package-name))
                            (write-region (point-min)
                                          (point-max) file t)))))
    (with-temp-file elfile
      (insert (psimacs/config/generate-preamble elfile orgfile " Initialization file "))
      (apply 'insert (reverse body-list))
      (insert "\n"))

    ;; Byte compiling the init file is not recommendet
    ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html
    ;;(byte-compile-file elfile)
    ))

;;
;; Next function extracts the elips code from the org-file and possibly loads the
;; resulting elips file.
;;
(defun psimacs/config/load-configuration-file (orgfile)
  "Load the given configuration file unless it equals to 'init.el' itself.

File 'init.el' is loaded automatically at startup. No extra loading is necessary.
This function is basically an efficient replacement of org-babel-load-file.
However, it performs some extra task on extraction of the elisp source code blocks.
This happens in the tangle-config-org function.
No byte compiling is performed for any elips file generated by the tangling procedure.
"
  (let* ((base-name (file-name-sans-extension orgfile))
         (elfile    (concat base-name ".el"))
         ;;(elcfile (concat base-name ".elc")) ;; Byte compiling the init file is not recommendet
         )
    (when (and psimacs/config/tangle-anything
               (or (not (file-exists-p elfile))
                   (file-newer-than-file-p orgfile elfile)))

      ;; Byte compiling the init file is not recommendet
      ;;(file-newer-than-file-p orgfile elcfile)
      ;;(file-newer-than-file-p elfile  elcfile)

      (psimacs/config/tangle-config-org orgfile elfile))
    (unless (equal (file-name-nondirectory elfile) "init.el")
      (load (file-name-sans-extension elfile)))))

(defun psimacs/file-system/copy-directory-files (src dst &optional only-newer-files)
  "Copy all files from SRC directory into DST directory recursively.
If optional argument ONLY-NEWER-FILES is non nil source files are copied only if their time stamp is
newer then the time stamp of the destination file."
  (if (file-exists-p src)
      (progn
        (unless (file-exists-p dst)
          (make-directory dst t))
        (dolist (f (directory-files-recursively src ".*" t))
          (if (file-directory-p f)
              (let ((f-relative (file-relative-name f src)))
                (when f-relative (let ((dst-dir (concat (file-name-as-directory dst) f-relative)))
                                   (unless (file-exists-p dst-dir)
                                     (make-directory dst-dir t)))))
            ;; ...else is file
            (let* ((src-dir (file-name-directory f))
                   (f-relative (file-relative-name src-dir src))
                   (dst-dir dst)
                   (dst-file))
              (when f-relative
                (setq dst-dir (concat (file-name-as-directory dst) f-relative)))
              (unless (file-exists-p dst-dir)
                (make-directory dst-dir t))
              (setq dst-file (concat (file-name-as-directory dst-dir)
                                     (file-name-nondirectory f)))

                                        ;(if (file-exists-p dst-file)
              (if only-newer-files (when (file-newer-than-file-p f dst-file)
                                     (copy-file f dst-file t t))
                ;; ...else always copy
                (copy-file f dst-file t t))
                                        ;)
              )))
        )
    (make-directory src t)))

(defun psimacs/file-system/synchronize-directories(src dst)
  "This function synchronizes two directories.
All files that are found in SRC and that are either not in DST or newer in SRC are copied to DST.
All files that are found in DST and that are either not in SRC or newer in DST are copied to SRC.

After this function is finished the two directories are identical.
 "
  (psimacs/file-system/copy-directory-files src dst t)
  (psimacs/file-system/copy-directory-files dst src t))

;;
;; Sync with dropbox
;;   The main config file is taken from the dropbox folder but it is loaded from
;;   the local directory (see below). Therefore we copy the main config file from
;;   the dropbox emacs folder into the emacs home directory. If the main config
;;   file in the emacs home directory is newer than the file in the dropbox folder
;;   we update that one with the newer local one.
;;   The agenda files are worked on the dropbox directly, but a local copy is made
;;   for backup purpose.
;;
(defun psimacs/config/find-dropbox-folder ()
  "Get the current dropbox folder on the running machine. Otherwise nil"
  (interactive)
  (let* ((db-appdat-info-file      (concat (expand-file-name (file-name-as-directory (getenv
                                                                                      "APPDATA")))
                                           "Dropbox/info.json"))
         (db-localappdat-info-file (concat (expand-file-name (file-name-as-directory (getenv
                                                                                      "LOCALAPPDATA")))
                                           "Dropbox/info.json"))
         (db-user-home-info-file   "~/Dropbox/info.json")
         (json-path (cond ((eq system-type 'windows-nt)
                           (if (file-exists-p db-appdat-info-file) db-appdat-info-file (if
                                                                                           (file-exists-p
                                                                                            db-localappdat-info-file)
                                                                                           db-localappdat-info-file
                                                                                         (if
                                                                                             (file-exists-p
                                                                                              db-user-home-info-file)
                                                                                             db-user-home-info-file
                                                                                           nil))))
                          ((or
                            (eq system-type 'darwin)
                            (eq system-type 'gnu-linux))
                           (if (file-exists-p db-user-home-info-file) db-user-home-info-file
                             nil)))))
    (if (and json-path
             (file-exists-p json-path))
        (progn
          (require 'json)
          (cdr (assoc 'path (car (json-read-file json-path))))) nil)))

;;
;; Initialize the directory constants for dropbox...
;;
(defconst psimacs/config/dropbox-dir
  (let ( (f (psimacs/config/find-dropbox-folder)) )
    (if f (file-name-as-directory f) nil))
  "The psimacs dropbox directory or nil.")

;;
;; ... and the its emacs configuration directory
;;
(defconst psimacs/config/dropbox-emacs-dir
  (if psimacs/config/dropbox-dir (file-name-as-directory (concat psimacs/config/dropbox-dir
                                                                 "emacs/psimacs/emacs")) nil)
  "The psimacs dropbox emacs configuration directory or nil.")

;;
;; The synchronization function.
;;
(defun psimacs/config/sync-with-dropbox ()
  "Synchronize with dropbox directory if it exists.

The expected place in the dropbox directory is 'emacs/psimacs/emacs'.
"
  (if (and psimacs/config/dropbox-dir
           (file-directory-p psimacs/config/dropbox-dir))
      (let* ((db-dir psimacs/config/dropbox-emacs-dir)
             (sync-files-alist ())
             (sync-dirs-alist  ()))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/main-org-file)
                                             (concat db-dir psimacs/config/main-org-file)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/main-html-file)
                                             (concat db-dir psimacs/config/main-html-file)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory psimacs/config/icon-file)
                                             (concat db-dir psimacs/config/icon-file)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/license-file)
                                             (concat db-dir psimacs/config/license-file)))
        (add-to-list 'sync-files-alist (cons (concat user-emacs-directory
                                                     psimacs/config/custom-file)
                                             (concat db-dir psimacs/config/custom-file)))
        (add-to-list 'sync-dirs-alist  (cons (file-name-as-directory (concat user-emacs-directory
                                                                             psimacs/config/agenda-dir))
                                             (file-name-as-directory (concat db-dir
                                                                             psimacs/config/agenda-dir))))
        (add-to-list 'sync-dirs-alist  (cons (file-name-as-directory (concat user-emacs-directory
                                                                             psimacs/config/latex-dir))
                                             (file-name-as-directory (concat db-dir
                                                                             psimacs/config/latex-dir))))
        (add-to-list 'sync-dirs-alist  (cons (file-name-as-directory (concat user-emacs-directory
                                                                             psimacs/config/assets-dir))
                                             (file-name-as-directory (concat db-dir
                                                                             psimacs/config/assets-dir))))

        ;;
        ;; Create missing dropbox emacs directory
        ;;
        (unless (file-directory-p db-dir)
          (make-directory db-dir t))
        (dolist (files sync-files-alist)
          (let ((file    (car files))
                (db-file (cdr files)))
            ;;
            ;; Try to copy the file from dropbox to emacs directory...
            ;;
            (if (file-exists-p db-file)
                (progn
                  ;;
                  ;; If the local file is newer, we update dropbox first
                  ;;
                  (when (file-newer-than-file-p file db-file)
                    (copy-file file db-file t t))
                  (when (or (not (file-exists-p file))
                            (file-newer-than-file-p db-file file))
                    (copy-file db-file file t t)))

              ;; ...else try to upload to dropbox
              (if (file-exists-p file)
                  (copy-file file db-file t t)))))
        (dolist (files sync-dirs-alist)
          (let ((directory    (car files))
                (db-directory (cdr files)))
            (psimacs/file-system/synchronize-directories db-directory directory))))))

;;
;; Synchronize with dropbox
;;
(when psimacs/config/synchronize-at-startup
  (psimacs/config/sync-with-dropbox))

;;
;; Extract elisp code from org files if necessary and load that code into
;; emacs.
;;
(psimacs/config/load-configuration-file (expand-file-name (concat user-emacs-directory
                                                                  psimacs/config/main-org-file)))

