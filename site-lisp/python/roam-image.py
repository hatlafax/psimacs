#! /usr/bin/env python
# -*- coding: utf-8 -*-
#
# Distributed under the Boost Software License, Version 1.0.
#
# Copyright (c) 2024 Johannes Brunen <hatlafax@gmx.de>
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute, execute,
# and transmit the Software, and to prepare derivative works of the Software, and
# to permit third-parties to whom the Software is furnished to do so, all subject
# to the following:
#
# The copyright notices in the Software and this entire statement, including the
# above license grant, this restriction and the following disclaimer, must be
# included in all copies of the Software, in whole or in part, and all derivative
# works of the Software, unless such copies or derivative works are solely in the
# form of machine-executable object code generated by a source language processor.
#
# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
# THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES
# OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
"""
Problem: On org-roam editing somtimes screenshot images are created that must be
         copied into the particular working roam images directory and then be
         renamed to the in accordance to the files already in the copy directory.
         Finally, a clipboard entry should be created for the org-mode image
         inserttion.
"""
import argparse
import os
import pathlib
import re
import shutil
import sys

def initialize(args):
    #
    # Determine the input files
    #
    args.input = [ f for f in args.input if os.path.isfile(f) ]

    if len(args.input) == 0:
        if not os.path.exists(args.image_dir):
            raise ValueError(f'Image directory {args.image_dir} does not exists')
        if not os.path.isdir(args.image_dir):
            raise ValueError(f'Image directory {args.image_dir} is not a directory')

        args.input = [ os.path.join(args.image_dir, f)
                       for f in os.listdir(args.image_dir)
                       if os.path.isfile(os.path.join(args.image_dir, f)) ]

    args.input = sorted(args.input, key = os.path.getmtime)

    if args.verbose:
        print(f'Input files: {args.input}')

    #
    # Determine the destination directory
    #
    if args.dst is not None:
        if not os.path.exists(args.dst):
            raise ValueError(f'Destination directory {args.dst} does not exists')
        if not os.path.isdir(args.image_dir):
            raise ValueError(f'Destination directory {args.dst} is not a directory')

        _, args.group = os.path.split(args.dst)

        if args.verbose:
            print(f'Group: {args.group}')

    else:
        if len(args.group) == 0:
            raise ValueError('Providing a group is mandatory since destination is not given!')

        if not os.path.exists(args.roam_dir):
            raise ValueError(f'Roam directory {args.roam_dir} does not exists')
        if not os.path.isdir(args.roam_dir):
            raise ValueError(f'Roam directory {args.roam_dir} is not a directory')

        args.dst = None

        if args.category is None:
            dirs = [ os.path.join(args.roam_dir, d) for d in os.listdir(args.roam_dir) if os.path.isdir(os.path.join(args.roam_dir, d)) ]

            for d in dirs:
                group_dir = os.path.join(d, 'images', args.group)
                if os.path.isdir(group_dir):
                    args.dst = group_dir

            if args.dst is None:
                raise ValueError('No valid destination directory could be determined')
        else:
            args.dst = os.path.join(args.roam_dir, args.category, 'images', args.group)

        if not os.path.exists(args.dst):
            os.makedirs(args.dst, exist_ok = True)

        if not os.path.isdir(args.dst):
            raise ValueError(f'Destinamtion directory {args.dst} is not a directory')

    if args.verbose:
       print(f'Destination directory: {args.dst}')

    #
    # Determine the name and the initial counter
    #
    files = [ os.path.join(args.dst, f) for f in os.listdir(args.dst) if os.path.isfile(os.path.join(args.dst, f)) ]
    if args.name is None:
        if len(files) == 0:
            args.name = args.group
            args.cnt  = 1
        else:
            latest_file = max(files, key = os.path.getmtime)
            _, f = os.path.split(latest_file)

            match = re.match(r'^([\w-]+)-(\d+).*$', f)

            if match:
                args.name = match.group(1)
                args.cnt  = int(match.group(2)) + 1

                #print(args.cnt)
            else:
                raise RuntimeError("Could not determine a valid filename.")
    else:
        if len(files) == 0:
            args.cnt = 1
        else:
            files = [ n for n in files if os.path.split(n)[1].startswith(args.name) ]
            if len(files) == 0:
                args.cnt = 1
            else:
                latest_file = max(files, key = os.path.getmtime)
                _, f = os.path.split(latest_file)

                match = re.match(r'^([\w-]+)-(\d+).*$', f)

                if match:
                    args.name = match.group(1)
                    args.cnt  = int(match.group(2)) + 1

                    #print(args.cnt)
                else:
                    raise RuntimeError("Could not determine a valid filename.")

    if args.verbose:
       print(f'File name prefix:  {args.name}')
       print(f'File name postfix: {args.cnt}')

def move_files(args):
    cnt = args.cnt
    files = []

    parent, group = os.path.split(args.dst)
    _, images = os.path.split(parent)

    rel_path = f'./{images}/{group}'

    for f in args.input:
        _, ext = os.path.splitext(f)

        filename = args.name + f'-{cnt}{ext}'

        if args.absolute:
            filepath = f'{args.dst}/{filename}'.replace('\\', '/')
        else:
            filepath = f'{rel_path}/{filename}'

        dst = os.path.join(args.dst, filename)
        if not os.path.exists(dst):
            try:
                shutil.copy2(f, dst)
                pathlib.Path(dst).touch()

                if os.path.exists(dst) and os.path.isfile(dst):
                    try:
                        os.remove(f)
                    except:
                        print(f'Removing file {f} failed!')

                files.append( (cnt, filepath) )
                cnt += 1
            except:
                print(f'Copying file {f} to {dst} failed! Check filesystem.')
        else:
            print(f'Destination file {dst} already exists. No copying took place!')

    return files


def create_image_block(args, files):
    n = len(files)

    html_width = '${' + f'{args.html_width}' + '}'
    latex_width = '${' + f'{args.latex_width}' + '}'

    t = ''

    if n == 1:
        j = files[0][0]
        f = files[0][1]
        t += r'#+begin_export org' + '\n'
        t += f'#+attr_html: :width {args.html_width}px' + '\n'
        t += r'#+end_export' + '\n'
        t += f'#+attr_latex: :width {args.latex_width}px' + '\n'
        t += r'#+caption: ' + '\n'
        t += f'#+name: fig:{args.name}-{j}' + '\n'
        t += f'[[{f}]]' + '\n'
        t += r'' + '\n'
    elif n > 1:
        if args.latex and n > 0:
            t += r'#+begin_src latex' + '\n'
            t += r'\begin{figure}' + '\n'
            t += r'\centering' + '\n'
            for idx, p in enumerate(files):
                j, f = p
                t += r'\subfloat[][]{' + '\n'
                t += rf'  \includegraphics[width=.3\linewidth]{f}' + '\n'
                t += r'}' + '\n'
                if idx < n:
                    t += r'\qquad' + '\n'
            t += r'\caption{}' + '\n'
            t += rf'\label{{fig:{args.name}-}}' + '\n'
            t += r'\end{figure}' + '\n'
            t += r'#+end_src' + '\n'
            t += r'' + '\n'

        if n > 0:
            for j, f in files:
                t += r'#+begin_export org' + '\n'
                t += f'#+attr_html: :width {args.html_width}px' + '\n'
                t += r'#+end_export' + '\n'
                t += f'#+attr_latex: :width {args.latex_width}px' + '\n'
                t += r'#+caption: ' + '\n'
                t += f'#+name: fig:{args.name}-{j}' + '\n'
                t += f'[[{f}]]' + '\n'
            t += r'' + '\n'
    return t


def main(args):
    files = move_files(args)
    text  = create_image_block(args, files)

    print(text)

    return 0

if __name__ == '__main__':
    usage = r'''Copy image into roam subdirectory and rename image to the correctly.
                Add clipboard entry for easy insertion of the image integration into
                the org-mode file.
             '''
    parser = argparse.ArgumentParser(description = usage, formatter_class = argparse.RawDescriptionHelpFormatter)

    parser.add_argument("input", type = str, nargs = '*', help = 'One or more input image files.')
    parser.add_argument("-a", "--absolute", dest = 'absolute', action = 'store_true', default = False, help = 'Absolute image path used in clipboard snippet.')
    parser.add_argument("-c", "--category", dest = 'category', type = str, default = None, help = 'The categroy of the org-roam file.')
    parser.add_argument("-d", "--destination", dest = 'dst', type = str, default = None, help = 'The destination directory.')
    parser.add_argument("-g", "--group", dest = 'group', type = str, help = 'The destination group.')
    parser.add_argument("-i", "--image-dir", dest = 'image_dir', type = str, help = 'The image directory.')
    parser.add_argument("-l", "--latex", dest = 'latex', action = 'store_true', default = False, help = 'Add latex code to clipboard snippet.')
    parser.add_argument("-n", "--name", dest = 'name', type = str, default = None, help = 'The final file name to use. If not given the group name is used.')
    parser.add_argument("-r", "--roam-dir", dest = 'roam_dir', type = str, help = 'The roam directory.')
    parser.add_argument("-v", "--verbose", dest = 'verbose', action = 'store_true', default = False, help = 'Print verbose output.')
    parser.add_argument("-w", "--html-width", dest = 'html_width', type = int, default = 500, help = 'The image width for html export.')
    parser.add_argument("-W", "--latex-width", dest = 'latex_width', type = int, default = 120, help = 'The image width for latex export.')

    args = parser.parse_args()

    initialize(args)
    ret = main(args)

    exit(ret)
